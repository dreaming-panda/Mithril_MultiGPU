Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
DONE MPI INIT
DONE MPI INITDONE MPI INIT
Initialized node 15 on machine gnerv8
Initialized node 12 on machine gnerv8
DONE MPI INIT
Initialized node 14 on machine gnerv8

Initialized node 13 on machine gnerv8
DONE MPI INIT
DONE MPI INIT
Initialized node 11 on machine gnerv7
Initialized node 9 on machine gnerv7
DONE MPI INIT
Initialized node 10 on machine gnerv7
DONE MPI INIT
Initialized node 8 on machine gnerv7
DONE MPI INIT
DONE MPI INITDONE MPI INIT
Initialized node 4 on machine gnerv3
DONE MPI INIT
Initialized node 5 on machine gnerv3
Initialized node 6 on machine gnerv3

Initialized node 7 on machine gnerv3
DONE MPI INIT
DONE MPI INIT
Initialized node 0 on machine gnerv2
DONE MPI INIT
Initialized node 1 on machine gnerv2
Initialized node 2 on machine gnerv2
DONE MPI INIT
Initialized node 3 on machine gnerv2
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
        It takes 1.924 seconds.
Building the CSC structure...
        It takes 2.045 seconds.
Building the CSC structure...
        It takes 2.363 seconds.
Building the CSC structure...
        It takes 2.422 seconds.
Building the CSC structure...
        It takes 2.431 seconds.
Building the CSC structure...
        It takes 2.442 seconds.
Building the CSC structure...
        It takes 2.461 seconds.
Building the CSC structure...
        It takes 2.492 seconds.
Building the CSC structure...
        It takes 2.506 seconds.
Building the CSC structure...
        It takes 2.529 seconds.
Building the CSC structure...
        It takes 2.567 seconds.
Building the CSC structure...
        It takes 2.566 seconds.
Building the CSC structure...
        It takes 2.576 seconds.
Building the CSC structure...
        It takes 2.654 seconds.
Building the CSC structure...
        It takes 2.662 seconds.
Building the CSC structure...
        It takes 2.691 seconds.
Building the CSC structure...
        It takes 1.868 seconds.
        It takes 1.955 seconds.
        It takes 2.310 seconds.
        It takes 2.340 seconds.
Building the Feature Vector...
        It takes 2.318 seconds.
        It takes 2.352 seconds.
        It takes 2.348 seconds.
        It takes 2.395 seconds.
        It takes 2.411 seconds.
        It takes 2.352 seconds.
        It takes 2.339 seconds.
        It takes 2.292 seconds.
        It takes 2.461 seconds.
        It takes 2.455 seconds.
        It takes 0.279 seconds.
Building the Label Vector...
        It takes 2.500 seconds.
        It takes 2.414 seconds.
        It takes 0.040 seconds.
Building the Feature Vector...
Building the Feature Vector...
        It takes 0.290 seconds.
Building the Label Vector...
Building the Feature Vector...
Building the Feature Vector...
        It takes 0.037 seconds.
Building the Feature Vector...
Building the Feature Vector...
        It takes 0.279 seconds.
Building the Label Vector...
Building the Feature Vector...
Building the Feature Vector...
        It takes 0.032 seconds.
        It takes 0.263 seconds.
Building the Label Vector...
GPU 0, layer [0, 2)
GPU 1, layer [2, 4)
GPU 2, layer [4, 6)
GPU 3, layer [6, 8)
GPU 4, layer [8, 10)
GPU 5, layer [10, 12)
GPU 6, layer [12, 14)
GPU 7, layer [14, 16)
GPU 8, layer [16, 18)
GPU 9, layer [18, 20)
GPU 10, layer [20, 22)
GPU 11, layer [22, 24)
GPU 12, layer [24, 26)
GPU 13, layer [26, 28)
GPU 14, layer [28, 30)
GPU 15, layer [30, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
        It takes 0.032 seconds.
        It takes 0.281 seconds.
Building the Label Vector...
        It takes 0.043 seconds.
Building the Feature Vector...
        It takes 0.284 seconds.
Building the Label Vector...
        It takes 0.043 seconds.
Building the Feature Vector...
        It takes 0.269 seconds.
Building the Label Vector...
        It takes 0.353 seconds.
Building the Label Vector...
        It takes 0.031 seconds.
        It takes 0.040 seconds.
        It takes 0.338 seconds.
Building the Label Vector...
        It takes 0.038 seconds.
Building the Feature Vector...
232965, 114848857, 114848857
Number of vertices per chunk: 3641
        It takes 0.280 seconds.
Building the Label Vector...
        It takes 0.037 seconds.
Building the Feature Vector...
        It takes 0.289 seconds.
Building the Label Vector...
Building the Feature Vector...
        It takes 0.037 seconds.
The graph dataset locates at /shared_hdd_storage/jingjichen/gnn_datasets/pipeline_parallel_datasets/reddit/64_parts
The number of GCNII layers: 32
The number of hidden units: 100
The number of training epoches: 50
Learning rate: 0.001000
The partition strategy: model
The dropout rate: 0.500
The checkpointed weight file: /tmp/saved_weights_pipe
The random seed: 1
Number of classes: 41
Number of feature dimensions: 602
Number of vertices: 232965
Number of GPUs: 16
Building the Feature Vector...
        It takes 0.271 seconds.
Building the Label Vector...
        It takes 0.031 seconds.
Building the Feature Vector...
        It takes 0.269 seconds.
Building the Label Vector...
GPU 0, layer [0, 2)
GPU 1, layer [2, 4)
GPU 2, layer [4, 6)
GPU 3, layer [6, 8)
GPU 4, layer [8, 10)
GPU 5, layer [10, 12)
GPU 6, layer [12, 14)
GPU 7, layer [14, 16)
GPU 8, layer [16, 18)
GPU 9, layer [18, 20)
GPU 10, layer [20, 22)
GPU 11, layer [22, 24)
GPU 12, layer [24, 26)
GPU 13, layer [26, 28)
GPU 14, layer [28, 30)
GPU 15, layer [30, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
        It takes 0.031 seconds.
        It takes 0.325 seconds.
Building the Label Vector...
        It takes 0.311 seconds.
Building the Label Vector...
        It takes 0.035 seconds.
GPU 0, layer [0, 2)
GPU 1, layer [2, 4)
GPU 2, layer [4, 6)
GPU 3, layer [6, 8)
GPU 4, layer [8, 10)
GPU 5, layer [10, 12)
GPU 6, layer [12, 14)
GPU 7, layer [14, 16)
GPU 8, layer [16, 18)
GPU 9, layer [18, 20)
GPU 10, layer [20, 22)
GPU 11, layer [22, 24)
GPU 12, layer [24, 26)
GPU 13, layer [26, 28)
GPU 14, layer [28, 30)
GPU 15, layer [30, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
        It takes 0.035 seconds.
        It takes 0.269 seconds.
Building the Label Vector...
GPU 0, layer [0, 2)
GPU 1, layer [2, 4)
GPU 2, layer [4, 6)
GPU 3, layer [6, 8)
GPU 4, layer [8, 10)
GPU 5, layer [10, 12)
GPU 6, layer [12, 14)
GPU 7, layer [14, 16)
GPU 8, layer [16, 18)
GPU 9, layer [18, 20)
GPU 10, layer [20, 22)
GPU 11, layer [22, 24)
GPU 12, layer [24, 26)
GPU 13, layer [26, 28)
GPU 14, layer [28, 30)
GPU 15, layer [30, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
        It takes 0.038 seconds.
GPU 0, layer [0, 2)
GPU 1, layer [2, 4)
GPU 2, layer [4, 6)
GPU 3, layer [6, 8)
GPU 4, layer [8, 10)
GPU 5, layer [10, 12)
GPU 6, layer [12, 14)
GPU 7, layer [14, 16)
GPU 8, layer [16, 18)
GPU 9, layer [18, 20)
GPU 10, layer [20, 22)
GPU 11, layer [22, 24)
GPU 12, layer [24, 26)
GPU 13, layer [26, 28)
GPU 14, layer [28, 30)
GPU 15, layer [30, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 2)
GPU 1, layer [2, 4)
GPU 2, layer [4, 6)
GPU 3, layer [6, 8)
GPU 4, layer [8, 10)
GPU 5, layer [10, 12)
GPU 6, layer [12, 14)
GPU 7, layer [14, 16)
GPU 8, layer [16, 18)
GPU 9, layer [18, 20)
GPU 10, layer [20, 22)
GPU 11, layer [22, 24)
GPU 12, layer [24, 26)
GPU 13, layer [26, 28)
GPU 14, layer [28, 30)
GPU 15, layer [30, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 2)
GPU 1, layer [2, 4)
GPU 2, layer [4, 6)
GPU 3, layer [6, 8)
GPU 4, layer [8, 10)
GPU 5, layer [10, 12)
GPU 6, layer [12, 14)
GPU 7, layer [14, 16)
GPU 8, layer [16, 18)
GPU 9, layer [18, 20)
GPU 10, layer [20, 22)
GPU 11, layer [22, 24)
GPU 12, layer [24, 26)
GPU 13, layer [26, 28)
GPU 14, layer [28, 30)
GPU 15, layer [30, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 2)
GPU 1, layer [2, 4)
GPU 2, layer [4, 6)
GPU 3, layer [6, 8)
GPU 4, layer [8, 10)
GPU 5, layer [10, 12)
GPU 6, layer [12, 14)
GPU 7, layer [14, 16)
GPU 8, layer [16, 18)
GPU 9, layer [18, 20)
GPU 10, layer [20, 22)
GPU 11, layer [22, 24)
GPU 12, layer [24, 26)
GPU 13, layer [26, 28)
GPU 14, layer [28, 30)
GPU 15, layer [30, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 2)
GPU 1, layer [2, 4)
GPU 2, layer [4, 6)
GPU 3, layer [6, 8)
GPU 4, layer [8, 10)
GPU 5, layer [10, 12)
GPU 6, layer [12, 14)
GPU 7, layer [14, 16)
GPU 8, layer [16, 18)
GPU 9, layer [18, 20)
GPU 10, layer [20, 22)
GPU 11, layer [22, 24)
GPU 12, layer [24, 26)
GPU 13, layer [26, 28)
GPU 14, layer [28, 30)
GPU 15, layer [30, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
232965, 114848857, 114848857
Number of vertices per chunk: 3641
232965, 114848857, 114848857
Number of vertices per chunk: 3641
232965, 114848857, 114848857
Number of vertices per chunk: 3641
232965, 114848857, 114848857
Number of vertices per chunk: 3641
GPU 0, layer [0, 2)
GPU 1, layer [2, 4)
GPU 2, layer [4, 6)
GPU 3, layer [6, 8)
GPU 4, layer [8, 10)
GPU 5, layer [10, 12)
GPU 6, layer [12, 14)
GPU 7, layer [14, 16)
GPU 8, layer [16, 18)
GPU 9, layer [18, 20)
GPU 10, layer [20, 22)
GPU 11, layer [22, 24)
GPU 12, layer [24, 26)
GPU 13, layer [26, 28)
GPU 14, layer [28, 30)
GPU 15, layer [30, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
train nodes 153431, valid nodes 23831, test nodes 55703
GPU 0, layer [0, 2)
GPU 1, layer [2, 4)
GPU 2, layer [4, 6)
GPU 3, layer [6, 8)
GPU 4, layer [8, 10)
GPU 5, layer [10, 12)
GPU 6, layer [12, 14)
GPU 7, layer [14, 16)
GPU 8, layer [16, 18)
GPU 9, layer [18, 20)
GPU 10, layer [20, 22)
GPU 11, layer [22, 24)
GPU 12, layer [24, 26)
GPU 13, layer [26, 28)
GPU 14, layer [28, 30)
GPU 15, layer [30, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
Chunks (number of global chunks: 64): 0-[0, 3383) 1-[3383, 7843) 2-[7843, 12526) 3-[12526, 16576) 4-[16576, 20087) 5-[20087, 24086) 6-[24086, 27150) 7-[27150, 31875) 8-[31875, 38059) ... 63-[229059, 232965)
GPU 0, layer [0, 2)
GPU 1, layer [2, 4)
GPU 2, layer [4, 6)
GPU 3, layer [6, 8)
GPU 4, layer [8, 10)
GPU 5, layer [10, 12)
GPU 6, layer [12, 14)
GPU 7, layer [14, 16)
GPU 8, layer [16, 18)
GPU 9, layer [18, 20)
GPU 10, layer [20, 22)
GPU 11, layer [22, 24)
GPU 12, layer [24, 26)
GPU 13, layer [26, 28)
GPU 14, layer [28, 30)
GPU 15, layer [30, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
232965, 114848857, 114848857
Number of vertices per chunk: 3641
232965, 114848857, 114848857
Number of vertices per chunk: 3641
232965, 114848857, 114848857
Number of vertices per chunk: 3641
GPU 0, layer [0, 2)
GPU 1, layer [2, 4)
GPU 2, layer [4, 6)
GPU 3, layer [6, 8)
GPU 4, layer [8, 10)
GPU 5, layer [10, 12)
GPU 6, layer [12, 14)
GPU 7, layer [14, 16)
GPU 8, layer [16, 18)
GPU 9, layer [18, 20)
GPU 10, layer [20, 22)
GPU 11, layer [22, 24)
GPU 12, layer [24, 26)
GPU 13, layer [26, 28)
GPU 14, layer [28, 30)
GPU 15, layer [30, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
232965, 114848857, 114848857
Number of vertices per chunk: 3641
GPU 0, layer [0, 2)
GPU 1, layer [2, 4)
GPU 2, layer [4, 6)
GPU 3, layer [6, 8)
GPU 4, layer [8, 10)
GPU 5, layer [10, 12)
GPU 6, layer [12, 14)
GPU 7, layer [14, 16)
GPU 8, layer [16, 18)
GPU 9, layer [18, 20)
GPU 10, layer [20, 22)
GPU 11, layer [22, 24)
GPU 12, layer [24, 26)
GPU 13, layer [26, 28)
GPU 14, layer [28, 30)
GPU 15, layer [30, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 2)
GPU 1, layer [2, 4)
GPU 2, layer [4, 6)
GPU 3, layer [6, 8)
GPU 4, layer [8, 10)
GPU 5, layer [10, 12)
GPU 6, layer [12, 14)
GPU 7, layer [14, 16)
GPU 8, layer [16, 18)
GPU 9, layer [18, 20)
GPU 10, layer [20, 22)
GPU 11, layer [22, 24)
GPU 12, layer [24, 26)
GPU 13, layer [26, 28)
GPU 14, layer [28, 30)
GPU 15, layer [30, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 2)
GPU 1, layer [2, 4)
GPU 2, layer [4, 6)
GPU 3, layer [6, 8)
GPU 4, layer [8, 10)
GPU 5, layer [10, 12)
GPU 6, layer [12, 14)
GPU 7, layer [14, 16)
GPU 8, layer [16, 18)
GPU 9, layer [18, 20)
GPU 10, layer [20, 22)
GPU 11, layer [22, 24)
GPU 12, layer [24, 26)
GPU 13, layer [26, 28)
GPU 14, layer [28, 30)
GPU 15, layer [30, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
232965, 114848857, 114848857
Number of vertices per chunk: 3641
232965, 114848857, 114848857
Number of vertices per chunk: 3641
232965, 114848857, 114848857
Number of vertices per chunk: 3641
232965, 114848857, 114848857
Number of vertices per chunk: 3641
232965, 114848857, 114848857
Number of vertices per chunk: 3641
232965, 114848857, 114848857
Number of vertices per chunk: 3641
232965, 114848857, 114848857
Number of vertices per chunk: 3641
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
***** Start profiling the layer-level communication performance *******
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
The layer-level communication performance: 55.496 Gbps (per GPU), 887.934 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 55.260 Gbps (per GPU), 884.155 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 55.065 Gbps (per GPU), 881.047 Gbps (aggregated)
The layer-level communication performance: 54.951 Gbps (per GPU), 879.215 Gbps (aggregated)
The layer-level communication performance: 54.929 Gbps (per GPU), 878.866 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 54.927 Gbps (per GPU), 878.834 Gbps (aggregated)
The layer-level communication performance: 54.820 Gbps (per GPU), 877.118 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 54.763 Gbps (per GPU), 876.206 Gbps (aggregated)
The layer-level communication performance: 54.630 Gbps (per GPU), 874.074 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 54.553 Gbps (per GPU), 872.842 Gbps (aggregated)
The layer-level communication performance: 54.524 Gbps (per GPU), 872.376 Gbps (aggregated)
The layer-level communication performance: 54.528 Gbps (per GPU), 872.450 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 54.485 Gbps (per GPU), 871.761 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 54.332 Gbps (per GPU), 869.308 Gbps (aggregated)
The layer-level communication performance: 54.245 Gbps (per GPU), 867.916 Gbps (aggregated)
The layer-level communication performance: 54.221 Gbps (per GPU), 867.543 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The graph-level communication performance (supernode = 2): 157.055 Gbps (per GPU), 2512.876 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 157.043 Gbps (per GPU), 2512.688 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 157.046 Gbps (per GPU), 2512.735 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 157.061 Gbps (per GPU), 2512.970 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 157.049 Gbps (per GPU), 2512.782 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 157.049 Gbps (per GPU), 2512.782 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 157.049 Gbps (per GPU), 2512.782 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 157.052 Gbps (per GPU), 2512.829 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 157.052 Gbps (per GPU), 2512.829 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 157.049 Gbps (per GPU), 2512.782 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 157.049 Gbps (per GPU), 2512.782 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 156.990 Gbps (per GPU), 2511.843 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 157.052 Gbps (per GPU), 2512.829 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 157.046 Gbps (per GPU), 2512.735 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 157.049 Gbps (per GPU), 2512.782 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 157.055 Gbps (per GPU), 2512.876 Gbps (aggregated, cluster-wide)
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
The graph-level communication performance (supernode = 4): 101.337 Gbps (per GPU), 1621.392 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 101.339 Gbps (per GPU), 1621.431 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 101.339 Gbps (per GPU), 1621.431 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 101.340 Gbps (per GPU), 1621.444 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 101.340 Gbps (per GPU), 1621.444 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 101.339 Gbps (per GPU), 1621.431 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 101.340 Gbps (per GPU), 1621.444 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 101.338 Gbps (per GPU), 1621.405 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 101.339 Gbps (per GPU), 1621.431 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 101.337 Gbps (per GPU), 1621.392 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 101.336 Gbps (per GPU), 1621.379 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 101.321 Gbps (per GPU), 1621.131 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 101.340 Gbps (per GPU), 1621.442 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 101.340 Gbps (per GPU), 1621.443 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 101.323 Gbps (per GPU), 1621.170 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 101.340 Gbps (per GPU), 1621.444 Gbps (aggregated, cluster-wide)
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
The graph-level communication performance (supernode = 8): 25.515 Gbps (per GPU), 408.241 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 25.515 Gbps (per GPU), 408.242 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 25.515 Gbps (per GPU), 408.235 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 25.515 Gbps (per GPU), 408.240 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 25.515 Gbps (per GPU), 408.237 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 25.515 Gbps (per GPU), 408.235 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 25.515 Gbps (per GPU), 408.240 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 25.514 Gbps (per GPU), 408.228 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 25.515 Gbps (per GPU), 408.242 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 25.515 Gbps (per GPU), 408.242 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 25.515 Gbps (per GPU), 408.242 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 25.515 Gbps (per GPU), 408.232 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 25.514 Gbps (per GPU), 408.230 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 25.514 Gbps (per GPU), 408.230 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 25.514 Gbps (per GPU), 408.227 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 25.514 Gbps (per GPU), 408.231 Gbps (aggregated, cluster-wide)
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
The graph-level communication performance (supernode = 16): 22.146 Gbps (per GPU), 354.333 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 22.146 Gbps (per GPU), 354.342 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 22.146 Gbps (per GPU), 354.342 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 22.146 Gbps (per GPU), 354.338 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 22.146 Gbps (per GPU), 354.339 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 22.146 Gbps (per GPU), 354.339 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 22.146 Gbps (per GPU), 354.344 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 22.146 Gbps (per GPU), 354.334 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 22.146 Gbps (per GPU), 354.333 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 22.146 Gbps (per GPU), 354.332 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 22.146 Gbps (per GPU), 354.335 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 22.146 Gbps (per GPU), 354.343 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 22.146 Gbps (per GPU), 354.337 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 22.146 Gbps (per GPU), 354.330 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 22.146 Gbps (per GPU), 354.337 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 22.146 Gbps (per GPU), 354.336 Gbps (aggregated, cluster-wide)
 LType   LT0   LT1   LT2 Ratio  VSum  ESum
 chk_0  1.58ms  1.98ms  2.67ms  1.69  3.38K  1.78M
 chk_1  1.59ms  2.01ms  2.74ms  1.72  4.46K  1.78M
 chk_2  1.63ms  1.99ms  2.73ms  1.67  4.68K  1.74M
 chk_3  1.61ms  2.17ms  2.66ms  1.65  4.05K  1.77M
 chk_4  1.56ms  1.92ms  2.59ms  1.65  3.51K  1.79M
 chk_5  1.50ms  1.87ms  2.54ms  1.70  4.00K  1.83M
 chk_6  1.48ms  1.85ms  2.50ms  1.68  3.06K  1.85M
 chk_7  1.68ms  1.97ms  2.70ms  1.60  4.72K  1.71M
 chk_8  1.63ms  2.02ms  2.83ms  1.74  6.18K  1.69M
 chk_9  1.48ms  1.82ms  2.44ms  1.65  2.07K  1.90M
chk_10  1.51ms  1.87ms  2.52ms  1.67  2.79K  1.81M
chk_11  1.70ms  2.07ms  2.80ms  1.65  4.93K  1.76M
chk_12  1.56ms  1.91ms  2.56ms  1.65  2.74K  1.81M
chk_13  1.57ms  1.93ms  2.58ms  1.64  3.26K  1.78M
chk_14  1.59ms  1.96ms  2.64ms  1.66  4.03K  1.77M
chk_15  1.44ms  1.78ms  2.43ms  1.69  3.26K  1.84M
chk_16  1.57ms  1.92ms  2.57ms  1.64  3.22K  1.78M
chk_17  1.59ms  1.97ms  2.62ms  1.64  3.69K  1.82M
chk_18  1.59ms  1.97ms  2.70ms  1.70  4.98K  1.78M
chk_19  1.56ms  1.92ms  2.70ms  1.73  3.53K  1.77M
chk_20  1.58ms  1.93ms  2.58ms  1.63  3.14K  1.79M
chk_21  1.49ms  1.84ms  2.45ms  1.65  2.52K  1.85M
chk_22  1.47ms  1.84ms  2.48ms  1.69  3.62K  1.76M
chk_23  1.55ms  1.90ms  2.80ms  1.81  3.26K  1.81M
chk_24  1.49ms  1.84ms  2.48ms  1.67  3.29K  1.81M
chk_25  1.49ms  1.86ms  2.52ms  1.69  4.05K  1.77M
chk_26  1.45ms  1.80ms  2.41ms  1.67  2.41K  1.87M
chk_27  1.73ms  2.11ms  2.76ms  1.60  3.85K  1.76M
chk_28  1.52ms  1.88ms  2.52ms  1.66  2.90K  1.83M
chk_29  1.65ms  2.02ms  2.66ms  1.61  3.43K  1.77M
chk_30  1.60ms  1.96ms  2.59ms  1.61  2.37K  1.80M
chk_31  1.65ms  2.01ms  2.64ms  1.61  2.71K  1.87M
chk_32  1.55ms  1.95ms  2.68ms  1.73  5.56K  1.69M
chk_33  1.56ms  1.93ms  2.68ms  1.72  5.31K  1.75M
chk_34  1.56ms  1.93ms  2.62ms  1.68  4.07K  1.78M
chk_35  1.78ms  1.88ms  2.58ms  1.45  4.52K  1.75M
chk_36  1.56ms  1.90ms  2.52ms  1.62  2.25K  1.86M
chk_37  1.49ms  1.86ms  2.50ms  1.67  2.93K  1.83M
chk_38  1.63ms  2.00ms  2.64ms  1.62  2.63K  1.78M
chk_39  1.54ms  1.89ms  2.60ms  1.69  4.47K  1.76M
chk_40  1.56ms  1.92ms  2.61ms  1.68  4.06K  1.77M
chk_41  1.87ms  1.95ms  2.68ms  1.43  4.79K  1.73M
chk_42  1.54ms  1.90ms  2.55ms  1.66  3.84K  1.81M
chk_43  1.60ms  1.97ms  2.69ms  1.68  4.60K  1.74M
chk_44  1.57ms  1.92ms  2.57ms  1.63  2.77K  1.81M
chk_45  1.57ms  1.92ms  2.57ms  1.63  2.70K  1.86M
chk_46  1.69ms  2.06ms  2.71ms  1.60  3.46K  1.77M
chk_47  1.80ms  1.94ms  2.66ms  1.47  4.89K  1.70M
chk_48  1.62ms  1.99ms  2.65ms  1.64  2.91K  1.80M
chk_49  1.59ms  1.93ms  2.55ms  1.60  2.35K  1.86M
chk_50  1.42ms  1.76ms  2.41ms  1.70  2.75K  1.89M
chk_51  1.61ms  1.97ms  2.66ms  1.65  4.12K  1.74M
chk_52  1.61ms  1.98ms  2.71ms  1.68  4.93K  1.73M
chk_53  1.71ms  1.81ms  2.45ms  1.43  2.77K  1.86M
chk_54  1.52ms  1.88ms  2.55ms  1.67  3.86K  1.78M
chk_55  1.48ms  1.84ms  2.49ms  1.68  2.83K  1.80M
chk_56  1.60ms  1.95ms  2.59ms  1.62  3.34K  1.78M
chk_57  1.72ms  2.14ms  2.83ms  1.65  5.03K  1.74M
chk_58  1.55ms  1.89ms  2.53ms  1.63  3.16K  1.87M
chk_59  1.78ms  1.91ms  2.62ms  1.48  4.53K  1.75M
chk_60  1.47ms  1.83ms  2.48ms  1.69  2.98K  1.82M
chk_61  1.56ms  1.91ms  2.56ms  1.64  3.55K  1.77M
chk_62  1.45ms  1.81ms  2.45ms  1.69  3.02K  1.79M
chk_63  1.58ms  1.93ms  2.60ms  1.64  3.91K  1.78M
   Avg  1.58  1.93  2.60
   Max  1.87  2.17  2.83
   Min  1.42  1.76  2.41
 Ratio  1.32  1.23  1.17
   Var  0.01  0.01  0.01
Profiling takes 4.565 s
*** Node 0, starting model training...
Num Stages: 16 / 16
Node 0, Pipeline Input Tensor: NULL
Node 0, Pipeline Output Tensor: OPERATOR_ADD
*** Node 0 owns the model-level partition [0, 22)
*** Node 0, constructing the helper classes...
Node 0, Local Vertex Begin: 0, Num Local Vertices: 232965
*** Node 1, starting model training...
Num Stages: 16 / 16
Node 1, Pipeline Input Tensor: OPERATOR_ADD
Node 1, Pipeline Output Tensor: OPERATOR_ADD
*** Node 1 owns the model-level partition [22, 48)
*** Node 1, constructing the helper classes...
Node 1, Local Vertex Begin: 0, Num Local Vertices: 232965
*** Node 3, starting model training...
Num Stages: 16 / 16
Node 3, Pipeline Input Tensor: OPERATOR_ADD
Node 3, Pipeline Output Tensor: OPERATOR_ADD
*** Node 3 owns the model-level partition [74, 100)
*** Node 3, constructing the helper classes...
Node 3, Local Vertex Begin: 0, Num Local Vertices: 232965
*** Node 4, starting model training...
Num Stages: 16 / 16
Node 4, Pipeline Input Tensor: OPERATOR_ADD
Node 4, Pipeline Output Tensor: OPERATOR_ADD
*** Node 4 owns the model-level partition [100, 126)
*** Node 4, constructing the helper classes...
Node 4, Local Vertex Begin: 0, Num Local Vertices: 232965
*** Node 2, starting model training...
Num Stages: 16 / 16
*** Node 5, starting model training...
Num Stages: 16 / 16
Node 5, Pipeline Input Tensor: OPERATOR_ADD
Node 5, Pipeline Output Tensor: OPERATOR_ADD
*** Node 5 owns the model-level partition [126, 152)
*** Node 5, constructing the helper classes...
Node 5, Local Vertex Begin: 0, Num Local Vertices: 232965
Node 2, Pipeline Input Tensor: OPERATOR_ADD
Node 2, Pipeline Output Tensor: OPERATOR_ADD
*** Node 2 owns the model-level partition [48, 74)
*** Node 2, constructing the helper classes...
*** Node 6, starting model training...
Num Stages: 16 / 16
Node 6, Pipeline Input Tensor: OPERATOR_ADD
Node 6, Pipeline Output Tensor: OPERATOR_ADD
*** Node 6 owns the model-level partition [152, 178)
*** Node 6, constructing the helper classes...
Node 6, Local Vertex Begin: 0, Num Local Vertices: 232965
*** Node 7, starting model training...
Num Stages: 16 / 16
Node 7, Pipeline Input Tensor: OPERATOR_ADD
Node 7, Pipeline Output Tensor: OPERATOR_ADD
*** Node 7 owns the model-level partition [178, 204)
*** Node 7, constructing the helper classes...
Node 7, Local Vertex Begin: 0, Num Local Vertices: 232965
Node 2, Local Vertex Begin: 0, Num Local Vertices: 232965
*** Node 12, starting model training...
Num Stages: 16 / 16
Node 12, Pipeline Input Tensor: OPERATOR_ADD
Node 12, Pipeline Output Tensor: OPERATOR_ADD
*** Node 12 owns the model-level partition [308, 334)
*** Node 12, constructing the helper classes...
*** Node 13, starting model training...
Num Stages: 16 / 16
Node 13, Pipeline Input Tensor: OPERATOR_ADD
Node 13, Pipeline Output Tensor: OPERATOR_ADD
*** Node 13 owns the model-level partition [334, 360)
*** Node 13, constructing the helper classes...
Node 13, Local Vertex Begin: 0, Num Local Vertices: 232965
*** Node 14, starting model training...
Num Stages: 16 / 16
Node 14, Pipeline Input Tensor: OPERATOR_ADD
Node 14, Pipeline Output Tensor: OPERATOR_ADD
*** Node 14 owns the model-level partition [360, 386)
*** Node 14, constructing the helper classes...
Node 14, Local Vertex Begin: 0, Num Local Vertices: 232965
*** Node 15, starting model training...
Num Stages: 16 / 16
Node 15, Pipeline Input Tensor: OPERATOR_ADD
Node 15, Pipeline Output Tensor: NULL
*** Node 15 owns the model-level partition [386, 421)
*** Node 15, constructing the helper classes...
Node 15, Local Vertex Begin: 0, Num Local Vertices: 232965
*** Node 8, starting model training...
Num Stages: 16 / 16
Node 8, Pipeline Input Tensor: OPERATOR_ADD
Node 8, Pipeline Output Tensor: OPERATOR_ADD
*** Node 8 owns the model-level partition [204, 230)
*** Node 8, constructing the helper classes...
Node 8, Local Vertex Begin: 0, Num Local Vertices: 232965
Node 12, Local Vertex Begin: 0, Num Local Vertices: 232965
*** Node 9, starting model training...
Num Stages: 16 / 16
Node 9, Pipeline Input Tensor: OPERATOR_ADD
Node 9, Pipeline Output Tensor: OPERATOR_ADD
*** Node 9 owns the model-level partition [230, 256)
*** Node 9, constructing the helper classes...
Node 9, Local Vertex Begin: 0, Num Local Vertices: 232965
*** Node 10, starting model training...
Num Stages: 16 / 16
Node 10, Pipeline Input Tensor: OPERATOR_ADD
Node 10, Pipeline Output Tensor: OPERATOR_ADD
*** Node 10 owns the model-level partition [256, 282)
*** Node 10, constructing the helper classes...
Node 10, Local Vertex Begin: 0, Num Local Vertices: 232965
*** Node 11, starting model training...
Num Stages: 16 / 16
Node 11, Pipeline Input Tensor: OPERATOR_ADD
Node 11, Pipeline Output Tensor: OPERATOR_ADD
*** Node 11 owns the model-level partition [282, 308)
*** Node 11, constructing the helper classes...
Node 11, Local Vertex Begin: 0, Num Local Vertices: 232965
*** Node 0, setting up some other necessary information...
*** Node 1, setting up some other necessary information...
*** Node 3, setting up some other necessary information...
*** Node 8, setting up some other necessary information...
*** Node 2, setting up some other necessary information...
*** Node 6, setting up some other necessary information...
*** Node 15, setting up some other necessary information...
*** Node 7, setting up some other necessary information...
*** Node 9, setting up some other necessary information...
*** Node 11, setting up some other necessary information...
*** Node 5, setting up some other necessary information...
*** Node 14, setting up some other necessary information...
*** Node 10, setting up some other necessary information...
*** Node 4, setting up some other necessary information...
*** Node 13, setting up some other necessary information...
*** Node 12, setting up some other necessary information...
+++++++++ Node 9 initializing the weights for op[230, 256)...
+++++++++ Node 0 initializing the weights for op[0, 22)...
+++++++++ Node 11 initializing the weights for op[282, 308)...
+++++++++ Node 1 initializing the weights for op[22, 48)...
+++++++++ Node 12 initializing the weights for op[308, 334)...
+++++++++ Node 10 initializing the weights for op[256, 282)...
+++++++++ Node 3 initializing the weights for op[74, 100)...
+++++++++ Node 5 initializing the weights for op[126, 152)...
+++++++++ Node 13 initializing the weights for op[334, 360)...
+++++++++ Node 8 initializing the weights for op[204, 230)...
+++++++++ Node 2 initializing the weights for op[48, 74)...
+++++++++ Node 6 initializing the weights for op[152, 178)...
+++++++++ Node 14 initializing the weights for op[360, 386)...
+++++++++ Node 4 initializing the weights for op[100, 126)...
+++++++++ Node 15 initializing the weights for op[386, 421)...
+++++++++ Node 7 initializing the weights for op[178, 204)...
Node 2, discovering the vertices that will be sent across graph boundary...
Node 12, discovering the vertices that will be sent across graph boundary...
Node 11, discovering the vertices that will be sent across graph boundary...
Node 0, discovering the vertices that will be sent across graph boundary...
Node 8, discovering the vertices that will be sent across graph boundary...
Node 8, discovering the vertices that will be received across the graph boundary.
Node 1, discovering the vertices that will be sent across graph boundary...
Node 1, discovering the vertices that will be received across the graph boundary.
Node 5, discovering the vertices that will be sent across graph boundary...
Node 13, discovering the vertices that will be sent across graph boundary...
Node 13, discovering the vertices that will be received across the graph boundary.
Node 9, discovering the vertices that will be sent across graph boundary...
Node 9, discovering the vertices that will be received across the graph boundary.
Node 3, discovering the vertices that will be sent across graph boundary...
Node 3, discovering the vertices that will be received across the graph boundary.
Node 6, discovering the vertices that will be sent across graph boundary...
Node 6, discovering the vertices that will be received across the graph boundary.
Node 14, discovering the vertices that will be sent across graph boundary...
Node 14, discovering the vertices that will be received across the graph boundary.
Node 10, discovering the vertices that will be sent across graph boundary...
Node 10, discovering the vertices that will be received across the graph boundary.
The number of mirror vertices: 0
Node 0, discovering the vertices that will be received across the graph boundary.
Node 7, discovering the vertices that will be sent across graph boundary...
Node 7, discovering the vertices that will be received across the graph boundary.
Node 15, discovering the vertices that will be sent across graph boundary...
Node 15, discovering the vertices that will be received across the graph boundary.
Node 11, discovering the vertices that will be received across the graph boundary.
Node 2, discovering the vertices that will be received across the graph boundary.
Node 4, discovering the vertices that will be sent across graph boundary...
Node 4, discovering the vertices that will be received across the graph boundary.
Node 12, discovering the vertices that will be received across the graph boundary.
Node 5, discovering the vertices that will be received across the graph boundary.
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
*** Node 12, starting task scheduling...
*** Node 8, starting task scheduling...
*** Node 0, starting task scheduling...



The learning rate specified by the user: 0.001000000
*** Node 4, starting task scheduling...
*** Node 13, starting task scheduling...
*** Node 9, starting task scheduling...
*** Node 1, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 5, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 14, starting task scheduling...
*** Node 10, starting task scheduling...
*** Node 2, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 6, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 15, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 11, starting task scheduling...
*** Node 3, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 7, starting task scheduling...
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
	Epoch 1:	Loss 4.2038	TrainAcc 0.1504	ValidAcc 0.1559	TestAcc 0.1569	BestValid 0.1559
	Epoch 50:	Loss 0.8993	TrainAcc 0.8540	ValidAcc 0.8661	TestAcc 0.8630	BestValid 0.8661
****** Epoch Time (Excluding Evaluation Cost): 0.384 s ******
****** Breakdown Analysis ******
Cluster-Wide Average, Bubble-Pipeline: 89.332 ms (Max: 97.545, Min: 56.294, Sum: 1429.304)
Cluster-Wide Average, Compute: 202.948 ms (Max: 272.136, Min: 182.355, Sum: 3247.169)
Cluster-Wide Average, Communication-Layer: 28.947 ms (Max: 31.720, Min: 17.948, Sum: 463.156)
Cluster-Wide Average, Bubble-Imbalance: 58.994 ms (Max: 83.872, Min: 5.950, Sum: 943.897)
Cluster-Wide Average, Communication-Graph: 0.503 ms (Max: 0.572, Min: 0.443, Sum: 8.044)
Cluster-Wide Average, Optimization: 0.131 ms (Max: 0.165, Min: 0.125, Sum: 2.090)
Cluster-Wide Average, Others: 3.099 ms (Max: 30.800, Min: 1.212, Sum: 49.584)
****** Breakdown Sum: 383.953 ms ******
Cluster-Wide Average, GPU Memory Consumption: 5.687 GB (Max: 6.979, Min: 5.532, Sum: 90.994)
Cluster-Wide Average, Graph-Level Communication Throughput: -nan Gbps (Max: -nan, Min: -nan, Sum: -nan)
Cluster-Wide Average, Layer-Level Communication Throughput: 47.958 Gbps (Max: 51.130, Min: 41.238, Sum: 767.327)
Layer-level communication (cluster-wide, per-epoch): 2.604 GB
Graph-level communication (cluster-wide, per-epoch): 0.000 GB
Weight-sync communication (cluster-wide, per-epoch): 0.000 GB
Total communication (cluster-wide, per-epoch): 2.604 GB
****** Accuracy Results ******
Highest valid_acc: 0.8661
Target test_acc: 0.8630
Epoch to reach the target acc: 49
[MPI Rank 0] Success 
[MPI Rank 12] Success 
[MPI Rank 8] Success 
[MPI Rank 1] Success 
[MPI Rank 4] Success 
[MPI Rank 13] Success 
[MPI Rank 9] Success 
[MPI Rank 2] Success 
[MPI Rank 5] Success 
[MPI Rank 14] Success 
[MPI Rank 10] Success 
[MPI Rank 3] Success 
[MPI Rank 6] Success 
[MPI Rank 15] Success 
[MPI Rank 11] Success 
[MPI Rank 7] Success 
