Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
DONE MPI INIT
DONE MPI INIT
Initialized node 14 on machine gnerv8
Initialized node 13 on machine gnerv8
DONE MPI INIT
Initialized node 15 on machine gnerv8
DONE MPI INIT
Initialized node 12 on machine gnerv8
DONE MPI INITDONE MPI INIT
DONE MPI INIT
DONE MPI INIT
Initialized node 3 on machine gnerv2
Initialized node 2 on machine gnerv2
Initialized node 0 on machine gnerv2

Initialized node 1 on machine gnerv2
DONE MPI INIT
Initialized node 8 on machine gnerv7
DONE MPI INIT
Initialized node 10 on machine gnerv7
DONE MPI INIT
Initialized node 11 on machine gnerv7
DONE MPI INIT
Initialized node 9 on machine gnerv7
DONE MPI INIT
DONE MPI INIT
Initialized node 5 on machine gnerv3
Initialized node 4 on machine gnerv3
DONE MPI INIT
DONE MPI INIT
Initialized node 7 on machine gnerv3
Initialized node 6 on machine gnerv3
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
        It takes 2.325 seconds.
Building the CSC structure...
        It takes 2.389 seconds.
Building the CSC structure...
        It takes 2.402 seconds.
Building the CSC structure...
        It takes 2.418 seconds.
Building the CSC structure...
        It takes 2.449 seconds.
Building the CSC structure...
        It takes 2.431 seconds.
Building the CSC structure...
        It takes 2.445 seconds.
Building the CSC structure...
        It takes 2.449 seconds.
Building the CSC structure...
        It takes 2.478 seconds.
Building the CSC structure...
        It takes 2.486 seconds.
Building the CSC structure...
        It takes 2.579 seconds.
Building the CSC structure...
        It takes 2.607 seconds.
Building the CSC structure...
        It takes 2.626 seconds.
Building the CSC structure...
        It takes 2.692 seconds.
Building the CSC structure...
        It takes 2.694 seconds.
Building the CSC structure...
        It takes 2.698 seconds.
Building the CSC structure...
        It takes 2.290 seconds.
        It takes 2.299 seconds.
        It takes 2.286 seconds.
        It takes 2.313 seconds.
        It takes 2.352 seconds.
        It takes 2.375 seconds.
        It takes 2.447 seconds.
        It takes 2.412 seconds.
        It takes 2.378 seconds.
        It takes 2.397 seconds.
        It takes 2.329 seconds.
        It takes 2.339 seconds.
        It takes 2.431 seconds.
        It takes 2.338 seconds.
        It takes 2.461 seconds.
        It takes 2.448 seconds.
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
        It takes 0.272 seconds.
Building the Label Vector...
Building the Feature Vector...
        It takes 0.032 seconds.
        It takes 0.288 seconds.
Building the Label Vector...
        It takes 0.285 seconds.
Building the Label Vector...
        It takes 0.037 seconds.
Building the Feature Vector...
        It takes 0.038 seconds.
        It takes 0.285 seconds.
Building the Label Vector...
        It takes 0.043 seconds.
        It takes 0.298 seconds.
Building the Label Vector...
        It takes 0.038 seconds.
        It takes 0.281 seconds.
Building the Label Vector...
        It takes 0.285 seconds.
Building the Label Vector...
        It takes 0.344 seconds.
Building the Label Vector...
        It takes 0.031 seconds.
        It takes 0.035 seconds.
        It takes 0.345 seconds.
Building the Label Vector...
        It takes 0.045 seconds.
        It takes 0.033 seconds.
        It takes 0.275 seconds.
Building the Label Vector...
        It takes 0.033 seconds.
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
        It takes 0.277 seconds.
Building the Label Vector...
        It takes 0.279 seconds.
Building the Label Vector...
        It takes 0.048 seconds.
        It takes 0.031 seconds.
The graph dataset locates at /shared_hdd_storage/jingjichen/gnn_datasets/pipeline_parallel_datasets/reddit/64_parts
The number of GCNII layers: 32
The number of hidden units: 100
The number of training epoches: 50
Learning rate: 0.001000
The partition strategy: model
The dropout rate: 0.500
The checkpointed weight file: /tmp/saved_weights_pipe
The random seed: 1
GCN hyper-parameter alpha: 0.100000
GCN hyper-parameter lambda: 0.500000
Number of classes: 41
Number of feature dimensions: 602
Number of vertices: 232965
Number of GPUs: 16
        It takes 0.265 seconds.
Building the Label Vector...
        It takes 0.032 seconds.
        It takes 0.280 seconds.
Building the Label Vector...
GPU 0, layer [0, 3)
GPU 1, layer [3, 5)
GPU 2, layer [5, 7)
GPU 3, layer [7, 9)
GPU 4, layer [9, 11)
GPU 5, layer [11, 13)
GPU 6, layer [13, 15)
GPU 7, layer [15, 17)
GPU 8, layer [17, 19)
GPU 9, layer [19, 21)
GPU 10, layer [21, 23)
GPU 11, layer [23, 25)
GPU 12, layer [25, 27)
GPU 13, layer [27, 29)
GPU 14, layer [29, 31)
GPU 15, layer [31, 33)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
        It takes 0.032 seconds.
        It takes 0.315 seconds.
Building the Label Vector...
GPU 0, layer [0, 3)
GPU 1, layer [3, 5)
GPU 2, layer [5, 7)
GPU 3, layer [7, 9)
GPU 4, layer [9, 11)
GPU 5, layer [11, 13)
GPU 6, layer [13, 15)
GPU 7, layer [15, 17)
GPU 8, layer [17, 19)
GPU 9, layer [19, 21)
GPU 10, layer [21, 23)
GPU 11, layer [23, 25)
GPU 12, layer [25, 27)
GPU 13, layer [27, 29)
GPU 14, layer [29, 31)
GPU 15, layer [31, 33)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
        It takes 0.035 seconds.
        It takes 0.316 seconds.
Building the Label Vector...
        It takes 0.032 seconds.
GPU 0, layer [0, 3)
GPU 1, layer [3, 5)
GPU 2, layer [5, 7)
GPU 3, layer [7, 9)
GPU 4, layer [9, 11)
GPU 5, layer [11, 13)
GPU 6, layer [13, 15)
GPU 7, layer [15, 17)
GPU 8, layer [17, 19)
GPU 9, layer [19, 21)
GPU 10, layer [21, 23)
GPU 11, layer [23, 25)
GPU 12, layer [25, 27)
GPU 13, layer [27, 29)
GPU 14, layer [29, 31)
GPU 15, layer [31, 33)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 3)
GPU 1, layer [3, 5)
GPU 2, layer [5, 7)
GPU 3, layer [7, 9)
GPU 4, layer [9, 11)
GPU 5, layer [11, 13)
GPU 6, layer [13, 15)
GPU 7, layer [15, 17)
GPU 8, layer [17, 19)
GPU 9, layer [19, 21)
GPU 10, layer [21, 23)
GPU 11, layer [23, 25)
GPU 12, layer [25, 27)
GPU 13, layer [27, 29)
GPU 14, layer [29, 31)
GPU 15, layer [31, 33)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 3)
GPU 1, layer [3, 5)
GPU 2, layer [5, 7)
GPU 3, layer [7, 9)
GPU 4, layer [9, 11)
GPU 5, layer [11, 13)
GPU 6, layer [13, 15)
GPU 7, layer [15, 17)
GPU 8, layer [17, 19)
GPU 9, layer [19, 21)
GPU 10, layer [21, 23)
GPU 11, layer [23, 25)
GPU 12, layer [25, 27)
GPU 13, layer [27, 29)
GPU 14, layer [29, 31)
GPU 15, layer [31, 33)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 3)
GPU 1, layer [3, 5)
GPU 2, layer [5, 7)
GPU 3, layer [7, 9)
GPU 4, layer [9, 11)
GPU 5, layer [11, 13)
GPU 6, layer [13, 15)
GPU 7, layer [15, 17)
GPU 8, layer [17, 19)
GPU 9, layer [19, 21)
GPU 10, layer [21, 23)
GPU 11, layer [23, 25)
GPU 12, layer [25, 27)
GPU 13, layer [27, 29)
GPU 14, layer [29, 31)
GPU 15, layer [31, 33)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 3)
GPU 1, layer [3, 5)
GPU 2, layer [5, 7)
GPU 3, layer [7, 9)
GPU 4, layer [9, 11)
GPU 5, layer [11, 13)
GPU 6, layer [13, 15)
GPU 7, layer [15, 17)
GPU 8, layer [17, 19)
GPU 9, layer [19, 21)
GPU 10, layer [21, 23)
GPU 11, layer [23, 25)
GPU 12, layer [25, 27)
GPU 13, layer [27, 29)
GPU 14, layer [29, 31)
GPU 15, layer [31, 33)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 3)
GPU 1, layer [3, 5)
GPU 2, layer [5, 7)
GPU 3, layer [7, 9)
GPU 4, layer [9, 11)
GPU 5, layer [11, 13)
GPU 6, layer [13, 15)
GPU 7, layer [15, 17)
GPU 8, layer [17, 19)
GPU 9, layer [19, 21)
GPU 10, layer [21, 23)
GPU 11, layer [23, 25)
GPU 12, layer [25, 27)
GPU 13, layer [27, 29)
GPU 14, layer [29, 31)
GPU 15, layer [31, 33)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 3)
GPU 1, layer [3, 5)
GPU 2, layer [5, 7)
GPU 3, layer [7, 9)
GPU 4, layer [9, 11)
GPU 5, layer [11, 13)
GPU 6, layer [13, 15)
GPU 7, layer [15, 17)
GPU 8, layer [17, 19)
GPU 9, layer [19, 21)
GPU 10, layer [21, 23)
GPU 11, layer [23, 25)
GPU 12, layer [25, 27)
GPU 13, layer [27, 29)
GPU 14, layer [29, 31)
GPU 15, layer [31, 33)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 3)
GPU 1, layer [3, 5)
GPU 2, layer [5, 7)
GPU 3, layer [7, 9)
GPU 4, layer [9, 11)
GPU 5, layer [11, 13)
GPU 6, layer [13, 15)
GPU 7, layer [15, 17)
GPU 8, layer [17, 19)
GPU 9, layer [19, 21)
GPU 10, layer [21, 23)
GPU 11, layer [23, 25)
GPU 12, layer [25, 27)
GPU 13, layer [27, 29)
GPU 14, layer [29, 31)
GPU 15, layer [31, 33)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
232965, 114848857, 114848857
Number of vertices per chunk: 3641
232965, 114848857, 114848857
Number of vertices per chunk: 3641
232965, 114848857, 114848857
Number of vertices per chunk: 3641
232965, 114848857, 114848857
Number of vertices per chunk: 3641
232965, 114848857, 114848857
Number of vertices per chunk: 3641
232965, 114848857, 114848857
Number of vertices per chunk: 3641
232965, 114848857, 114848857
Number of vertices per chunk: 3641
232965, 114848857, 114848857
Number of vertices per chunk: 3641
232965, 114848857, 114848857
Number of vertices per chunk: 3641
232965, 114848857, 114848857
Number of vertices per chunk: 3641
train nodes 153431, valid nodes 23831, test nodes 55703
GPU 0, layer [0, 3)
GPU 1, layer [3, 5)
GPU 2, layer [5, 7)
GPU 3, layer [7, 9)
GPU 4, layer [9, 11)
GPU 5, layer [11, 13)
GPU 6, layer [13, 15)
GPU 7, layer [15, 17)
GPU 8, layer [17, 19)
GPU 9, layer [19, 21)
GPU 10, layer [21, 23)
GPU 11, layer [23, 25)
GPU 12, layer [25, 27)
GPU 13, layer [27, 29)
GPU 14, layer [29, 31)
GPU 15, layer [31, 33)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
Chunks (number of global chunks: 64): 0-[0, 3383) 1-[3383, 7843) 2-[7843, 12526) 3-[12526, 16576) 4-[16576, 20087) 5-[20087, 24086) 6-[24086, 27150) 7-[27150, 31875) 8-[31875, 38059) ... 63-[229059, 232965)
GPU 0, layer [0, 3)
GPU 1, layer [3, 5)
GPU 2, layer [5, 7)
GPU 3, layer [7, 9)
GPU 4, layer [9, 11)
GPU 5, layer [11, 13)
GPU 6, layer [13, 15)
GPU 7, layer [15, 17)
GPU 8, layer [17, 19)
GPU 9, layer [19, 21)
GPU 10, layer [21, 23)
GPU 11, layer [23, 25)
GPU 12, layer [25, 27)
GPU 13, layer [27, 29)
GPU 14, layer [29, 31)
GPU 15, layer [31, 33)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 3)
GPU 1, layer [3, 5)
GPU 2, layer [5, 7)
GPU 3, layer [7, 9)
GPU 4, layer [9, 11)
GPU 5, layer [11, 13)
GPU 6, layer [13, 15)
GPU 7, layer [15, 17)
GPU 8, layer [17, 19)
GPU 9, layer [19, 21)
GPU 10, layer [21, 23)
GPU 11, layer [23, 25)
GPU 12, layer [25, 27)
GPU 13, layer [27, 29)
GPU 14, layer [29, 31)
GPU 15, layer [31, 33)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 3)
GPU 1, layer [3, 5)
GPU 2, layer [5, 7)
GPU 3, layer [7, 9)
GPU 4, layer [9, 11)
GPU 5, layer [11, 13)
GPU 6, layer [13, 15)
GPU 7, layer [15, 17)
GPU 8, layer [17, 19)
GPU 9, layer [19, 21)
GPU 10, layer [21, 23)
GPU 11, layer [23, 25)
GPU 12, layer [25, 27)
GPU 13, layer [27, 29)
GPU 14, layer [29, 31)
GPU 15, layer [31, 33)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 3)
GPU 1, layer [3, 5)
GPU 2, layer [5, 7)
GPU 3, layer [7, 9)
GPU 4, layer [9, 11)
GPU 5, layer [11, 13)
GPU 6, layer [13, 15)
GPU 7, layer [15, 17)
GPU 8, layer [17, 19)
GPU 9, layer [19, 21)
GPU 10, layer [21, 23)
GPU 11, layer [23, 25)
GPU 12, layer [25, 27)
GPU 13, layer [27, 29)
GPU 14, layer [29, 31)
GPU 15, layer [31, 33)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 3)
GPU 1, layer [3, 5)
GPU 2, layer [5, 7)
GPU 3, layer [7, 9)
GPU 4, layer [9, 11)
GPU 5, layer [11, 13)
GPU 6, layer [13, 15)
GPU 7, layer [15, 17)
GPU 8, layer [17, 19)
GPU 9, layer [19, 21)
GPU 10, layer [21, 23)
GPU 11, layer [23, 25)
GPU 12, layer [25, 27)
GPU 13, layer [27, 29)
GPU 14, layer [29, 31)
GPU 15, layer [31, 33)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
232965, 114848857, 114848857
Number of vertices per chunk: 3641
232965, 114848857, 114848857
Number of vertices per chunk: 3641
232965, 114848857, 114848857
Number of vertices per chunk: 3641
232965, 114848857, 114848857
Number of vertices per chunk: 3641
232965, 114848857, 114848857
Number of vertices per chunk: 3641
232965, 114848857, 114848857
Number of vertices per chunk: 3641
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
***** Start profiling the layer-level communication performance *******
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
The layer-level communication performance: 56.176 Gbps (per GPU), 898.824 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 55.929 Gbps (per GPU), 894.865 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 55.770 Gbps (per GPU), 892.315 Gbps (aggregated)
The layer-level communication performance: 55.707 Gbps (per GPU), 891.305 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 55.592 Gbps (per GPU), 889.474 Gbps (aggregated)
The layer-level communication performance: 55.712 Gbps (per GPU), 891.387 Gbps (aggregated)
The layer-level communication performance: 55.535 Gbps (per GPU), 888.559 Gbps (aggregated)
The layer-level communication performance: 55.506 Gbps (per GPU), 888.090 Gbps (aggregated)
The layer-level communication performance: 55.463 Gbps (per GPU), 887.404 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 55.437 Gbps (per GPU), 886.993 Gbps (aggregated)
The layer-level communication performance: 55.430 Gbps (per GPU), 886.876 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 55.362 Gbps (per GPU), 885.785 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 55.336 Gbps (per GPU), 885.373 Gbps (aggregated)
The layer-level communication performance: 55.311 Gbps (per GPU), 884.975 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 55.271 Gbps (per GPU), 884.338 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 55.254 Gbps (per GPU), 884.061 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The graph-level communication performance (supernode = 2): 157.340 Gbps (per GPU), 2517.448 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 157.338 Gbps (per GPU), 2517.400 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 157.337 Gbps (per GPU), 2517.398 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 157.335 Gbps (per GPU), 2517.353 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 157.293 Gbps (per GPU), 2516.693 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 157.273 Gbps (per GPU), 2516.362 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 157.338 Gbps (per GPU), 2517.400 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 157.293 Gbps (per GPU), 2516.693 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 157.273 Gbps (per GPU), 2516.362 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 157.329 Gbps (per GPU), 2517.266 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 157.290 Gbps (per GPU), 2516.645 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 157.290 Gbps (per GPU), 2516.645 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 157.338 Gbps (per GPU), 2517.400 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 157.296 Gbps (per GPU), 2516.740 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 157.184 Gbps (per GPU), 2514.948 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 157.346 Gbps (per GPU), 2517.542 Gbps (aggregated, cluster-wide)
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
The graph-level communication performance (supernode = 4): 96.706 Gbps (per GPU), 1547.297 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 96.706 Gbps (per GPU), 1547.297 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 96.705 Gbps (per GPU), 1547.286 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 96.708 Gbps (per GPU), 1547.321 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 96.705 Gbps (per GPU), 1547.286 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 96.707 Gbps (per GPU), 1547.309 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 96.708 Gbps (per GPU), 1547.321 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 96.705 Gbps (per GPU), 1547.286 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 96.709 Gbps (per GPU), 1547.345 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 96.708 Gbps (per GPU), 1547.333 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 96.706 Gbps (per GPU), 1547.297 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 96.708 Gbps (per GPU), 1547.321 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 96.699 Gbps (per GPU), 1547.178 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 96.705 Gbps (per GPU), 1547.274 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 96.705 Gbps (per GPU), 1547.286 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 96.705 Gbps (per GPU), 1547.274 Gbps (aggregated, cluster-wide)
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
The graph-level communication performance (supernode = 8): 25.242 Gbps (per GPU), 403.866 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 25.241 Gbps (per GPU), 403.852 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 25.241 Gbps (per GPU), 403.862 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 25.241 Gbps (per GPU), 403.862 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 25.241 Gbps (per GPU), 403.855 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 25.241 Gbps (per GPU), 403.850 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 25.241 Gbps (per GPU), 403.861 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 25.241 Gbps (per GPU), 403.861 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 25.241 Gbps (per GPU), 403.858 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 25.241 Gbps (per GPU), 403.854 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 25.241 Gbps (per GPU), 403.852 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 25.241 Gbps (per GPU), 403.853 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 25.241 Gbps (per GPU), 403.857 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 25.241 Gbps (per GPU), 403.862 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 25.240 Gbps (per GPU), 403.846 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 25.241 Gbps (per GPU), 403.861 Gbps (aggregated, cluster-wide)
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
The graph-level communication performance (supernode = 16): 21.103 Gbps (per GPU), 337.646 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 21.103 Gbps (per GPU), 337.644 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 21.102 Gbps (per GPU), 337.633 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 21.102 Gbps (per GPU), 337.635 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 21.103 Gbps (per GPU), 337.644 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 21.102 Gbps (per GPU), 337.636 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 21.102 Gbps (per GPU), 337.632 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 21.102 Gbps (per GPU), 337.634 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 21.102 Gbps (per GPU), 337.631 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 21.102 Gbps (per GPU), 337.633 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 21.102 Gbps (per GPU), 337.637 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 21.103 Gbps (per GPU), 337.640 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 21.102 Gbps (per GPU), 337.633 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 21.102 Gbps (per GPU), 337.635 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 21.102 Gbps (per GPU), 337.632 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 21.102 Gbps (per GPU), 337.639 Gbps (aggregated, cluster-wide)
 LType   LT0   LT1   LT2 Ratio  VSum  ESum
 chk_0  0.48ms  1.45ms  1.62ms  3.41  3.38K  1.78M
 chk_1  0.58ms  1.46ms  1.62ms  2.81  4.46K  1.78M
 chk_2  0.60ms  1.45ms  1.61ms  2.69  4.68K  1.74M
 chk_3  0.52ms  1.47ms  1.61ms  3.11  4.05K  1.77M
 chk_4  0.48ms  1.43ms  1.57ms  3.24  3.51K  1.79M
 chk_5  0.52ms  1.37ms  1.50ms  2.92  4.00K  1.83M
 chk_6  0.45ms  1.38ms  1.50ms  3.31  3.06K  1.85M
 chk_7  0.59ms  1.44ms  1.59ms  2.69  4.72K  1.71M
 chk_8  0.72ms  1.41ms  1.57ms  2.19  6.18K  1.69M
 chk_9  0.39ms  1.38ms  1.51ms  3.91  2.07K  1.90M
chk_10  0.44ms  1.41ms  1.53ms  3.51  2.79K  1.81M
chk_11  0.61ms  1.53ms  1.67ms  2.71  4.93K  1.76M
chk_12  0.43ms  1.44ms  1.57ms  3.63  2.74K  1.81M
chk_13  0.50ms  1.45ms  1.58ms  3.15  3.26K  1.78M
chk_14  0.52ms  1.45ms  1.59ms  3.08  4.03K  1.77M
chk_15  0.50ms  1.31ms  1.45ms  2.90  3.26K  1.84M
chk_16  0.50ms  1.44ms  1.57ms  3.16  3.22K  1.78M
chk_17  0.49ms  1.46ms  1.60ms  3.23  3.69K  1.82M
chk_18  0.61ms  1.42ms  1.57ms  2.59  4.98K  1.78M
chk_19  0.49ms  1.43ms  1.56ms  3.21  3.53K  1.77M
chk_20  0.49ms  1.44ms  1.59ms  3.23  3.14K  1.79M
chk_21  0.42ms  1.38ms  1.51ms  3.63  2.52K  1.85M
chk_22  0.49ms  1.33ms  1.46ms  2.99  3.62K  1.76M
chk_23  0.50ms  1.41ms  1.55ms  3.09  3.26K  1.81M
chk_24  0.51ms  1.35ms  1.50ms  2.96  3.29K  1.81M
chk_25  0.52ms  1.35ms  1.50ms  2.89  4.05K  1.77M
chk_26  0.41ms  1.34ms  1.48ms  3.61  2.41K  1.87M
chk_27  0.50ms  1.59ms  1.73ms  3.43  3.85K  1.76M
chk_28  0.44ms  1.39ms  1.54ms  3.46  2.90K  1.83M
chk_29  0.48ms  1.52ms  1.66ms  3.45  3.43K  1.77M
chk_30  0.41ms  1.50ms  1.64ms  4.02  2.37K  1.80M
chk_31  0.43ms  1.54ms  1.67ms  3.87  2.71K  1.87M
chk_32  0.65ms  1.37ms  1.52ms  2.34  5.56K  1.69M
chk_33  0.63ms  1.38ms  1.53ms  2.42  5.31K  1.75M
chk_34  0.52ms  1.42ms  1.56ms  3.00  4.07K  1.78M
chk_35  0.58ms  1.63ms  1.50ms  2.81  4.52K  1.75M
chk_36  0.40ms  1.44ms  1.58ms  3.97  2.25K  1.86M
chk_37  0.45ms  1.37ms  1.52ms  3.38  2.93K  1.83M
chk_38  0.43ms  1.51ms  1.66ms  3.88  2.63K  1.78M
chk_39  0.57ms  1.37ms  1.51ms  2.64  4.47K  1.76M
chk_40  0.52ms  1.42ms  1.56ms  2.99  4.06K  1.77M
chk_41  0.59ms  1.41ms  1.55ms  2.62  4.79K  1.73M
chk_42  0.50ms  1.40ms  1.53ms  3.05  3.84K  1.81M
chk_43  0.58ms  1.44ms  1.58ms  2.72  4.60K  1.74M
chk_44  0.43ms  1.46ms  1.60ms  3.67  2.77K  1.81M
chk_45  0.43ms  1.47ms  1.60ms  3.71  2.70K  1.86M
chk_46  0.48ms  1.56ms  1.70ms  3.54  3.46K  1.77M
chk_47  0.61ms  1.39ms  1.54ms  2.53  4.89K  1.70M
chk_48  0.45ms  1.50ms  1.63ms  3.66  2.91K  1.80M
chk_49  0.40ms  1.48ms  1.63ms  4.03  2.35K  1.86M
chk_50  0.44ms  1.31ms  1.46ms  3.34  2.75K  1.89M
chk_51  0.55ms  1.47ms  1.60ms  2.91  4.12K  1.74M
chk_52  0.61ms  1.45ms  1.58ms  2.58  4.93K  1.73M
chk_53  0.44ms  1.36ms  1.47ms  3.39  2.77K  1.86M
chk_54  0.50ms  1.40ms  1.52ms  3.02  3.86K  1.78M
chk_55  0.44ms  1.37ms  1.51ms  3.42  2.83K  1.80M
chk_56  0.47ms  1.46ms  1.61ms  3.38  3.34K  1.78M
chk_57  0.62ms  1.54ms  1.69ms  2.72  5.03K  1.74M
chk_58  0.50ms  1.42ms  1.56ms  3.15  3.16K  1.87M
chk_59  0.58ms  1.38ms  1.53ms  2.66  4.53K  1.75M
chk_60  0.45ms  1.35ms  1.50ms  3.32  2.98K  1.82M
chk_61  0.49ms  1.42ms  1.57ms  3.22  3.55K  1.77M
chk_62  0.45ms  1.32ms  1.46ms  3.23  3.02K  1.79M
chk_63  0.51ms  1.44ms  1.58ms  3.11  3.91K  1.78M
   Avg  0.50  1.43  1.56
   Max  0.72  1.63  1.73
   Min  0.39  1.31  1.45
 Ratio  1.85  1.24  1.19
   Var  0.01  0.00  0.00
Profiling takes 2.762 s
*** Node 8, starting model training...
Num Stages: 16 / 16
Node 8, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 8, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 8 owns the model-level partition [118, 132)
*** Node 8, constructing the helper classes...
Node 8, Local Vertex Begin: 0, Num Local Vertices: 232965
*** Node 0, starting model training...
Num Stages: 16 / 16
Node 0, Pipeline Input Tensor: NULL
Node 0, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 0 owns the model-level partition [0, 20)
*** Node 0, constructing the helper classes...
Node 0, Local Vertex Begin: 0, Num Local Vertices: 232965
*** Node 9, starting model training...
Num Stages: 16 / 16
Node 9, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 9, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 9 owns the model-level partition [132, 146)
*** Node 9, constructing the helper classes...
Node 9, Local Vertex Begin: 0, Num Local Vertices: 232965
*** Node 1, starting model training...
Num Stages: 16 / 16
Node 1, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 1, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 1 owns the model-level partition [20, 34)
*** Node 1, constructing the helper classes...
Node 1, Local Vertex Begin: 0, Num Local Vertices: 232965
*** Node 10, starting model training...
Num Stages: 16 / 16
Node 10, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 10, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 10 owns the model-level partition [146, 160)
*** Node 10, constructing the helper classes...
Node 10, Local Vertex Begin: 0, Num Local Vertices: 232965
*** Node 3, starting model training...
Num Stages: 16 / 16
Node 3, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 3, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 3 owns the model-level partition [48, 62)
*** Node 3, constructing the helper classes...
Node 3, Local Vertex Begin: 0, Num Local Vertices: 232965
*** Node 11, starting model training...
Num Stages: 16 / 16
Node 11, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 11, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 11 owns the model-level partition [160, 174)
*** Node 11, constructing the helper classes...
Node 11, Local Vertex Begin: 0, Num Local Vertices: 232965
*** Node 2, starting model training...
Num Stages: 16 / 16
Node 2, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 2, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 2 owns the model-level partition [34, 48)
*** Node 2, constructing the helper classes...
Node 2, Local Vertex Begin: 0, Num Local Vertices: 232965
*** Node 12, starting model training...
Num Stages: 16 / 16
Node 12, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 12, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 12 owns the model-level partition [174, 188)
*** Node 12, constructing the helper classes...
Node 12, Local Vertex Begin: 0, Num Local Vertices: 232965
*** Node 13, starting model training...
Num Stages: 16 / 16
Node 13, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 13, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 13 owns the model-level partition [188, 202)
*** Node 13, constructing the helper classes...
Node 13, Local Vertex Begin: 0, Num Local Vertices: 232965
*** Node 14, starting model training...
Num Stages: 16 / 16
Node 14, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 14, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 14 owns the model-level partition [202, 216)
*** Node 14, constructing the helper classes...
Node 14, Local Vertex Begin: 0, Num Local Vertices: 232965
*** Node 15, starting model training...
Num Stages: 16 / 16
Node 15, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 15, Pipeline Output Tensor: NULL
*** Node 15 owns the model-level partition [216, 233)
*** Node 15, constructing the helper classes...
Node 15, Local Vertex Begin: 0, Num Local Vertices: 232965
*** Node 4, starting model training...
Num Stages: 16 / 16
Node 4, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 4, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 4 owns the model-level partition [62, 76)
*** Node 4, constructing the helper classes...
Node 4, Local Vertex Begin: 0, Num Local Vertices: 232965
*** Node 5, starting model training...
Num Stages: 16 / 16
Node 5, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 5, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 5 owns the model-level partition [76, 90)
*** Node 5, constructing the helper classes...
Node 5, Local Vertex Begin: 0, Num Local Vertices: 232965
*** Node 6, starting model training...
Num Stages: 16 / 16
*** Node 7, starting model training...
Num Stages: 16 / 16
Node 6, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 6, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 6 owns the model-level partition [90, 104)
*** Node 6, constructing the helper classes...
Node 6, Local Vertex Begin: 0, Num Local Vertices: 232965
Node 7, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 7, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 7 owns the model-level partition [104, 118)
*** Node 7, constructing the helper classes...
Node 7, Local Vertex Begin: 0, Num Local Vertices: 232965
*** Node 0, setting up some other necessary information...
*** Node 1, setting up some other necessary information...
*** Node 2, setting up some other necessary information...
*** Node 3, setting up some other necessary information...
*** Node 10, setting up some other necessary information...
*** Node 9, setting up some other necessary information...
*** Node 11, setting up some other necessary information...
*** Node 7, setting up some other necessary information...
*** Node 8, setting up some other necessary information...
*** Node 6, setting up some other necessary information...
*** Node 13, setting up some other necessary information...
*** Node 15, setting up some other necessary information...
*** Node 14, setting up some other necessary information...
*** Node 4, setting up some other necessary information...
*** Node 12, setting up some other necessary information...
*** Node 5, setting up some other necessary information...
+++++++++ Node 8 initializing the weights for op[118, 132)...
+++++++++ Node 12 initializing the weights for op[174, 188)...
+++++++++ Node 0 initializing the weights for op[0, 20)...
+++++++++ Node 5 initializing the weights for op[76, 90)...
+++++++++ Node 9 initializing the weights for op[132, 146)...
+++++++++ Node 13 initializing the weights for op[188, 202)...
+++++++++ Node 1 initializing the weights for op[20, 34)...
+++++++++ Node 6 initializing the weights for op[90, 104)...
+++++++++ Node 10 initializing the weights for op[146, 160)...
+++++++++ Node 14 initializing the weights for op[202, 216)...
+++++++++ Node 3 initializing the weights for op[48, 62)...
+++++++++ Node 4 initializing the weights for op[62, 76)...
+++++++++ Node 11 initializing the weights for op[160, 174)...
+++++++++ Node 15 initializing the weights for op[216, 233)...
+++++++++ Node 2 initializing the weights for op[34, 48)...
+++++++++ Node 7 initializing the weights for op[104, 118)...
Node 9, discovering the vertices that will be sent across graph boundary...
Node 14, discovering the vertices that will be sent across graph boundary...
Node 1, discovering the vertices that will be sent across graph boundary...
Node 6, discovering the vertices that will be sent across graph boundary...
Node 11, discovering the vertices that will be sent across graph boundary...
Node 15, discovering the vertices that will be sent across graph boundary...
Node 2, discovering the vertices that will be sent across graph boundary...
Node 2, discovering the vertices that will be received across the graph boundary.
Node 7, discovering the vertices that will be sent across graph boundary...
Node 7, discovering the vertices that will be received across the graph boundary.
Node 8, discovering the vertices that will be sent across graph boundary...
Node 12, discovering the vertices that will be sent across graph boundary...
Node 12, discovering the vertices that will be received across the graph boundary.
Node 4, discovering the vertices that will be sent across graph boundary...
Node 4, discovering the vertices that will be received across the graph boundary.
Node 10, discovering the vertices that will be sent across graph boundary...
Node 13, discovering the vertices that will be sent across graph boundary...
Node 13, discovering the vertices that will be received across the graph boundary.
Node 5, discovering the vertices that will be sent across graph boundary...
Node 5, discovering the vertices that will be received across the graph boundary.
Node 8, discovering the vertices that will be received across the graph boundary.
Node 14, discovering the vertices that will be received across the graph boundary.
Node 0, discovering the vertices that will be sent across graph boundary...
The number of mirror vertices: 0
Node 0, discovering the vertices that will be received across the graph boundary.
Node 6, discovering the vertices that will be received across the graph boundary.
Node 9, discovering the vertices that will be received across the graph boundary.
Node 15, discovering the vertices that will be received across the graph boundary.
Node 1, discovering the vertices that will be received across the graph boundary.
Node 10, discovering the vertices that will be received across the graph boundary.
Node 3, discovering the vertices that will be sent across graph boundary...
Node 3, discovering the vertices that will be received across the graph boundary.
Node 11, discovering the vertices that will be received across the graph boundary.
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
*** Node 8, starting task scheduling...
*** Node 12, starting task scheduling...
*** Node 0, starting task scheduling...



*** Node 4, starting task scheduling...
*** Node 9, starting task scheduling...
*** Node 13, starting task scheduling...
*** Node 1, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 5, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 10, starting task scheduling...
*** Node 14, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 2, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 6, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 11, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 15, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 3, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 7, starting task scheduling...
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
	Epoch 1:	Loss 3.8091	TrainAcc 0.0845	ValidAcc 0.0762	TestAcc 0.0774	BestValid 0.0762
	Epoch 50:	Loss 2.1380	TrainAcc 0.5643	ValidAcc 0.5791	TestAcc 0.5726	BestValid 0.5791
****** Epoch Time (Excluding Evaluation Cost): 0.309 s ******
****** Breakdown Analysis ******
Cluster-Wide Average, Bubble-Pipeline: 78.500 ms (Max: 81.077, Min: 50.264, Sum: 1255.998)
Cluster-Wide Average, Compute: 146.382 ms (Max: 183.417, Min: 139.935, Sum: 2342.111)
Cluster-Wide Average, Communication-Layer: 41.538 ms (Max: 48.785, Min: 26.772, Sum: 664.613)
Cluster-Wide Average, Bubble-Imbalance: 39.462 ms (Max: 52.214, Min: 17.261, Sum: 631.400)
Cluster-Wide Average, Communication-Graph: 0.451 ms (Max: 0.506, Min: 0.391, Sum: 7.211)
Cluster-Wide Average, Optimization: 0.049 ms (Max: 0.070, Min: 0.045, Sum: 0.788)
Cluster-Wide Average, Others: 2.839 ms (Max: 30.817, Min: 0.954, Sum: 45.417)
****** Breakdown Sum: 309.221 ms ******
Cluster-Wide Average, GPU Memory Consumption: 5.254 GB (Max: 7.809, Min: 5.061, Sum: 84.064)
Cluster-Wide Average, Graph-Level Communication Throughput: -nan Gbps (Max: -nan, Min: -nan, Sum: -nan)
Cluster-Wide Average, Layer-Level Communication Throughput: 67.446 Gbps (Max: 86.151, Min: 52.671, Sum: 1079.130)
Layer-level communication (cluster-wide, per-epoch): 5.207 GB
Graph-level communication (cluster-wide, per-epoch): 0.000 GB
Weight-sync communication (cluster-wide, per-epoch): 0.000 GB
Total communication (cluster-wide, per-epoch): 5.207 GB
****** Accuracy Results ******
Highest valid_acc: 0.5791
Target test_acc: 0.5726
Epoch to reach the target acc: 49
[MPI Rank 8] Success 
[MPI Rank 12] Success 
[MPI Rank 0] Success 
[MPI Rank 4] Success 
[MPI Rank 9] Success 
[MPI Rank 13] Success 
[MPI Rank 1] Success 
[MPI Rank 5] Success 
[MPI Rank 10] Success 
[MPI Rank 14] Success 
[MPI Rank 2] Success 
[MPI Rank 6] Success 
[MPI Rank 11] Success 
[MPI Rank 15] Success 
[MPI Rank 3] Success 
[MPI Rank 7] Success 
