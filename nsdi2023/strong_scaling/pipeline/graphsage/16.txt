Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
DONE MPI INIT
DONE MPI INIT
Initialized node 8 on machine gnerv7
DONE MPI INIT
Initialized node 10 on machine gnerv7
Initialized node 11 on machine gnerv7
DONE MPI INIT
Initialized node 9 on machine gnerv7
DONE MPI INIT
DONE MPI INIT
Initialized node 13 on machine gnerv8
Initialized node 12 on machine gnerv8
DONE MPI INIT
Initialized node 14 on machine gnerv8
DONE MPI INIT
Initialized node 15 on machine gnerv8
DONE MPI INIT
DONE MPI INITInitialized node 5 on machine gnerv3

DONE MPI INIT
Initialized node 7 on machine gnerv3
Initialized node 4 on machine gnerv3
DONE MPI INIT
Initialized node 6 on machine gnerv3
DONE MPI INIT
Initialized node 0 on machine gnerv2
DONE MPI INIT
Initialized node 2 on machine gnerv2
DONE MPI INIT
DONE MPI INIT
Initialized node 3 on machine gnerv2
Initialized node 1 on machine gnerv2
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
        It takes 2.360 seconds.
Building the CSC structure...
        It takes 2.339 seconds.
Building the CSC structure...
        It takes 2.392 seconds.
Building the CSC structure...
        It takes 2.431 seconds.
Building the CSC structure...
        It takes 2.413 seconds.
Building the CSC structure...
        It takes 2.439 seconds.
Building the CSC structure...
        It takes 2.442 seconds.
Building the CSC structure...
        It takes 2.438 seconds.
Building the CSC structure...
        It takes 2.488 seconds.
Building the CSC structure...
        It takes 2.502 seconds.
Building the CSC structure...
        It takes 2.534 seconds.
Building the CSC structure...
        It takes 2.594 seconds.
Building the CSC structure...
        It takes 2.630 seconds.
Building the CSC structure...
        It takes 2.635 seconds.
Building the CSC structure...
        It takes 2.639 seconds.
Building the CSC structure...
        It takes 2.689 seconds.
Building the CSC structure...
        It takes 2.274 seconds.
        It takes 2.342 seconds.
        It takes 2.330 seconds.
        It takes 2.352 seconds.
        It takes 2.332 seconds.
        It takes 2.389 seconds.
        It takes 2.384 seconds.
        It takes 2.378 seconds.
        It takes 2.437 seconds.
        It takes 2.392 seconds.
        It takes 2.416 seconds.
        It takes 2.352 seconds.
        It takes 2.324 seconds.
        It takes 2.386 seconds.
        It takes 2.366 seconds.
        It takes 2.323 seconds.
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
        It takes 0.269 seconds.
Building the Label Vector...
        It takes 0.030 seconds.
        It takes 0.262 seconds.
Building the Label Vector...
Building the Feature Vector...
Building the Feature Vector...
        It takes 0.038 seconds.
        It takes 0.316 seconds.
Building the Label Vector...
Building the Feature Vector...
        It takes 0.038 seconds.
        It takes 0.282 seconds.
Building the Label Vector...
        It takes 0.304 seconds.
Building the Label Vector...
Building the Feature Vector...
        It takes 0.036 seconds.
        It takes 0.344 seconds.
Building the Label Vector...
        It takes 0.031 seconds.
        It takes 0.301 seconds.
Building the Label Vector...
Building the Feature Vector...
        It takes 0.349 seconds.
Building the Label Vector...
        It takes 0.045 seconds.
        It takes 0.037 seconds.
        It takes 0.034 seconds.
        It takes 0.275 seconds.
Building the Label Vector...
Building the Feature Vector...
        It takes 0.294 seconds.
Building the Label Vector...
        It takes 0.031 seconds.
        It takes 0.032 seconds.
The graph dataset locates at /shared_hdd_storage/jingjichen/gnn_datasets/pipeline_parallel_datasets/reddit/64_parts
The number of GCNII layers: 32
The number of hidden units: 100
The number of training epoches: 50
Learning rate: 0.001000
The partition strategy: model
The dropout rate: 0.500
The checkpointed weight file: /tmp/saved_weights_pipe
The random seed: 1
Number of classes: 41
Number of feature dimensions: 602
Number of vertices: 232965
Number of GPUs: 16
        It takes 0.287 seconds.
Building the Label Vector...
Building the Feature Vector...
        It takes 0.031 seconds.
        It takes 0.296 seconds.
Building the Feature Vector...
Building the Label Vector...
        It takes 0.033 seconds.
        It takes 0.279 seconds.
Building the Label Vector...
        It takes 0.030 seconds.
        It takes 0.318 seconds.
Building the Label Vector...
        It takes 0.035 seconds.
        It takes 0.314 seconds.
Building the Label Vector...
        It takes 0.279 seconds.
Building the Label Vector...
        It takes 0.031 seconds.
        It takes 0.034 seconds.
GPU 0, layer [0, 2)
GPU 1, layer [2, 4)
GPU 2, layer [4, 6)
GPU 3, layer [6, 8)
GPU 4, layer [8, 10)
GPU 5, layer [10, 12)
GPU 6, layer [12, 14)
GPU 7, layer [14, 16)
GPU 8, layer [16, 18)
GPU 9, layer [18, 20)
GPU 10, layer [20, 22)
GPU 11, layer [22, 24)
GPU 12, layer [24, 26)
GPU 13, layer [26, 28)
GPU 14, layer [28, 30)
GPU 15, layer [30, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 2)
GPU 1, layer [2, 4)
GPU 2, layer [4, 6)
GPU 3, layer [6, 8)
GPU 4, layer [8, 10)
GPU 5, layer [10, 12)
GPU 6, layer [12, 14)
GPU 7, layer [14, 16)
GPU 8, layer [16, 18)
GPU 9, layer [18, 20)
GPU 10, layer [20, 22)
GPU 11, layer [22, 24)
GPU 12, layer [24, 26)
GPU 13, layer [26, 28)
GPU 14, layer [28, 30)
GPU 15, layer [30, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 2)
GPU 1, layer [2, 4)
GPU 2, layer [4, 6)
GPU 3, layer [6, 8)
GPU 4, layer [8, 10)
GPU 5, layer [10, 12)
GPU 6, layer [12, 14)
GPU 7, layer [14, 16)
GPU 8, layer [16, 18)
GPU 9, layer [18, 20)
GPU 10, layer [20, 22)
GPU 11, layer [22, 24)
GPU 12, layer [24, 26)
GPU 13, layer [26, 28)
GPU 14, layer [28, 30)
GPU 15, layer [30, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 2)
GPU 1, layer [2, 4)
GPU 2, layer [4, 6)
GPU 3, layer [6, 8)
GPU 4, layer [8, 10)
GPU 5, layer [10, 12)
GPU 6, layer [12, 14)
GPU 7, layer [14, 16)
GPU 8, layer [16, 18)
GPU 9, layer [18, 20)
GPU 10, layer [20, 22)
GPU 11, layer [22, 24)
GPU 12, layer [24, 26)
GPU 13, layer [26, 28)
GPU 14, layer [28, 30)
GPU 15, layer [30, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 2)
GPU 1, layer [2, 4)
GPU 2, layer [4, 6)
GPU 3, layer [6, 8)
GPU 4, layer [8, 10)
GPU 5, layer [10, 12)
GPU 6, layer [12, 14)
GPU 7, layer [14, 16)
GPU 8, layer [16, 18)
GPU 9, layer [18, 20)
GPU 10, layer [20, 22)
GPU 11, layer [22, 24)
GPU 12, layer [24, 26)
GPU 13, layer [26, 28)
GPU 14, layer [28, 30)
GPU 15, layer [30, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 2)
GPU 1, layer [2, 4)
GPU 2, layer [4, 6)
GPU 3, layer [6, 8)
GPU 4, layer [8, 10)
GPU 5, layer [10, 12)
GPU 6, layer [12, 14)
GPU 7, layer [14, 16)
GPU 8, layer [16, 18)
GPU 9, layer [18, 20)
GPU 10, layer [20, 22)
GPU 11, layer [22, 24)
GPU 12, layer [24, 26)
GPU 13, layer [26, 28)
GPU 14, layer [28, 30)
GPU 15, layer [30, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 2)
GPU 1, layer [2, 4)
GPU 2, layer [4, 6)
GPU 3, layer [6, 8)
GPU 4, layer [8, 10)
GPU 5, layer [10, 12)
GPU 6, layer [12, 14)
GPU 7, layer [14, 16)
GPU 8, layer [16, 18)
GPU 9, layer [18, 20)
GPU 10, layer [20, 22)
GPU 11, layer [22, 24)
GPU 12, layer [24, 26)
GPU 13, layer [26, 28)
GPU 14, layer [28, 30)
GPU 15, layer [30, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 2)
GPU 1, layer [2, 4)
GPU 2, layer [4, 6)
GPU 3, layer [6, 8)
GPU 4, layer [8, 10)
GPU 5, layer [10, 12)
GPU 6, layer [12, 14)
GPU 7, layer [14, 16)
GPU 8, layer [16, 18)
GPU 9, layer [18, 20)
GPU 10, layer [20, 22)
GPU 11, layer [22, 24)
GPU 12, layer [24, 26)
GPU 13, layer [26, 28)
GPU 14, layer [28, 30)
GPU 15, layer [30, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
train nodes 153431, valid nodes 23831, test nodes 55703
GPU 0, layer [0, 2)
GPU 1, layer [2, 4)
GPU 2, layer [4, 6)
GPU 3, layer [6, 8)
GPU 4, layer [8, 10)
GPU 5, layer [10, 12)
GPU 6, layer [12, 14)
GPU 7, layer [14, 16)
GPU 8, layer [16, 18)
GPU 9, layer [18, 20)
GPU 10, layer [20, 22)
GPU 11, layer [22, 24)
GPU 12, layer [24, 26)
GPU 13, layer [26, 28)
GPU 14, layer [28, 30)
GPU 15, layer [30, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
Chunks (number of global chunks: 64): 0-[0, 3383) 1-[3383, 7843) 2-[7843, 12526) 3-[12526, 16576) 4-[16576, 20087) 5-[20087, 24086) 6-[24086, 27150) 7-[27150, 31875) 8-[31875, 38059) ... 63-[229059, 232965)
GPU 0, layer [0, 2)
GPU 1, layer [2, 4)
GPU 2, layer [4, 6)
GPU 3, layer [6, 8)
GPU 4, layer [8, 10)
GPU 5, layer [10, 12)
GPU 6, layer [12, 14)
GPU 7, layer [14, 16)
GPU 8, layer [16, 18)
GPU 9, layer [18, 20)
GPU 10, layer [20, 22)
GPU 11, layer [22, 24)
GPU 12, layer [24, 26)
GPU 13, layer [26, 28)
GPU 14, layer [28, 30)
GPU 15, layer [30, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
232965, 114848857, 114848857
Number of vertices per chunk: 3641
GPU 0, layer [0, 2)
GPU 1, layer [2, 4)
GPU 2, layer [4, 6)
GPU 3, layer [6, 8)
GPU 4, layer [8, 10)
GPU 5, layer [10, 12)
GPU 6, layer [12, 14)
GPU 7, layer [14, 16)
GPU 8, layer [16, 18)
GPU 9, layer [18, 20)
GPU 10, layer [20, 22)
GPU 11, layer [22, 24)
GPU 12, layer [24, 26)
GPU 13, layer [26, 28)
GPU 14, layer [28, 30)
GPU 15, layer [30, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
232965, 114848857, 114848857
GPU 0, layer [0, 2)
GPU 1, layer [2, 4)
GPU 2, layer [4, 6)
GPU 3, layer [6, 8)
GPU 4, layer [8, 10)
GPU 5, layer [10, 12)
GPU 6, layer [12, 14)
GPU 7, layer [14, 16)
GPU 8, layer [16, 18)
GPU 9, layer [18, 20)
GPU 10, layer [20, 22)
GPU 11, layer [22, 24)
GPU 12, layer [24, 26)
GPU 13, layer [26, 28)
GPU 14, layer [28, 30)
GPU 15, layer [30, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
Number of vertices per chunk: 3641
232965, 114848857, 114848857
232965, 114848857, 114848857
Number of vertices per chunk: 3641
Number of vertices per chunk: 3641
232965, 114848857, 114848857
Number of vertices per chunk: 3641
232965, 114848857, 114848857
GPU 0, layer [0, 2)
GPU 1, layer [2, 4)
GPU 2, layer [4, 6)
GPU 3, layer [6, 8)
GPU 4, layer [8, 10)
GPU 5, layer [10, 12)
GPU 6, layer [12, 14)
GPU 7, layer [14, 16)
GPU 8, layer [16, 18)
GPU 9, layer [18, 20)
GPU 10, layer [20, 22)
GPU 11, layer [22, 24)
GPU 12, layer [24, 26)
GPU 13, layer [26, 28)
GPU 14, layer [28, 30)
GPU 15, layer [30, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
Number of vertices per chunk: 3641
232965, 114848857, 114848857
Number of vertices per chunk: 3641
232965, 114848857, 114848857
Number of vertices per chunk: 3641
GPU 0, layer [0, 2)
GPU 1, layer [2, 4)
GPU 2, layer [4, 6)
GPU 3, layer [6, 8)
GPU 4, layer [8, 10)
GPU 5, layer [10, 12)
GPU 6, layer [12, 14)
GPU 7, layer [14, 16)
GPU 8, layer [16, 18)
GPU 9, layer [18, 20)
GPU 10, layer [20, 22)
GPU 11, layer [22, 24)
GPU 12, layer [24, 26)
GPU 13, layer [26, 28)
GPU 14, layer [28, 30)
GPU 15, layer [30, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
232965, 114848857, 114848857
Number of vertices per chunk: 3641
GPU 0, layer [0, 2)
GPU 1, layer [2, 4)
GPU 2, layer [4, 6)
GPU 3, layer [6, 8)
GPU 4, layer [8, 10)
GPU 5, layer [10, 12)
GPU 6, layer [12, 14)
GPU 7, layer [14, 16)
GPU 8, layer [16, 18)
GPU 9, layer [18, 20)
GPU 10, layer [20, 22)
GPU 11, layer [22, 24)
GPU 12, layer [24, 26)
GPU 13, layer [26, 28)
GPU 14, layer [28, 30)
GPU 15, layer [30, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 2)
GPU 1, layer [2, 4)
GPU 2, layer [4, 6)
GPU 3, layer [6, 8)
GPU 4, layer [8, 10)
GPU 5, layer [10, 12)
GPU 6, layer [12, 14)
GPU 7, layer [14, 16)
GPU 8, layer [16, 18)
GPU 9, layer [18, 20)
GPU 10, layer [20, 22)
GPU 11, layer [22, 24)
GPU 12, layer [24, 26)
GPU 13, layer [26, 28)
GPU 14, layer [28, 30)
GPU 15, layer [30, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
232965, 114848857, 114848857
Number of vertices per chunk: 3641
232965, 114848857, 114848857
Number of vertices per chunk: 3641
232965, 114848857, 114848857
Number of vertices per chunk: 3641
232965, 114848857, 114848857
Number of vertices per chunk: 3641
232965, 114848857, 114848857
Number of vertices per chunk: 3641
232965, 114848857, 114848857
Number of vertices per chunk: 3641
232965, 114848857, 114848857
Number of vertices per chunk: 3641
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
***** Start profiling the layer-level communication performance *******
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
The layer-level communication performance: 55.874 Gbps (per GPU), 893.976 Gbps (aggregated)
The layer-level communication performance: 55.813 Gbps (per GPU), 893.008 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 55.608 Gbps (per GPU), 889.735 Gbps (aggregated)
The layer-level communication performance: 55.560 Gbps (per GPU), 888.960 Gbps (aggregated)
The layer-level communication performance: 55.528 Gbps (per GPU), 888.440 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 55.424 Gbps (per GPU), 886.779 Gbps (aggregated)
The layer-level communication performance: 55.417 Gbps (per GPU), 886.679 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 55.377 Gbps (per GPU), 886.036 Gbps (aggregated)
The layer-level communication performance: 55.391 Gbps (per GPU), 886.253 Gbps (aggregated)
The layer-level communication performance: 55.329 Gbps (per GPU), 885.272 Gbps (aggregated)
The layer-level communication performance: 55.306 Gbps (per GPU), 884.892 Gbps (aggregated)
The layer-level communication performance: 55.288 Gbps (per GPU), 884.614 Gbps (aggregated)
The layer-level communication performance: 55.261 Gbps (per GPU), 884.177 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 55.221 Gbps (per GPU), 883.537 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 55.134 Gbps (per GPU), 882.148 Gbps (aggregated)
The layer-level communication performance: 55.112 Gbps (per GPU), 881.794 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The graph-level communication performance (supernode = 2): 158.530 Gbps (per GPU), 2536.478 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.533 Gbps (per GPU), 2536.526 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.542 Gbps (per GPU), 2536.670 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.638 Gbps (per GPU), 2538.212 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.545 Gbps (per GPU), 2536.718 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.527 Gbps (per GPU), 2536.433 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.542 Gbps (per GPU), 2536.670 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.530 Gbps (per GPU), 2536.478 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.542 Gbps (per GPU), 2536.670 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.530 Gbps (per GPU), 2536.478 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.542 Gbps (per GPU), 2536.670 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.548 Gbps (per GPU), 2536.765 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.545 Gbps (per GPU), 2536.718 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.530 Gbps (per GPU), 2536.478 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.542 Gbps (per GPU), 2536.670 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.543 Gbps (per GPU), 2536.680 Gbps (aggregated, cluster-wide)
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
The graph-level communication performance (supernode = 4): 100.825 Gbps (per GPU), 1613.208 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 100.826 Gbps (per GPU), 1613.220 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 100.829 Gbps (per GPU), 1613.258 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 100.828 Gbps (per GPU), 1613.246 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 100.825 Gbps (per GPU), 1613.194 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 100.825 Gbps (per GPU), 1613.207 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 100.827 Gbps (per GPU), 1613.233 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 100.826 Gbps (per GPU), 1613.220 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 100.829 Gbps (per GPU), 1613.271 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 100.827 Gbps (per GPU), 1613.233 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 100.828 Gbps (per GPU), 1613.246 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 100.826 Gbps (per GPU), 1613.220 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 100.827 Gbps (per GPU), 1613.233 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 100.827 Gbps (per GPU), 1613.233 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 100.825 Gbps (per GPU), 1613.207 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 100.826 Gbps (per GPU), 1613.220 Gbps (aggregated, cluster-wide)
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
The graph-level communication performance (supernode = 8): 27.611 Gbps (per GPU), 441.781 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 27.612 Gbps (per GPU), 441.786 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 27.611 Gbps (per GPU), 441.776 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 27.610 Gbps (per GPU), 441.767 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 27.611 Gbps (per GPU), 441.774 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 27.611 Gbps (per GPU), 441.783 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 27.611 Gbps (per GPU), 441.770 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 27.611 Gbps (per GPU), 441.771 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 27.611 Gbps (per GPU), 441.776 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 27.611 Gbps (per GPU), 441.780 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 27.609 Gbps (per GPU), 441.751 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 27.610 Gbps (per GPU), 441.767 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 27.611 Gbps (per GPU), 441.772 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 27.611 Gbps (per GPU), 441.783 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 27.611 Gbps (per GPU), 441.776 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 27.609 Gbps (per GPU), 441.740 Gbps (aggregated, cluster-wide)
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
The graph-level communication performance (supernode = 16): 22.086 Gbps (per GPU), 353.381 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 22.086 Gbps (per GPU), 353.384 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 22.086 Gbps (per GPU), 353.380 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 22.086 Gbps (per GPU), 353.376 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 22.087 Gbps (per GPU), 353.385 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 22.086 Gbps (per GPU), 353.378 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 22.086 Gbps (per GPU), 353.381 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 22.086 Gbps (per GPU), 353.376 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 22.086 Gbps (per GPU), 353.375 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 22.086 Gbps (per GPU), 353.378 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 22.086 Gbps (per GPU), 353.378 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 22.086 Gbps (per GPU), 353.377 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 22.086 Gbps (per GPU), 353.381 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 22.086 Gbps (per GPU), 353.373 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 22.086 Gbps (per GPU), 353.380 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 22.086 Gbps (per GPU), 353.376 Gbps (aggregated, cluster-wide)
 LType   LT0   LT1   LT2 Ratio  VSum  ESum
 chk_0  1.86ms  1.53ms  1.43ms  1.30  3.38K  1.78M
 chk_1  1.94ms  1.49ms  1.39ms  1.39  4.46K  1.78M
 chk_2  1.97ms  1.50ms  1.39ms  1.42  4.68K  1.74M
 chk_3  1.91ms  1.51ms  1.42ms  1.34  4.05K  1.77M
 chk_4  1.84ms  1.50ms  1.40ms  1.32  3.51K  1.79M
 chk_5  1.80ms  1.40ms  1.32ms  1.36  4.00K  1.83M
 chk_6  1.73ms  1.40ms  1.34ms  1.29  3.06K  1.85M
 chk_7  1.95ms  1.68ms  1.37ms  1.42  4.72K  1.71M
 chk_8  2.06ms  1.46ms  1.33ms  1.55  6.18K  1.69M
 chk_9  1.66ms  1.41ms  1.36ms  1.22  2.07K  1.90M
chk_10  1.74ms  1.43ms  1.37ms  1.27  2.79K  1.81M
chk_11  2.07ms  1.56ms  1.46ms  1.42  4.93K  1.76M
chk_12  1.77ms  1.48ms  1.41ms  1.26  2.74K  1.81M
chk_13  1.85ms  1.49ms  1.41ms  1.32  3.26K  1.78M
chk_14  1.91ms  1.50ms  1.40ms  1.36  4.03K  1.77M
chk_15  1.73ms  1.36ms  1.28ms  1.35  3.26K  1.84M
chk_16  1.86ms  1.48ms  1.40ms  1.32  3.22K  1.78M
chk_17  1.89ms  1.51ms  1.42ms  1.33  3.69K  1.82M
chk_18  1.96ms  1.47ms  1.36ms  1.44  4.98K  1.78M
chk_19  1.84ms  1.47ms  1.39ms  1.33  3.53K  1.77M
chk_20  1.84ms  1.49ms  1.41ms  1.31  3.14K  1.79M
chk_21  1.69ms  1.42ms  1.35ms  1.25  2.52K  1.85M
chk_22  1.74ms  1.37ms  1.29ms  1.35  3.62K  1.76M
chk_23  1.82ms  1.45ms  1.37ms  1.33  3.26K  1.81M
chk_24  1.78ms  1.40ms  1.32ms  1.35  3.29K  1.81M
chk_25  1.80ms  1.39ms  1.47ms  1.30  4.05K  1.77M
chk_26  1.66ms  1.38ms  1.31ms  1.26  2.41K  1.87M
chk_27  2.03ms  1.63ms  1.53ms  1.33  3.85K  1.76M
chk_28  1.75ms  1.44ms  1.37ms  1.28  2.90K  1.83M
chk_29  1.93ms  1.56ms  1.47ms  1.32  3.43K  1.77M
chk_30  1.81ms  1.54ms  1.47ms  1.24  2.37K  1.80M
chk_31  1.87ms  1.57ms  1.49ms  1.25  2.71K  1.87M
chk_32  1.95ms  1.41ms  1.29ms  1.51  5.56K  1.69M
chk_33  1.94ms  1.42ms  1.30ms  1.49  5.31K  1.75M
chk_34  1.88ms  1.46ms  1.37ms  1.37  4.07K  1.78M
chk_35  1.85ms  1.40ms  1.29ms  1.44  4.52K  1.75M
chk_36  1.75ms  1.49ms  1.43ms  1.23  2.25K  1.86M
chk_37  1.73ms  1.43ms  1.35ms  1.28  2.93K  1.83M
chk_38  1.86ms  1.56ms  1.49ms  1.26  2.63K  1.78M
chk_39  1.89ms  1.42ms  1.31ms  1.44  4.47K  1.76M
chk_40  1.88ms  1.45ms  1.36ms  1.38  4.06K  1.77M
chk_41  1.95ms  1.46ms  1.35ms  1.45  4.79K  1.73M
chk_42  1.85ms  1.44ms  1.36ms  1.36  3.84K  1.81M
chk_43  1.96ms  1.49ms  1.37ms  1.43  4.60K  1.74M
chk_44  1.81ms  1.49ms  1.42ms  1.27  2.77K  1.81M
chk_45  1.80ms  1.50ms  1.42ms  1.26  2.70K  1.86M
chk_46  1.97ms  1.59ms  1.51ms  1.31  3.46K  1.77M
chk_47  1.93ms  1.43ms  1.32ms  1.46  4.89K  1.70M
chk_48  1.86ms  1.55ms  1.47ms  1.27  2.91K  1.80M
chk_49  1.80ms  1.53ms  1.46ms  1.23  2.35K  1.86M
chk_50  1.67ms  1.35ms  1.27ms  1.32  2.75K  1.89M
chk_51  1.91ms  1.50ms  1.38ms  1.38  4.12K  1.74M
chk_52  1.97ms  1.49ms  1.37ms  1.44  4.93K  1.73M
chk_53  1.68ms  1.39ms  1.31ms  1.28  2.77K  1.86M
chk_54  1.82ms  1.45ms  1.36ms  1.35  3.86K  1.78M
chk_55  1.72ms  1.42ms  1.34ms  1.29  2.83K  1.80M
chk_56  1.87ms  1.51ms  1.42ms  1.31  3.34K  1.78M
chk_57  2.10ms  1.59ms  1.47ms  1.42  5.03K  1.74M
chk_58  1.83ms  1.47ms  1.39ms  1.31  3.16K  1.87M
chk_59  1.89ms  1.45ms  1.34ms  1.42  4.53K  1.75M
chk_60  1.71ms  1.41ms  1.33ms  1.29  2.98K  1.82M
chk_61  1.85ms  1.48ms  1.38ms  1.34  3.55K  1.77M
chk_62  1.69ms  1.37ms  1.29ms  1.31  3.02K  1.79M
chk_63  1.88ms  1.48ms  1.39ms  1.35  3.91K  1.78M
   Avg  1.85  1.47  1.38
   Max  2.10  1.68  1.53
   Min  1.66  1.35  1.27
 Ratio  1.26  1.25  1.20
   Var  0.01  0.00  0.00
Profiling takes 3.565 s
*** Node 0, starting model training...
Num Stages: 16 / 16
Node 0, Pipeline Input Tensor: NULL
Node 0, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 0 owns the model-level partition [0, 18)
*** Node 0, constructing the helper classes...
Node 0, Local Vertex Begin: 0, Num Local Vertices: 232965
*** Node 1, starting model training...
Num Stages: 16 / 16
Node 1, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 1, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 1 owns the model-level partition [18, 34)
*** Node 1, constructing the helper classes...
Node 1, Local Vertex Begin: 0, Num Local Vertices: 232965
*** Node 2, starting model training...
Num Stages: 16 / 16
Node 2, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 2, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 2 owns the model-level partition [34, 50)
*** Node 2, constructing the helper classes...
Node 2, Local Vertex Begin: 0, Num Local Vertices: 232965
*** Node 3, starting model training...
Num Stages: 16 / 16
Node 3, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 3, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 3 owns the model-level partition [50, 66)
*** Node 3, constructing the helper classes...
Node 3, Local Vertex Begin: 0, Num Local Vertices: 232965
*** Node 4, starting model training...
Num Stages: 16 / 16
Node 4, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 4, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 4 owns the model-level partition [66, 82)
*** Node 4, constructing the helper classes...
Node 4, Local Vertex Begin: 0, Num Local Vertices: 232965
*** Node 5, starting model training...
Num Stages: 16 / 16
Node 5, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 5, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 5 owns the model-level partition [82, 98)
*** Node 5, constructing the helper classes...
Node 5, Local Vertex Begin: 0, Num Local Vertices: 232965
*** Node 6, starting model training...
Num Stages: 16 / 16
Node 6, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 6, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 6 owns the model-level partition [98, 114)
*** Node 6, constructing the helper classes...
Node 6, Local Vertex Begin: 0, Num Local Vertices: 232965
*** Node 7, starting model training...
Num Stages: 16 / 16
Node 7, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 7, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 7 owns the model-level partition [114, 130)
*** Node 7, constructing the helper classes...
Node 7, Local Vertex Begin: 0, Num Local Vertices: 232965
*** Node 8, starting model training...
Num Stages: 16 / 16
Node 8, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 8, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 8 owns the model-level partition [130, 146)
*** Node 8, constructing the helper classes...
*** Node 12, starting model training...
Num Stages: 16 / 16
Node 12, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 12, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 12 owns the model-level partition [194, 210)
*** Node 12, constructing the helper classes...
Node 12, Local Vertex Begin: 0, Num Local Vertices: 232965
*** Node 9, starting model training...
Num Stages: 16 / 16
Node 9, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 9, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 9 owns the model-level partition [146, 162)
*** Node 9, constructing the helper classes...
Node 9, Local Vertex Begin: 0, Num Local Vertices: 232965
*** Node 13, starting model training...
Num Stages: 16 / 16
Node 13, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 13, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 13 owns the model-level partition [210, 226)
*** Node 13, constructing the helper classes...
Node 13, Local Vertex Begin: 0, Num Local Vertices: 232965
*** Node 10, starting model training...
Num Stages: 16 / 16
Node 10, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 10, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 10 owns the model-level partition [162, 178)
*** Node 10, constructing the helper classes...
Node 10, Local Vertex Begin: 0, Num Local Vertices: 232965
*** Node 14, starting model training...
Num Stages: 16 / 16
Node 14, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 14, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 14 owns the model-level partition [226, 242)
*** Node 14, constructing the helper classes...
*** Node 11, starting model training...
Num Stages: 16 / 16
Node 11, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 11, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 11 owns the model-level partition [178, 194)
*** Node 11, constructing the helper classes...
Node 11, Local Vertex Begin: 0, Num Local Vertices: 232965
*** Node 15, starting model training...
Num Stages: 16 / 16
Node 15, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 15, Pipeline Output Tensor: NULL
*** Node 15 owns the model-level partition [242, 257)
*** Node 15, constructing the helper classes...
Node 15, Local Vertex Begin: 0, Num Local Vertices: 232965
Node 8, Local Vertex Begin: 0, Num Local Vertices: 232965
Node 14, Local Vertex Begin: 0, Num Local Vertices: 232965
*** Node 0, setting up some other necessary information...
*** Node 15, setting up some other necessary information...
*** Node 1, setting up some other necessary information...
*** Node 13, setting up some other necessary information...
*** Node 2, setting up some other necessary information...
*** Node 7, setting up some other necessary information...
*** Node 3, setting up some other necessary information...
*** Node 11, setting up some other necessary information...
*** Node 12, setting up some other necessary information...
*** Node 14, setting up some other necessary information...
*** Node 5, setting up some other necessary information...
*** Node 4, setting up some other necessary information...
*** Node 6, setting up some other necessary information...
*** Node 8, setting up some other necessary information...
*** Node 10, setting up some other necessary information...
*** Node 9, setting up some other necessary information...
+++++++++ Node 12 initializing the weights for op[194, 210)...
+++++++++ Node 1 initializing the weights for op[18, 34)...
+++++++++ Node 4 initializing the weights for op[66, 82)...
+++++++++ Node 13 initializing the weights for op[210, 226)...
+++++++++ Node 2 initializing the weights for op[34, 50)...
+++++++++ Node 5 initializing the weights for op[82, 98)...
+++++++++ Node 15 initializing the weights for op[242, 257)...
+++++++++ Node 0 initializing the weights for op[0, 18)...
+++++++++ Node 7 initializing the weights for op[114, 130)...
+++++++++ Node 8 initializing the weights for op[130, 146)...
+++++++++ Node 14 initializing the weights for op[226, 242)...
+++++++++ Node 3 initializing the weights for op[50, 66)...
+++++++++ Node 6 initializing the weights for op[98, 114)...
+++++++++ Node 9 initializing the weights for op[146, 162)...
+++++++++ Node 10 initializing the weights for op[162, 178)...
+++++++++ Node 11 initializing the weights for op[178, 194)...
Node 15, discovering the vertices that will be sent across graph boundary...
Node 3, discovering the vertices that will be sent across graph boundary...
Node 8, discovering the vertices that will be sent across graph boundary...
Node 12, discovering the vertices that will be sent across graph boundary...
Node 0, discovering the vertices that will be sent across graph boundary...
The number of mirror vertices: 0
Node 0, discovering the vertices that will be received across the graph boundary.
Node 4, discovering the vertices that will be sent across graph boundary...
Node 9, discovering the vertices that will be sent across graph boundary...
Node 9, discovering the vertices that will be received across the graph boundary.
Node 13, discovering the vertices that will be sent across graph boundary...
Node 1, discovering the vertices that will be sent across graph boundary...
Node 1, discovering the vertices that will be received across the graph boundary.
Node 5, discovering the vertices that will be sent across graph boundary...
Node 5, discovering the vertices that will be received across the graph boundary.
Node 11, discovering the vertices that will be sent across graph boundary...
Node 11, discovering the vertices that will be received across the graph boundary.
Node 14, discovering the vertices that will be sent across graph boundary...
Node 14, discovering the vertices that will be received across the graph boundary.
Node 2, discovering the vertices that will be sent across graph boundary...
Node 2, discovering the vertices that will be received across the graph boundary.
Node 6, discovering the vertices that will be sent across graph boundary...
Node 6, discovering the vertices that will be received across the graph boundary.
Node 8, discovering the vertices that will be received across the graph boundary.
Node 12, discovering the vertices that will be received across the graph boundary.
Node 3, discovering the vertices that will be received across the graph boundary.
Node 7, discovering the vertices that will be sent across graph boundary...
Node 7, discovering the vertices that will be received across the graph boundary.
Node 10, discovering the vertices that will be sent across graph boundary...
Node 10, discovering the vertices that will be received across the graph boundary.
Node 13, discovering the vertices that will be received across the graph boundary.
Node 4, discovering the vertices that will be received across the graph boundary.
Node 15, discovering the vertices that will be received across the graph boundary.
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
*** Node 8, starting task scheduling...
*** Node 12, starting task scheduling...
*** Node 4, starting task scheduling...
*** Node 9, starting task scheduling...
*** Node 13, starting task scheduling...
*** Node 5, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 10, starting task scheduling...
*** Node 14, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 6, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 11, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 15, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 7, starting task scheduling...
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
*** Node 0, starting task scheduling...



The learning rate specified by the user: 0.001000000
*** Node 1, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 2, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 3, starting task scheduling...
The learning rate specified by the user: 0.001000000
	Epoch 1:	Loss 4.3741	TrainAcc 0.0277	ValidAcc 0.0250	TestAcc 0.0247	BestValid 0.0250
	Epoch 50:	Loss 3.2951	TrainAcc 0.0690	ValidAcc 0.0584	TestAcc 0.0574	BestValid 0.0584
****** Epoch Time (Excluding Evaluation Cost): 0.293 s ******
****** Breakdown Analysis ******
Cluster-Wide Average, Bubble-Pipeline: 75.358 ms (Max: 77.701, Min: 46.858, Sum: 1205.728)
Cluster-Wide Average, Compute: 156.779 ms (Max: 182.074, Min: 150.484, Sum: 2508.459)
Cluster-Wide Average, Communication-Layer: 26.342 ms (Max: 29.745, Min: 16.802, Sum: 421.473)
Cluster-Wide Average, Bubble-Imbalance: 30.870 ms (Max: 36.516, Min: 14.271, Sum: 493.917)
Cluster-Wide Average, Communication-Graph: 0.488 ms (Max: 0.614, Min: 0.410, Sum: 7.805)
Cluster-Wide Average, Optimization: 0.090 ms (Max: 0.092, Min: 0.087, Sum: 1.437)
Cluster-Wide Average, Others: 2.948 ms (Max: 31.149, Min: 1.051, Sum: 47.173)
****** Breakdown Sum: 292.875 ms ******
Cluster-Wide Average, GPU Memory Consumption: 4.807 GB (Max: 6.321, Min: 4.299, Sum: 76.906)
Cluster-Wide Average, Graph-Level Communication Throughput: -nan Gbps (Max: -nan, Min: -nan, Sum: -nan)
Cluster-Wide Average, Layer-Level Communication Throughput: 52.744 Gbps (Max: 58.781, Min: 43.525, Sum: 843.907)
Layer-level communication (cluster-wide, per-epoch): 2.604 GB
Graph-level communication (cluster-wide, per-epoch): 0.000 GB
Weight-sync communication (cluster-wide, per-epoch): 0.000 GB
Total communication (cluster-wide, per-epoch): 2.604 GB
****** Accuracy Results ******
Highest valid_acc: 0.0584
Target test_acc: 0.0574
Epoch to reach the target acc: 49
[MPI Rank 8] Success 
[MPI Rank 12] Success 
[MPI Rank 0] Success 
[MPI Rank 4] Success 
[MPI Rank 9] Success 
[MPI Rank 13] Success 
[MPI Rank 1] Success 
[MPI Rank 5] Success 
[MPI Rank 10] Success 
[MPI Rank 14] Success 
[MPI Rank 2] Success 
[MPI Rank 6] Success 
[MPI Rank 11] Success 
[MPI Rank 15] Success 
[MPI Rank 3] Success 
[MPI Rank 7] Success 
