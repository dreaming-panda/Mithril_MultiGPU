Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
DONE MPI INIT
DONE MPI INIT
Initialized node 1 on machine gnerv2
DONE MPI INIT
Initialized node 2 on machine gnerv2
Initialized node 0 on machine gnerv2
DONE MPI INIT
Initialized node 3 on machine gnerv2
DONE MPI INITDONE MPI INIT
Initialized node 7 on machine gnerv3
DONE MPI INIT
Initialized node 4 on machine gnerv3
DONE MPI INIT
Initialized node 5 on machine gnerv3

Initialized node 6 on machine gnerv3
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
        It takes 2.358 seconds.
Building the CSC structure...
        It takes 2.366 seconds.
Building the CSC structure...
        It takes 2.416 seconds.
Building the CSC structure...
        It takes 2.441 seconds.
Building the CSC structure...
        It takes 2.448 seconds.
Building the CSC structure...
        It takes 2.472 seconds.
Building the CSC structure...
        It takes 2.635 seconds.
Building the CSC structure...
        It takes 2.720 seconds.
Building the CSC structure...
        It takes 2.295 seconds.
        It takes 2.319 seconds.
        It takes 2.337 seconds.
        It takes 2.350 seconds.
        It takes 2.362 seconds.
        It takes 2.364 seconds.
        It takes 2.372 seconds.
        It takes 2.380 seconds.
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
        It takes 0.250 seconds.
Building the Label Vector...
Building the Feature Vector...
        It takes 0.034 seconds.
        It takes 0.267 seconds.
Building the Label Vector...
        It takes 0.040 seconds.
        It takes 0.267 seconds.
Building the Label Vector...
Building the Feature Vector...
        It takes 0.310 seconds.
Building the Label Vector...
        It takes 0.030 seconds.
        It takes 0.033 seconds.
        It takes 0.314 seconds.
Building the Label Vector...
        It takes 0.041 seconds.
Building the Feature Vector...
        It takes 0.289 seconds.
Building the Label Vector...
        It takes 0.032 seconds.
        It takes 0.294 seconds.
Building the Label Vector...
        It takes 0.032 seconds.
The graph dataset locates at /shared_hdd_storage/jingjichen/gnn_datasets/pipeline_parallel_datasets/reddit/32_parts
The number of GCNII layers: 32
The number of hidden units: 100
The number of training epoches: 50
Learning rate: 0.001000
The partition strategy: model
The dropout rate: 0.500
The checkpointed weight file: /tmp/saved_weights_pipe
The random seed: 1
Number of classes: 41
Number of feature dimensions: 602
Number of vertices: 232965
Number of GPUs: 8
        It takes 0.279 seconds.
Building the Label Vector...
        It takes 0.033 seconds.
GPU 0, layer [0, 4)
GPU 1, layer [4, 8)
GPU 2, layer [8, 12)
GPU 3, layer [12, 16)
GPU 4, layer [16, 20)
GPU 5, layer [20, 24)
GPU 6, layer [24, 28)
GPU 7, layer [28, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 4)
GPU 1, layer [4, 8)
GPU 2, layer [8, 12)
GPU 3, layer [12, 16)
GPU 4, layer [16, 20)
GPU 5, layer [20, 24)
GPU 6, layer [24, 28)
GPU 7, layer [28, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 4)
GPU 1, layer [4, 8)
GPU 2, layer [8, 12)
GPU 3, layer [12, 16)
GPU 4, layer [16, 20)
GPU 5, layer [20, 24)
GPU 6, layer [24, 28)
GPU 7, layer [28, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 4)
GPU 1, layer [4, 8)
GPU 2, layer [8, 12)
GPU 3, layer [12, 16)
GPU 4, layer [16, 20)
GPU 5, layer [20, 24)
GPU 6, layer [24, 28)
GPU 7, layer [28, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 4)
GPU 1, layer [4, 8)
GPU 2, layer [8, 12)
GPU 3, layer [12, 16)
GPU 4, layer [16, 20)
GPU 5, layer [20, 24)
GPU 6, layer [24, 28)
GPU 7, layer [28, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 4)
GPU 1, layer [4, 8)
GPU 2, layer [8, 12)
GPU 3, layer [12, 16)
GPU 4, layer [16, 20)
GPU 5, layer [20, 24)
GPU 6, layer [24, 28)
GPU 7, layer [28, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
232965, 114848857, 114848857
Number of vertices per chunk: 7281
train nodes 153431, valid nodes 23831, test nodes 55703
GPU 0, layer [0, 4)
GPU 1, layer [4, 8)
GPU 2, layer [8, 12)
GPU 3, layer [12, 16)
GPU 4, layer [16, 20)
GPU 5, layer [20, 24)
GPU 6, layer [24, 28)
GPU 7, layer [28, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
Chunks (number of global chunks: 32): 0-[0, 8381) 1-[8381, 15124) 2-[15124, 22398) 3-[22398, 30320) 4-[30320, 35655) 5-[35655, 45721) 6-[45721, 55131) 7-[55131, 63248) 8-[63248, 69343) ... 31-[226638, 232965)
232965, 114848857, 114848857
Number of vertices per chunk: 7281
GPU 0, layer [0, 4)
GPU 1, layer [4, 8)
GPU 2, layer [8, 12)
GPU 3, layer [12, 16)
GPU 4, layer [16, 20)
GPU 5, layer [20, 24)
GPU 6, layer [24, 28)
GPU 7, layer [28, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
232965, 114848857, 114848857
Number of vertices per chunk: 7281
232965, 114848857, 114848857
Number of vertices per chunk: 7281
232965, 114848857, 114848857
Number of vertices per chunk: 7281
232965, 114848857, 114848857
Number of vertices per chunk: 7281
232965, 114848857, 114848857
Number of vertices per chunk: 7281
232965, 114848857, 114848857
Number of vertices per chunk: 7281
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
***** Start profiling the layer-level communication performance *******
csr in-out ready !Start Cost Model Initialization...
The layer-level communication performance: 54.728 Gbps (per GPU), 437.820 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 54.473 Gbps (per GPU), 435.787 Gbps (aggregated)
The layer-level communication performance: 54.462 Gbps (per GPU), 435.697 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 54.235 Gbps (per GPU), 433.884 Gbps (aggregated)
The layer-level communication performance: 54.205 Gbps (per GPU), 433.639 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 54.021 Gbps (per GPU), 432.165 Gbps (aggregated)
The layer-level communication performance: 53.986 Gbps (per GPU), 431.892 Gbps (aggregated)
The layer-level communication performance: 53.956 Gbps (per GPU), 431.649 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The graph-level communication performance (supernode = 2): 158.046 Gbps (per GPU), 1264.369 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.058 Gbps (per GPU), 1264.463 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.043 Gbps (per GPU), 1264.344 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.061 Gbps (per GPU), 1264.487 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.040 Gbps (per GPU), 1264.320 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.046 Gbps (per GPU), 1264.368 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.049 Gbps (per GPU), 1264.392 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 157.963 Gbps (per GPU), 1263.701 Gbps (aggregated, cluster-wide)
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
The graph-level communication performance (supernode = 4): 100.746 Gbps (per GPU), 805.964 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 100.746 Gbps (per GPU), 805.970 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 100.746 Gbps (per GPU), 805.964 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 100.745 Gbps (per GPU), 805.958 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 100.746 Gbps (per GPU), 805.965 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 100.746 Gbps (per GPU), 805.964 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 100.745 Gbps (per GPU), 805.958 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 100.746 Gbps (per GPU), 805.970 Gbps (aggregated, cluster-wide)
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
The graph-level communication performance (supernode = 8): 31.976 Gbps (per GPU), 255.808 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 31.976 Gbps (per GPU), 255.811 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 31.975 Gbps (per GPU), 255.802 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 31.975 Gbps (per GPU), 255.796 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 31.975 Gbps (per GPU), 255.803 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 31.976 Gbps (per GPU), 255.809 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 31.974 Gbps (per GPU), 255.795 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 31.975 Gbps (per GPU), 255.800 Gbps (aggregated, cluster-wide)
 LType   LT0   LT1   LT2 Ratio  VSum  ESum
 chk_0  3.33ms  2.57ms  2.38ms  1.40  8.38K  3.53M
 chk_1  3.48ms  2.80ms  2.68ms  1.30  6.74K  3.60M
 chk_2  3.41ms  2.69ms  2.54ms  1.34  7.27K  3.53M
 chk_3  3.44ms  2.72ms  2.55ms  1.35  7.92K  3.61M
 chk_4  3.14ms  2.65ms  2.54ms  1.24  5.33K  3.68M
 chk_5  3.53ms  2.63ms  2.42ms  1.46 10.07K  3.45M
 chk_6  3.68ms  2.83ms  2.59ms  1.42  9.41K  3.48M
 chk_7  3.35ms  2.65ms  2.49ms  1.35  8.12K  3.60M
 chk_8  3.34ms  2.76ms  2.63ms  1.27  6.09K  3.64M
 chk_9  3.58ms  2.55ms  2.37ms  1.51 11.10K  3.38M
chk_10  3.33ms  2.81ms  2.68ms  1.24  5.67K  3.63M
chk_11  3.38ms  2.67ms  2.49ms  1.36  8.16K  3.54M
chk_12  3.56ms  2.86ms  2.72ms  1.31  7.24K  3.55M
chk_13  3.21ms  2.70ms  2.60ms  1.23  5.41K  3.68M
chk_14  3.65ms  2.93ms  2.80ms  1.31  7.14K  3.53M
chk_15  3.65ms  2.79ms  2.60ms  1.41  9.25K  3.49M
chk_16  3.10ms  2.62ms  2.53ms  1.23  4.78K  3.77M
chk_17  3.39ms  2.74ms  2.62ms  1.29  6.85K  3.60M
chk_18  3.25ms  2.54ms  2.41ms  1.35  7.47K  3.57M
chk_19  3.10ms  2.62ms  2.53ms  1.22  4.88K  3.75M
chk_20  3.32ms  2.61ms  2.51ms  1.32  7.00K  3.63M
chk_21  3.14ms  2.61ms  2.51ms  1.25  5.41K  3.68M
chk_22  3.84ms  2.80ms  2.57ms  1.49 11.07K  3.39M
chk_23  3.43ms  2.71ms  2.58ms  1.33  7.23K  3.64M
chk_24  3.68ms  2.76ms  2.55ms  1.44 10.13K  3.43M
chk_25  3.18ms  2.59ms  2.45ms  1.30  6.40K  3.57M
chk_26  3.38ms  2.79ms  2.67ms  1.27  5.78K  3.55M
chk_27  3.52ms  2.65ms  2.45ms  1.43  9.34K  3.48M
chk_28  3.59ms  2.99ms  2.81ms  1.28  6.37K  3.57M
chk_29  3.31ms  2.79ms  2.66ms  1.25  5.16K  3.78M
chk_30  3.18ms  2.69ms  2.57ms  1.24  5.44K  3.67M
chk_31  3.45ms  2.82ms  2.72ms  1.27  6.33K  3.63M
   Avg  3.40  2.72  2.57
   Max  3.84  2.99  2.81
   Min  3.10  2.54  2.37
 Ratio  1.24  1.18  1.19
   Var  0.03  0.01  0.01
Profiling takes 3.239 s
*** Node 4, starting model training...
Num Stages: 8 / 8
Node 4, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 4, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 4 owns the model-level partition [130, 162)
*** Node 4, constructing the helper classes...
Node 4, Local Vertex Begin: 0, Num Local Vertices: 232965
*** Node 0, starting model training...
Num Stages: 8 / 8
Node 0, Pipeline Input Tensor: NULL
Node 0, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 0 owns the model-level partition [0, 34)
*** Node 0, constructing the helper classes...
Node 0, Local Vertex Begin: 0, Num Local Vertices: 232965
*** Node 5, starting model training...
Num Stages: 8 / 8
Node 5, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 5, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 5 owns the model-level partition [162, 194)
*** Node 5, constructing the helper classes...
Node 5, Local Vertex Begin: 0, Num Local Vertices: 232965
*** Node 1, starting model training...
Num Stages: 8 / 8
Node 1, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 1, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 1 owns the model-level partition [34, 66)
*** Node 1, constructing the helper classes...
Node 1, Local Vertex Begin: 0, Num Local Vertices: 232965
*** Node 6, starting model training...
Num Stages: 8 / 8
Node 6, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 6, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 6 owns the model-level partition [194, 226)
*** Node 6, constructing the helper classes...
Node 6, Local Vertex Begin: 0, Num Local Vertices: 232965
*** Node 2, starting model training...
Num Stages: 8 / 8
Node 2, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 2, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 2 owns the model-level partition [66, 98)
*** Node 2, constructing the helper classes...
Node 2, Local Vertex Begin: 0, Num Local Vertices: 232965
*** Node 7, starting model training...
Num Stages: 8 / 8
Node 7, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 7, Pipeline Output Tensor: NULL
*** Node 7 owns the model-level partition [226, 257)
*** Node 7, constructing the helper classes...
Node 7, Local Vertex Begin: 0, Num Local Vertices: 232965
*** Node 3, starting model training...
Num Stages: 8 / 8
Node 3, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 3, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 3 owns the model-level partition [98, 130)
*** Node 3, constructing the helper classes...
Node 3, Local Vertex Begin: 0, Num Local Vertices: 232965
*** Node 0, setting up some other necessary information...
*** Node 3, setting up some other necessary information...
*** Node 1, setting up some other necessary information...
*** Node 2, setting up some other necessary information...
*** Node 7, setting up some other necessary information...
*** Node 5, setting up some other necessary information...
*** Node 4, setting up some other necessary information...
*** Node 6, setting up some other necessary information...
+++++++++ Node 4 initializing the weights for op[130, 162)...
+++++++++ Node 0 initializing the weights for op[0, 34)...
+++++++++ Node 7 initializing the weights for op[226, 257)...
+++++++++ Node 2 initializing the weights for op[66, 98)...
+++++++++ Node 5 initializing the weights for op[162, 194)...
+++++++++ Node 3 initializing the weights for op[98, 130)...
+++++++++ Node 6 initializing the weights for op[194, 226)...
+++++++++ Node 1 initializing the weights for op[34, 66)...
Node 0, discovering the vertices that will be sent across graph boundary...
Node 4, discovering the vertices that will be sent across graph boundary...
Node 1, discovering the vertices that will be sent across graph boundary...
Node 5, discovering the vertices that will be sent across graph boundary...
Node 2, discovering the vertices that will be sent across graph boundary...
Node 7, discovering the vertices that will be sent across graph boundary...
Node 3, discovering the vertices that will be sent across graph boundary...
Node 6, discovering the vertices that will be sent across graph boundary...
The number of mirror vertices: 0
Node 0, discovering the vertices that will be received across the graph boundary.
Node 4, discovering the vertices that will be received across the graph boundary.
Node 1, discovering the vertices that will be received across the graph boundary.
Node 5, discovering the vertices that will be received across the graph boundary.
Node 2, discovering the vertices that will be received across the graph boundary.
Node 6, discovering the vertices that will be received across the graph boundary.
Node 3, discovering the vertices that will be received across the graph boundary.
Node 7, discovering the vertices that will be received across the graph boundary.
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
*** Node 3, starting task scheduling...
*** Node 1, starting task scheduling...
*** Node 2, starting task scheduling...
*** Node 0, starting task scheduling...
*** Node 4, starting task scheduling...



The learning rate specified by the user: 0.001000000
*** Node 5, starting task scheduling...
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
*** Node 6, starting task scheduling...
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
*** Node 7, starting task scheduling...
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
	Epoch 1:	Loss 4.6617	TrainAcc 0.0304	ValidAcc 0.0271	TestAcc 0.0271	BestValid 0.0271
	Epoch 50:	Loss 3.3131	TrainAcc 0.0690	ValidAcc 0.0584	TestAcc 0.0574	BestValid 0.0584
****** Epoch Time (Excluding Evaluation Cost): 0.403 s ******
****** Breakdown Analysis ******
Cluster-Wide Average, Bubble-Pipeline: 77.043 ms (Max: 79.531, Min: 64.688, Sum: 616.345)
Cluster-Wide Average, Compute: 271.078 ms (Max: 297.602, Min: 261.030, Sum: 2168.625)
Cluster-Wide Average, Communication-Layer: 25.626 ms (Max: 30.779, Min: 16.873, Sum: 205.007)
Cluster-Wide Average, Bubble-Imbalance: 25.215 ms (Max: 32.639, Min: 7.945, Sum: 201.717)
Cluster-Wide Average, Communication-Graph: 0.494 ms (Max: 0.578, Min: 0.430, Sum: 3.954)
Cluster-Wide Average, Optimization: 0.184 ms (Max: 0.196, Min: 0.176, Sum: 1.471)
Cluster-Wide Average, Others: 3.812 ms (Max: 17.333, Min: 1.864, Sum: 30.495)
****** Breakdown Sum: 403.452 ms ******
Cluster-Wide Average, GPU Memory Consumption: 5.680 GB (Max: 6.903, Min: 5.335, Sum: 45.440)
Cluster-Wide Average, Graph-Level Communication Throughput: -nan Gbps (Max: -nan, Min: -nan, Sum: -nan)
Cluster-Wide Average, Layer-Level Communication Throughput: 50.325 Gbps (Max: 57.165, Min: 43.368, Sum: 402.597)
Layer-level communication (cluster-wide, per-epoch): 1.215 GB
Graph-level communication (cluster-wide, per-epoch): 0.000 GB
Weight-sync communication (cluster-wide, per-epoch): 0.000 GB
Total communication (cluster-wide, per-epoch): 1.215 GB
****** Accuracy Results ******
Highest valid_acc: 0.0584
Target test_acc: 0.0574
Epoch to reach the target acc: 49
[MPI Rank 0] Success 
[MPI Rank 4] Success 
[MPI Rank 1] Success 
[MPI Rank 5] Success 
[MPI Rank 2] Success 
[MPI Rank 6] Success 
[MPI Rank 3] Success 
[MPI Rank 7] Success 
