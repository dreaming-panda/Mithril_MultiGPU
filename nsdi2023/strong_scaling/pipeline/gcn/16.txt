Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
DONE MPI INIT
Initialized node 11 on machine gnerv7
DONE MPI INITDONE MPI INIT
DONE MPI INIT
Initialized node 10 on machine gnerv7
Initialized node 8 on machine gnerv7

Initialized node 9 on machine gnerv7
DONE MPI INIT
Initialized node 15 on machine gnerv8
DONE MPI INIT
Initialized node 12 on machine gnerv8
DONE MPI INIT
Initialized node 13 on machine gnerv8
DONE MPI INIT
Initialized node 14 on machine gnerv8
DONE MPI INIT
DONE MPI INITDONE MPI INIT
Initialized node 3 on machine gnerv2
Initialized node 0 on machine gnerv2
DONE MPI INIT
Initialized node 1 on machine gnerv2

Initialized node 2 on machine gnerv2
DONE MPI INIT
DONE MPI INITDONE MPI INIT
Initialized node 6 on machine gnerv3
Initialized node 4 on machine gnerv3
DONE MPI INIT
Initialized node 7 on machine gnerv3

Initialized node 5 on machine gnerv3
Building the CSR structure...Building the CSR structure...

Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
        It takes 2.018 seconds.
Building the CSC structure...
        It takes 2.267 seconds.
Building the CSC structure...
        It takes 2.320 seconds.
Building the CSC structure...
        It takes 2.344 seconds.
Building the CSC structure...
        It takes 2.378 seconds.
Building the CSC structure...
        It takes 2.402 seconds.
Building the CSC structure...
        It takes 2.468 seconds.
Building the CSC structure...
        It takes 2.462 seconds.
Building the CSC structure...
        It takes 2.473 seconds.
Building the CSC structure...
        It takes 2.479 seconds.
Building the CSC structure...
        It takes 2.520 seconds.
Building the CSC structure...
        It takes 2.544 seconds.
Building the CSC structure...
        It takes 2.642 seconds.
Building the CSC structure...
        It takes 2.665 seconds.
Building the CSC structure...
        It takes 2.700 seconds.
Building the CSC structure...
        It takes 2.705 seconds.
Building the CSC structure...
        It takes 1.863 seconds.
        It takes 2.250 seconds.
        It takes 2.279 seconds.
        It takes 2.280 seconds.
        It takes 2.288 seconds.
        It takes 2.316 seconds.
        It takes 2.274 seconds.
        It takes 2.380 seconds.
        It takes 2.372 seconds.
        It takes 2.453 seconds.
        It takes 2.330 seconds.
        It takes 2.453 seconds.
        It takes 2.435 seconds.
Building the Feature Vector...
        It takes 2.309 seconds.
        It takes 2.388 seconds.
        It takes 2.365 seconds.
        It takes 0.258 seconds.
Building the Label Vector...
        It takes 0.031 seconds.
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
        It takes 0.286 seconds.
Building the Label Vector...
Building the Feature Vector...
        It takes 0.042 seconds.
Building the Feature Vector...
Building the Feature Vector...
        It takes 0.265 seconds.
Building the Label Vector...
        It takes 0.031 seconds.
        It takes 0.288 seconds.
Building the Label Vector...
Building the Feature Vector...
        It takes 0.032 seconds.
        It takes 0.270 seconds.
Building the Label Vector...
Building the Feature Vector...
        It takes 0.030 seconds.
Building the Feature Vector...
        It takes 0.275 seconds.
Building the Label Vector...
Building the Feature Vector...
        It takes 0.322 seconds.
Building the Label Vector...
        It takes 0.288 seconds.
Building the Label Vector...
Building the Feature Vector...
        It takes 0.036 seconds.
        It takes 0.033 seconds.
        It takes 0.037 seconds.
Building the Feature Vector...
GPU 0, layer [0, 2)
GPU 1, layer [2, 4)
GPU 2, layer [4, 6)
GPU 3, layer [6, 8)
GPU 4, layer [8, 10)
GPU 5, layer [10, 12)
GPU 6, layer [12, 14)
GPU 7, layer [14, 16)
GPU 8, layer [16, 18)
GPU 9, layer [18, 20)
GPU 10, layer [20, 22)
GPU 11, layer [22, 24)
GPU 12, layer [24, 26)
GPU 13, layer [26, 28)
GPU 14, layer [28, 30)
GPU 15, layer [30, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
        It takes 0.344 seconds.
Building the Label Vector...
        It takes 0.045 seconds.
        It takes 0.340 seconds.
Building the Label Vector...
        It takes 0.037 seconds.
        It takes 0.320 seconds.
Building the Label Vector...
        It takes 0.286 seconds.
Building the Label Vector...
        It takes 0.290 seconds.
Building the Label Vector...
        It takes 0.035 seconds.
        It takes 0.257 seconds.
Building the Label Vector...
        It takes 0.032 seconds.
The graph dataset locates at /shared_hdd_storage/jingjichen/gnn_datasets/pipeline_parallel_datasets/reddit/64_parts
The number of GCN layers: 32
The number of hidden units: 100
The number of training epoches: 50
Learning rate: 0.001000
The partition strategy: model
The dropout rate: 0.500
The checkpointed weight file: /tmp/saved_weights_pipe
The random seed: 1
Number of classes: 41
Number of feature dimensions: 602
Number of vertices: 232965
Number of GPUs: 16
        It takes 0.030 seconds.
        It takes 0.031 seconds.
Building the Feature Vector...
Building the Feature Vector...
232965, 114848857, 114848857
Number of vertices per chunk: 3641
GPU 0, layer [0, 2)
GPU 1, layer [2, 4)
GPU 2, layer [4, 6)
GPU 3, layer [6, 8)
GPU 4, layer [8, 10)
GPU 5, layer [10, 12)
GPU 6, layer [12, 14)
GPU 7, layer [14, 16)
GPU 8, layer [16, 18)
GPU 9, layer [18, 20)
GPU 10, layer [20, 22)
GPU 11, layer [22, 24)
GPU 12, layer [24, 26)
GPU 13, layer [26, 28)
GPU 14, layer [28, 30)
GPU 15, layer [30, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
        It takes 0.259 seconds.
Building the Label Vector...
        It takes 0.266 seconds.
Building the Label Vector...
        It takes 0.030 seconds.
        It takes 0.031 seconds.
GPU 0, layer [0, 2)
GPU 1, layer [2, 4)
GPU 2, layer [4, 6)
GPU 3, layer [6, 8)
GPU 4, layer [8, 10)
GPU 5, layer [10, 12)
GPU 6, layer [12, 14)
GPU 7, layer [14, 16)
GPU 8, layer [16, 18)
GPU 9, layer [18, 20)
GPU 10, layer [20, 22)
GPU 11, layer [22, 24)
GPU 12, layer [24, 26)
GPU 13, layer [26, 28)
GPU 14, layer [28, 30)
GPU 15, layer [30, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 2)
GPU 1, layer [2, 4)
GPU 2, layer [4, 6)
GPU 3, layer [6, 8)
GPU 4, layer [8, 10)
GPU 5, layer [10, 12)
GPU 6, layer [12, 14)
GPU 7, layer [14, 16)
GPU 8, layer [16, 18)
GPU 9, layer [18, 20)
GPU 10, layer [20, 22)
GPU 11, layer [22, 24)
GPU 12, layer [24, 26)
GPU 13, layer [26, 28)
GPU 14, layer [28, 30)
GPU 15, layer [30, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 2)
GPU 1, layer [2, 4)
GPU 2, layer [4, 6)
GPU 3, layer [6, 8)
GPU 4, layer [8, 10)
GPU 5, layer [10, 12)
GPU 6, layer [12, 14)
GPU 7, layer [14, 16)
GPU 8, layer [16, 18)
GPU 9, layer [18, 20)
GPU 10, layer [20, 22)
GPU 11, layer [22, 24)
GPU 12, layer [24, 26)
GPU 13, layer [26, 28)
GPU 14, layer [28, 30)
GPU 15, layer [30, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 2)
GPU 1, layer [2, 4)
GPU 2, layer [4, 6)
GPU 3, layer [6, 8)
GPU 4, layer [8, 10)
GPU 5, layer [10, 12)
GPU 6, layer [12, 14)
GPU 7, layer [14, 16)
GPU 8, layer [16, 18)
GPU 9, layer [18, 20)
GPU 10, layer [20, 22)
GPU 11, layer [22, 24)
GPU 12, layer [24, 26)
GPU 13, layer [26, 28)
GPU 14, layer [28, 30)
GPU 15, layer [30, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 2)
GPU 1, layer [2, 4)
GPU 2, layer [4, 6)
GPU 3, layer [6, 8)
GPU 4, layer [8, 10)
GPU 5, layer [10, 12)
GPU 6, layer [12, 14)
GPU 7, layer [14, 16)
GPU 8, layer [16, 18)
GPU 9, layer [18, 20)
GPU 10, layer [20, 22)
GPU 11, layer [22, 24)
GPU 12, layer [24, 26)
GPU 13, layer [26, 28)
GPU 14, layer [28, 30)
GPU 15, layer [30, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 2)
GPU 1, layer [2, 4)
GPU 2, layer [4, 6)
GPU 3, layer [6, 8)
GPU 4, layer [8, 10)
GPU 5, layer [10, 12)
GPU 6, layer [12, 14)
GPU 7, layer [14, 16)
GPU 8, layer [16, 18)
GPU 9, layer [18, 20)
GPU 10, layer [20, 22)
GPU 11, layer [22, 24)
GPU 12, layer [24, 26)
GPU 13, layer [26, 28)
GPU 14, layer [28, 30)
GPU 15, layer [30, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
232965, 114848857, 114848857
Number of vertices per chunk: 3641
232965, 114848857, 114848857
Number of vertices per chunk: 3641
232965, 114848857, 114848857
Number of vertices per chunk: 3641
GPU 0, layer [0, 2)
GPU 1, layer [2, 4)
GPU 2, layer [4, 6)
GPU 3, layer [6, 8)
GPU 4, layer [8, 10)
GPU 5, layer [10, 12)
GPU 6, layer [12, 14)
GPU 7, layer [14, 16)
GPU 8, layer [16, 18)
GPU 9, layer [18, 20)
GPU 10, layer [20, 22)
GPU 11, layer [22, 24)
GPU 12, layer [24, 26)
GPU 13, layer [26, 28)
GPU 14, layer [28, 30)
GPU 15, layer [30, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 2)
GPU 1, layer [2, 4)
GPU 2, layer [4, 6)
GPU 3, layer [6, 8)
GPU 4, layer [8, 10)
GPU 5, layer [10, 12)
GPU 6, layer [12, 14)
GPU 7, layer [14, 16)
GPU 8, layer [16, 18)
GPU 9, layer [18, 20)
GPU 10, layer [20, 22)
GPU 11, layer [22, 24)
GPU 12, layer [24, 26)
GPU 13, layer [26, 28)
GPU 14, layer [28, 30)
GPU 15, layer [30, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 2)
GPU 1, layer [2, 4)
GPU 2, layer [4, 6)
GPU 3, layer [6, 8)
GPU 4, layer [8, 10)
GPU 5, layer [10, 12)
GPU 6, layer [12, 14)
GPU 7, layer [14, 16)
GPU 8, layer [16, 18)
GPU 9, layer [18, 20)
GPU 10, layer [20, 22)
GPU 11, layer [22, 24)
GPU 12, layer [24, 26)
GPU 13, layer [26, 28)
GPU 14, layer [28, 30)
GPU 15, layer [30, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
232965, 114848857, 114848857
train nodes 153431, valid nodes 23831, test nodes 55703
Number of vertices per chunk: 3641
GPU 0, layer [0, 2)
GPU 1, layer [2, 4)
GPU 2, layer [4, 6)
GPU 3, layer [6, 8)
GPU 4, layer [8, 10)
GPU 5, layer [10, 12)
GPU 6, layer [12, 14)
GPU 7, layer [14, 16)
GPU 8, layer [16, 18)
GPU 9, layer [18, 20)
GPU 10, layer [20, 22)
GPU 11, layer [22, 24)
GPU 12, layer [24, 26)
GPU 13, layer [26, 28)
GPU 14, layer [28, 30)
GPU 15, layer [30, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
Chunks (number of global chunks: 64): 0-[0, 3383) 1-[3383, 7843) 2-[7843, 12526) 3-[12526, 16576) 4-[16576, 20087) 5-[20087, 24086) 6-[24086, 27150) 7-[27150, 31875) 8-[31875, 38059) ... 63-[229059, 232965)
GPU 0, layer [0, 2)
GPU 1, layer [2, 4)
GPU 2, layer [4, 6)
GPU 3, layer [6, 8)
GPU 4, layer [8, 10)
GPU 5, layer [10, 12)
GPU 6, layer [12, 14)
GPU 7, layer [14, 16)
GPU 8, layer [16, 18)
GPU 9, layer [18, 20)
GPU 10, layer [20, 22)
GPU 11, layer [22, 24)
GPU 12, layer [24, 26)
GPU 13, layer [26, 28)
GPU 14, layer [28, 30)
GPU 15, layer [30, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 2)
GPU 1, layer [2, 4)
GPU 2, layer [4, 6)
GPU 3, layer [6, 8)
GPU 4, layer [8, 10)
GPU 5, layer [10, 12)
GPU 6, layer [12, 14)
GPU 7, layer [14, 16)
GPU 8, layer [16, 18)
GPU 9, layer [18, 20)
GPU 10, layer [20, 22)
GPU 11, layer [22, 24)
GPU 12, layer [24, 26)
GPU 13, layer [26, 28)
GPU 14, layer [28, 30)
GPU 15, layer [30, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
232965, 114848857, 114848857
Number of vertices per chunk: 3641
232965, 114848857, 114848857
Number of vertices per chunk: 3641
232965, 114848857, 114848857
Number of vertices per chunk: 3641
232965, 114848857, 114848857
Number of vertices per chunk: 3641
GPU 0, layer [0, 2)
GPU 1, layer [2, 4)
GPU 2, layer [4, 6)
GPU 3, layer [6, 8)
GPU 4, layer [8, 10)
GPU 5, layer [10, 12)
GPU 6, layer [12, 14)
GPU 7, layer [14, 16)
GPU 8, layer [16, 18)
GPU 9, layer [18, 20)
GPU 10, layer [20, 22)
GPU 11, layer [22, 24)
GPU 12, layer [24, 26)
GPU 13, layer [26, 28)
GPU 14, layer [28, 30)
GPU 15, layer [30, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 2)
GPU 1, layer [2, 4)
GPU 2, layer [4, 6)
GPU 3, layer [6, 8)
GPU 4, layer [8, 10)
GPU 5, layer [10, 12)
GPU 6, layer [12, 14)
GPU 7, layer [14, 16)
GPU 8, layer [16, 18)
GPU 9, layer [18, 20)
GPU 10, layer [20, 22)
GPU 11, layer [22, 24)
GPU 12, layer [24, 26)
GPU 13, layer [26, 28)
GPU 14, layer [28, 30)
GPU 15, layer [30, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
232965, 114848857, 114848857
Number of vertices per chunk: 3641
232965, 114848857, 114848857
Number of vertices per chunk: 3641
232965, 114848857, 114848857
Number of vertices per chunk: 3641
232965, 114848857, 114848857
Number of vertices per chunk: 3641
232965, 114848857, 114848857
Number of vertices per chunk: 3641
232965, 114848857, 114848857
Number of vertices per chunk: 3641
232965, 114848857, 114848857
Number of vertices per chunk: 3641
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
***** Start profiling the layer-level communication performance *******
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
The layer-level communication performance: 57.136 Gbps (per GPU), 914.178 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 56.870 Gbps (per GPU), 909.926 Gbps (aggregated)
The layer-level communication performance: 56.853 Gbps (per GPU), 909.645 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 56.715 Gbps (per GPU), 907.442 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 56.679 Gbps (per GPU), 906.858 Gbps (aggregated)
The layer-level communication performance: 56.603 Gbps (per GPU), 905.640 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 56.552 Gbps (per GPU), 904.837 Gbps (aggregated)
The layer-level communication performance: 56.588 Gbps (per GPU), 905.403 Gbps (aggregated)
The layer-level communication performance: 56.519 Gbps (per GPU), 904.300 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 56.406 Gbps (per GPU), 902.489 Gbps (aggregated)
The layer-level communication performance: 56.403 Gbps (per GPU), 902.446 Gbps (aggregated)
The layer-level communication performance: 56.373 Gbps (per GPU), 901.969 Gbps (aggregated)
The layer-level communication performance: 56.367 Gbps (per GPU), 901.879 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 56.188 Gbps (per GPU), 899.011 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 56.067 Gbps (per GPU), 897.067 Gbps (aggregated)
The layer-level communication performance: 56.118 Gbps (per GPU), 897.882 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The graph-level communication performance (supernode = 2): 158.485 Gbps (per GPU), 2535.759 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.488 Gbps (per GPU), 2535.807 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.629 Gbps (per GPU), 2538.061 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.488 Gbps (per GPU), 2535.807 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.488 Gbps (per GPU), 2535.807 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.491 Gbps (per GPU), 2535.855 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.488 Gbps (per GPU), 2535.807 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.491 Gbps (per GPU), 2535.856 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.491 Gbps (per GPU), 2535.855 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.491 Gbps (per GPU), 2535.855 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.675 Gbps (per GPU), 2538.793 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.485 Gbps (per GPU), 2535.764 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.488 Gbps (per GPU), 2535.809 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.503 Gbps (per GPU), 2536.047 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.488 Gbps (per GPU), 2535.807 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.491 Gbps (per GPU), 2535.855 Gbps (aggregated, cluster-wide)
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
The graph-level communication performance (supernode = 4): 100.196 Gbps (per GPU), 1603.136 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 100.195 Gbps (per GPU), 1603.123 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 100.194 Gbps (per GPU), 1603.110 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 100.196 Gbps (per GPU), 1603.136 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 100.194 Gbps (per GPU), 1603.110 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 100.197 Gbps (per GPU), 1603.149 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 100.196 Gbps (per GPU), 1603.134 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 100.197 Gbps (per GPU), 1603.160 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 100.196 Gbps (per GPU), 1603.136 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 100.194 Gbps (per GPU), 1603.110 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 100.198 Gbps (per GPU), 1603.161 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 100.197 Gbps (per GPU), 1603.149 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 100.195 Gbps (per GPU), 1603.125 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 100.196 Gbps (per GPU), 1603.138 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 100.196 Gbps (per GPU), 1603.136 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 100.197 Gbps (per GPU), 1603.149 Gbps (aggregated, cluster-wide)
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
The graph-level communication performance (supernode = 8): 26.633 Gbps (per GPU), 426.134 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 26.633 Gbps (per GPU), 426.132 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 26.633 Gbps (per GPU), 426.131 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 26.633 Gbps (per GPU), 426.131 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 26.633 Gbps (per GPU), 426.134 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 26.633 Gbps (per GPU), 426.121 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 26.633 Gbps (per GPU), 426.124 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 26.633 Gbps (per GPU), 426.129 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 26.633 Gbps (per GPU), 426.122 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 26.633 Gbps (per GPU), 426.123 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 26.633 Gbps (per GPU), 426.128 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 26.633 Gbps (per GPU), 426.131 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 26.633 Gbps (per GPU), 426.128 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 26.633 Gbps (per GPU), 426.133 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 26.633 Gbps (per GPU), 426.134 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 26.633 Gbps (per GPU), 426.122 Gbps (aggregated, cluster-wide)
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
The graph-level communication performance (supernode = 16): 21.454 Gbps (per GPU), 343.265 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 21.454 Gbps (per GPU), 343.261 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 21.454 Gbps (per GPU), 343.268 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 21.454 Gbps (per GPU), 343.258 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 21.454 Gbps (per GPU), 343.269 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 21.454 Gbps (per GPU), 343.261 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 21.454 Gbps (per GPU), 343.262 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 21.454 Gbps (per GPU), 343.265 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 21.454 Gbps (per GPU), 343.263 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 21.454 Gbps (per GPU), 343.268 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 21.454 Gbps (per GPU), 343.266 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 21.454 Gbps (per GPU), 343.266 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 21.453 Gbps (per GPU), 343.256 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 21.454 Gbps (per GPU), 343.266 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 21.454 Gbps (per GPU), 343.264 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 21.454 Gbps (per GPU), 343.259 Gbps (aggregated, cluster-wide)
 LType   LT0   LT1   LT2 Ratio  VSum  ESum
 chk_0  1.43ms  1.39ms  1.33ms  1.07  3.38K  1.78M
 chk_1  1.41ms  1.35ms  1.26ms  1.12  4.46K  1.78M
 chk_2  1.46ms  1.35ms  1.28ms  1.14  4.68K  1.74M
 chk_3  1.46ms  1.38ms  1.31ms  1.11  4.05K  1.77M
 chk_4  1.42ms  1.35ms  1.29ms  1.10  3.51K  1.79M
 chk_5  1.35ms  1.27ms  1.21ms  1.12  4.00K  1.83M
 chk_6  1.35ms  1.29ms  1.24ms  1.09  3.06K  1.85M
 chk_7  1.44ms  1.33ms  1.25ms  1.15  4.72K  1.71M
 chk_8  1.43ms  1.29ms  1.20ms  1.19  6.18K  1.69M
 chk_9  1.35ms  1.31ms  1.27ms  1.07  2.07K  1.90M
chk_10  1.38ms  1.32ms  1.27ms  1.09  2.79K  1.81M
chk_11  1.52ms  1.41ms  1.33ms  1.14  4.93K  1.76M
chk_12  1.41ms  1.36ms  1.31ms  1.08  2.74K  1.81M
chk_13  1.43ms  1.36ms  1.30ms  1.10  3.26K  1.78M
chk_14  1.44ms  1.36ms  1.29ms  1.12  4.03K  1.77M
chk_15  1.30ms  1.23ms  1.18ms  1.11  3.26K  1.84M
chk_16  1.42ms  1.36ms  1.30ms  1.09  3.22K  1.78M
chk_17  1.44ms  1.37ms  1.31ms  1.10  3.69K  1.82M
chk_18  1.41ms  1.32ms  1.24ms  1.14  4.98K  1.78M
chk_19  1.41ms  1.34ms  1.28ms  1.10  3.53K  1.77M
chk_20  1.43ms  1.36ms  1.31ms  1.10  3.14K  1.79M
chk_21  1.35ms  1.30ms  1.26ms  1.07  2.52K  1.85M
chk_22  1.32ms  1.24ms  1.19ms  1.11  3.62K  1.76M
chk_23  1.38ms  1.33ms  1.28ms  1.08  3.26K  1.81M
chk_24  1.33ms  1.27ms  1.22ms  1.09  3.29K  1.81M
chk_25  1.32ms  1.25ms  1.20ms  1.10  4.05K  1.77M
chk_26  1.30ms  1.26ms  1.23ms  1.05  2.41K  1.87M
chk_27  1.58ms  1.49ms  1.43ms  1.10  3.85K  1.76M
chk_28  1.37ms  1.33ms  1.28ms  1.08  2.90K  1.83M
chk_29  1.50ms  1.43ms  1.37ms  1.09  3.43K  1.77M
chk_30  1.46ms  1.42ms  1.37ms  1.06  2.37K  1.80M
chk_31  1.49ms  1.45ms  1.40ms  1.07  2.71K  1.87M
chk_32  1.36ms  1.25ms  1.19ms  1.14  5.56K  1.69M
chk_33  1.37ms  1.25ms  1.19ms  1.15  5.31K  1.75M
chk_34  1.41ms  1.33ms  1.27ms  1.11  4.07K  1.78M
chk_35  1.34ms  1.24ms  1.18ms  1.14  4.52K  1.75M
chk_36  1.41ms  1.36ms  1.33ms  1.06  2.25K  1.86M
chk_37  1.35ms  1.29ms  1.25ms  1.08  2.93K  1.83M
chk_38  1.49ms  1.43ms  1.39ms  1.07  2.63K  1.78M
chk_39  1.35ms  1.26ms  1.19ms  1.13  4.47K  1.76M
chk_40  1.39ms  1.32ms  1.26ms  1.11  4.06K  1.77M
chk_41  1.40ms  1.31ms  1.23ms  1.14  4.79K  1.73M
chk_42  1.39ms  1.31ms  1.26ms  1.10  3.84K  1.81M
chk_43  1.43ms  1.33ms  1.27ms  1.12  4.60K  1.74M
chk_44  1.43ms  1.37ms  1.33ms  1.07  2.77K  1.81M
chk_45  1.43ms  1.56ms  1.34ms  1.16  2.70K  1.86M
chk_46  1.54ms  1.47ms  1.41ms  1.09  3.46K  1.77M
chk_47  1.38ms  1.27ms  1.21ms  1.14  4.89K  1.70M
chk_48  1.48ms  1.42ms  1.37ms  1.08  2.91K  1.80M
chk_49  1.45ms  1.41ms  1.36ms  1.06  2.35K  1.86M
chk_50  1.27ms  1.22ms  1.18ms  1.08  2.75K  1.89M
chk_51  1.43ms  1.34ms  1.27ms  1.12  4.12K  1.74M
chk_52  1.43ms  1.33ms  1.25ms  1.14  4.93K  1.73M
chk_53  1.31ms  1.26ms  1.23ms  1.07  2.77K  1.86M
chk_54  1.38ms  1.31ms  1.26ms  1.10  3.86K  1.78M
chk_55  1.33ms  1.29ms  1.24ms  1.07  2.83K  1.80M
chk_56  1.44ms  1.39ms  1.32ms  1.09  3.34K  1.78M
chk_57  1.52ms  1.43ms  1.35ms  1.13  5.03K  1.74M
chk_58  1.39ms  1.33ms  1.28ms  1.09  3.16K  1.87M
chk_59  1.38ms  1.29ms  1.22ms  1.13  4.53K  1.75M
chk_60  1.33ms  1.27ms  1.22ms  1.09  2.98K  1.82M
chk_61  1.41ms  1.34ms  1.28ms  1.10  3.55K  1.77M
chk_62  1.30ms  1.24ms  1.21ms  1.07  3.02K  1.79M
chk_63  1.43ms  1.35ms  1.30ms  1.10  3.91K  1.78M
   Avg  1.40  1.33  1.27
   Max  1.58  1.56  1.43
   Min  1.27  1.22  1.18
 Ratio  1.24  1.27  1.22
   Var  0.00  0.00  0.00
Profiling takes 3.041 s
*** Node 8, starting model training...
Num Stages: 16 / 16
Node 8, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 8, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 8 owns the model-level partition [81, 91)
*** Node 8, constructing the helper classes...
Node 8, Local Vertex Begin: 0, Num Local Vertices: 232965
*** Node 12, starting model training...
Num Stages: 16 / 16
Node 12, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 12, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 12 owns the model-level partition [121, 131)
*** Node 12, constructing the helper classes...
Node 12, Local Vertex Begin: 0, Num Local Vertices: 232965
*** Node 4, starting model training...
Num Stages: 16 / 16
Node 4, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 4, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 4 owns the model-level partition [41, 51)
*** Node 4, constructing the helper classes...
Node 4, Local Vertex Begin: 0, Num Local Vertices: 232965
*** Node 0, starting model training...
Num Stages: 16 / 16
Node 0, Pipeline Input Tensor: NULL
Node 0, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 0 owns the model-level partition [0, 11)
*** Node 0, constructing the helper classes...
Node 0, Local Vertex Begin: 0, Num Local Vertices: 232965
*** Node 9, starting model training...
Num Stages: 16 / 16
Node 9, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 9, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 9 owns the model-level partition [91, 101)
*** Node 9, constructing the helper classes...
Node 9, Local Vertex Begin: 0, Num Local Vertices: 232965
*** Node 14, starting model training...
Num Stages: 16 / 16
Node 14, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 14, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 14 owns the model-level partition [141, 151)
*** Node 14, constructing the helper classes...
Node 14, Local Vertex Begin: 0, Num Local Vertices: 232965
*** Node 5, starting model training...
Num Stages: 16 / 16
Node 5, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 5, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 5 owns the model-level partition [51, 61)
*** Node 5, constructing the helper classes...
Node 5, Local Vertex Begin: 0, Num Local Vertices: 232965
*** Node 1, starting model training...
Num Stages: 16 / 16
Node 1, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 1, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 1 owns the model-level partition [11, 21)
*** Node 1, constructing the helper classes...
Node 1, Local Vertex Begin: 0, Num Local Vertices: 232965
*** Node 10, starting model training...
Num Stages: 16 / 16
Node 10, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 10, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 10 owns the model-level partition [101, 111)
*** Node 10, constructing the helper classes...
Node 10, Local Vertex Begin: 0, Num Local Vertices: 232965
*** Node 15, starting model training...
Num Stages: 16 / 16
Node 15, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 15, Pipeline Output Tensor: NULL
*** Node 15 owns the model-level partition [151, 160)
*** Node 15, constructing the helper classes...
Node 15, Local Vertex Begin: 0, Num Local Vertices: 232965
*** Node 6, starting model training...
Num Stages: 16 / 16
Node 6, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 6, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 6 owns the model-level partition [61, 71)
*** Node 6, constructing the helper classes...
Node 6, Local Vertex Begin: 0, Num Local Vertices: 232965
*** Node 2, starting model training...
Num Stages: 16 / 16
Node 2, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 2, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 2 owns the model-level partition [21, 31)
*** Node 2, constructing the helper classes...
Node 2, Local Vertex Begin: 0, Num Local Vertices: 232965
*** Node 11, starting model training...
Num Stages: 16 / 16
Node 11, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 11, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 11 owns the model-level partition [111, 121)
*** Node 11, constructing the helper classes...
Node 11, Local Vertex Begin: 0, Num Local Vertices: 232965
*** Node 13, starting model training...
*** Node 7, starting model training...
Num Stages: 16 / 16
Node 7, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 7, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 7 owns the model-level partition [71, 81)
*** Node 7, constructing the helper classes...
Node 7, Local Vertex Begin: 0, Num Local Vertices: 232965
*** Node 3, starting model training...
Num Stages: 16 / 16
Node 3, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 3, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 3 owns the model-level partition [31, 41)
*** Node 3, constructing the helper classes...
Node 3, Local Vertex Begin: 0, Num Local Vertices: 232965
Num Stages: 16 / 16
Node 13, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 13, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 13 owns the model-level partition [131, 141)
*** Node 13, constructing the helper classes...
Node 13, Local Vertex Begin: 0, Num Local Vertices: 232965
*** Node 9, setting up some other necessary information...
*** Node 8, setting up some other necessary information...
*** Node 0, setting up some other necessary information...
*** Node 10, setting up some other necessary information...
*** Node 5, setting up some other necessary information...
*** Node 1, setting up some other necessary information...
*** Node 11, setting up some other necessary information...
*** Node 4, setting up some other necessary information...
*** Node 2, setting up some other necessary information...
*** Node 3, setting up some other necessary information...
*** Node 6, setting up some other necessary information...
*** Node 7, setting up some other necessary information...
*** Node 14, setting up some other necessary information...
*** Node 15, setting up some other necessary information...
*** Node 13, setting up some other necessary information...
*** Node 12, setting up some other necessary information...
+++++++++ Node 9 initializing the weights for op[91, 101)...
+++++++++ Node 14 initializing the weights for op[141, 151)...
+++++++++ Node 1 initializing the weights for op[11, 21)...
+++++++++ Node 10 initializing the weights for op[101, 111)...
+++++++++ Node 12 initializing the weights for op[121, 131)...
+++++++++ Node 4 initializing the weights for op[41, 51)...
+++++++++ Node 2 initializing the weights for op[21, 31)...
+++++++++ Node 11 initializing the weights for op[111, 121)...
+++++++++ Node 15 initializing the weights for op[151, 160)...
+++++++++ Node 5 initializing the weights for op[51, 61)...
+++++++++ Node 3 initializing the weights for op[31, 41)...
+++++++++ Node 8 initializing the weights for op[81, 91)...
+++++++++ Node 13 initializing the weights for op[131, 141)...
+++++++++ Node 6 initializing the weights for op[61, 71)...
+++++++++ Node 0 initializing the weights for op[0, 11)...
+++++++++ Node 7 initializing the weights for op[71, 81)...
Node 10, discovering the vertices that will be sent across graph boundary...
Node 15, discovering the vertices that will be sent across graph boundary...
Node 4, discovering the vertices that will be sent across graph boundary...
Node 3, discovering the vertices that will be sent across graph boundary...
Node 8, discovering the vertices that will be sent across graph boundary...
Node 13, discovering the vertices that will be sent across graph boundary...
Node 5, discovering the vertices that will be sent across graph boundary...
Node 0, discovering the vertices that will be sent across graph boundary...
The number of mirror vertices: 0
Node 0, discovering the vertices that will be received across the graph boundary.
Node 9, discovering the vertices that will be sent across graph boundary...
Node 14, discovering the vertices that will be sent across graph boundary...
Node 6, discovering the vertices that will be sent across graph boundary...
Node 1, discovering the vertices that will be sent across graph boundary...
Node 1, discovering the vertices that will be received across the graph boundary.
Node 11, discovering the vertices that will be sent across graph boundary...
Node 12, discovering the vertices that will be sent across graph boundary...
Node 12, discovering the vertices that will be received across the graph boundary.
Node 7, discovering the vertices that will be sent across graph boundary...
Node 2, discovering the vertices that will be sent across graph boundary...
Node 2, discovering the vertices that will be received across the graph boundary.
Node 8, discovering the vertices that will be received across the graph boundary.
Node 13, discovering the vertices that will be received across the graph boundary.
Node 4, discovering the vertices that will be received across the graph boundary.
Node 3, discovering the vertices that will be received across the graph boundary.
Node 9, discovering the vertices that will be received across the graph boundary.
Node 14, discovering the vertices that will be received across the graph boundary.
Node 5, discovering the vertices that will be received across the graph boundary.
Node 10, discovering the vertices that will be received across the graph boundary.
Node 15, discovering the vertices that will be received across the graph boundary.
Node 6, discovering the vertices that will be received across the graph boundary.
Node 11, discovering the vertices that will be received across the graph boundary.
Node 7, discovering the vertices that will be received across the graph boundary.
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
*** Node 8, starting task scheduling...
*** Node 12, starting task scheduling...
*** Node 4, starting task scheduling...
*** Node 0, starting task scheduling...



*** Node 9, starting task scheduling...
*** Node 13, starting task scheduling...
*** Node 5, starting task scheduling...
*** Node 1, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 10, starting task scheduling...
*** Node 14, starting task scheduling...
*** Node 6, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 2, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 11, starting task scheduling...
*** Node 15, starting task scheduling...
*** Node 7, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 3, starting task scheduling...
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
	Epoch 1:	Loss 3.7136	TrainAcc 0.0379	ValidAcc 0.0329	TestAcc 0.0349	BestValid 0.0329
	Epoch 50:	Loss 3.7136	TrainAcc 0.0530	ValidAcc 0.0520	TestAcc 0.0499	BestValid 0.0520
****** Epoch Time (Excluding Evaluation Cost): 0.256 s ******
****** Breakdown Analysis ******
Cluster-Wide Average, Bubble-Pipeline: 68.186 ms (Max: 72.056, Min: 38.628, Sum: 1090.975)
Cluster-Wide Average, Compute: 130.108 ms (Max: 155.083, Min: 126.757, Sum: 2081.731)
Cluster-Wide Average, Communication-Layer: 24.620 ms (Max: 27.231, Min: 15.888, Sum: 393.921)
Cluster-Wide Average, Bubble-Imbalance: 30.289 ms (Max: 34.851, Min: 15.336, Sum: 484.617)
Cluster-Wide Average, Communication-Graph: 0.458 ms (Max: 0.556, Min: 0.402, Sum: 7.326)
Cluster-Wide Average, Optimization: 0.047 ms (Max: 0.048, Min: 0.045, Sum: 0.747)
Cluster-Wide Average, Others: 2.821 ms (Max: 31.035, Min: 0.931, Sum: 45.138)
****** Breakdown Sum: 256.528 ms ******
Cluster-Wide Average, GPU Memory Consumption: 4.896 GB (Max: 5.796, Min: 4.397, Sum: 78.338)
Cluster-Wide Average, Graph-Level Communication Throughput: -nan Gbps (Max: -nan, Min: -nan, Sum: -nan)
Cluster-Wide Average, Layer-Level Communication Throughput: 56.386 Gbps (Max: 62.129, Min: 45.366, Sum: 902.183)
Layer-level communication (cluster-wide, per-epoch): 2.604 GB
Graph-level communication (cluster-wide, per-epoch): 0.000 GB
Weight-sync communication (cluster-wide, per-epoch): 0.000 GB
Total communication (cluster-wide, per-epoch): 2.604 GB
****** Accuracy Results ******
Highest valid_acc: 0.0520
Target test_acc: 0.0499
Epoch to reach the target acc: 49
[MPI Rank 8] Success 
[MPI Rank 12] Success 
[MPI Rank 4] Success 
[MPI Rank 0] Success 
[MPI Rank 9] Success 
[MPI Rank 13] Success 
[MPI Rank 5] Success 
[MPI Rank 1] Success 
[MPI Rank 10] Success 
[MPI Rank 15] Success 
[MPI Rank 6] Success 
[MPI Rank 2] Success 
[MPI Rank 11] Success 
[MPI Rank 14] Success 
[MPI Rank 7] Success 
[MPI Rank 3] Success 
