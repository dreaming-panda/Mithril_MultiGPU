Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
DONE MPI INIT
DONE MPI INIT
Initialized node 0 on machine gnerv2
Initialized node 1 on machine gnerv2
DONE MPI INIT
Initialized node 2 on machine gnerv2
DONE MPI INIT
Initialized node 3 on machine gnerv2
DONE MPI INIT
Initialized node 4 on machine gnerv3
DONE MPI INITDONE MPI INIT
Initialized node 7 on machine gnerv3
DONE MPI INIT
Initialized node 6 on machine gnerv3

Initialized node 5 on machine gnerv3
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
        It takes 2.305 seconds.
Building the CSC structure...
        It takes 2.345 seconds.
Building the CSC structure...
        It takes 2.368 seconds.
Building the CSC structure...
        It takes 2.455 seconds.
Building the CSC structure...
        It takes 2.479 seconds.
Building the CSC structure...
        It takes 2.539 seconds.
Building the CSC structure...
        It takes 2.636 seconds.
Building the CSC structure...
        It takes 2.714 seconds.
Building the CSC structure...
        It takes 2.296 seconds.
        It takes 2.340 seconds.
        It takes 2.361 seconds.
        It takes 2.367 seconds.
        It takes 2.351 seconds.
        It takes 2.450 seconds.
        It takes 2.405 seconds.
        It takes 2.345 seconds.
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
        It takes 0.260 seconds.
Building the Label Vector...
        It takes 0.036 seconds.
        It takes 0.289 seconds.
Building the Label Vector...
        It takes 0.041 seconds.
        It takes 0.300 seconds.
Building the Label Vector...
        It takes 0.033 seconds.
        It takes 0.294 seconds.
Building the Label Vector...
Building the Feature Vector...
        It takes 0.042 seconds.
Building the Feature Vector...
        It takes 0.279 seconds.
Building the Label Vector...
        It takes 0.278 seconds.
Building the Label Vector...
        It takes 0.032 seconds.
The graph dataset locates at /shared_hdd_storage/jingjichen/gnn_datasets/graph_parallel_datasets/reddit/8_parts
The number of GCNII layers: 32
The number of hidden units: 100
The number of training epoches: 50
Learning rate: 0.001000
The partition strategy: model
The dropout rate: 0.500
The checkpointed weight file: /tmp/saved_weights_pipe
The random seed: 1
Number of classes: 41
Number of feature dimensions: 602
Number of vertices: 232965
Number of GPUs: 8
Building the Feature Vector...
        It takes 0.032 seconds.
Building the Feature Vector...
        It takes 0.265 seconds.
Building the Label Vector...
        It takes 0.036 seconds.
GPU 0, layer [0, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
        It takes 0.284 seconds.
Building the Label Vector...
        It takes 0.032 seconds.
GPU 0, layer [0, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
232965, 114848857, 114848857
Number of vertices per chunk: 29121
232965, 114848857, 114848857
Number of vertices per chunk: 29121
train nodes 153431, valid nodes 23831, test nodes 55703
GPU 0, layer [0, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
Chunks (number of global chunks: 8): 0-[0, 29120) 1-[29120, 58241) 2-[58241, 87362) 3-[87362, 116483) 4-[116483, 145604) 5-[145604, 174724) 6-[174724, 203845) 7-[203845, 232965)
GPU 0, layer [0, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
232965, 114848857, 114848857
Number of vertices per chunk: 29121
232965, 114848857, 114848857
Number of vertices per chunk: 29121
GPU 0, layer [0, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
232965, 114848857, 114848857
Number of vertices per chunk: 29121
GPU 0, layer [0, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
232965, 114848857, 114848857
Number of vertices per chunk: 29121
232965, 114848857, 114848857
Number of vertices per chunk: 29121
232965, 114848857, 114848857
Number of vertices per chunk: 29121
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
***** Start profiling the layer-level communication performance *******
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
The layer-level communication performance: 53.003 Gbps (per GPU), 424.022 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 52.770 Gbps (per GPU), 422.160 Gbps (aggregated)
The layer-level communication performance: 52.772 Gbps (per GPU), 422.175 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 52.580 Gbps (per GPU), 420.643 Gbps (aggregated)
The layer-level communication performance: 52.552 Gbps (per GPU), 420.416 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 52.401 Gbps (per GPU), 419.207 Gbps (aggregated)
The layer-level communication performance: 52.363 Gbps (per GPU), 418.905 Gbps (aggregated)
The layer-level communication performance: 52.337 Gbps (per GPU), 418.696 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The graph-level communication performance (supernode = 2): 157.627 Gbps (per GPU), 1261.018 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 157.642 Gbps (per GPU), 1261.137 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 157.627 Gbps (per GPU), 1261.018 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 157.571 Gbps (per GPU), 1260.568 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 157.627 Gbps (per GPU), 1261.018 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 157.645 Gbps (per GPU), 1261.160 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 157.630 Gbps (per GPU), 1261.042 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 157.571 Gbps (per GPU), 1260.569 Gbps (aggregated, cluster-wide)
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
The graph-level communication performance (supernode = 4): 100.785 Gbps (per GPU), 806.280 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 100.785 Gbps (per GPU), 806.280 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 100.785 Gbps (per GPU), 806.280 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 100.785 Gbps (per GPU), 806.280 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 100.785 Gbps (per GPU), 806.280 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 100.785 Gbps (per GPU), 806.280 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 100.785 Gbps (per GPU), 806.280 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 100.786 Gbps (per GPU), 806.287 Gbps (aggregated, cluster-wide)
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
The graph-level communication performance (supernode = 8): 35.743 Gbps (per GPU), 285.948 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 35.742 Gbps (per GPU), 285.937 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 35.743 Gbps (per GPU), 285.946 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 35.743 Gbps (per GPU), 285.948 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 35.742 Gbps (per GPU), 285.939 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 35.742 Gbps (per GPU), 285.934 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 35.742 Gbps (per GPU), 285.937 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 35.743 Gbps (per GPU), 285.946 Gbps (aggregated, cluster-wide)
 LType   LT0   LT1   LT2 Ratio  VSum  ESum
 chk_0 10.29ms 11.41ms 13.79ms  1.34 29.12K 14.23M
 chk_1  5.81ms  7.08ms  9.48ms  1.63 29.12K  6.56M
 chk_2 17.21ms 18.53ms 20.86ms  1.21 29.12K 24.68M
 chk_3 17.37ms 18.62ms 20.95ms  1.21 29.12K 22.95M
 chk_4  5.61ms  6.90ms  9.30ms  1.66 29.12K  6.33M
 chk_5  9.64ms 11.00ms 13.34ms  1.38 29.12K 12.05M
 chk_6 10.81ms 12.03ms 14.26ms  1.32 29.12K 14.60M
 chk_7 10.17ms 11.14ms 13.38ms  1.31 29.12K 13.21M
   Avg 10.86 12.09 14.42
   Max 17.37 18.62 20.95
   Min  5.61  6.90  9.30
 Ratio  3.10  2.70  2.25
   Var 17.25 17.34 17.18
Profiling takes 3.403 s
*** Node 0, starting model training...
*** Node 1, starting model training...
*** Node 4, starting model training...
*** Node 2, starting model training...
*** Node 6, starting model training...
*** Node 3, starting model training...
*** Node 7, starting model training...
*** Node 5, starting model training...
Num Stages: 1 / 1
Node 4, Pipeline Input Tensor: NULL
Node 4, Pipeline Output Tensor: NULL
*** Node 4 owns the model-level partition [0, 421)
*** Node 4, constructing the helper classes...
Node 4, Local Vertex Begin: 116483, Num Local Vertices: 29121
Num Stages: 1 / 1
Node 1, Pipeline Input Tensor: NULL
Node 1, Pipeline Output Tensor: NULL
*** Node 1 owns the model-level partition [0, 421)
*** Node 1, constructing the helper classes...
Node 1, Local Vertex Begin: 29120, Num Local Vertices: 29121
Num Stages: 1 / 1
Node 6, Pipeline Input Tensor: NULL
Node 6, Pipeline Output Tensor: NULL
*** Node 6 owns the model-level partition [0, 421)
*** Node 6, constructing the helper classes...
Node 6, Local Vertex Begin: 174724, Num Local Vertices: 29121
Num Stages: 1 / 1
Node 7, Pipeline Input Tensor: NULL
Node 7, Pipeline Output Tensor: NULL
*** Node 7 owns the model-level partition [0, 421)
*** Node 7, constructing the helper classes...
Node 7, Local Vertex Begin: 203845, Num Local Vertices: 29120
Num Stages: 1 / 1
Node 5, Pipeline Input Tensor: NULL
Node 5, Pipeline Output Tensor: NULL
*** Node 5 owns the model-level partition [0, 421)
*** Node 5, constructing the helper classes...
Node 5, Local Vertex Begin: 145604, Num Local Vertices: 29120
Num Stages: 1 / 1
Node 0, Pipeline Input Tensor: NULL
Node 0, Pipeline Output Tensor: NULL
*** Node 0 owns the model-level partition [0, 421)
*** Node 0, constructing the helper classes...
Node 0, Local Vertex Begin: 0, Num Local Vertices: 29120
Num Stages: 1 / 1
Node 3, Pipeline Input Tensor: NULL
Node 3, Pipeline Output Tensor: NULL
*** Node 3 owns the model-level partition [0, 421)
*** Node 3, constructing the helper classes...
Node 3, Local Vertex Begin: 87362, Num Local Vertices: 29121
Num Stages: 1 / 1
Node 2, Pipeline Input Tensor: NULL
Node 2, Pipeline Output Tensor: NULL
*** Node 2 owns the model-level partition [0, 421)
*** Node 2, constructing the helper classes...
Node 2, Local Vertex Begin: 58241, Num Local Vertices: 29121
*** Node 0, setting up some other necessary information...
*** Node 3, setting up some other necessary information...
*** Node 1, setting up some other necessary information...
*** Node 2, setting up some other necessary information...
*** Node 6, setting up some other necessary information...
*** Node 7, setting up some other necessary information...
*** Node 5, setting up some other necessary information...
*** Node 4, setting up some other necessary information...
+++++++++ Node 4 initializing the weights for op[0, 421)...
+++++++++ Node 1 initializing the weights for op[0, 421)...
+++++++++ Node 5 initializing the weights for op[0, 421)...
+++++++++ Node 2 initializing the weights for op[0, 421)...
+++++++++ Node 3 initializing the weights for op[0, 421)...
+++++++++ Node 6 initializing the weights for op[0, 421)...
+++++++++ Node 7 initializing the weights for op[0, 421)...
+++++++++ Node 0 initializing the weights for op[0, 421)...
Node 0, discovering the vertices that will be sent across graph boundary...
Node 4, discovering the vertices that will be sent across graph boundary...
Node 1, discovering the vertices that will be sent across graph boundary...
Node 5, discovering the vertices that will be sent across graph boundary...
Node 2, discovering the vertices that will be sent across graph boundary...
Node 6, discovering the vertices that will be sent across graph boundary...
Node 3, discovering the vertices that will be sent across graph boundary...
Node 7, discovering the vertices that will be sent across graph boundary...
The number of mirror vertices: 607420
Node 0, discovering the vertices that will be received across the graph boundary.
Node 4, discovering the vertices that will be received across the graph boundary.
Node 1, discovering the vertices that will be received across the graph boundary.
Node 5, discovering the vertices that will be received across the graph boundary.
Node 2, discovering the vertices that will be received across the graph boundary.
Node 6, discovering the vertices that will be received across the graph boundary.
Node 3, discovering the vertices that will be received across the graph boundary.
Node 7, discovering the vertices that will be received across the graph boundary.
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
*** Node 4, starting task scheduling...
*** Node 5, starting task scheduling...
*** Node 6, starting task scheduling...
*** Node 7, starting task scheduling...
*** Node 0, starting task scheduling...
*** Node 1, starting task scheduling...
*** Node 3, starting task scheduling...
The learning rate specified by the user: 0.001000000



The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
*** Node 2, starting task scheduling...
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
	Epoch 1:	Loss 4.1798	TrainAcc 0.1559	ValidAcc 0.1467	TestAcc 0.1451	BestValid 0.1467
	Epoch 50:	Loss 0.7043	TrainAcc 0.9067	ValidAcc 0.9186	TestAcc 0.9159	BestValid 0.9186
****** Epoch Time (Excluding Evaluation Cost): 0.931 s ******
****** Breakdown Analysis ******
Cluster-Wide Average, Bubble-Pipeline: 3.089 ms (Max: 4.862, Min: 0.033, Sum: 24.710)
Cluster-Wide Average, Compute: 281.375 ms (Max: 420.580, Min: 175.250, Sum: 2251.000)
Cluster-Wide Average, Communication-Layer: 0.008 ms (Max: 0.009, Min: 0.007, Sum: 0.066)
Cluster-Wide Average, Bubble-Imbalance: 0.015 ms (Max: 0.016, Min: 0.013, Sum: 0.119)
Cluster-Wide Average, Communication-Graph: 636.498 ms (Max: 740.776, Min: 500.429, Sum: 5091.981)
Cluster-Wide Average, Optimization: 7.918 ms (Max: 7.984, Min: 7.872, Sum: 63.344)
Cluster-Wide Average, Others: 1.714 ms (Max: 1.851, Min: 1.573, Sum: 13.714)
****** Breakdown Sum: 930.617 ms ******
Cluster-Wide Average, GPU Memory Consumption: 10.860 GB (Max: 11.620, Min: 10.735, Sum: 86.882)
Cluster-Wide Average, Graph-Level Communication Throughput: 26.593 Gbps (Max: 49.270, Min: 11.551, Sum: 212.746)
Cluster-Wide Average, Layer-Level Communication Throughput: 0.000 Gbps (Max: 0.000, Min: 0.000, Sum: 0.000)
Layer-level communication (cluster-wide, per-epoch): 0.000 GB
Graph-level communication (cluster-wide, per-epoch): 14.482 GB
Weight-sync communication (cluster-wide, per-epoch): 0.037 GB
Total communication (cluster-wide, per-epoch): 14.519 GB
****** Accuracy Results ******
Highest valid_acc: 0.9186
Target test_acc: 0.9159
Epoch to reach the target acc: 49
[MPI Rank 4] Success 
[MPI Rank 0] Success 
[MPI Rank 5] Success 
[MPI Rank 1] Success 
[MPI Rank 6] Success 
[MPI Rank 2] Success 
[MPI Rank 7] Success 
[MPI Rank 3] Success 
