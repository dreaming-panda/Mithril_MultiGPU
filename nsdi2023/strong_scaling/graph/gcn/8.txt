Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
DONE MPI INITDONE MPI INIT
Initialized node 2 on machine gnerv2
DONE MPI INIT
Initialized node 3 on machine gnerv2
DONE MPI INIT
Initialized node 0 on machine gnerv2

Initialized node 1 on machine gnerv2
DONE MPI INITDONE MPI INIT
Initialized node 6 on machine gnerv3
DONE MPI INIT
Initialized node 4 on machine gnerv3
DONE MPI INIT
Initialized node 7 on machine gnerv3

Initialized node 5 on machine gnerv3
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
        It takes 2.003 seconds.
Building the CSC structure...
        It takes 2.113 seconds.
Building the CSC structure...
        It takes 2.304 seconds.
Building the CSC structure...
        It takes 2.420 seconds.
Building the CSC structure...
        It takes 2.428 seconds.
Building the CSC structure...
        It takes 2.458 seconds.
Building the CSC structure...
        It takes 2.468 seconds.
Building the CSC structure...
        It takes 2.692 seconds.
Building the CSC structure...
        It takes 1.871 seconds.
        It takes 1.909 seconds.
        It takes 2.286 seconds.
        It takes 2.352 seconds.
        It takes 2.412 seconds.
        It takes 2.403 seconds.
        It takes 2.401 seconds.
        It takes 2.386 seconds.
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
        It takes 0.266 seconds.
Building the Label Vector...
Building the Feature Vector...
Building the Feature Vector...
        It takes 0.039 seconds.
Building the Feature Vector...
        It takes 0.315 seconds.
Building the Label Vector...
        It takes 0.032 seconds.
        It takes 0.312 seconds.
Building the Label Vector...
        It takes 0.292 seconds.
Building the Label Vector...
        It takes 0.033 seconds.
        It takes 0.031 seconds.
        It takes 0.304 seconds.
Building the Label Vector...
        It takes 0.320 seconds.
Building the Label Vector...
        It takes 0.040 seconds.
        It takes 0.041 seconds.
        It takes 0.304 seconds.
Building the Label Vector...
        It takes 0.032 seconds.
The graph dataset locates at /shared_hdd_storage/jingjichen/gnn_datasets/graph_parallel_datasets/reddit/8_parts
The number of GCN layers: 32
The number of hidden units: 100
The number of training epoches: 50
Learning rate: 0.001000
The partition strategy: model
The dropout rate: 0.500
The checkpointed weight file: /tmp/saved_weights_pipe
The random seed: 1
Number of classes: 41
Number of feature dimensions: 602
Number of vertices: 232965
Number of GPUs: 8
Building the Feature Vector...
GPU 0, layer [0, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
        It takes 0.273 seconds.
Building the Label Vector...
        It takes 0.032 seconds.
GPU 0, layer [0, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
train nodes 153431, valid nodes 23831, test nodes 55703
GPU 0, layer [0, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
Chunks (number of global chunks: 8): 0-[0, 29120) 1-[29120, 58241) 2-[58241, 87362) 3-[87362, 116483) 4-[116483, 145604) 5-[145604, 174724) 6-[174724, 203845) 7-[203845, 232965)
232965, 114848857, 114848857
Number of vertices per chunk: 29121
232965, 114848857, 114848857
Number of vertices per chunk: 29121
232965, 114848857, 114848857
Number of vertices per chunk: 29121
232965, 114848857, 114848857
Number of vertices per chunk: 29121
232965, 114848857, 114848857
Number of vertices per chunk: 29121
232965, 114848857, 114848857
Number of vertices per chunk: 29121
232965, 114848857, 114848857
Number of vertices per chunk: 29121
GPU 0, layer [0, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
232965, 114848857, 114848857
Number of vertices per chunk: 29121
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
***** Start profiling the layer-level communication performance *******
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
The layer-level communication performance: 54.466 Gbps (per GPU), 435.730 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 54.230 Gbps (per GPU), 433.840 Gbps (aggregated)
The layer-level communication performance: 54.224 Gbps (per GPU), 433.789 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 54.015 Gbps (per GPU), 432.119 Gbps (aggregated)
The layer-level communication performance: 53.994 Gbps (per GPU), 431.950 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 53.810 Gbps (per GPU), 430.479 Gbps (aggregated)
The layer-level communication performance: 53.766 Gbps (per GPU), 430.127 Gbps (aggregated)
The layer-level communication performance: 53.741 Gbps (per GPU), 429.928 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The graph-level communication performance (supernode = 2): 158.536 Gbps (per GPU), 1268.287 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.548 Gbps (per GPU), 1268.383 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.539 Gbps (per GPU), 1268.313 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.458 Gbps (per GPU), 1267.664 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.542 Gbps (per GPU), 1268.335 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.539 Gbps (per GPU), 1268.312 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.545 Gbps (per GPU), 1268.359 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.459 Gbps (per GPU), 1267.671 Gbps (aggregated, cluster-wide)
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
The graph-level communication performance (supernode = 4): 100.918 Gbps (per GPU), 807.341 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 100.917 Gbps (per GPU), 807.334 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 100.921 Gbps (per GPU), 807.367 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 100.917 Gbps (per GPU), 807.334 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 100.918 Gbps (per GPU), 807.347 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 100.917 Gbps (per GPU), 807.334 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 100.916 Gbps (per GPU), 807.329 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 100.925 Gbps (per GPU), 807.399 Gbps (aggregated, cluster-wide)
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
The graph-level communication performance (supernode = 8): 36.351 Gbps (per GPU), 290.807 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 36.349 Gbps (per GPU), 290.794 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 36.350 Gbps (per GPU), 290.797 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 36.351 Gbps (per GPU), 290.805 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 36.347 Gbps (per GPU), 290.779 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 36.350 Gbps (per GPU), 290.801 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 36.347 Gbps (per GPU), 290.779 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 36.348 Gbps (per GPU), 290.783 Gbps (aggregated, cluster-wide)
 LType   LT0   LT1   LT2 Ratio  VSum  ESum
 chk_0  9.40ms  8.83ms  8.63ms  1.09 29.12K 14.23M
 chk_1  5.13ms  4.49ms  4.25ms  1.21 29.12K  6.56M
 chk_2 16.34ms 15.81ms 15.56ms  1.05 29.12K 24.68M
 chk_3 16.49ms 15.94ms 15.67ms  1.05 29.12K 22.95M
 chk_4  4.91ms  4.34ms  4.01ms  1.22 29.12K  6.33M
 chk_5  8.93ms  8.21ms  7.97ms  1.12 29.12K 12.05M
 chk_6 10.05ms  9.45ms  9.12ms  1.10 29.12K 14.60M
 chk_7  9.25ms  8.52ms  8.21ms  1.13 29.12K 13.21M
   Avg 10.06  9.45  9.18
   Max 16.49 15.94 15.67
   Min  4.91  4.34  4.01
 Ratio  3.36  3.67  3.91
   Var 16.76 17.01 17.08
Profiling takes 2.618 s
*** Node 0, starting model training...
*** Node 1, starting model training...
*** Node 2, starting model training...
*** Node 3, starting model training...
*** Node 4, starting model training...
*** Node 6, starting model training...
*** Node 7, starting model training...
*** Node 5, starting model training...
Num Stages: 1 / 1
Node 0, Pipeline Input Tensor: NULL
Node 0, Pipeline Output Tensor: NULL
*** Node 0 owns the model-level partition [0, 160)
*** Node 0, constructing the helper classes...
Node 0, Local Vertex Begin: 0, Num Local Vertices: 29120
Num Stages: 1 / 1
Node 1, Pipeline Input Tensor: NULL
Node 1, Pipeline Output Tensor: NULL
*** Node 1 owns the model-level partition [0, 160)
*** Node 1, constructing the helper classes...
Node 1, Local Vertex Begin: 29120, Num Local Vertices: 29121
Num Stages: 1 / 1
Node 2, Pipeline Input Tensor: NULL
Node 2, Pipeline Output Tensor: NULL
*** Node 2 owns the model-level partition [0, 160)
*** Node 2, constructing the helper classes...
Node 2, Local Vertex Begin: 58241, Num Local Vertices: 29121
Num Stages: 1 / 1
Node 7, Pipeline Input Tensor: NULL
Node 7, Pipeline Output Tensor: NULL
*** Node 7 owns the model-level partition [0, 160)
*** Node 7, constructing the helper classes...
Node 7, Local Vertex Begin: 203845, Num Local Vertices: 29120
Num Stages: 1 / 1
Node 4, Pipeline Input Tensor: NULL
Node 4, Pipeline Output Tensor: NULL
*** Node 4 owns the model-level partition [0, 160)
*** Node 4, constructing the helper classes...
Node 4, Local Vertex Begin: 116483, Num Local Vertices: 29121
Num Stages: 1 / 1
Node 5, Pipeline Input Tensor: NULL
Node 5, Pipeline Output Tensor: NULL
*** Node 5 owns the model-level partition [0, 160)
*** Node 5, constructing the helper classes...
Node 5, Local Vertex Begin: 145604, Num Local Vertices: 29120
Num Stages: 1 / 1
Node 3, Pipeline Input Tensor: NULL
Node 3, Pipeline Output Tensor: NULL
*** Node 3 owns the model-level partition [0, 160)
*** Node 3, constructing the helper classes...
Node 3, Local Vertex Begin: 87362, Num Local Vertices: 29121
Num Stages: 1 / 1
Node 6, Pipeline Input Tensor: NULL
Node 6, Pipeline Output Tensor: NULL
*** Node 6 owns the model-level partition [0, 160)
*** Node 6, constructing the helper classes...
Node 6, Local Vertex Begin: 174724, Num Local Vertices: 29121
*** Node 6, setting up some other necessary information...
*** Node 7, setting up some other necessary information...
*** Node 5, setting up some other necessary information...
*** Node 4, setting up some other necessary information...
*** Node 1, setting up some other necessary information...
*** Node 3, setting up some other necessary information...
*** Node 0, setting up some other necessary information...
*** Node 2, setting up some other necessary information...
+++++++++ Node 5 initializing the weights for op[0, 160)...
+++++++++ Node 1 initializing the weights for op[0, 160)...
+++++++++ Node 7 initializing the weights for op[0, 160)...
+++++++++ Node 4 initializing the weights for op[0, 160)...
+++++++++ Node 2 initializing the weights for op[0, 160)...
+++++++++ Node 6 initializing the weights for op[0, 160)...
+++++++++ Node 0 initializing the weights for op[0, 160)...
+++++++++ Node 3 initializing the weights for op[0, 160)...
Node 4, discovering the vertices that will be sent across graph boundary...
Node 0, discovering the vertices that will be sent across graph boundary...
Node 5, discovering the vertices that will be sent across graph boundary...
Node 1, discovering the vertices that will be sent across graph boundary...
Node 6, discovering the vertices that will be sent across graph boundary...
Node 2, discovering the vertices that will be sent across graph boundary...
Node 7, discovering the vertices that will be sent across graph boundary...
Node 3, discovering the vertices that will be sent across graph boundary...
The number of mirror vertices: 607420
Node 0, discovering the vertices that will be received across the graph boundary.
Node 4, discovering the vertices that will be received across the graph boundary.
Node 1, discovering the vertices that will be received across the graph boundary.
Node 5, discovering the vertices that will be received across the graph boundary.
Node 2, discovering the vertices that will be received across the graph boundary.
Node 6, discovering the vertices that will be received across the graph boundary.
Node 3, discovering the vertices that will be received across the graph boundary.
Node 7, discovering the vertices that will be received across the graph boundary.
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
*** Node 0, starting task scheduling...
*** Node 3, starting task scheduling...
*** Node 1, starting task scheduling...
*** Node 2, starting task scheduling...



The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
*** Node 4, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 5, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 6, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 7, starting task scheduling...
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
	Epoch 1:	Loss 3.7136	TrainAcc 0.0454	ValidAcc 0.0390	TestAcc 0.0428	BestValid 0.0390
	Epoch 50:	Loss 3.2776	TrainAcc 0.0690	ValidAcc 0.0584	TestAcc 0.0574	BestValid 0.0584
****** Epoch Time (Excluding Evaluation Cost): 0.849 s ******
****** Breakdown Analysis ******
Cluster-Wide Average, Bubble-Pipeline: 3.043 ms (Max: 4.714, Min: 0.035, Sum: 24.342)
Cluster-Wide Average, Compute: 203.087 ms (Max: 338.752, Min: 98.292, Sum: 1624.694)
Cluster-Wide Average, Communication-Layer: 0.008 ms (Max: 0.009, Min: 0.007, Sum: 0.066)
Cluster-Wide Average, Bubble-Imbalance: 0.016 ms (Max: 0.019, Min: 0.013, Sum: 0.126)
Cluster-Wide Average, Communication-Graph: 639.707 ms (Max: 742.835, Min: 507.035, Sum: 5117.660)
Cluster-Wide Average, Optimization: 2.802 ms (Max: 2.823, Min: 2.783, Sum: 22.419)
Cluster-Wide Average, Others: 0.812 ms (Max: 0.857, Min: 0.762, Sum: 6.496)
****** Breakdown Sum: 849.475 ms ******
Cluster-Wide Average, GPU Memory Consumption: 6.967 GB (Max: 7.505, Min: 6.872, Sum: 55.733)
Cluster-Wide Average, Graph-Level Communication Throughput: 26.405 Gbps (Max: 48.622, Min: 11.513, Sum: 211.238)
Cluster-Wide Average, Layer-Level Communication Throughput: 0.000 Gbps (Max: 0.000, Min: 0.000, Sum: 0.000)
Layer-level communication (cluster-wide, per-epoch): 0.000 GB
Graph-level communication (cluster-wide, per-epoch): 14.482 GB
Weight-sync communication (cluster-wide, per-epoch): 0.019 GB
Total communication (cluster-wide, per-epoch): 14.501 GB
****** Accuracy Results ******
Highest valid_acc: 0.0584
Target test_acc: 0.0574
Epoch to reach the target acc: 49
[MPI Rank 4] Success 
[MPI Rank 0] Success 
[MPI Rank 5] Success 
[MPI Rank 1] Success 
[MPI Rank 6] Success 
[MPI Rank 2] Success 
[MPI Rank 7] Success 
[MPI Rank 3] Success 
