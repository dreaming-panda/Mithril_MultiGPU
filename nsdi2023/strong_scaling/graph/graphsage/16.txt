Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
DONE MPI INIT
Initialized node 12 on machine gnerv8
DONE MPI INIT
Initialized node 14 on machine gnerv8
DONE MPI INIT
Initialized node 13 on machine gnerv8
DONE MPI INIT
Initialized node 15 on machine gnerv8
DONE MPI INIT
DONE MPI INIT
Initialized node 1 on machine gnerv2
DONE MPI INIT
Initialized node 2 on machine gnerv2
DONE MPI INIT
Initialized node 3 on machine gnerv2
Initialized node 0 on machine gnerv2
DONE MPI INITDONE MPI INIT
Initialized node 7 on machine gnerv3

Initialized node 4 on machine gnerv3
DONE MPI INIT
Initialized node 6 on machine gnerv3
DONE MPI INIT
DONE MPI INITDONE MPI INIT
Initialized node 8 on machine gnerv7
Initialized node 11 on machine gnerv7

DONE MPI INIT
Initialized node 9 on machine gnerv7
Initialized node 5 on machine gnerv3
DONE MPI INIT
Initialized node 10 on machine gnerv7
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
        It takes 1.963 seconds.
Building the CSC structure...
        It takes 2.325 seconds.
Building the CSC structure...
        It takes 2.368 seconds.
Building the CSC structure...
        It takes 2.348 seconds.
Building the CSC structure...
        It takes 2.389 seconds.
Building the CSC structure...
        It takes 2.435 seconds.
Building the CSC structure...
        It takes 2.464 seconds.
Building the CSC structure...
        It takes 2.469 seconds.
Building the CSC structure...
        It takes 2.473 seconds.
Building the CSC structure...
        It takes 2.506 seconds.
Building the CSC structure...
        It takes 2.510 seconds.
Building the CSC structure...
        It takes 2.533 seconds.
Building the CSC structure...
        It takes 2.600 seconds.
Building the CSC structure...
        It takes 2.624 seconds.
Building the CSC structure...
        It takes 2.649 seconds.
Building the CSC structure...
        It takes 2.702 seconds.
Building the CSC structure...
        It takes 1.889 seconds.
        It takes 2.302 seconds.
        It takes 2.314 seconds.
        It takes 2.360 seconds.
        It takes 2.361 seconds.
        It takes 2.369 seconds.
        It takes 2.372 seconds.
        It takes 2.366 seconds.
        It takes 2.390 seconds.
        It takes 2.390 seconds.
        It takes 2.412 seconds.
        It takes 2.322 seconds.
        It takes 2.325 seconds.
        It takes 2.441 seconds.
        It takes 2.347 seconds.
        It takes 2.301 seconds.
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
        It takes 0.319 seconds.
        It takes 0.262 seconds.
Building the Label Vector...
Building the Label Vector...
        It takes 0.031 seconds.
        It takes 0.033 seconds.
        It takes 0.262 seconds.
Building the Label Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
        It takes 0.292 seconds.
Building the Label Vector...
        It takes 0.301 seconds.
Building the Label Vector...
        It takes 0.036 seconds.
        It takes 0.032 seconds.
        It takes 0.040 seconds.
Building the Feature Vector...
        It takes 0.295 seconds.
Building the Label Vector...
        It takes 0.276 seconds.
Building the Label Vector...
        It takes 0.311 seconds.
Building the Label Vector...
        It takes 0.041 seconds.
        It takes 0.038 seconds.
        It takes 0.040 seconds.
        It takes 0.319 seconds.
Building the Label Vector...
        It takes 0.042 seconds.
Building the Feature Vector...
        It takes 0.277 seconds.
Building the Label Vector...
        It takes 0.372 seconds.
Building the Label Vector...
        It takes 0.372 seconds.
Building the Label Vector...
        It takes 0.354 seconds.
Building the Label Vector...
        It takes 0.032 seconds.
        It takes 0.036 seconds.
Building the Feature Vector...
        It takes 0.044 seconds.
        It takes 0.037 seconds.
Building the Feature Vector...
        It takes 0.267 seconds.
Building the Label Vector...
        It takes 0.030 seconds.
        It takes 0.280 seconds.
Building the Label Vector...
        It takes 0.032 seconds.
The graph dataset locates at /shared_hdd_storage/jingjichen/gnn_datasets/graph_parallel_datasets/reddit/16_parts
The number of GCNII layers: 32
The number of hidden units: 100
The number of training epoches: 50
Learning rate: 0.001000
The partition strategy: model
The dropout rate: 0.500
The checkpointed weight file: /tmp/saved_weights_pipe
The random seed: 1
Number of classes: 41
Number of feature dimensions: 602
Number of vertices: 232965
Number of GPUs: 16
        It takes 0.277 seconds.
Building the Label Vector...
        It takes 0.031 seconds.
GPU 0, layer [0, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
232965, 114848857, 114848857
Number of vertices per chunk: 14561
232965, 114848857, 114848857
Number of vertices per chunk: 14561
GPU 0, layer [0, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
232965, 114848857, 114848857
Number of vertices per chunk: 14561
GPU 0, layer [0, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
232965, 114848857, 114848857
Number of vertices per chunk: 14561
232965, 114848857, 114848857
Number of vertices per chunk: 14561
GPU 0, layer [0, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
232965, 114848857, 114848857
Number of vertices per chunk: 14561
232965, 114848857, 114848857
Number of vertices per chunk: 14561
232965, 114848857, 114848857
Number of vertices per chunk: 14561
232965, 114848857, 114848857
Number of vertices per chunk: 14561
train nodes 153431, valid nodes 23831, test nodes 55703
GPU 0, layer [0, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
Chunks (number of global chunks: 16): 0-[0, 14136) 1-[14136, 29133) 2-[29133, 43268) 3-[43268, 57403) 4-[57403, 71538) 5-[71538, 86535) 6-[86535, 101510) 7-[101510, 115645) 8-[115645, 129779) ... 15-[218830, 232965)
232965, 114848857, 114848857
Number of vertices per chunk: 14561
232965, 114848857, 114848857
Number of vertices per chunk: 14561
232965, 114848857, 114848857
Number of vertices per chunk: 14561
GPU 0, layer [0, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
232965, 114848857, 114848857
Number of vertices per chunk: 14561
232965, 114848857, 114848857
Number of vertices per chunk: 14561
232965, 114848857, 114848857
Number of vertices per chunk: 14561
232965, 114848857, 114848857
Number of vertices per chunk: 14561
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
***** Start profiling the layer-level communication performance *******
csr in-out ready !Start Cost Model Initialization...
The layer-level communication performance: 55.774 Gbps (per GPU), 892.384 Gbps (aggregated)
The layer-level communication performance: 55.718 Gbps (per GPU), 891.494 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 55.511 Gbps (per GPU), 888.174 Gbps (aggregated)
The layer-level communication performance: 55.476 Gbps (per GPU), 887.623 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 55.305 Gbps (per GPU), 884.878 Gbps (aggregated)
The layer-level communication performance: 55.290 Gbps (per GPU), 884.642 Gbps (aggregated)
The layer-level communication performance: 55.166 Gbps (per GPU), 882.656 Gbps (aggregated)
The layer-level communication performance: 55.183 Gbps (per GPU), 882.922 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 55.137 Gbps (per GPU), 882.192 Gbps (aggregated)
The layer-level communication performance: 55.076 Gbps (per GPU), 881.212 Gbps (aggregated)
The layer-level communication performance: 55.048 Gbps (per GPU), 880.774 Gbps (aggregated)
The layer-level communication performance: 55.037 Gbps (per GPU), 880.598 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 55.015 Gbps (per GPU), 880.243 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 54.903 Gbps (per GPU), 878.447 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 54.812 Gbps (per GPU), 876.985 Gbps (aggregated)
The layer-level communication performance: 54.790 Gbps (per GPU), 876.635 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The graph-level communication performance (supernode = 2): 157.698 Gbps (per GPU), 2523.174 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 157.693 Gbps (per GPU), 2523.081 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 157.779 Gbps (per GPU), 2524.457 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 157.710 Gbps (per GPU), 2523.364 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 157.698 Gbps (per GPU), 2523.174 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 157.692 Gbps (per GPU), 2523.079 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 157.707 Gbps (per GPU), 2523.317 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 157.704 Gbps (per GPU), 2523.269 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 157.695 Gbps (per GPU), 2523.127 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 157.695 Gbps (per GPU), 2523.127 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 157.701 Gbps (per GPU), 2523.222 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 157.704 Gbps (per GPU), 2523.269 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 157.695 Gbps (per GPU), 2523.127 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 157.696 Gbps (per GPU), 2523.131 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 157.592 Gbps (per GPU), 2521.468 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 157.710 Gbps (per GPU), 2523.364 Gbps (aggregated, cluster-wide)
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
The graph-level communication performance (supernode = 4): 101.329 Gbps (per GPU), 1621.261 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 101.326 Gbps (per GPU), 1621.222 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 101.327 Gbps (per GPU), 1621.235 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 101.328 Gbps (per GPU), 1621.248 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 101.326 Gbps (per GPU), 1621.222 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 101.328 Gbps (per GPU), 1621.248 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 101.330 Gbps (per GPU), 1621.274 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 101.326 Gbps (per GPU), 1621.222 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 101.328 Gbps (per GPU), 1621.248 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 101.330 Gbps (per GPU), 1621.274 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 101.326 Gbps (per GPU), 1621.221 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 101.327 Gbps (per GPU), 1621.235 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 101.327 Gbps (per GPU), 1621.235 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 101.325 Gbps (per GPU), 1621.196 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 101.327 Gbps (per GPU), 1621.235 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 101.327 Gbps (per GPU), 1621.233 Gbps (aggregated, cluster-wide)
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
The graph-level communication performance (supernode = 8): 27.128 Gbps (per GPU), 434.044 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 27.128 Gbps (per GPU), 434.053 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 27.128 Gbps (per GPU), 434.056 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 27.128 Gbps (per GPU), 434.048 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 27.128 Gbps (per GPU), 434.053 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 27.128 Gbps (per GPU), 434.055 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 27.128 Gbps (per GPU), 434.053 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 27.128 Gbps (per GPU), 434.050 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 27.128 Gbps (per GPU), 434.042 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 27.128 Gbps (per GPU), 434.044 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 27.128 Gbps (per GPU), 434.044 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 27.128 Gbps (per GPU), 434.044 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 27.128 Gbps (per GPU), 434.052 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 27.128 Gbps (per GPU), 434.052 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 27.128 Gbps (per GPU), 434.052 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 27.128 Gbps (per GPU), 434.053 Gbps (aggregated, cluster-wide)
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
The graph-level communication performance (supernode = 16): 20.220 Gbps (per GPU), 323.514 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 20.219 Gbps (per GPU), 323.511 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 20.219 Gbps (per GPU), 323.511 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 20.220 Gbps (per GPU), 323.514 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 20.219 Gbps (per GPU), 323.511 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 20.219 Gbps (per GPU), 323.508 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 20.219 Gbps (per GPU), 323.507 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 20.219 Gbps (per GPU), 323.508 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 20.220 Gbps (per GPU), 323.512 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 20.219 Gbps (per GPU), 323.507 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 20.219 Gbps (per GPU), 323.509 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 20.220 Gbps (per GPU), 323.512 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 20.219 Gbps (per GPU), 323.510 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 20.219 Gbps (per GPU), 323.510 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 20.219 Gbps (per GPU), 323.510 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 20.219 Gbps (per GPU), 323.507 Gbps (aggregated, cluster-wide)
 LType   LT0   LT1   LT2 Ratio  VSum  ESum
 chk_0  7.37ms  6.16ms  5.91ms  1.25 14.14K  9.26M
 chk_1 11.86ms 10.57ms 10.24ms  1.16 15.00K 13.57M
 chk_2  9.18ms  7.98ms  7.67ms  1.20 14.13K 11.39M
 chk_3  8.21ms  6.96ms  6.70ms  1.23 14.13K 10.00M
 chk_4  5.78ms  4.58ms  4.29ms  1.35 14.13K  6.52M
 chk_5  5.18ms  3.85ms  3.52ms  1.47 15.00K  5.01M
 chk_6  6.07ms  4.76ms  4.45ms  1.36 14.97K  6.66M
 chk_7  5.70ms  4.37ms  4.05ms  1.41 14.13K  6.09M
 chk_8  5.34ms  4.01ms  3.76ms  1.42 14.13K  5.38M
 chk_9  6.34ms  5.00ms  4.66ms  1.36 14.94K  6.63M
chk_10  4.17ms  2.81ms  2.44ms  1.71 15.00K  3.27M
chk_11  3.78ms  2.43ms  2.09ms  1.81 15.00K  2.66M
chk_12  4.70ms  3.46ms  3.14ms  1.50 14.13K  4.74M
chk_13  7.41ms  6.02ms  5.72ms  1.29 14.98K  8.57M
chk_14  4.95ms  3.62ms  3.28ms  1.51 15.00K  4.75M
chk_15  8.09ms  6.94ms  6.58ms  1.23 14.13K 10.11M
   Avg  6.51  5.22  4.91
   Max 11.86 10.57 10.24
   Min  3.78  2.43  2.09
 Ratio  3.14  4.34  4.91
   Var  4.12  4.23  4.26
Profiling takes 3.060 s
*** Node 0, starting model training...
*** Node 1, starting model training...
*** Node 2, starting model training...
*** Node 3, starting model training...
*** Node 4, starting model training...
*** Node 8, starting model training...
*** Node 5, starting model training...
*** Node 9, starting model training...
*** Node 6, starting model training...
*** Node 10, starting model training...
*** Node 7, starting model training...
*** Node 11, starting model training...
*** Node 12, starting model training...
*** Node 13, starting model training...
*** Node 14, starting model training...
*** Node 15, starting model training...
Num Stages: 1 / 1
Node 0, Pipeline Input Tensor: NULL
Node 0, Pipeline Output Tensor: NULL
*** Node 0 owns the model-level partition [0, 257)
*** Node 0, constructing the helper classes...
Node 0, Local Vertex Begin: 0, Num Local Vertices: 14136
Num Stages: 1 / 1
Node 2, Pipeline Input Tensor: NULL
Node 2, Pipeline Output Tensor: NULL
*** Node 2 owns the model-level partition [0, 257)
*** Node 2, constructing the helper classes...
Node 2, Local Vertex Begin: 29133, Num Local Vertices: 14135
Num Stages: 1 / 1
Node 3, Pipeline Input Tensor: NULL
Node 3, Pipeline Output Tensor: NULL
*** Node 3 owns the model-level partition [0, 257)
*** Node 3, constructing the helper classes...
Node 3, Local Vertex Begin: 43268, Num Local Vertices: 14135
Num Stages: 1 / 1
Node 8, Pipeline Input Tensor: NULL
Node 8, Pipeline Output Tensor: NULL
*** Node 8 owns the model-level partition [0, 257)
*** Node 8, constructing the helper classes...
Node 8, Local Vertex Begin: 115645, Num Local Vertices: 14134
Num Stages: 1 / 1
Node 6, Pipeline Input Tensor: NULL
Node 6, Pipeline Output Tensor: NULL
*** Node 6 owns the model-level partition [0, 257)
*** Node 6, constructing the helper classes...
Node 6, Local Vertex Begin: 86535, Num Local Vertices: 14975
Num Stages: 1 / 1
Node 4, Pipeline Input Tensor: NULL
Node 4, Pipeline Output Tensor: NULL
*** Node 4 owns the model-level partition [0, 257)
*** Node 4, constructing the helper classes...
Node 4, Local Vertex Begin: 57403, Num Local Vertices: 14135
Num Stages: 1 / 1
Node 5, Pipeline Input Tensor: NULL
Node 5, Pipeline Output Tensor: NULL
*** Node 5 owns the model-level partition [0, 257)
*** Node 5, constructing the helper classes...
Node 5, Local Vertex Begin: 71538, Num Local Vertices: 14997
Num Stages: 1 / 1
Node 11, Pipeline Input Tensor: NULL
Node 11, Pipeline Output Tensor: NULL
*** Node 11 owns the model-level partition [0, 257)
*** Node 11, constructing the helper classes...
Node 11, Local Vertex Begin: 159720, Num Local Vertices: 14997
Num Stages: 1 / 1
Node 9, Pipeline Input Tensor: NULL
Node 9, Pipeline Output Tensor: NULL
*** Node 9 owns the model-level partition [0, 257)
*** Node 9, constructing the helper classes...
Node 9, Local Vertex Begin: 129779, Num Local Vertices: 14944
Num Stages: 1 / 1
Node 7, Pipeline Input Tensor: NULL
Node 7, Pipeline Output Tensor: NULL
*** Node 7 owns the model-level partition [0, 257)
*** Node 7, constructing the helper classes...
Node 7, Local Vertex Begin: 101510, Num Local Vertices: 14135
Num Stages: 1 / 1
Node 14, Pipeline Input Tensor: NULL
Node 14, Pipeline Output Tensor: NULL
*** Node 14 owns the model-level partition [0, 257)
*** Node 14, constructing the helper classes...
Node 14, Local Vertex Begin: 203833, Num Local Vertices: 14997
Num Stages: 1 / 1
Node 10, Pipeline Input Tensor: NULL
Node 10, Pipeline Output Tensor: NULL
*** Node 10 owns the model-level partition [0, 257)
*** Node 10, constructing the helper classes...
Node 10, Local Vertex Begin: 144723, Num Local Vertices: 14997
Num Stages: 1 / 1
Node 1, Pipeline Input Tensor: NULL
Node 1, Pipeline Output Tensor: NULL
*** Node 1 owns the model-level partition [0, 257)
*** Node 1, constructing the helper classes...
Node 1, Local Vertex Begin: 14136, Num Local Vertices: 14997
Num Stages: 1 / 1
Node 12, Pipeline Input Tensor: NULL
Node 12, Pipeline Output Tensor: NULL
*** Node 12 owns the model-level partition [0, 257)
*** Node 12, constructing the helper classes...
Node 12, Local Vertex Begin: 174717, Num Local Vertices: 14135
Num Stages: 1 / 1
Node 13, Pipeline Input Tensor: NULL
Node 13, Pipeline Output Tensor: NULL
*** Node 13 owns the model-level partition [0, 257)
*** Node 13, constructing the helper classes...
Node 13, Local Vertex Begin: 188852, Num Local Vertices: 14981
Num Stages: 1 / 1
Node 15, Pipeline Input Tensor: NULL
Node 15, Pipeline Output Tensor: NULL
*** Node 15 owns the model-level partition [0, 257)
*** Node 15, constructing the helper classes...
Node 15, Local Vertex Begin: 218830, Num Local Vertices: 14135
*** Node 3, setting up some other necessary information...
*** Node 13, setting up some other necessary information...
*** Node 11, setting up some other necessary information...
*** Node 14, setting up some other necessary information...
*** Node 10, setting up some other necessary information...
*** Node 1, setting up some other necessary information...
*** Node 5, setting up some other necessary information...
*** Node 15, setting up some other necessary information...
*** Node 9, setting up some other necessary information...
*** Node 0, setting up some other necessary information...
*** Node 4, setting up some other necessary information...
*** Node 12, setting up some other necessary information...
*** Node 8, setting up some other necessary information...
*** Node 7, setting up some other necessary information...
*** Node 2, setting up some other necessary information...
*** Node 6, setting up some other necessary information...
+++++++++ Node 13 initializing the weights for op[0, 257)...
+++++++++ Node 5 initializing the weights for op[0, 257)...
+++++++++ Node 12 initializing the weights for op[0, 257)...
+++++++++ Node 1 initializing the weights for op[0, 257)...
+++++++++ Node 9 initializing the weights for op[0, 257)...
+++++++++ Node 8 initializing the weights for op[0, 257)...
+++++++++ Node 3 initializing the weights for op[0, 257)...
+++++++++ Node 10 initializing the weights for op[0, 257)...
+++++++++ Node 0 initializing the weights for op[0, 257)...
+++++++++ Node 11 initializing the weights for op[0, 257)...
+++++++++ Node 6 initializing the weights for op[0, 257)...
+++++++++ Node 14 initializing the weights for op[0, 257)...
+++++++++ Node 4 initializing the weights for op[0, 257)...
+++++++++ Node 15 initializing the weights for op[0, 257)...
+++++++++ Node 7 initializing the weights for op[0, 257)...
+++++++++ Node 2 initializing the weights for op[0, 257)...
Node 12, discovering the vertices that will be sent across graph boundary...
Node 0, discovering the vertices that will be sent across graph boundary...
Node 13, discovering the vertices that will be sent across graph boundary...
Node 8, discovering the vertices that will be sent across graph boundary...
Node 1, discovering the vertices that will be sent across graph boundary...
Node 4, discovering the vertices that will be sent across graph boundary...
Node 14, discovering the vertices that will be sent across graph boundary...
Node 9, discovering the vertices that will be sent across graph boundary...
Node 2, discovering the vertices that will be sent across graph boundary...
Node 5, discovering the vertices that will be sent across graph boundary...
Node 15, discovering the vertices that will be sent across graph boundary...
Node 10, discovering the vertices that will be sent across graph boundary...
Node 3, discovering the vertices that will be sent across graph boundary...
Node 7, discovering the vertices that will be sent across graph boundary...
Node 11, discovering the vertices that will be sent across graph boundary...
Node 6, discovering the vertices that will be sent across graph boundary...
Node 12, discovering the vertices that will be received across the graph boundary.
Node 8, discovering the vertices that will be received across the graph boundary.
The number of mirror vertices: 1294179
Node 0, discovering the vertices that will be received across the graph boundary.
Node 4, discovering the vertices that will be received across the graph boundary.
Node 13, discovering the vertices that will be received across the graph boundary.
Node 9, discovering the vertices that will be received across the graph boundary.
Node 1, discovering the vertices that will be received across the graph boundary.
Node 5, discovering the vertices that will be received across the graph boundary.
Node 14, discovering the vertices that will be received across the graph boundary.
Node 10, discovering the vertices that will be received across the graph boundary.
Node 2, discovering the vertices that will be received across the graph boundary.
Node 6, discovering the vertices that will be received across the graph boundary.
Node 15, discovering the vertices that will be received across the graph boundary.
Node 11, discovering the vertices that will be received across the graph boundary.
Node 3, discovering the vertices that will be received across the graph boundary.
Node 7, discovering the vertices that will be received across the graph boundary.
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
*** Node 12, starting task scheduling...
*** Node 8, starting task scheduling...
*** Node 0, starting task scheduling...



The learning rate specified by the user: 0.001000000
*** Node 5, starting task scheduling...
*** Node 13, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 9, starting task scheduling...
*** Node 1, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 6, starting task scheduling...
*** Node 14, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 10, starting task scheduling...
*** Node 2, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 7, starting task scheduling...
*** Node 15, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 11, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 3, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 4, starting task scheduling...
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
	Epoch 1:	Loss 14.8473	TrainAcc 0.0316	ValidAcc 0.0300	TestAcc 0.0291	BestValid 0.0300
	Epoch 50:	Loss 3.2615	TrainAcc 0.0690	ValidAcc 0.0584	TestAcc 0.0574	BestValid 0.0584
****** Epoch Time (Excluding Evaluation Cost): 0.877 s ******
****** Breakdown Analysis ******
Cluster-Wide Average, Bubble-Pipeline: 2.275 ms (Max: 3.381, Min: 0.034, Sum: 36.392)
Cluster-Wide Average, Compute: 121.801 ms (Max: 232.903, Min: 64.565, Sum: 1948.814)
Cluster-Wide Average, Communication-Layer: 0.008 ms (Max: 0.009, Min: 0.007, Sum: 0.132)
Cluster-Wide Average, Bubble-Imbalance: 0.015 ms (Max: 0.017, Min: 0.013, Sum: 0.239)
Cluster-Wide Average, Communication-Graph: 740.696 ms (Max: 796.724, Min: 631.870, Sum: 11851.133)
Cluster-Wide Average, Optimization: 10.952 ms (Max: 10.987, Min: 10.911, Sum: 175.233)
Cluster-Wide Average, Others: 1.132 ms (Max: 1.225, Min: 1.064, Sum: 18.120)
****** Breakdown Sum: 876.879 ms ******
Cluster-Wide Average, GPU Memory Consumption: 6.282 GB (Max: 7.157, Min: 6.208, Sum: 100.510)
Cluster-Wide Average, Graph-Level Communication Throughput: 23.327 Gbps (Max: 43.130, Min: 13.888, Sum: 373.227)
Cluster-Wide Average, Layer-Level Communication Throughput: 0.000 Gbps (Max: 0.000, Min: 0.000, Sum: 0.000)
Layer-level communication (cluster-wide, per-epoch): 0.000 GB
Graph-level communication (cluster-wide, per-epoch): 30.856 GB
Weight-sync communication (cluster-wide, per-epoch): 0.081 GB
Total communication (cluster-wide, per-epoch): 30.937 GB
****** Accuracy Results ******
Highest valid_acc: 0.0584
Target test_acc: 0.0574
Epoch to reach the target acc: 49
[MPI Rank 0] Success 
[MPI Rank 12] Success 
[MPI Rank 8] Success 
[MPI Rank 1] Success 
[MPI Rank 4] Success 
[MPI Rank 13] Success 
[MPI Rank 9] Success 
[MPI Rank 2] Success 
[MPI Rank 5] Success 
[MPI Rank 14] Success 
[MPI Rank 10] Success 
[MPI Rank 3] Success 
[MPI Rank 6] Success 
[MPI Rank 15] Success 
[MPI Rank 11] Success 
[MPI Rank 7] Success 
