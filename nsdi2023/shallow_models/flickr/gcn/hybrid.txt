Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
DONE MPI INIT
DONE MPI INITInitialized node 4 on machine gnerv8

Initialized node 5 on machine gnerv8
DONE MPI INIT
Initialized node 7 on machine gnerv8
DONE MPI INIT
Initialized node 6 on machine gnerv8
DONE MPI INIT
DONE MPI INITDONE MPI INIT
Initialized node 3 on machine gnerv7
Initialized node 0 on machine gnerv7
DONE MPI INIT
Initialized node 2 on machine gnerv7

Initialized node 1 on machine gnerv7
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
        It takes 2.402 seconds.
Building the CSC structure...
        It takes 2.402 seconds.
Building the CSC structure...
        It takes 2.402 seconds.
Building the CSC structure...
        It takes 2.402 seconds.
Building the CSC structure...
        It takes 2.403 seconds.
Building the CSC structure...
        It takes 2.403 seconds.
Building the CSC structure...
        It takes 2.405 seconds.
Building the CSC structure...
        It takes 2.405 seconds.
Building the CSC structure...
        It takes 0.023 seconds.
        It takes 0.023 seconds.
        It takes 0.023 seconds.
        It takes 0.024 seconds.
        It takes 0.025 seconds.
        It takes 0.026 seconds.
        It takes 0.023 seconds.
        It takes 0.023 seconds.
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
        It takes 0.344 seconds.
        It takes 0.344 seconds.
        It takes 0.344 seconds.
        It takes 0.343 seconds.
Building the Label Vector...
Building the Label Vector...
Building the Label Vector...
Building the Label Vector...
        It takes 0.363 seconds.
        It takes 0.363 seconds.
        It takes 0.363 seconds.
        It takes 0.363 seconds.
Building the Label Vector...
Building the Label Vector...
Building the Label Vector...
Building the Label Vector...
        It takes 0.188 seconds.
        It takes 0.188 seconds.
        It takes 0.188 seconds.
        It takes 0.188 seconds.
        It takes 0.166 seconds.
        It takes 0.166 seconds.
        It takes 0.166 seconds.
        It takes 0.166 seconds.
The graph dataset locates at /shared_hdd_storage/jingjichen/gnn_datasets/graph_parallel_datasets/flickr/32_parts
The number of GCN layers: 4
The number of hidden units: 100
The number of training epoches: 50
Learning rate: 0.001000
The partition strategy: model
The dropout rate: 0.500
The checkpointed weight file: /tmp/saved_weights_pipe
The random seed: 1
Number of classes: 7
Number of feature dimensions: 500
Number of vertices: 89250
Number of GPUs: 8
GPU 0, layer [0, 2)
GPU 1, layer [2, 4)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 2)
GPU 1, layer [2, 4)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
89250, 989006, 989006
Number of vertices per chunk: 2790
GPU 0, layer [0, 2)
GPU 1, layer [2, 4)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
89250, 989006, 989006
Number of vertices per chunk: 2790
89250, 989006, 989006
Number of vertices per chunk: 2790
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
GPU 0, layer [0, 2)
GPU 1, layer [2, 4)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
csr in-out ready !Start Cost Model Initialization...
89250, 989006, 989006
Number of vertices per chunk: 2790
GPU 0, layer [0, 2)
GPU 1, layer [2, 4)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
89250, 989006, 989006
Number of vertices per chunk: 2790
csr in-out ready !Start Cost Model Initialization...
GPU 0, layer [0, 2)
GPU 1, layer [2, 4)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
csr in-out ready !Start Cost Model Initialization...
GPU 0, layer [0, 2)
GPU 1, layer [2, 4)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
89250, 989006, 989006
Number of vertices per chunk: 2790
89250, 989006, 989006
Number of vertices per chunk: 2790
train nodes 44625, valid nodes 22312, test nodes 22313
GPU 0, layer [0, 2)
GPU 1, layer [2, 4)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
Chunks (number of global chunks: 32): 0-[0, 2710) 1-[2710, 5440) 2-[5440, 8172) 3-[8172, 10885) 4-[10885, 13599) 5-[13599, 16470) 6-[16470, 19189) 7-[19189, 22061) 8-[22061, 24780) ... 31-[86532, 89250)
89250, 989006, 989006
csr in-out ready !Start Cost Model Initialization...
Number of vertices per chunk: 2790
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
***** Start profiling the layer-level communication performance *******
The layer-level communication performance: 59.632 Gbps (per GPU), 477.060 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 59.362 Gbps (per GPU), 474.899 Gbps (aggregated)
The layer-level communication performance: 59.354 Gbps (per GPU), 474.833 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 59.109 Gbps (per GPU), 472.872 Gbps (aggregated)
The layer-level communication performance: 59.078 Gbps (per GPU), 472.625 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 58.859 Gbps (per GPU), 470.871 Gbps (aggregated)
The layer-level communication performance: 58.808 Gbps (per GPU), 470.461 Gbps (aggregated)
The layer-level communication performance: 58.780 Gbps (per GPU), 470.238 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The graph-level communication performance (supernode = 2): 157.152 Gbps (per GPU), 1257.213 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 157.149 Gbps (per GPU), 1257.191 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 157.149 Gbps (per GPU), 1257.193 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 157.152 Gbps (per GPU), 1257.215 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 157.128 Gbps (per GPU), 1257.026 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.219 Gbps (per GPU), 1265.751 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 157.140 Gbps (per GPU), 1257.121 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.255 Gbps (per GPU), 1266.038 Gbps (aggregated, cluster-wide)
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
The graph-level communication performance (supernode = 4): 104.331 Gbps (per GPU), 834.645 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 104.331 Gbps (per GPU), 834.645 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 104.328 Gbps (per GPU), 834.625 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 104.331 Gbps (per GPU), 834.646 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 104.323 Gbps (per GPU), 834.584 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 104.452 Gbps (per GPU), 835.616 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 104.323 Gbps (per GPU), 834.584 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 104.455 Gbps (per GPU), 835.637 Gbps (aggregated, cluster-wide)
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
The graph-level communication performance (supernode = 8): 38.823 Gbps (per GPU), 310.586 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 38.823 Gbps (per GPU), 310.584 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 38.825 Gbps (per GPU), 310.601 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 38.825 Gbps (per GPU), 310.603 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 38.822 Gbps (per GPU), 310.579 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 38.817 Gbps (per GPU), 310.534 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 38.825 Gbps (per GPU), 310.600 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 38.814 Gbps (per GPU), 310.514 Gbps (aggregated, cluster-wide)
 LType   LT0   LT1   LT2 Ratio  VSum  ESum
 chk_0  0.31ms  0.26ms  0.21ms  1.49  2.71K  0.03M
 chk_1  0.31ms  0.26ms  0.20ms  1.51  2.73K  0.03M
 chk_2  0.31ms  0.26ms  0.22ms  1.44  2.73K  0.03M
 chk_3  0.31ms  0.26ms  0.21ms  1.45  2.71K  0.03M
 chk_4  0.31ms  0.27ms  0.21ms  1.44  2.71K  0.02M
 chk_5  0.31ms  0.26ms  0.21ms  1.50  2.87K  0.03M
 chk_6  0.31ms  0.26ms  0.21ms  1.47  2.72K  0.03M
 chk_7  0.31ms  0.25ms  0.20ms  1.53  2.87K  0.03M
 chk_8  0.31ms  0.26ms  0.22ms  1.45  2.72K  0.02M
 chk_9  0.32ms  0.27ms  0.23ms  1.43  2.87K  0.04M
chk_10  0.31ms  0.26ms  0.21ms  1.45  2.73K  0.03M
chk_11  0.32ms  0.27ms  0.22ms  1.44  2.87K  0.03M
chk_12  0.31ms  0.26ms  0.22ms  1.46  2.80K  0.03M
chk_13  0.32ms  0.26ms  0.22ms  1.46  2.87K  0.03M
chk_14  0.31ms  0.26ms  0.21ms  1.47  2.72K  0.02M
chk_15  0.32ms  0.27ms  0.22ms  1.46  2.77K  0.03M
chk_16  0.32ms  0.27ms  0.22ms  1.46  2.83K  0.03M
chk_17  0.32ms  0.27ms  0.22ms  1.47  2.87K  0.03M
chk_18  0.31ms  0.26ms  0.22ms  1.46  2.71K  0.02M
chk_19  0.31ms  0.26ms  0.22ms  1.46  2.71K  0.02M
chk_20  0.32ms  0.26ms  0.22ms  1.45  2.72K  0.02M
chk_21  0.32ms  0.27ms  0.22ms  1.45  2.87K  0.03M
chk_22  0.32ms  0.27ms  0.22ms  1.45  2.87K  0.03M
chk_23  0.31ms  0.27ms  0.22ms  1.45  2.72K  0.03M
chk_24  0.32ms  0.27ms  0.22ms  1.46  2.87K  0.03M
chk_25  0.32ms  0.27ms  0.22ms  1.45  2.74K  0.03M
chk_26  0.32ms  0.27ms  0.22ms  1.45  2.87K  0.03M
chk_27  0.32ms  0.27ms  0.22ms  1.46  2.87K  0.03M
chk_28  0.32ms  0.27ms  0.22ms  1.43  2.87K  0.03M
chk_29  0.32ms  0.26ms  0.22ms  1.45  2.72K  0.02M
chk_30  0.33ms  0.27ms  0.22ms  1.46  2.87K  0.03M
chk_31  0.56ms  0.26ms  0.21ms  2.61  2.72K  0.02M
   Avg  0.32  0.26  0.22
   Max  0.56  0.27  0.23
   Min  0.31  0.25  0.20
 Ratio  1.82  1.07  1.14
   Var  0.00  0.00  0.00
Profiling takes 0.407 s
*** Node 0, starting model training...
Num Stages: 2 / 2
Node 0, Pipeline Input Tensor: NULL
Node 0, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 0 owns the model-level partition [0, 11)
*** Node 0, constructing the helper classes...
Node 0, Local Vertex Begin: 0, Num Local Vertices: 22061
*** Node 1, starting model training...
Num Stages: 2 / 2
Node 1, Pipeline Input Tensor: NULL
Node 1, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 1 owns the model-level partition [0, 11)
*** Node 1, constructing the helper classes...
Node 1, Local Vertex Begin: 22061, Num Local Vertices: 22348
*** Node 2, starting model training...
Num Stages: 2 / 2
Node 2, Pipeline Input Tensor: NULL
*** Node 3, starting model training...
Num Stages: 2 / 2
Node 3, Pipeline Input Tensor: NULL
Node 3, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 3 owns the model-level partition [0, 11)
*** Node 3, constructing the helper classes...
Node 3, Local Vertex Begin: 66720, Num Local Vertices: 22530
Node 2, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 2 owns the model-level partition [0, 11)
*** Node 2, constructing the helper classes...
Node 2, Local Vertex Begin: 44409, Num Local Vertices: 22311
*** Node 4, starting model training...
Num Stages: 2 / 2
Node 4, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 4, Pipeline Output Tensor: NULL
*** Node 4 owns the model-level partition [11, 20)
*** Node 4, constructing the helper classes...
Node 4, Local Vertex Begin: 0, Num Local Vertices: 22061
*** Node 5, starting model training...
Num Stages: 2 / 2
Node 5, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 5, Pipeline Output Tensor: NULL
*** Node 5 owns the model-level partition [11, 20)
*** Node 5, constructing the helper classes...
Node 5, Local Vertex Begin: 22061, Num Local Vertices: 22348
*** Node 6, starting model training...
Num Stages: 2 / 2
Node 6, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 6, Pipeline Output Tensor: NULL
*** Node 6 owns the model-level partition [11, 20)
*** Node 6, constructing the helper classes...
Node 6, Local Vertex Begin: 44409, Num Local Vertices: 22311
*** Node 7, starting model training...
Num Stages: 2 / 2
Node 7, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 7, Pipeline Output Tensor: NULL
*** Node 7 owns the model-level partition [11, 20)
*** Node 7, constructing the helper classes...
Node 7, Local Vertex Begin: 66720, Num Local Vertices: 22530
*** Node 1, setting up some other necessary information...
*** Node 2, setting up some other necessary information...
*** Node 4, setting up some other necessary information...
*** Node 3, setting up some other necessary information...
*** Node 5, setting up some other necessary information...
*** Node 0, setting up some other necessary information...
*** Node 6, setting up some other necessary information...
*** Node 7, setting up some other necessary information...
+++++++++ Node 1 initializing the weights for op[0, 11)...
+++++++++ Node 5 initializing the weights for op[11, 20)...
+++++++++ Node 2 initializing the weights for op[0, 11)...
+++++++++ Node 7 initializing the weights for op[11, 20)...
+++++++++ Node 3 initializing the weights for op[0, 11)...
+++++++++ Node 4 initializing the weights for op[11, 20)...
+++++++++ Node 0 initializing the weights for op[0, 11)...
+++++++++ Node 6 initializing the weights for op[11, 20)...
Node 0, discovering the vertices that will be sent across graph boundary...
Node 1, discovering the vertices that will be sent across graph boundary...
Node 2, discovering the vertices that will be sent across graph boundary...
Node 3, discovering the vertices that will be sent across graph boundary...
Node 4, discovering the vertices that will be sent across graph boundary...
Node 5, discovering the vertices that will be sent across graph boundary...
Node 6, discovering the vertices that will be sent across graph boundary...
Node 7, discovering the vertices that will be sent across graph boundary...
The number of mirror vertices: 270108
Node 0, discovering the vertices that will be received across the graph boundary.
Node 4, discovering the vertices that will be received across the graph boundary.
Node 1, discovering the vertices that will be received across the graph boundary.
Node 5, discovering the vertices that will be received across the graph boundary.
Node 2, discovering the vertices that will be received across the graph boundary.
Node 6, discovering the vertices that will be received across the graph boundary.
Node 3, discovering the vertices that will be received across the graph boundary.
Node 7, discovering the vertices that will be received across the graph boundary.
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
*** Node 5, starting task scheduling...
*** Node 0, starting task scheduling...



*** Node 6, starting task scheduling...
*** Node 1, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 7, starting task scheduling...
*** Node 2, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 4, starting task scheduling...
*** Node 3, starting task scheduling...
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
	Epoch 1:	Loss 2.0405	TrainAcc 0.4204	ValidAcc 0.4226	TestAcc 0.4224	BestValid 0.4226
	Epoch 50:	Loss 1.5939	TrainAcc 0.2584	ValidAcc 0.2582	TestAcc 0.2549	BestValid 0.4226
****** Epoch Time (Excluding Evaluation Cost): 0.020 s ******
****** Breakdown Analysis ******
Cluster-Wide Average, Bubble-Pipeline: 1.834 ms (Max: 2.125, Min: 1.537, Sum: 14.671)
Cluster-Wide Average, Compute: 5.849 ms (Max: 6.179, Min: 5.516, Sum: 46.788)
Cluster-Wide Average, Communication-Layer: 2.595 ms (Max: 2.714, Min: 2.484, Sum: 20.756)
Cluster-Wide Average, Bubble-Imbalance: 0.615 ms (Max: 0.775, Min: 0.465, Sum: 4.920)
Cluster-Wide Average, Communication-Graph: 7.757 ms (Max: 7.923, Min: 7.659, Sum: 62.058)
Cluster-Wide Average, Optimization: 0.681 ms (Max: 0.688, Min: 0.670, Sum: 5.446)
Cluster-Wide Average, Others: 0.897 ms (Max: 1.292, Min: 0.501, Sum: 7.174)
****** Breakdown Sum: 20.227 ms ******
Cluster-Wide Average, GPU Memory Consumption: 1.500 GB (Max: 1.983, Min: 1.313, Sum: 12.001)
Cluster-Wide Average, Graph-Level Communication Throughput: 63.746 Gbps (Max: 73.883, Min: 41.159, Sum: 509.968)
Cluster-Wide Average, Layer-Level Communication Throughput: 27.537 Gbps (Max: 28.425, Min: 26.306, Sum: 220.295)
Layer-level communication (cluster-wide, per-epoch): 0.066 GB
Graph-level communication (cluster-wide, per-epoch): 0.402 GB
Weight-sync communication (cluster-wide, per-epoch): 0.002 GB
Total communication (cluster-wide, per-epoch): 0.471 GB
****** Accuracy Results ******
Highest valid_acc: 0.4226
Target test_acc: 0.4224
Epoch to reach the target acc: 0
[MPI Rank 0] Success 
[MPI Rank 4] Success 
[MPI Rank 1] Success 
[MPI Rank 5] Success 
[MPI Rank 2] Success 
[MPI Rank 6] Success 
[MPI Rank 3] Success 
[MPI Rank 7] Success 
