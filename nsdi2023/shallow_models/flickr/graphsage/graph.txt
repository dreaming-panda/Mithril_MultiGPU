Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
DONE MPI INIT
Initialized node 0 on machine gnerv7
DONE MPI INIT
Initialized node 2 on machine gnerv7
DONE MPI INIT
Initialized node 3 on machine gnerv7
DONE MPI INIT
Initialized node 1 on machine gnerv7
DONE MPI INIT
DONE MPI INITInitialized node 4 on machine gnerv8
DONE MPI INIT
DONE MPI INIT
Initialized node 7 on machine gnerv8
Initialized node 6 on machine gnerv8

Initialized node 5 on machine gnerv8
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
        It takes 0.019 seconds.
Building the CSC structure...
        It takes 0.020 seconds.
Building the CSC structure...
        It takes 0.019 seconds.
Building the CSC structure...
        It takes 0.020 seconds.
Building the CSC structure...
        It takes 0.024 seconds.
Building the CSC structure...
        It takes 0.025 seconds.
Building the CSC structure...
        It takes 0.027 seconds.
Building the CSC structure...
        It takes 0.031 seconds.
Building the CSC structure...
        It takes 0.020 seconds.
        It takes 0.022 seconds.
        It takes 0.022 seconds.
        It takes 0.022 seconds.
        It takes 0.020 seconds.
        It takes 0.020 seconds.
Building the Feature Vector...
        It takes 0.022 seconds.
Building the Feature Vector...
        It takes 0.019 seconds.
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
        It takes 0.103 seconds.
Building the Label Vector...
        It takes 0.102 seconds.
Building the Label Vector...
        It takes 0.008 seconds.
        It takes 0.008 seconds.
        It takes 0.109 seconds.
Building the Label Vector...
        It takes 0.117 seconds.
Building the Label Vector...
        It takes 0.111 seconds.
Building the Label Vector...
        It takes 0.117 seconds.
Building the Label Vector...
        It takes 0.007 seconds.
        It takes 0.114 seconds.
Building the Label Vector...
        It takes 0.007 seconds.
The graph dataset locates at /shared_hdd_storage/jingjichen/gnn_datasets/graph_parallel_datasets/flickr/8_parts
The number of GCNII layers: 4
The number of hidden units: 100
The number of training epoches: 50
Learning rate: 0.001000
The partition strategy: model
The dropout rate: 0.500
The checkpointed weight file: /tmp/saved_weights_pipe
The random seed: 1
Number of classes: 7
Number of feature dimensions: 500
Number of vertices: 89250
Number of GPUs: 8
        It takes 0.007 seconds.
        It takes 0.007 seconds.
        It takes 0.116 seconds.
Building the Label Vector...
        It takes 0.007 seconds.
        It takes 0.007 seconds.
GPU 0, layer [0, 4)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
89250, 989006, 989006
Number of vertices per chunk: 11157
GPU 0, layer [0, 4)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
89250, 989006, 989006
Number of vertices per chunk: 11157
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
GPU 0, layer [0, 4)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
89250, 989006, 989006
Number of vertices per chunk: 11157
GPU 0, layer [0, 4)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 4)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 4)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
89250, 989006, 989006
Number of vertices per chunk: 11157
89250, 989006, 989006
89250, 989006, 989006
Number of vertices per chunk: 11157
Number of vertices per chunk: 11157
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
train nodes 44625, valid nodes 22312, test nodes 22313
GPU 0, layer [0, 4)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
Chunks (number of global chunks: 8): 0-[0, 11156) 1-[11156, 22313) 2-[22313, 33469) 3-[33469, 44625) 4-[44625, 55781) 5-[55781, 66937) 6-[66937, 78093) 7-[78093, 89250)
GPU 0, layer [0, 4)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
89250, 989006, 989006
Number of vertices per chunk: 11157
89250, 989006, 989006
Number of vertices per chunk: 11157
csr in-out ready !Start Cost Model Initialization...
***** Start profiling the layer-level communication performance *******
csr in-out ready !Start Cost Model Initialization...
The layer-level communication performance: 60.512 Gbps (per GPU), 484.096 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 60.208 Gbps (per GPU), 481.664 Gbps (aggregated)
The layer-level communication performance: 60.194 Gbps (per GPU), 481.551 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 59.942 Gbps (per GPU), 479.533 Gbps (aggregated)
The layer-level communication performance: 59.903 Gbps (per GPU), 479.222 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 59.710 Gbps (per GPU), 477.682 Gbps (aggregated)
The layer-level communication performance: 59.662 Gbps (per GPU), 477.295 Gbps (aggregated)
The layer-level communication performance: 59.626 Gbps (per GPU), 477.010 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The graph-level communication performance (supernode = 2): 158.434 Gbps (per GPU), 1267.473 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.437 Gbps (per GPU), 1267.496 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.386 Gbps (per GPU), 1267.088 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.428 Gbps (per GPU), 1267.425 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.434 Gbps (per GPU), 1267.474 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.440 Gbps (per GPU), 1267.520 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.389 Gbps (per GPU), 1267.113 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.434 Gbps (per GPU), 1267.473 Gbps (aggregated, cluster-wide)
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
The graph-level communication performance (supernode = 4): 103.163 Gbps (per GPU), 825.305 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 103.166 Gbps (per GPU), 825.325 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 103.165 Gbps (per GPU), 825.318 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 103.161 Gbps (per GPU), 825.292 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 103.156 Gbps (per GPU), 825.251 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 103.159 Gbps (per GPU), 825.271 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 103.160 Gbps (per GPU), 825.278 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 103.162 Gbps (per GPU), 825.298 Gbps (aggregated, cluster-wide)
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
The graph-level communication performance (supernode = 8): 37.635 Gbps (per GPU), 301.077 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 37.636 Gbps (per GPU), 301.085 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 37.632 Gbps (per GPU), 301.057 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 37.626 Gbps (per GPU), 301.009 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 37.632 Gbps (per GPU), 301.059 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 37.632 Gbps (per GPU), 301.059 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 37.633 Gbps (per GPU), 301.066 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 37.634 Gbps (per GPU), 301.074 Gbps (aggregated, cluster-wide)
 LType   LT0   LT1   LT2 Ratio  VSum  ESum
 chk_0  1.70ms  0.84ms  0.49ms  3.45 11.16K  0.12M
 chk_1  1.71ms  0.84ms  0.50ms  3.42 11.16K  0.11M
 chk_2  1.67ms  0.81ms  0.47ms  3.57 11.16K  0.11M
 chk_3  1.62ms  0.77ms  0.43ms  3.80 11.16K  0.12M
 chk_4  1.68ms  0.84ms  0.50ms  3.39 11.16K  0.11M
 chk_5  1.67ms  0.83ms  0.48ms  3.46 11.16K  0.10M
 chk_6  2.28ms  0.83ms  0.49ms  4.65 11.16K  0.12M
 chk_7  1.70ms  0.84ms  0.50ms  3.42 11.16K  0.11M
   Avg  1.75  0.83  0.48
   Max  2.28  0.84  0.50
   Min  1.62  0.77  0.43
 Ratio  1.41  1.09  1.17
   Var  0.04  0.00  0.00
Profiling takes 0.359 s
*** Node 0, starting model training...
*** Node 1, starting model training...
*** Node 2, starting model training...
*** Node 3, starting model training...
*** Node 4, starting model training...
*** Node 5, starting model training...
*** Node 6, starting model training...
*** Node 7, starting model training...
Num Stages: 1 / 1
Node 0, Pipeline Input Tensor: NULL
Node 0, Pipeline Output Tensor: NULL
*** Node 0 owns the model-level partition [0, 33)
*** Node 0, constructing the helper classes...
Node 0, Local Vertex Begin: 0, Num Local Vertices: 11156
Num Stages: 1 / 1
Node 2, Pipeline Input Tensor: NULL
Node 2, Pipeline Output Tensor: NULL
*** Node 2 owns the model-level partition [0, 33)
*** Node 2, constructing the helper classes...
Node 2, Local Vertex Begin: 22313, Num Local Vertices: 11156
Num Stages: 1 / 1
Node 1, Pipeline Input Tensor: NULL
Node 1, Pipeline Output Tensor: NULL
*** Node 1 owns the model-level partition [0, 33)
*** Node 1, constructing the helper classes...
Node 1, Local Vertex Begin: 11156, Num Local Vertices: 11157
Num Stages: 1 / 1
Node 3, Pipeline Input Tensor: NULL
Node 3, Pipeline Output Tensor: NULL
*** Node 3 owns the model-level partition [0, 33)
*** Node 3, constructing the helper classes...
Node 3, Local Vertex Begin: 33469, Num Local Vertices: 11156
Num Stages: 1 / 1
Node 5, Pipeline Input Tensor: NULL
Node 5, Pipeline Output Tensor: NULL
*** Node 5 owns the model-level partition [0, 33)
*** Node 5, constructing the helper classes...
Node 5, Local Vertex Begin: 55781, Num Local Vertices: 11156
Num Stages: 1 / 1
Num Stages: 1 / 1
Node 7, Pipeline Input Tensor: NULL
Node 7, Pipeline Output Tensor: NULL
*** Node 7 owns the model-level partition [0, 33)
*** Node 7, constructing the helper classes...
Node 7, Local Vertex Begin: 78093, Num Local Vertices: 11157
Num Stages: 1 / 1
Node 4, Pipeline Input Tensor: NULL
Node 4, Pipeline Output Tensor: NULL
*** Node 4 owns the model-level partition [0, 33)
*** Node 4, constructing the helper classes...
Node 4, Local Vertex Begin: 44625, Num Local Vertices: 11156
Node 6, Pipeline Input Tensor: NULL
Node 6, Pipeline Output Tensor: NULL
*** Node 6 owns the model-level partition [0, 33)
*** Node 6, constructing the helper classes...
Node 6, Local Vertex Begin: 66937, Num Local Vertices: 11156
*** Node 1, setting up some other necessary information...
*** Node 0, setting up some other necessary information...
*** Node 2, setting up some other necessary information...
*** Node 5, setting up some other necessary information...
*** Node 3, setting up some other necessary information...
*** Node 6, setting up some other necessary information...
*** Node 7, setting up some other necessary information...
*** Node 4, setting up some other necessary information...
+++++++++ Node 0 initializing the weights for op[0, 33)...
+++++++++ Node 3 initializing the weights for op[0, 33)...
+++++++++ Node 7 initializing the weights for op[0, 33)...
+++++++++ Node 1 initializing the weights for op[0, 33)...
+++++++++ Node 2 initializing the weights for op[0, 33)...
+++++++++ Node 5 initializing the weights for op[0, 33)...
+++++++++ Node 4 initializing the weights for op[0, 33)...
+++++++++ Node 6 initializing the weights for op[0, 33)...
Node 0, discovering the vertices that will be sent across graph boundary...
Node 1, discovering the vertices that will be sent across graph boundary...
Node 2, discovering the vertices that will be sent across graph boundary...
Node 3, discovering the vertices that will be sent across graph boundary...
Node 4, discovering the vertices that will be sent across graph boundary...
Node 5, discovering the vertices that will be sent across graph boundary...
Node 7, discovering the vertices that will be sent across graph boundary...
Node 6, discovering the vertices that will be sent across graph boundary...
The number of mirror vertices: 192232
Node 0, discovering the vertices that will be received across the graph boundary.
Node 1, discovering the vertices that will be received across the graph boundary.
Node 2, discovering the vertices that will be received across the graph boundary.
Node 3, discovering the vertices that will be received across the graph boundary.
Node 4, discovering the vertices that will be received across the graph boundary.
Node 5, discovering the vertices that will be received across the graph boundary.
Node 6, discovering the vertices that will be received across the graph boundary.
Node 7, discovering the vertices that will be received across the graph boundary.
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
*** Node 0, starting task scheduling...



*** Node 1, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 2, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 3, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 4, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 5, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 6, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 7, starting task scheduling...
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
	Epoch 1:	Loss 7.5577	TrainAcc 0.4101	ValidAcc 0.4108	TestAcc 0.4096	BestValid 0.4108
	Epoch 50:	Loss 1.6204	TrainAcc 0.4218	ValidAcc 0.4240	TestAcc 0.4236	BestValid 0.4240
****** Epoch Time (Excluding Evaluation Cost): 0.021 s ******
****** Breakdown Analysis ******
Cluster-Wide Average, Bubble-Pipeline: 0.205 ms (Max: 0.327, Min: 0.059, Sum: 1.642)
Cluster-Wide Average, Compute: 4.318 ms (Max: 4.377, Min: 4.180, Sum: 34.546)
Cluster-Wide Average, Communication-Layer: 0.008 ms (Max: 0.009, Min: 0.007, Sum: 0.065)
Cluster-Wide Average, Bubble-Imbalance: 0.015 ms (Max: 0.016, Min: 0.013, Sum: 0.120)
Cluster-Wide Average, Communication-Graph: 15.466 ms (Max: 15.560, Min: 15.304, Sum: 123.728)
Cluster-Wide Average, Optimization: 0.768 ms (Max: 0.775, Min: 0.760, Sum: 6.143)
Cluster-Wide Average, Others: 0.196 ms (Max: 0.201, Min: 0.183, Sum: 1.565)
****** Breakdown Sum: 20.976 ms ******
Cluster-Wide Average, GPU Memory Consumption: 1.673 GB (Max: 1.854, Min: 1.633, Sum: 13.382)
Cluster-Wide Average, Graph-Level Communication Throughput: 41.733 Gbps (Max: 51.472, Min: 16.699, Sum: 333.864)
Cluster-Wide Average, Layer-Level Communication Throughput: 0.000 Gbps (Max: 0.000, Min: 0.000, Sum: 0.000)
Layer-level communication (cluster-wide, per-epoch): 0.000 GB
Graph-level communication (cluster-wide, per-epoch): 0.573 GB
Weight-sync communication (cluster-wide, per-epoch): 0.007 GB
Total communication (cluster-wide, per-epoch): 0.580 GB
****** Accuracy Results ******
Highest valid_acc: 0.4240
Target test_acc: 0.4236
Epoch to reach the target acc: 49
[MPI Rank 0] Success 
[MPI Rank 4] Success 
[MPI Rank 1] Success 
[MPI Rank 5] Success 
[MPI Rank 2] Success 
[MPI Rank 6] Success 
[MPI Rank 3] Success 
[MPI Rank 7] Success 
