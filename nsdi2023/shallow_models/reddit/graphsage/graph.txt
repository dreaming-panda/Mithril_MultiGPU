Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
DONE MPI INIT
Initialized node 5 on machine gnerv8
DONE MPI INIT
DONE MPI INIT
Initialized node 4 on machine gnerv8
DONE MPI INIT
Initialized node 7 on machine gnerv8
Initialized node 6 on machine gnerv8
DONE MPI INIT
DONE MPI INIT
Initialized node 3 on machine gnerv7
Initialized node 0 on machine gnerv7
DONE MPI INIT
DONE MPI INIT
Initialized node 2 on machine gnerv7
Initialized node 1 on machine gnerv7
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
        It takes 2.356 seconds.
Building the CSC structure...
        It takes 2.456 seconds.
Building the CSC structure...
        It takes 2.461 seconds.
Building the CSC structure...
        It takes 2.474 seconds.
Building the CSC structure...
        It takes 2.521 seconds.
Building the CSC structure...
        It takes 2.634 seconds.
Building the CSC structure...
        It takes 2.669 seconds.
Building the CSC structure...
        It takes 2.704 seconds.
Building the CSC structure...
        It takes 2.297 seconds.
        It takes 2.362 seconds.
        It takes 2.387 seconds.
        It takes 2.419 seconds.
        It takes 2.376 seconds.
        It takes 2.324 seconds.
        It takes 2.364 seconds.
        It takes 2.456 seconds.
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
        It takes 0.314 seconds.
Building the Label Vector...
        It takes 0.043 seconds.
        It takes 0.291 seconds.
Building the Label Vector...
Building the Feature Vector...
        It takes 0.276 seconds.
Building the Label Vector...
        It takes 0.034 seconds.
        It takes 0.039 seconds.
        It takes 0.325 seconds.
Building the Label Vector...
        It takes 0.044 seconds.
        It takes 0.277 seconds.
Building the Label Vector...
Building the Feature Vector...
        It takes 0.032 seconds.
Building the Feature Vector...
        It takes 0.269 seconds.
Building the Label Vector...
        It takes 0.032 seconds.
Building the Feature Vector...
        It takes 0.293 seconds.
Building the Label Vector...
        It takes 0.031 seconds.
GPU 0, layer [0, 4)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
        It takes 0.302 seconds.
Building the Label Vector...
        It takes 0.032 seconds.
The graph dataset locates at /shared_hdd_storage/jingjichen/gnn_datasets/graph_parallel_datasets/reddit/8_parts
The number of GCNII layers: 4
The number of hidden units: 100
The number of training epoches: 50
Learning rate: 0.001000
The partition strategy: model
The dropout rate: 0.500
The checkpointed weight file: /tmp/saved_weights_pipe
The random seed: 1
Number of classes: 41
Number of feature dimensions: 602
Number of vertices: 232965
Number of GPUs: 8
GPU 0, layer [0, 4)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 4)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 4)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 4)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
232965, 114848857, 114848857
Number of vertices per chunk: 29121
232965, 114848857, 114848857
Number of vertices per chunk: 29121
232965, 114848857, 114848857
Number of vertices per chunk: 29121
232965, 114848857, 114848857
Number of vertices per chunk: 29121
GPU 0, layer [0, 4)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
232965, 114848857, 114848857
Number of vertices per chunk: 29121
GPU 0, layer [0, 4)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
train nodes 153431, valid nodes 23831, test nodes 55703
GPU 0, layer [0, 4)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
Chunks (number of global chunks: 8): 0-[0, 29120) 1-[29120, 58241) 2-[58241, 87362) 3-[87362, 116483) 4-[116483, 145604) 5-[145604, 174724) 6-[174724, 203845) 7-[203845, 232965)
232965, 114848857, 114848857
Number of vertices per chunk: 29121
232965, 114848857, 114848857
Number of vertices per chunk: 29121
232965, 114848857, 114848857
Number of vertices per chunk: 29121
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
***** Start profiling the layer-level communication performance *******
csr in-out ready !Start Cost Model Initialization...
The layer-level communication performance: 58.868 Gbps (per GPU), 470.942 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 58.598 Gbps (per GPU), 468.785 Gbps (aggregated)
The layer-level communication performance: 58.577 Gbps (per GPU), 468.620 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 58.338 Gbps (per GPU), 466.702 Gbps (aggregated)
The layer-level communication performance: 58.301 Gbps (per GPU), 466.407 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 58.097 Gbps (per GPU), 464.776 Gbps (aggregated)
The layer-level communication performance: 58.052 Gbps (per GPU), 464.416 Gbps (aggregated)
The layer-level communication performance: 58.015 Gbps (per GPU), 464.117 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The graph-level communication performance (supernode = 2): 159.510 Gbps (per GPU), 1276.076 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 159.467 Gbps (per GPU), 1275.737 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 159.471 Gbps (per GPU), 1275.765 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 159.470 Gbps (per GPU), 1275.761 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 159.443 Gbps (per GPU), 1275.543 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 159.510 Gbps (per GPU), 1276.077 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 159.443 Gbps (per GPU), 1275.543 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 159.513 Gbps (per GPU), 1276.101 Gbps (aggregated, cluster-wide)
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
The graph-level communication performance (supernode = 4): 104.679 Gbps (per GPU), 837.430 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 104.681 Gbps (per GPU), 837.444 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 104.677 Gbps (per GPU), 837.416 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 104.676 Gbps (per GPU), 837.409 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 104.681 Gbps (per GPU), 837.444 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 104.680 Gbps (per GPU), 837.437 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 104.670 Gbps (per GPU), 837.361 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 104.680 Gbps (per GPU), 837.438 Gbps (aggregated, cluster-wide)
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
The graph-level communication performance (supernode = 8): 39.657 Gbps (per GPU), 317.259 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 39.658 Gbps (per GPU), 317.262 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 39.656 Gbps (per GPU), 317.252 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 39.658 Gbps (per GPU), 317.260 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 39.658 Gbps (per GPU), 317.263 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 39.657 Gbps (per GPU), 317.256 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 39.657 Gbps (per GPU), 317.256 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 39.648 Gbps (per GPU), 317.184 Gbps (aggregated, cluster-wide)
 LType   LT0   LT1   LT2 Ratio  VSum  ESum
 chk_0 12.14ms  9.59ms  8.95ms  1.36 29.12K 14.23M
 chk_1  7.74ms  5.18ms  4.57ms  1.69 29.12K  6.56M
 chk_2 19.35ms 16.56ms 16.14ms  1.20 29.12K 24.68M
 chk_3 19.32ms 16.73ms 16.14ms  1.20 29.12K 22.95M
 chk_4  7.53ms  4.98ms  4.55ms  1.66 29.12K  6.33M
 chk_5 11.57ms  8.87ms  8.35ms  1.39 29.12K 12.05M
 chk_6 12.91ms 10.07ms  9.84ms  1.31 29.12K 14.60M
 chk_7 11.95ms  9.36ms  8.64ms  1.38 29.12K 13.21M
   Avg 12.81 10.17  9.65
   Max 19.35 16.73 16.14
   Min  7.53  4.98  4.55
 Ratio  2.57  3.36  3.55
   Var 17.66 17.30 17.42
Profiling takes 2.985 s
*** Node 0, starting model training...
*** Node 2, starting model training...
*** Node 1, starting model training...
*** Node 3, starting model training...
*** Node 4, starting model training...
*** Node 5, starting model training...
*** Node 7, starting model training...
*** Node 6, starting model training...
Num Stages: 1 / 1
Node 0, Pipeline Input Tensor: NULL
Node 0, Pipeline Output Tensor: NULL
*** Node 0 owns the model-level partition [0, 33)
*** Node 0, constructing the helper classes...
Node 0, Local Vertex Begin: 0, Num Local Vertices: 29120
Num Stages: 1 / 1
Node 2, Pipeline Input Tensor: NULL
Node 2, Pipeline Output Tensor: NULL
*** Node 2 owns the model-level partition [0, 33)
*** Node 2, constructing the helper classes...
Node 2, Local Vertex Begin: 58241, Num Local Vertices: 29121
Num Stages: 1 / 1
Node 7, Pipeline Input Tensor: NULL
Node 7, Pipeline Output Tensor: NULL
*** Node 7 owns the model-level partition [0, 33)
*** Node 7, constructing the helper classes...
Node 7, Local Vertex Begin: 203845, Num Local Vertices: 29120
Num Stages: 1 / 1
Node 5, Pipeline Input Tensor: NULL
Node 5, Pipeline Output Tensor: NULL
*** Node 5 owns the model-level partition [0, 33)
*** Node 5, constructing the helper classes...
Node 5, Local Vertex Begin: 145604, Num Local Vertices: 29120
Num Stages: 1 / 1
Node 4, Pipeline Input Tensor: NULL
Node 4, Pipeline Output Tensor: NULL
*** Node 4 owns the model-level partition [0, 33)
*** Node 4, constructing the helper classes...
Node 4, Local Vertex Begin: 116483, Num Local Vertices: 29121
Num Stages: 1 / 1
Node 1, Pipeline Input Tensor: NULL
Node 1, Pipeline Output Tensor: NULL
*** Node 1 owns the model-level partition [0, 33)
*** Node 1, constructing the helper classes...
Node 1, Local Vertex Begin: 29120, Num Local Vertices: 29121
Num Stages: 1 / 1
Node 3, Pipeline Input Tensor: NULL
Node 3, Pipeline Output Tensor: NULL
*** Node 3 owns the model-level partition [0, 33)
*** Node 3, constructing the helper classes...
Node 3, Local Vertex Begin: 87362, Num Local Vertices: 29121
Num Stages: 1 / 1
Node 6, Pipeline Input Tensor: NULL
Node 6, Pipeline Output Tensor: NULL
*** Node 6 owns the model-level partition [0, 33)
*** Node 6, constructing the helper classes...
Node 6, Local Vertex Begin: 174724, Num Local Vertices: 29121
*** Node 1, setting up some other necessary information...
*** Node 0, setting up some other necessary information...
*** Node 5, setting up some other necessary information...
*** Node 7, setting up some other necessary information...
*** Node 4, setting up some other necessary information...
*** Node 6, setting up some other necessary information...
*** Node 2, setting up some other necessary information...
*** Node 3, setting up some other necessary information...
+++++++++ Node 2 initializing the weights for op[0, 33)...
+++++++++ Node 0 initializing the weights for op[0, 33)...
+++++++++ Node 1 initializing the weights for op[0, 33)...
+++++++++ Node 3 initializing the weights for op[0, 33)...
+++++++++ Node 4 initializing the weights for op[0, 33)...
+++++++++ Node 5 initializing the weights for op[0, 33)...
+++++++++ Node 7 initializing the weights for op[0, 33)...
+++++++++ Node 6 initializing the weights for op[0, 33)...
Node 0, discovering the vertices that will be sent across graph boundary...
Node 1, discovering the vertices that will be sent across graph boundary...
Node 4, discovering the vertices that will be sent across graph boundary...
Node 2, discovering the vertices that will be sent across graph boundary...
Node 5, discovering the vertices that will be sent across graph boundary...
Node 3, discovering the vertices that will be sent across graph boundary...
Node 6, discovering the vertices that will be sent across graph boundary...
Node 7, discovering the vertices that will be sent across graph boundary...
The number of mirror vertices: 607420
Node 0, discovering the vertices that will be received across the graph boundary.
Node 4, discovering the vertices that will be received across the graph boundary.
Node 1, discovering the vertices that will be received across the graph boundary.
Node 5, discovering the vertices that will be received across the graph boundary.
Node 2, discovering the vertices that will be received across the graph boundary.
Node 6, discovering the vertices that will be received across the graph boundary.
Node 3, discovering the vertices that will be received across the graph boundary.
Node 7, discovering the vertices that will be received across the graph boundary.
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
*** Node 0, starting task scheduling...



*** Node 4, starting task scheduling...
*** Node 1, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 5, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 2, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 6, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 3, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 7, starting task scheduling...
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
	Epoch 1:	Loss 5.3204	TrainAcc 0.1704	ValidAcc 0.1758	TestAcc 0.1695	BestValid 0.1758
	Epoch 50:	Loss 0.8737	TrainAcc 0.8452	ValidAcc 0.8601	TestAcc 0.8561	BestValid 0.8601
****** Epoch Time (Excluding Evaluation Cost): 0.112 s ******
****** Breakdown Analysis ******
Cluster-Wide Average, Bubble-Pipeline: 3.039 ms (Max: 4.717, Min: 0.035, Sum: 24.311)
Cluster-Wide Average, Compute: 31.120 ms (Max: 47.963, Min: 18.132, Sum: 248.961)
Cluster-Wide Average, Communication-Layer: 0.008 ms (Max: 0.009, Min: 0.007, Sum: 0.063)
Cluster-Wide Average, Bubble-Imbalance: 0.015 ms (Max: 0.020, Min: 0.013, Sum: 0.119)
Cluster-Wide Average, Communication-Graph: 76.316 ms (Max: 87.627, Min: 62.442, Sum: 610.526)
Cluster-Wide Average, Optimization: 0.977 ms (Max: 1.000, Min: 0.951, Sum: 7.816)
Cluster-Wide Average, Others: 0.564 ms (Max: 0.577, Min: 0.542, Sum: 4.513)
****** Breakdown Sum: 112.039 ms ******
Cluster-Wide Average, GPU Memory Consumption: 4.441 GB (Max: 4.768, Min: 4.378, Sum: 35.528)
Cluster-Wide Average, Graph-Level Communication Throughput: 27.384 Gbps (Max: 49.230, Min: 12.197, Sum: 219.074)
Cluster-Wide Average, Layer-Level Communication Throughput: 0.000 Gbps (Max: 0.000, Min: 0.000, Sum: 0.000)
Layer-level communication (cluster-wide, per-epoch): 0.000 GB
Graph-level communication (cluster-wide, per-epoch): 1.810 GB
Weight-sync communication (cluster-wide, per-epoch): 0.009 GB
Total communication (cluster-wide, per-epoch): 1.819 GB
****** Accuracy Results ******
Highest valid_acc: 0.8601
Target test_acc: 0.8561
Epoch to reach the target acc: 49
[MPI Rank 0] Success 
[MPI Rank 4] Success 
[MPI Rank 1] Success 
[MPI Rank 5] Success 
[MPI Rank 2] Success 
[MPI Rank 6] Success 
[MPI Rank 3] Success 
[MPI Rank 7] Success 
