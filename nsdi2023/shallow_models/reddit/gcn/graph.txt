Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
DONE MPI INITDONE MPI INIT
Initialized node 5 on machine gnerv8
DONE MPI INIT
Initialized node 6 on machine gnerv8
DONE MPI INIT
Initialized node 7 on machine gnerv8

Initialized node 4 on machine gnerv8
DONE MPI INIT
DONE MPI INIT
Initialized node 2 on machine gnerv7
DONE MPI INIT
Initialized node 3 on machine gnerv7
Initialized node 0 on machine gnerv7
DONE MPI INIT
Initialized node 1 on machine gnerv7
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
        It takes 2.399 seconds.
Building the CSC structure...
        It takes 2.407 seconds.
Building the CSC structure...
        It takes 2.455 seconds.
Building the CSC structure...
        It takes 2.477 seconds.
Building the CSC structure...
        It takes 2.474 seconds.
Building the CSC structure...
        It takes 2.487 seconds.
Building the CSC structure...
        It takes 2.642 seconds.
Building the CSC structure...
        It takes 2.702 seconds.
Building the CSC structure...
        It takes 2.319 seconds.
        It takes 2.376 seconds.
        It takes 2.326 seconds.
        It takes 2.361 seconds.
        It takes 2.371 seconds.
        It takes 2.419 seconds.
        It takes 2.364 seconds.
        It takes 2.375 seconds.
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
        It takes 0.276 seconds.
Building the Label Vector...
        It takes 0.038 seconds.
Building the Feature Vector...
Building the Feature Vector...
        It takes 0.308 seconds.
Building the Label Vector...
        It takes 0.033 seconds.
Building the Feature Vector...
        It takes 0.318 seconds.
Building the Label Vector...
        It takes 0.044 seconds.
        It takes 0.308 seconds.
Building the Label Vector...
        It takes 0.033 seconds.
        It takes 0.271 seconds.
Building the Label Vector...
        It takes 0.030 seconds.
        It takes 0.330 seconds.
Building the Label Vector...
        It takes 0.033 seconds.
        It takes 0.316 seconds.
Building the Label Vector...
        It takes 0.033 seconds.
Building the Feature Vector...
        It takes 0.300 seconds.
Building the Label Vector...
        It takes 0.032 seconds.
The graph dataset locates at /shared_hdd_storage/jingjichen/gnn_datasets/graph_parallel_datasets/reddit/8_parts
The number of GCN layers: 4
The number of hidden units: 100
The number of training epoches: 50
Learning rate: 0.001000
The partition strategy: model
The dropout rate: 0.500
The checkpointed weight file: /tmp/saved_weights_pipe
The random seed: 1
Number of classes: 41
Number of feature dimensions: 602
Number of vertices: 232965
Number of GPUs: 8
GPU 0, layer [0, 4)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 4)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 4)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 4)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 4)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
232965, 114848857, 114848857
Number of vertices per chunk: 29121
GPU 0, layer [0, 4)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 4)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
232965, 114848857, 114848857
Number of vertices per chunk: 29121
232965, 114848857, 114848857
Number of vertices per chunk: 29121
232965, 114848857, 114848857
Number of vertices per chunk: 29121
232965, 114848857, 114848857
Number of vertices per chunk: 29121
train nodes 153431, valid nodes 23831, test nodes 55703
GPU 0, layer [0, 4)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
Chunks (number of global chunks: 8): 0-[0, 29120) 1-[29120, 58241) 2-[58241, 87362) 3-[87362, 116483) 4-[116483, 145604) 5-[145604, 174724) 6-[174724, 203845) 7-[203845, 232965)
232965, 114848857, 114848857
Number of vertices per chunk: 29121
232965, 114848857, 114848857
Number of vertices per chunk: 29121
232965, 114848857, 114848857
Number of vertices per chunk: 29121
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
***** Start profiling the layer-level communication performance *******
csr in-out ready !Start Cost Model Initialization...
The layer-level communication performance: 59.396 Gbps (per GPU), 475.171 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 59.126 Gbps (per GPU), 473.011 Gbps (aggregated)
The layer-level communication performance: 59.112 Gbps (per GPU), 472.899 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 58.860 Gbps (per GPU), 470.881 Gbps (aggregated)
The layer-level communication performance: 58.839 Gbps (per GPU), 470.716 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 58.648 Gbps (per GPU), 469.187 Gbps (aggregated)
The layer-level communication performance: 58.612 Gbps (per GPU), 468.895 Gbps (aggregated)
The layer-level communication performance: 58.569 Gbps (per GPU), 468.548 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The graph-level communication performance (supernode = 2): 158.428 Gbps (per GPU), 1267.425 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.413 Gbps (per GPU), 1267.305 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.431 Gbps (per GPU), 1267.446 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.416 Gbps (per GPU), 1267.329 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.428 Gbps (per GPU), 1267.425 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.413 Gbps (per GPU), 1267.305 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.425 Gbps (per GPU), 1267.401 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.413 Gbps (per GPU), 1267.305 Gbps (aggregated, cluster-wide)
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
The graph-level communication performance (supernode = 4): 100.303 Gbps (per GPU), 802.424 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 100.301 Gbps (per GPU), 802.411 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 100.303 Gbps (per GPU), 802.424 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 100.299 Gbps (per GPU), 802.392 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 100.304 Gbps (per GPU), 802.430 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 100.298 Gbps (per GPU), 802.386 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 100.304 Gbps (per GPU), 802.430 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 100.300 Gbps (per GPU), 802.399 Gbps (aggregated, cluster-wide)
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
The graph-level communication performance (supernode = 8): 38.551 Gbps (per GPU), 308.411 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 38.551 Gbps (per GPU), 308.406 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 38.551 Gbps (per GPU), 308.409 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 38.550 Gbps (per GPU), 308.403 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 38.551 Gbps (per GPU), 308.406 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 38.549 Gbps (per GPU), 308.396 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 38.551 Gbps (per GPU), 308.411 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 38.550 Gbps (per GPU), 308.401 Gbps (aggregated, cluster-wide)
 LType   LT0   LT1   LT2 Ratio  VSum  ESum
 chk_0  9.48ms  8.94ms  8.76ms  1.08 29.12K 14.23M
 chk_1  5.15ms  4.56ms  4.32ms  1.19 29.12K  6.56M
 chk_2 16.75ms 16.04ms 15.77ms  1.06 29.12K 24.68M
 chk_3 16.85ms 16.15ms 15.89ms  1.06 29.12K 22.95M
 chk_4  5.04ms  4.38ms  4.10ms  1.23 29.12K  6.33M
 chk_5  9.03ms  8.35ms  8.12ms  1.11 29.12K 12.05M
 chk_6 10.18ms  9.57ms  9.28ms  1.10 29.12K 14.60M
 chk_7  9.30ms  8.71ms  8.38ms  1.11 29.12K 13.21M
   Avg 10.22  9.59  9.33
   Max 16.85 16.15 15.89
   Min  5.04  4.38  4.10
 Ratio  3.34  3.69  3.87
   Var 17.74 17.46 17.44
Profiling takes 2.661 s
*** Node 0, starting model training...
*** Node 2, starting model training...
*** Node 3, starting model training...
*** Node 1, starting model training...
*** Node 4, starting model training...
Num Stages: 1 / 1
Node 0, Pipeline Input Tensor: NULL
Node 0, Pipeline Output Tensor: NULL
*** Node 0 owns the model-level partition [0, 20)
*** Node 0, constructing the helper classes...
Node 0, Local Vertex Begin: 0, Num Local Vertices: 29120
*** Node 5, starting model training...
*** Node 6, starting model training...
*** Node 7, starting model training...
Num Stages: 1 / 1
Node 5, Pipeline Input Tensor: NULL
Node 5, Pipeline Output Tensor: NULL
*** Node 5 owns the model-level partition [0, 20)
*** Node 5, constructing the helper classes...
Node 5, Local Vertex Begin: 145604, Num Local Vertices: 29120
Num Stages: 1 / 1
Node 4, Pipeline Input Tensor: NULL
Node 4, Pipeline Output Tensor: NULL
*** Node 4 owns the model-level partition [0, 20)
*** Node 4, constructing the helper classes...
Node 4, Local Vertex Begin: 116483, Num Local Vertices: 29121
Num Stages: 1 / 1
Node 7, Pipeline Input Tensor: NULL
Node 7, Pipeline Output Tensor: NULL
*** Node 7 owns the model-level partition [0, 20)
*** Node 7, constructing the helper classes...
Node 7, Local Vertex Begin: 203845, Num Local Vertices: 29120
Num Stages: 1 / 1
Node 6, Pipeline Input Tensor: NULL
Node 6, Pipeline Output Tensor: NULL
*** Node 6 owns the model-level partition [0, 20)
*** Node 6, constructing the helper classes...
Node 6, Local Vertex Begin: 174724, Num Local Vertices: 29121
Num Stages: 1 / 1
Node 1, Pipeline Input Tensor: NULL
Node 1, Pipeline Output Tensor: NULL
*** Node 1 owns the model-level partition [0, 20)
*** Node 1, constructing the helper classes...
Node 1, Local Vertex Begin: 29120, Num Local Vertices: 29121
Num Stages: 1 / 1
Node 2, Pipeline Input Tensor: NULL
Node 2, Pipeline Output Tensor: NULL
*** Node 2 owns the model-level partition [0, 20)
*** Node 2, constructing the helper classes...
Node 2, Local Vertex Begin: 58241, Num Local Vertices: 29121
Num Stages: 1 / 1
Node 3, Pipeline Input Tensor: NULL
Node 3, Pipeline Output Tensor: NULL
*** Node 3 owns the model-level partition [0, 20)
*** Node 3, constructing the helper classes...
Node 3, Local Vertex Begin: 87362, Num Local Vertices: 29121
*** Node 4, setting up some other necessary information...
*** Node 5, setting up some other necessary information...
*** Node 1, setting up some other necessary information...
*** Node 0, setting up some other necessary information...
*** Node 6, setting up some other necessary information...
*** Node 7, setting up some other necessary information...
*** Node 2, setting up some other necessary information...
*** Node 3, setting up some other necessary information...
+++++++++ Node 0 initializing the weights for op[0, 20)...
+++++++++ Node 2 initializing the weights for op[0, 20)...
+++++++++ Node 1 initializing the weights for op[0, 20)...
+++++++++ Node 3 initializing the weights for op[0, 20)...
+++++++++ Node 4 initializing the weights for op[0, 20)...
+++++++++ Node 5 initializing the weights for op[0, 20)...
+++++++++ Node 6 initializing the weights for op[0, 20)...
+++++++++ Node 7 initializing the weights for op[0, 20)...
Node 0, discovering the vertices that will be sent across graph boundary...
Node 1, discovering the vertices that will be sent across graph boundary...
Node 2, discovering the vertices that will be sent across graph boundary...
Node 3, discovering the vertices that will be sent across graph boundary...
Node 4, discovering the vertices that will be sent across graph boundary...
Node 5, discovering the vertices that will be sent across graph boundary...
Node 6, discovering the vertices that will be sent across graph boundary...
Node 7, discovering the vertices that will be sent across graph boundary...
The number of mirror vertices: 607420
Node 0, discovering the vertices that will be received across the graph boundary.
Node 1, discovering the vertices that will be received across the graph boundary.
Node 4, discovering the vertices that will be received across the graph boundary.
Node 2, discovering the vertices that will be received across the graph boundary.
Node 5, discovering the vertices that will be received across the graph boundary.
Node 3, discovering the vertices that will be received across the graph boundary.
Node 6, discovering the vertices that will be received across the graph boundary.
Node 7, discovering the vertices that will be received across the graph boundary.
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
*** Node 0, starting task scheduling...
*** Node 4, starting task scheduling...
*** Node 1, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 5, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 2, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 6, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 3, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 7, starting task scheduling...
The learning rate specified by the user: 0.001000000



The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
	Epoch 1:	Loss 3.7051	TrainAcc 0.1261	ValidAcc 0.1065	TestAcc 0.1081	BestValid 0.1065
	Epoch 50:	Loss 0.7433	TrainAcc 0.8676	ValidAcc 0.8793	TestAcc 0.8767	BestValid 0.8793
****** Epoch Time (Excluding Evaluation Cost): 0.107 s ******
****** Breakdown Analysis ******
Cluster-Wide Average, Bubble-Pipeline: 3.231 ms (Max: 4.980, Min: 0.219, Sum: 25.850)
Cluster-Wide Average, Compute: 26.281 ms (Max: 43.173, Min: 13.185, Sum: 210.250)
Cluster-Wide Average, Communication-Layer: 0.008 ms (Max: 0.011, Min: 0.007, Sum: 0.064)
Cluster-Wide Average, Bubble-Imbalance: 0.014 ms (Max: 0.017, Min: 0.013, Sum: 0.114)
Cluster-Wide Average, Communication-Graph: 76.098 ms (Max: 87.458, Min: 62.230, Sum: 608.780)
Cluster-Wide Average, Optimization: 0.452 ms (Max: 0.459, Min: 0.445, Sum: 3.615)
Cluster-Wide Average, Others: 0.536 ms (Max: 0.606, Min: 0.512, Sum: 4.286)
****** Breakdown Sum: 106.620 ms ******
Cluster-Wide Average, GPU Memory Consumption: 4.062 GB (Max: 4.296, Min: 4.012, Sum: 32.499)
Cluster-Wide Average, Graph-Level Communication Throughput: 27.509 Gbps (Max: 49.488, Min: 12.236, Sum: 220.069)
Cluster-Wide Average, Layer-Level Communication Throughput: 0.000 Gbps (Max: 0.000, Min: 0.000, Sum: 0.000)
Layer-level communication (cluster-wide, per-epoch): 0.000 GB
Graph-level communication (cluster-wide, per-epoch): 1.810 GB
Weight-sync communication (cluster-wide, per-epoch): 0.004 GB
Total communication (cluster-wide, per-epoch): 1.815 GB
****** Accuracy Results ******
Highest valid_acc: 0.8793
Target test_acc: 0.8767
Epoch to reach the target acc: 49
[MPI Rank 0] Success 
[MPI Rank 1] Success 
[MPI Rank 2] Success 
[MPI Rank 4] Success 
[MPI Rank 3] Success 
[MPI Rank 5] Success 
[MPI Rank 6] Success 
[MPI Rank 7] Success 
