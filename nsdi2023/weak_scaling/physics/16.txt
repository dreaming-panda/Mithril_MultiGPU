Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
DONE MPI INIT
DONE MPI INITDONE MPI INIT
Initialized node 10 on machine gnerv7
Initialized node 8 on machine gnerv7

Initialized node 9 on machine gnerv7
DONE MPI INIT
Initialized node 11 on machine gnerv7
DONE MPI INIT
DONE MPI INITDONE MPI INIT
Initialized node 2 on machine gnerv2
DONE MPI INIT
Initialized node 3 on machine gnerv2
Initialized node 0 on machine gnerv2

Initialized node 1 on machine gnerv2
DONE MPI INITDONE MPI INIT
Initialized node 13 on machine gnerv8
DONE MPI INIT
Initialized node 15 on machine gnerv8
DONE MPI INIT

Initialized node 14 on machine gnerv8
Initialized node 12 on machine gnerv8
DONE MPI INITDONE MPI INIT
Initialized node 6 on machine gnerv3
DONE MPI INIT
Initialized node 7 on machine gnerv3
DONE MPI INIT
Initialized node 4 on machine gnerv3

Initialized node 5 on machine gnerv3
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
        It takes 0.011 seconds.
Building the CSC structure...
        It takes 0.014 seconds.
Building the CSC structure...
        It takes 0.014 seconds.
Building the CSC structure...
        It takes 0.015 seconds.
Building the CSC structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
        It takes 0.011 seconds.
Building the CSC structure...
        It takes 0.011 seconds.
Building the CSC structure...
        It takes 0.011 seconds.
        It takes 0.013 seconds.
Building the CSC structure...
        It takes 0.014 seconds.
Building the CSC structure...
        It takes 0.011 seconds.
Building the CSC structure...
Building the Feature Vector...
        It takes 0.011 seconds.
Building the CSC structure...
        It takes 0.009 seconds.
Building the CSC structure...
        It takes 0.010 seconds.
Building the CSC structure...
        It takes 0.009 seconds.
Building the CSC structure...
        It takes 0.012 seconds.
Building the CSC structure...
        It takes 0.013 seconds.
Building the CSC structure...
        It takes 0.015 seconds.
        It takes 0.015 seconds.
        It takes 0.015 seconds.
        It takes 0.012 seconds.
Building the Feature Vector...
Building the Feature Vector...
        It takes 0.017 seconds.
Building the CSC structure...
Building the Feature Vector...
        It takes 0.014 seconds.
        It takes 0.009 seconds.
        It takes 0.013 seconds.
        It takes 0.011 seconds.
        It takes 0.012 seconds.
Building the Feature Vector...
        It takes 0.015 seconds.
        It takes 0.014 seconds.
        It takes 0.012 seconds.
Building the Feature Vector...
Building the Feature Vector...
        It takes 0.014 seconds.
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
        It takes 0.015 seconds.
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
        It takes 0.011 seconds.
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
        It takes 0.465 seconds.
Building the Label Vector...
        It takes 0.003 seconds.
        It takes 0.470 seconds.
Building the Label Vector...
        It takes 0.007 seconds.
        It takes 0.487 seconds.
Building the Label Vector...
        It takes 0.008 seconds.
        It takes 0.522 seconds.
Building the Label Vector...
        It takes 0.523 seconds.
Building the Label Vector...
        It takes 0.514 seconds.
Building the Label Vector...
        It takes 0.003 seconds.
        It takes 0.514 seconds.
Building the Label Vector...
        It takes 0.007 seconds.
        It takes 0.003 seconds.
        It takes 0.007 seconds.
        It takes 0.529 seconds.
Building the Label Vector...
        It takes 0.529 seconds.
Building the Label Vector...
        It takes 0.003 seconds.
        It takes 0.004 seconds.
The graph dataset locates at /shared_hdd_storage/jingjichen/gnn_datasets/graph_parallel_datasets/physics/16_parts
The number of GCN layers: 128
The number of hidden units: 100
The number of training epoches: 50
Learning rate: 0.001000
The partition strategy: model
The dropout rate: 0.500
The checkpointed weight file: /tmp/saved_weights_pipe
The random seed: 1
Number of classes: 5
Number of feature dimensions: 8415
Number of vertices: 34493
Number of GPUs: 16
        It takes 0.529 seconds.
        It takes 0.533 seconds.
Building the Label Vector...
Building the Label Vector...
        It takes 0.537 seconds.
Building the Label Vector...
        It takes 0.003 seconds.
        It takes 0.003 seconds.
        It takes 0.003 seconds.
        It takes 0.594 seconds.
Building the Label Vector...
        It takes 0.597 seconds.
Building the Label Vector...
        It takes 0.595 seconds.
Building the Label Vector...
        It takes 0.004 seconds.
        It takes 0.599 seconds.
Building the Label Vector...
        It takes 0.003 seconds.
        It takes 0.007 seconds.
        It takes 0.008 seconds.
GPU 0, layer [0, 128)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
34493, 530417, 530417
Number of vertices per chunk: 2156
csr in-out ready !Start Cost Model Initialization...
GPU 0, layer [0, 128)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
34493, 530417, 530417
Number of vertices per chunk: 2156
GPU 0, layer [0, 128)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
34493, 530417, 530417
Number of vertices per chunk: 2156
GPU 0, layer [0, 128)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
csr in-out ready !Start Cost Model Initialization...
34493, 530417, 530417
csr in-out ready !Start Cost Model Initialization...
Number of vertices per chunk: 2156
GPU 0, layer [0, 128)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
csr in-out ready !Start Cost Model Initialization...
34493, 530417, 530417
Number of vertices per chunk: 2156
GPU 0, layer [0, 128)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
34493, 530417, 530417
Number of vertices per chunk: 2156
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
GPU 0, layer [0, 128)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
34493, 530417, 530417
Number of vertices per chunk: 2156
GPU 0, layer [0, 128)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 128)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
34493, 530417, 530417
csr in-out ready !Start Cost Model Initialization...
Number of vertices per chunk: 2156
34493, 530417, 530417
Number of vertices per chunk: 2156
GPU 0, layer [0, 128)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
csr in-out ready !Start Cost Model Initialization...
34493, 530417, 530417
csr in-out ready !Start Cost Model Initialization...
Number of vertices per chunk: 2156
train nodes 100, valid nodes 500, test nodes 1000
GPU 0, layer [0, 128)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
Chunks (number of global chunks: 16): 0-[0, 2093) 1-[2093, 4313) 2-[4313, 6463) 3-[6463, 8682) 4-[8682, 10838) 5-[10838, 13058) 6-[13058, 15278) 7-[15278, 17498) 8-[17498, 19716) ... 15-[32401, 34493)
34493, 530417, 530417
Number of vertices per chunk: 2156
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
***** Start profiling the layer-level communication performance *******
GPU 0, layer [0, 128)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
34493, 530417, 530417
Number of vertices per chunk: 2156
GPU 0, layer [0, 128)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
csr in-out ready !Start Cost Model Initialization...
GPU 0, layer [0, 128)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
34493, 530417, 530417
Number of vertices per chunk: 2156
34493, 530417, 530417
Number of vertices per chunk: 2156
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
GPU 0, layer [0, 128)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 128)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
34493, 530417, 530417
34493, 530417, 530417
Number of vertices per chunk: 2156
Number of vertices per chunk: 2156
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
The layer-level communication performance: 59.966 Gbps (per GPU), 959.457 Gbps (aggregated)
The layer-level communication performance: 59.832 Gbps (per GPU), 957.310 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 59.666 Gbps (per GPU), 954.651 Gbps (aggregated)
The layer-level communication performance: 59.563 Gbps (per GPU), 953.001 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 59.412 Gbps (per GPU), 950.584 Gbps (aggregated)
The layer-level communication performance: 59.322 Gbps (per GPU), 949.151 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 59.231 Gbps (per GPU), 947.694 Gbps (aggregated)
The layer-level communication performance: 59.196 Gbps (per GPU), 947.139 Gbps (aggregated)
The layer-level communication performance: 59.182 Gbps (per GPU), 946.914 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 59.123 Gbps (per GPU), 945.967 Gbps (aggregated)
The layer-level communication performance: 59.103 Gbps (per GPU), 945.646 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 59.058 Gbps (per GPU), 944.924 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 59.027 Gbps (per GPU), 944.426 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 58.845 Gbps (per GPU), 941.519 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 58.744 Gbps (per GPU), 939.905 Gbps (aggregated)
The layer-level communication performance: 58.716 Gbps (per GPU), 939.461 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The graph-level communication performance (supernode = 2): 156.297 Gbps (per GPU), 2500.750 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 156.306 Gbps (per GPU), 2500.889 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 156.291 Gbps (per GPU), 2500.651 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 156.289 Gbps (per GPU), 2500.617 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 156.288 Gbps (per GPU), 2500.610 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 156.300 Gbps (per GPU), 2500.796 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 156.256 Gbps (per GPU), 2500.097 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 156.294 Gbps (per GPU), 2500.703 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 156.283 Gbps (per GPU), 2500.521 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 156.291 Gbps (per GPU), 2500.656 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 156.294 Gbps (per GPU), 2500.703 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 156.294 Gbps (per GPU), 2500.703 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 156.291 Gbps (per GPU), 2500.658 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 156.288 Gbps (per GPU), 2500.610 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 156.256 Gbps (per GPU), 2500.097 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 156.292 Gbps (per GPU), 2500.665 Gbps (aggregated, cluster-wide)
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
The graph-level communication performance (supernode = 4): 101.039 Gbps (per GPU), 1616.627 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 100.995 Gbps (per GPU), 1615.913 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 101.035 Gbps (per GPU), 1616.562 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 101.038 Gbps (per GPU), 1616.615 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 101.034 Gbps (per GPU), 1616.549 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 101.002 Gbps (per GPU), 1616.030 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 101.037 Gbps (per GPU), 1616.588 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 101.037 Gbps (per GPU), 1616.587 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 101.035 Gbps (per GPU), 1616.562 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 101.003 Gbps (per GPU), 1616.043 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 101.034 Gbps (per GPU), 1616.549 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 101.040 Gbps (per GPU), 1616.637 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 101.032 Gbps (per GPU), 1616.512 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 100.961 Gbps (per GPU), 1615.381 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 101.033 Gbps (per GPU), 1616.523 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 101.033 Gbps (per GPU), 1616.536 Gbps (aggregated, cluster-wide)
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
The graph-level communication performance (supernode = 8): 26.725 Gbps (per GPU), 427.594 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 26.724 Gbps (per GPU), 427.588 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 26.723 Gbps (per GPU), 427.569 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 26.719 Gbps (per GPU), 427.510 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 26.724 Gbps (per GPU), 427.585 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 26.723 Gbps (per GPU), 427.567 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 26.725 Gbps (per GPU), 427.594 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 26.721 Gbps (per GPU), 427.529 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 26.719 Gbps (per GPU), 427.498 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 26.724 Gbps (per GPU), 427.584 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 26.720 Gbps (per GPU), 427.513 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 26.716 Gbps (per GPU), 427.463 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 26.722 Gbps (per GPU), 427.545 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 26.724 Gbps (per GPU), 427.576 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 26.721 Gbps (per GPU), 427.537 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 26.722 Gbps (per GPU), 427.559 Gbps (aggregated, cluster-wide)
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
The graph-level communication performance (supernode = 16): 21.710 Gbps (per GPU), 347.359 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 21.709 Gbps (per GPU), 347.349 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 21.709 Gbps (per GPU), 347.352 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 21.710 Gbps (per GPU), 347.359 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 21.710 Gbps (per GPU), 347.355 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 21.708 Gbps (per GPU), 347.332 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 21.709 Gbps (per GPU), 347.349 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 21.710 Gbps (per GPU), 347.352 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 21.709 Gbps (per GPU), 347.350 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 21.707 Gbps (per GPU), 347.318 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 21.708 Gbps (per GPU), 347.336 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 21.710 Gbps (per GPU), 347.355 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 21.709 Gbps (per GPU), 347.350 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 21.708 Gbps (per GPU), 347.331 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 21.710 Gbps (per GPU), 347.360 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 21.705 Gbps (per GPU), 347.280 Gbps (aggregated, cluster-wide)
 LType   LT0   LT1   LT2 Ratio  VSum  ESum
 chk_0  0.98ms  0.25ms  0.18ms  5.33  2.09K  0.02M
 chk_1  1.01ms  0.25ms  0.19ms  5.41  2.22K  0.03M
 chk_2  0.99ms  0.25ms  0.19ms  5.26  2.15K  0.03M
 chk_3  1.03ms  0.25ms  0.18ms  5.58  2.22K  0.02M
 chk_4  1.02ms  0.25ms  0.18ms  5.53  2.16K  0.02M
 chk_5  1.04ms  0.25ms  0.18ms  5.75  2.22K  0.02M
 chk_6  1.04ms  0.25ms  0.18ms  5.63  2.22K  0.02M
 chk_7  1.04ms  0.25ms  0.19ms  5.61  2.22K  0.03M
 chk_8  1.05ms  0.25ms  0.19ms  5.51  2.22K  0.03M
 chk_9  1.02ms  0.24ms  0.19ms  5.40  2.09K  0.02M
chk_10  1.01ms  0.24ms  0.19ms  5.40  2.09K  0.03M
chk_11  1.02ms  0.24ms  0.19ms  5.37  2.09K  0.03M
chk_12  1.02ms  0.25ms  0.19ms  5.25  2.10K  0.04M
chk_13  1.07ms  0.26ms  0.21ms  5.01  2.22K  0.06M
chk_14  1.02ms  0.25ms  0.19ms  5.28  2.09K  0.04M
chk_15  1.02ms  0.24ms  0.19ms  5.28  2.09K  0.04M
   Avg  1.02  0.25  0.19
   Max  1.07  0.26  0.21
   Min  0.98  0.24  0.18
 Ratio  1.09  1.09  1.18
   Var  0.00  0.00  0.00
Profiling takes 0.340 s
*** Node 8, starting model training...
*** Node 0, starting model training...
*** Node 11, starting model training...
*** Node 1, starting model training...
*** Node 4, starting model training...
*** Node 9, starting model training...
*** Node 2, starting model training...
*** Node 5, starting model training...
*** Node 10, starting model training...
*** Node 3, starting model training...
*** Node 6, starting model training...
Num Stages: 1 / 1
Node 0, Pipeline Input Tensor: NULL
Node 0, Pipeline Output Tensor: NULL
*** Node 0 owns the model-level partition [0, 640)
*** Node 0, constructing the helper classes...
Node 0, Local Vertex Begin: 0, Num Local Vertices: 2093
*** Node 7, starting model training...
*** Node 12, starting model training...
*** Node 13, starting model training...
*** Node 14, starting model training...
*** Node 15, starting model training...
Num Stages: 1 / 1
Node 9, Pipeline Input Tensor: NULL
Node 9, Pipeline Output Tensor: NULL
*** Node 9 owns the model-level partition [0, 640)
*** Node 9, constructing the helper classes...
Node 9, Local Vertex Begin: 19716, Num Local Vertices: 2092
Num Stages: 1 / 1
Node 11, Pipeline Input Tensor: NULL
Node 11, Pipeline Output Tensor: NULL
*** Node 11 owns the model-level partition [0, 640)
*** Node 11, constructing the helper classes...
Node 11, Local Vertex Begin: 23902, Num Local Vertices: 2092
Num Stages: 1 / 1
Node 13, Pipeline Input Tensor: NULL
Node 13, Pipeline Output Tensor: NULL
*** Node 13 owns the model-level partition [0, 640)
*** Node 13, constructing the helper classes...
Node 13, Local Vertex Begin: 28089, Num Local Vertices: 2220
Num Stages: 1 / 1
Node 15, Pipeline Input Tensor: NULL
Node 15, Pipeline Output Tensor: NULL
*** Node 15 owns the model-level partition [0, 640)
*** Node 15, constructing the helper classes...
Node 15, Local Vertex Begin: 32401, Num Local Vertices: 2092
Num Stages: 1 / 1
Node 12, Pipeline Input Tensor: NULL
Node 12, Pipeline Output Tensor: NULL
*** Node 12 owns the model-level partition [0, 640)
*** Node 12, constructing the helper classes...
Node 12, Local Vertex Begin: 25994, Num Local Vertices: 2095
Num Stages: 1 / 1
Node 6, Pipeline Input Tensor: NULL
Node 6, Pipeline Output Tensor: NULL
*** Node 6 owns the model-level partition [0, 640)
*** Node 6, constructing the helper classes...
Node 6, Local Vertex Begin: 13058, Num Local Vertices: 2220
Num Stages: 1 / 1
Node 4, Pipeline Input Tensor: NULL
Node 4, Pipeline Output Tensor: NULL
*** Node 4 owns the model-level partition [0, 640)
*** Node 4, constructing the helper classes...
Node 4, Local Vertex Begin: 8682, Num Local Vertices: 2156
Num Stages: 1 / 1
Node 7, Pipeline Input Tensor: NULL
Node 7, Pipeline Output Tensor: NULL
*** Node 7 owns the model-level partition [0, 640)
*** Node 7, constructing the helper classes...
Node 7, Local Vertex Begin: 15278, Num Local Vertices: 2220
Num Stages: 1 / 1
Node 5, Pipeline Input Tensor: NULL
Node 5, Pipeline Output Tensor: NULL
*** Node 5 owns the model-level partition [0, 640)
*** Node 5, constructing the helper classes...
Node 5, Local Vertex Begin: 10838, Num Local Vertices: 2220
Num Stages: 1 / 1
Node 1, Pipeline Input Tensor: NULL
Node 1, Pipeline Output Tensor: NULL
*** Node 1 owns the model-level partition [0, 640)
*** Node 1, constructing the helper classes...
Node 1, Local Vertex Begin: 2093, Num Local Vertices: 2220
Num Stages: 1 / 1
Node 3, Pipeline Input Tensor: NULL
Node 3, Pipeline Output Tensor: NULL
*** Node 3 owns the model-level partition [0, 640)
*** Node 3, constructing the helper classes...
Node 3, Local Vertex Begin: 6463, Num Local Vertices: 2219
Num Stages: 1 / 1
Node 8, Pipeline Input Tensor: NULL
Node 8, Pipeline Output Tensor: NULL
*** Node 8 owns the model-level partition [0, 640)
*** Node 8, constructing the helper classes...
Node 8, Local Vertex Begin: 17498, Num Local Vertices: 2218
Num Stages: 1 / 1
Node 10, Pipeline Input Tensor: NULL
Node 10, Pipeline Output Tensor: NULL
*** Node 10 owns the model-level partition [0, 640)
*** Node 10, constructing the helper classes...
Node 10, Local Vertex Begin: 21808, Num Local Vertices: 2094
Num Stages: 1 / 1
Node 2, Pipeline Input Tensor: NULL
Node 2, Pipeline Output Tensor: NULL
*** Node 2 owns the model-level partition [0, 640)
*** Node 2, constructing the helper classes...
Node 2, Local Vertex Begin: 4313, Num Local Vertices: 2150
Num Stages: 1 / 1
Node 14, Pipeline Input Tensor: NULL
Node 14, Pipeline Output Tensor: NULL
*** Node 14 owns the model-level partition [0, 640)
*** Node 14, constructing the helper classes...
Node 14, Local Vertex Begin: 30309, Num Local Vertices: 2092
*** Node 1, setting up some other necessary information...
*** Node 13, setting up some other necessary information...
*** Node 2, setting up some other necessary information...
*** Node 12, setting up some other necessary information...
*** Node 9, setting up some other necessary information...
*** Node 0, setting up some other necessary information...
*** Node 14, setting up some other necessary information...
*** Node 8, setting up some other necessary information...
*** Node 3, setting up some other necessary information...
*** Node 15, setting up some other necessary information...
*** Node 10, setting up some other necessary information...
*** Node 11, setting up some other necessary information...
*** Node 4, setting up some other necessary information...
*** Node 6, setting up some other necessary information...
*** Node 5, setting up some other necessary information...
*** Node 7, setting up some other necessary information...
+++++++++ Node 1 initializing the weights for op[0, 640)...
+++++++++ Node 0 initializing the weights for op[0, 640)...
+++++++++ Node 4 initializing the weights for op[0, 640)...
+++++++++ Node 9 initializing the weights for op[0, 640)...
+++++++++ Node 5 initializing the weights for op[0, 640)...
+++++++++ Node 13 initializing the weights for op[0, 640)...
+++++++++ Node 10 initializing the weights for op[0, 640)...
+++++++++ Node 15 initializing the weights for op[0, 640)...
+++++++++ Node 2 initializing the weights for op[0, 640)...
+++++++++ Node 7 initializing the weights for op[0, 640)...
+++++++++ Node 3 initializing the weights for op[0, 640)...
+++++++++ Node 14 initializing the weights for op[0, 640)...
+++++++++ Node 8 initializing the weights for op[0, 640)...
+++++++++ Node 12 initializing the weights for op[0, 640)...
+++++++++ Node 11 initializing the weights for op[0, 640)...
+++++++++ Node 6 initializing the weights for op[0, 640)...
Node 0, discovering the vertices that will be sent across graph boundary...
Node 1, discovering the vertices that will be sent across graph boundary...
Node 3, discovering the vertices that will be sent across graph boundary...
Node 12, discovering the vertices that will be sent across graph boundary...
Node 8, discovering the vertices that will be sent across graph boundary...
Node 2, discovering the vertices that will be sent across graph boundary...
Node 4, discovering the vertices that will be sent across graph boundary...
Node 13, discovering the vertices that will be sent across graph boundary...
Node 9, discovering the vertices that will be sent across graph boundary...
Node 5, discovering the vertices that will be sent across graph boundary...
Node 14, discovering the vertices that will be sent across graph boundary...
Node 10, discovering the vertices that will be sent across graph boundary...
Node 6, discovering the vertices that will be sent across graph boundary...
Node 15, discovering the vertices that will be sent across graph boundary...
Node 11, discovering the vertices that will be sent across graph boundary...
Node 7, discovering the vertices that will be sent across graph boundary...
Node 12, discovering the vertices that will be received across the graph boundary.
Node 8, discovering the vertices that will be received across the graph boundary.
The number of mirror vertices: 58999
Node 0, discovering the vertices that will be received across the graph boundary.
Node 4, discovering the vertices that will be received across the graph boundary.
Node 13, discovering the vertices that will be received across the graph boundary.
Node 9, discovering the vertices that will be received across the graph boundary.
Node 1, discovering the vertices that will be received across the graph boundary.
Node 5, discovering the vertices that will be received across the graph boundary.
Node 14, discovering the vertices that will be received across the graph boundary.
Node 10, discovering the vertices that will be received across the graph boundary.
Node 2, discovering the vertices that will be received across the graph boundary.
Node 6, discovering the vertices that will be received across the graph boundary.
Node 15, discovering the vertices that will be received across the graph boundary.
Node 11, discovering the vertices that will be received across the graph boundary.
Node 3, discovering the vertices that will be received across the graph boundary.
Node 7, discovering the vertices that will be received across the graph boundary.
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
*** Node 12, starting task scheduling...
*** Node 8, starting task scheduling...
*** Node 0, starting task scheduling...



*** Node 4, starting task scheduling...
*** Node 13, starting task scheduling...
*** Node 9, starting task scheduling...
*** Node 1, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 5, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 14, starting task scheduling...
*** Node 10, starting task scheduling...
*** Node 2, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 6, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 15, starting task scheduling...
*** Node 11, starting task scheduling...
*** Node 3, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 7, starting task scheduling...
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
	Epoch 1:	Loss 1.6094	TrainAcc 0.2000	ValidAcc 0.1860	TestAcc 0.1750	BestValid 0.1860
	Epoch 50:	Loss 1.6094	TrainAcc 0.2000	ValidAcc 0.1860	TestAcc 0.1750	BestValid 0.1860
****** Epoch Time (Excluding Evaluation Cost): 0.314 s ******
****** Breakdown Analysis ******
Cluster-Wide Average, Bubble-Pipeline: 0.214 ms (Max: 0.284, Min: 0.133, Sum: 3.429)
Cluster-Wide Average, Compute: 36.063 ms (Max: 38.966, Min: 34.307, Sum: 577.003)
Cluster-Wide Average, Communication-Layer: 0.009 ms (Max: 0.009, Min: 0.007, Sum: 0.137)
Cluster-Wide Average, Bubble-Imbalance: 0.016 ms (Max: 0.018, Min: 0.013, Sum: 0.249)
Cluster-Wide Average, Communication-Graph: 254.506 ms (Max: 256.265, Min: 251.583, Sum: 4072.089)
Cluster-Wide Average, Optimization: 21.982 ms (Max: 22.124, Min: 21.874, Sum: 351.708)
Cluster-Wide Average, Others: 1.420 ms (Max: 1.555, Min: 1.224, Sum: 22.718)
****** Breakdown Sum: 314.208 ms ******
Cluster-Wide Average, GPU Memory Consumption: 4.283 GB (Max: 5.497, Min: 4.190, Sum: 68.535)
Cluster-Wide Average, Graph-Level Communication Throughput: 13.110 Gbps (Max: 23.426, Min: 5.656, Sum: 209.754)
Cluster-Wide Average, Layer-Level Communication Throughput: 0.000 Gbps (Max: 0.000, Min: 0.000, Sum: 0.000)
Layer-level communication (cluster-wide, per-epoch): 0.000 GB
Graph-level communication (cluster-wide, per-epoch): 5.627 GB
Weight-sync communication (cluster-wide, per-epoch): 0.235 GB
Total communication (cluster-wide, per-epoch): 5.861 GB
****** Accuracy Results ******
Highest valid_acc: 0.1860
Target test_acc: 0.1750
Epoch to reach the target acc: 0
[MPI Rank 0] Success 
[MPI Rank 12] Success 
[MPI Rank 8] Success 
[MPI Rank 1] Success 
[MPI Rank 4] Success 
[MPI Rank 13] Success 
[MPI Rank 9] Success 
[MPI Rank 2] Success 
[MPI Rank 5] Success 
[MPI Rank 14] Success 
[MPI Rank 10] Success 
[MPI Rank 3] Success 
[MPI Rank 6] Success 
[MPI Rank 15] Success 
[MPI Rank 11] Success 
[MPI Rank 7] Success 
