Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
DONE MPI INIT
Initialized node 14 on machine gnerv8
DONE MPI INIT
DONE MPI INIT
Initialized node 12 on machine gnerv8
Initialized node 13 on machine gnerv8
DONE MPI INIT
Initialized node 15 on machine gnerv8
DONE MPI INIT
DONE MPI INITInitialized node 10 on machine gnerv7

Initialized node 11 on machine gnerv7
DONE MPI INIT
DONE MPI INIT
Initialized node 8 on machine gnerv7
Initialized node 9 on machine gnerv7
DONE MPI INITDONE MPI INITDONE MPI INIT

Initialized node 1 on machine gnerv2
Initialized node 0 on machine gnerv2

Initialized node 3 on machine gnerv2
DONE MPI INIT
Initialized node 2 on machine gnerv2
DONE MPI INIT
Initialized node 4 on machine gnerv3
DONE MPI INITDONE MPI INIT
Initialized node 6 on machine gnerv3

DONE MPI INIT
Initialized node 7 on machine gnerv3
Initialized node 5 on machine gnerv3
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
        It takes 0.022 seconds.
Building the CSC structure...
        It takes 0.019 seconds.
Building the CSC structure...
        It takes 0.022 seconds.
Building the CSC structure...
        It takes 0.025 seconds.
Building the CSC structure...
        It takes 0.026 seconds.
Building the CSC structure...
        It takes 0.027 seconds.
Building the CSC structure...
        It takes 0.018 seconds.
Building the CSC structure...
        It takes 0.021 seconds.
Building the CSC structure...
        It takes 0.027 seconds.
Building the CSC structure...
        It takes 0.027 seconds.
Building the CSC structure...
        It takes 0.024 seconds.
Building the CSC structure...
        It takes 0.024 seconds.
Building the CSC structure...
        It takes 0.022 seconds.
Building the CSC structure...
        It takes 0.023 seconds.
Building the CSC structure...
        It takes 0.027 seconds.
Building the CSC structure...
        It takes 0.030 seconds.
Building the CSC structure...
        It takes 0.021 seconds.
        It takes 0.023 seconds.
        It takes 0.018 seconds.
        It takes 0.019 seconds.
        It takes 0.021 seconds.
        It takes 0.021 seconds.
        It takes 0.020 seconds.
        It takes 0.020 seconds.
        It takes 0.021 seconds.
        It takes 0.019 seconds.
        It takes 0.021 seconds.
Building the Feature Vector...
        It takes 0.023 seconds.
        It takes 0.022 seconds.
        It takes 0.021 seconds.
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
        It takes 0.020 seconds.
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
        It takes 0.023 seconds.
Building the Feature Vector...
Building the Feature Vector...
        It takes 0.099 seconds.
Building the Label Vector...
        It takes 0.098 seconds.
Building the Label Vector...
        It takes 0.006 seconds.
        It takes 0.006 seconds.
        It takes 0.105 seconds.
Building the Label Vector...
        It takes 0.106 seconds.
Building the Label Vector...
        It takes 0.107 seconds.
Building the Label Vector...
        It takes 0.114 seconds.
Building the Label Vector...
        It takes 0.007 seconds.
The graph dataset locates at /shared_hdd_storage/jingjichen/gnn_datasets/graph_parallel_datasets/flickr/16_parts
The number of GCN layers: 128
The number of hidden units: 100
The number of training epoches: 50
Learning rate: 0.001000
The partition strategy: model
The dropout rate: 0.500
The checkpointed weight file: /tmp/saved_weights_pipe
The random seed: 1
Number of classes: 7
Number of feature dimensions: 500
Number of vertices: 89250
Number of GPUs: 16
        It takes 0.116 seconds.
Building the Label Vector...
        It takes 0.114 seconds.
Building the Label Vector...
        It takes 0.111 seconds.
Building the Label Vector...
        It takes 0.007 seconds.
        It takes 0.104 seconds.
        It takes 0.007 seconds.
        It takes 0.121 seconds.
Building the Label Vector...
Building the Label Vector...
        It takes 0.115 seconds.
Building the Label Vector...
        It takes 0.007 seconds.
        It takes 0.007 seconds.
        It takes 0.008 seconds.
        It takes 0.007 seconds.
        It takes 0.126 seconds.
Building the Label Vector...
        It takes 0.118 seconds.
Building the Label Vector...
        It takes 0.007 seconds.
        It takes 0.007 seconds.
        It takes 0.007 seconds.
        It takes 0.124 seconds.
        It takes 0.126 seconds.
Building the Label Vector...
Building the Label Vector...
        It takes 0.006 seconds.
        It takes 0.007 seconds.
        It takes 0.008 seconds.
        It takes 0.013 seconds.
GPU 0, layer [0, 128)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
89250, 989006, 989006
Number of vertices per chunk: 5579
GPU 0, layer [0, 128)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 128)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
csr in-out ready !Start Cost Model Initialization...
89250, 989006, 989006
89250, 989006, 989006
Number of vertices per chunk: 5579
Number of vertices per chunk: 5579
GPU 0, layer [0, 128)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 128)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
89250, 989006, 989006
Number of vertices per chunk: 5579
89250, 989006, 989006
Number of vertices per chunk: 5579
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
GPU 0, layer [0, 128)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
csr in-out ready !Start Cost Model Initialization...
89250, 989006, 989006
Number of vertices per chunk: 5579
csr in-out ready !Start Cost Model Initialization...
GPU 0, layer [0, 128)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 128)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 128)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
train nodes 44625, valid nodes 22312, test nodes 22313
GPU 0, layer [0, 128)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
Chunks (number of global chunks: 16): 0-[0, 5745) 1-[5745, 11230) 2-[11230, 16716) 3-[16716, 22204) 4-[22204, 27622) 5-[27622, 33364) 6-[33364, 39108) 7-[39108, 44526) 8-[44526, 50271) ... 15-[83819, 89250)
89250, 989006, 989006
Number of vertices per chunk: 5579
89250, 989006, 989006
89250, 989006, 989006
Number of vertices per chunk: 5579
Number of vertices per chunk: 5579
89250, 989006, 989006
Number of vertices per chunk: 5579
csr in-out ready !Start Cost Model Initialization...
GPU 0, layer [0, 128)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 128)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
89250, 989006, 989006
Number of vertices per chunk: 5579
89250, 989006, 989006
Number of vertices per chunk: 5579
csr in-out ready !Start Cost Model Initialization...
***** Start profiling the layer-level communication performance *******
GPU 0, layer [0, 128)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 128)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
89250, 989006, 989006
Number of vertices per chunk: 5579
89250, 989006, 989006
Number of vertices per chunk: 5579
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
GPU 0, layer [0, 128)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 128)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
89250, 989006, 989006
Number of vertices per chunk: 5579
89250, 989006, 989006
Number of vertices per chunk: 5579
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
The layer-level communication performance: 60.502 Gbps (per GPU), 968.039 Gbps (aggregated)
The layer-level communication performance: 60.434 Gbps (per GPU), 966.945 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 60.224 Gbps (per GPU), 963.581 Gbps (aggregated)
The layer-level communication performance: 60.130 Gbps (per GPU), 962.074 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 59.994 Gbps (per GPU), 959.900 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 59.883 Gbps (per GPU), 958.135 Gbps (aggregated)
The layer-level communication performance: 59.873 Gbps (per GPU), 957.973 Gbps (aggregated)
The layer-level communication performance: 59.862 Gbps (per GPU), 957.787 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 59.814 Gbps (per GPU), 957.018 Gbps (aggregated)
The layer-level communication performance: 59.777 Gbps (per GPU), 956.439 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 59.680 Gbps (per GPU), 954.888 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 59.613 Gbps (per GPU), 953.801 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 59.566 Gbps (per GPU), 953.055 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 59.510 Gbps (per GPU), 952.164 Gbps (aggregated)
The layer-level communication performance: 59.484 Gbps (per GPU), 951.752 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 59.546 Gbps (per GPU), 952.737 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The graph-level communication performance (supernode = 2): 130.670 Gbps (per GPU), 2090.717 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 130.678 Gbps (per GPU), 2090.847 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 130.686 Gbps (per GPU), 2090.977 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 130.688 Gbps (per GPU), 2091.015 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 130.678 Gbps (per GPU), 2090.847 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 130.668 Gbps (per GPU), 2090.687 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 130.651 Gbps (per GPU), 2090.424 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 130.682 Gbps (per GPU), 2090.912 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 130.688 Gbps (per GPU), 2091.010 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 130.676 Gbps (per GPU), 2090.819 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 130.688 Gbps (per GPU), 2091.008 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 130.690 Gbps (per GPU), 2091.042 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 130.680 Gbps (per GPU), 2090.879 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 130.678 Gbps (per GPU), 2090.847 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 130.658 Gbps (per GPU), 2090.521 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 130.692 Gbps (per GPU), 2091.074 Gbps (aggregated, cluster-wide)
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
The graph-level communication performance (supernode = 4): 97.867 Gbps (per GPU), 1565.879 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 97.870 Gbps (per GPU), 1565.915 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 97.868 Gbps (per GPU), 1565.891 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 97.867 Gbps (per GPU), 1565.866 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 97.864 Gbps (per GPU), 1565.830 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 97.868 Gbps (per GPU), 1565.891 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 97.854 Gbps (per GPU), 1565.659 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 97.865 Gbps (per GPU), 1565.842 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 97.867 Gbps (per GPU), 1565.866 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 97.869 Gbps (per GPU), 1565.903 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 97.867 Gbps (per GPU), 1565.866 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 97.864 Gbps (per GPU), 1565.830 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 97.867 Gbps (per GPU), 1565.879 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 97.869 Gbps (per GPU), 1565.903 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 97.864 Gbps (per GPU), 1565.830 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 97.862 Gbps (per GPU), 1565.793 Gbps (aggregated, cluster-wide)
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
The graph-level communication performance (supernode = 8): 23.563 Gbps (per GPU), 377.008 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 23.563 Gbps (per GPU), 377.009 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 23.562 Gbps (per GPU), 376.999 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 23.563 Gbps (per GPU), 377.011 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 23.562 Gbps (per GPU), 376.997 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 23.561 Gbps (per GPU), 376.974 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 23.560 Gbps (per GPU), 376.955 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 23.563 Gbps (per GPU), 377.003 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 23.563 Gbps (per GPU), 377.003 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 23.561 Gbps (per GPU), 376.973 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 23.557 Gbps (per GPU), 376.919 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 23.557 Gbps (per GPU), 376.909 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 23.561 Gbps (per GPU), 376.977 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 23.556 Gbps (per GPU), 376.896 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 23.555 Gbps (per GPU), 376.887 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 23.554 Gbps (per GPU), 376.866 Gbps (aggregated, cluster-wide)
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
The graph-level communication performance (supernode = 16): 20.651 Gbps (per GPU), 330.409 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 20.650 Gbps (per GPU), 330.402 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 20.651 Gbps (per GPU), 330.410 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 20.650 Gbps (per GPU), 330.401 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 20.650 Gbps (per GPU), 330.405 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 20.650 Gbps (per GPU), 330.402 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 20.651 Gbps (per GPU), 330.409 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 20.650 Gbps (per GPU), 330.400 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 20.650 Gbps (per GPU), 330.406 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 20.648 Gbps (per GPU), 330.371 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 20.651 Gbps (per GPU), 330.409 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 20.649 Gbps (per GPU), 330.389 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 20.650 Gbps (per GPU), 330.407 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 20.649 Gbps (per GPU), 330.392 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 20.650 Gbps (per GPU), 330.398 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 20.649 Gbps (per GPU), 330.388 Gbps (aggregated, cluster-wide)
 LType   LT0   LT1   LT2 Ratio  VSum  ESum
 chk_0  0.46ms  0.37ms  0.25ms  1.85  5.75K  0.06M
 chk_1  0.44ms  0.35ms  0.23ms  1.89  5.49K  0.05M
 chk_2  0.44ms  0.36ms  0.23ms  1.90  5.49K  0.05M
 chk_3  0.44ms  0.36ms  0.24ms  1.87  5.49K  0.05M
 chk_4  0.44ms  0.35ms  0.23ms  1.90  5.42K  0.05M
 chk_5  0.45ms  0.36ms  0.24ms  1.90  5.74K  0.06M
 chk_6  0.47ms  0.38ms  0.25ms  1.83  5.74K  0.06M
 chk_7  0.44ms  0.35ms  0.23ms  1.90  5.42K  0.05M
 chk_8  0.46ms  0.37ms  0.25ms  1.85  5.75K  0.06M
 chk_9  0.46ms  0.37ms  0.25ms  1.84  5.75K  0.07M
chk_10  0.46ms  0.37ms  0.25ms  1.83  5.75K  0.06M
chk_11  0.44ms  0.35ms  0.23ms  1.90  5.47K  0.05M
chk_12  0.41ms  0.33ms  0.21ms  1.99  5.42K  0.05M
chk_13  0.42ms  0.33ms  0.20ms  2.05  5.75K  0.06M
chk_14  0.44ms  0.35ms  0.23ms  1.89  5.42K  0.05M
chk_15  0.43ms  0.34ms  0.22ms  1.93  5.43K  0.05M
   Avg  0.44  0.36  0.23
   Max  0.47  0.38  0.25
   Min  0.41  0.33  0.20
 Ratio  1.13  1.15  1.25
   Var  0.00  0.00  0.00
Profiling takes 0.271 s
*** Node 0, starting model training...
*** Node 1, starting model training...
*** Node 2, starting model training...
*** Node 3, starting model training...
*** Node 4, starting model training...
*** Node 5, starting model training...
*** Node 6, starting model training...
*** Node 7, starting model training...
Num Stages: 1 / 1
Node 0, Pipeline Input Tensor: NULL
Node 0, Pipeline Output Tensor: NULL
*** Node 0 owns the model-level partition [0, 640)
*** Node 0, constructing the helper classes...
Node 0, Local Vertex Begin: 0, Num Local Vertices: 5745
*** Node 12, starting model training...
*** Node 8, starting model training...
*** Node 13, starting model training...
*** Node 9, starting model training...
*** Node 14, starting model training...
*** Node 10, starting model training...
*** Node 15, starting model training...
*** Node 11, starting model training...
Num Stages: 1 / 1
Node 9, Pipeline Input Tensor: NULL
Node 9, Pipeline Output Tensor: NULL
*** Node 9 owns the model-level partition [0, 640)
*** Node 9, constructing the helper classes...
Node 9, Local Vertex Begin: 50271, Num Local Vertices: 5745
Num Stages: 1 / 1
Node 1, Pipeline Input Tensor: NULL
Node 1, Pipeline Output Tensor: NULL
*** Node 1 owns the model-level partition [0, 640)
*** Node 1, constructing the helper classes...
Node 1, Local Vertex Begin: 5745, Num Local Vertices: 5485
Num Stages: 1 / 1
Node 15, Pipeline Input Tensor: NULL
Node 15, Pipeline Output Tensor: NULL
*** Node 15 owns the model-level partition [0, 640)
*** Node 15, constructing the helper classes...
Node 15, Local Vertex Begin: 83819, Num Local Vertices: 5431
Num Stages: 1 / 1
Node 13, Pipeline Input Tensor: NULL
Node 13, Pipeline Output Tensor: NULL
*** Node 13 owns the model-level partition [0, 640)
*** Node 13, constructing the helper classes...
Node 13, Local Vertex Begin: 72659, Num Local Vertices: 5745
Num Stages: 1 / 1
Node 11, Pipeline Input Tensor: NULL
Node 11, Pipeline Output Tensor: NULL
*** Node 11 owns the model-level partition [0, 640)
*** Node 11, constructing the helper classes...
Node 11, Local Vertex Begin: 61761, Num Local Vertices: 5474
Num Stages: 1 / 1
Node 2, Pipeline Input Tensor: NULL
Node 2, Pipeline Output Tensor: NULL
*** Node 2 owns the model-level partition [0, 640)
*** Node 2, constructing the helper classes...
Node 2, Local Vertex Begin: 11230, Num Local Vertices: 5486
Num Stages: 1 / 1
Node 7, Pipeline Input Tensor: NULL
Node 7, Pipeline Output Tensor: NULL
*** Node 7 owns the model-level partition [0, 640)
*** Node 7, constructing the helper classes...
Node 7, Local Vertex Begin: 39108, Num Local Vertices: 5418
Num Stages: 1 / 1
Node 14, Pipeline Input Tensor: NULL
Node 14, Pipeline Output Tensor: NULL
*** Node 14 owns the model-level partition [0, 640)
*** Node 14, constructing the helper classes...
Node 14, Local Vertex Begin: 78404, Num Local Vertices: 5415
Num Stages: 1 / 1
Node 8, Pipeline Input Tensor: NULL
Node 8, Pipeline Output Tensor: NULL
*** Node 8 owns the model-level partition [0, 640)
*** Node 8, constructing the helper classes...
Node 8, Local Vertex Begin: 44526, Num Local Vertices: 5745
Num Stages: 1 / 1
Node 3, Pipeline Input Tensor: NULL
Node 3, Pipeline Output Tensor: NULL
*** Node 3 owns the model-level partition [0, 640)
*** Node 3, constructing the helper classes...
Node 3, Local Vertex Begin: 16716, Num Local Vertices: 5488
Num Stages: 1 / 1
Node 5, Pipeline Input Tensor: NULL
Node 5, Pipeline Output Tensor: NULL
*** Node 5 owns the model-level partition [0, 640)
*** Node 5, constructing the helper classes...
Node 5, Local Vertex Begin: 27622, Num Local Vertices: 5742
Num Stages: 1 / 1
Node 12, Pipeline Input Tensor: NULL
Node 12, Pipeline Output Tensor: NULL
*** Node 12 owns the model-level partition [0, 640)
*** Node 12, constructing the helper classes...
Node 12, Local Vertex Begin: 67235, Num Local Vertices: 5424
Num Stages: 1 / 1
Node 4, Pipeline Input Tensor: NULL
Node 4, Pipeline Output Tensor: NULL
*** Node 4 owns the model-level partition [0, 640)
*** Node 4, constructing the helper classes...
Node 4, Local Vertex Begin: 22204, Num Local Vertices: 5418
Num Stages: 1 / 1
Node 6, Pipeline Input Tensor: NULL
Node 6, Pipeline Output Tensor: NULL
*** Node 6 owns the model-level partition [0, 640)
*** Node 6, constructing the helper classes...
Node 6, Local Vertex Begin: 33364, Num Local Vertices: 5744
Num Stages: 1 / 1
Node 10, Pipeline Input Tensor: NULL
Node 10, Pipeline Output Tensor: NULL
*** Node 10 owns the model-level partition [0, 640)
*** Node 10, constructing the helper classes...
Node 10, Local Vertex Begin: 56016, Num Local Vertices: 5745
*** Node 9, setting up some other necessary information...
*** Node 1, setting up some other necessary information...
*** Node 4, setting up some other necessary information...
*** Node 0, setting up some other necessary information...
*** Node 12, setting up some other necessary information...
*** Node 8, setting up some other necessary information...
*** Node 10, setting up some other necessary information...
*** Node 11, setting up some other necessary information...
*** Node 13, setting up some other necessary information...
*** Node 7, setting up some other necessary information...
*** Node 14, setting up some other necessary information...
*** Node 15, setting up some other necessary information...
*** Node 2, setting up some other necessary information...
*** Node 3, setting up some other necessary information...
*** Node 5, setting up some other necessary information...
*** Node 6, setting up some other necessary information...
+++++++++ Node 13 initializing the weights for op[0, 640)...
+++++++++ Node 0 initializing the weights for op[0, 640)...
+++++++++ Node 1 initializing the weights for op[0, 640)...
+++++++++ Node 12 initializing the weights for op[0, 640)...
+++++++++ Node 5 initializing the weights for op[0, 640)...
+++++++++ Node 4 initializing the weights for op[0, 640)...
+++++++++ Node 7 initializing the weights for op[0, 640)...
+++++++++ Node 6 initializing the weights for op[0, 640)...
+++++++++ Node 8 initializing the weights for op[0, 640)...
+++++++++ Node 9 initializing the weights for op[0, 640)...
+++++++++ Node 14 initializing the weights for op[0, 640)...
+++++++++ Node 10 initializing the weights for op[0, 640)...
+++++++++ Node 15 initializing the weights for op[0, 640)...
+++++++++ Node 11 initializing the weights for op[0, 640)...
+++++++++ Node 3 initializing the weights for op[0, 640)...
+++++++++ Node 2 initializing the weights for op[0, 640)...
Node 0, discovering the vertices that will be sent across graph boundary...
Node 1, discovering the vertices that will be sent across graph boundary...
Node 12, discovering the vertices that will be sent across graph boundary...
Node 8, discovering the vertices that will be sent across graph boundary...
Node 2, discovering the vertices that will be sent across graph boundary...
Node 13, discovering the vertices that will be sent across graph boundary...
Node 9, discovering the vertices that will be sent across graph boundary...
Node 3, discovering the vertices that will be sent across graph boundary...
Node 4, discovering the vertices that will be sent across graph boundary...
Node 14, discovering the vertices that will be sent across graph boundary...
Node 10, discovering the vertices that will be sent across graph boundary...
Node 5, discovering the vertices that will be sent across graph boundary...
Node 15, discovering the vertices that will be sent across graph boundary...
Node 11, discovering the vertices that will be sent across graph boundary...
Node 6, discovering the vertices that will be sent across graph boundary...
Node 7, discovering the vertices that will be sent across graph boundary...
Node 8, discovering the vertices that will be received across the graph boundary.
The number of mirror vertices: 254271
Node 0, discovering the vertices that will be received across the graph boundary.
Node 9, discovering the vertices that will be received across the graph boundary.
Node 1, discovering the vertices that will be received across the graph boundary.
Node 12, discovering the vertices that will be received across the graph boundary.
Node 10, discovering the vertices that will be received across the graph boundary.
Node 2, discovering the vertices that will be received across the graph boundary.
Node 4, discovering the vertices that will be received across the graph boundary.
Node 13, discovering the vertices that will be received across the graph boundary.
Node 11, discovering the vertices that will be received across the graph boundary.
Node 3, discovering the vertices that will be received across the graph boundary.
Node 5, discovering the vertices that will be received across the graph boundary.
Node 14, discovering the vertices that will be received across the graph boundary.
Node 6, discovering the vertices that will be received across the graph boundary.
Node 15, discovering the vertices that will be received across the graph boundary.
Node 7, discovering the vertices that will be received across the graph boundary.
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
*** Node 0, starting task scheduling...
*** Node 1, starting task scheduling...
*** Node 2, starting task scheduling...
*** Node 3, starting task scheduling...
*** Node 12, starting task scheduling...
*** Node 8, starting task scheduling...
*** Node 4, starting task scheduling...
*** Node 13, starting task scheduling...
*** Node 9, starting task scheduling...



The learning rate specified by the user: 0.001000000
*** Node 5, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 14, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 10, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 6, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 15, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 11, starting task scheduling...
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
*** Node 7, starting task scheduling...
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
	Epoch 1:	Loss 1.9459	TrainAcc 0.0589	ValidAcc 0.0575	TestAcc 0.0607	BestValid 0.0575
	Epoch 50:	Loss 1.9459	TrainAcc 0.0589	ValidAcc 0.0575	TestAcc 0.0607	BestValid 0.0575
****** Epoch Time (Excluding Evaluation Cost): 0.602 s ******
****** Breakdown Analysis ******
Cluster-Wide Average, Bubble-Pipeline: 0.183 ms (Max: 0.352, Min: 0.095, Sum: 2.925)
Cluster-Wide Average, Compute: 48.176 ms (Max: 50.273, Min: 45.083, Sum: 770.820)
Cluster-Wide Average, Communication-Layer: 0.008 ms (Max: 0.009, Min: 0.007, Sum: 0.132)
Cluster-Wide Average, Bubble-Imbalance: 0.015 ms (Max: 0.017, Min: 0.014, Sum: 0.247)
Cluster-Wide Average, Communication-Graph: 531.115 ms (Max: 534.295, Min: 529.159, Sum: 8497.835)
Cluster-Wide Average, Optimization: 20.649 ms (Max: 20.767, Min: 20.524, Sum: 330.387)
Cluster-Wide Average, Others: 1.469 ms (Max: 1.621, Min: 1.306, Sum: 23.496)
****** Breakdown Sum: 601.615 ms ******
Cluster-Wide Average, GPU Memory Consumption: 6.453 GB (Max: 7.870, Min: 6.346, Sum: 103.252)
Cluster-Wide Average, Graph-Level Communication Throughput: 26.050 Gbps (Max: 30.854, Min: 7.108, Sum: 416.801)
Cluster-Wide Average, Layer-Level Communication Throughput: 0.000 Gbps (Max: 0.000, Min: 0.000, Sum: 0.000)
Layer-level communication (cluster-wide, per-epoch): 0.000 GB
Graph-level communication (cluster-wide, per-epoch): 24.249 GB
Weight-sync communication (cluster-wide, per-epoch): 0.146 GB
Total communication (cluster-wide, per-epoch): 24.396 GB
****** Accuracy Results ******
Highest valid_acc: 0.0575
Target test_acc: 0.0607
Epoch to reach the target acc: 0
[MPI Rank 0] Success 
[MPI Rank 12] Success 
[MPI Rank 8] Success 
[MPI Rank 1] Success 
[MPI Rank 4] Success 
[MPI Rank 13] Success 
[MPI Rank 9] Success 
[MPI Rank 2] Success 
[MPI Rank 5] Success 
[MPI Rank 14] Success 
[MPI Rank 10] Success 
[MPI Rank 3] Success 
[MPI Rank 6] Success 
[MPI Rank 15] Success 
[MPI Rank 11] Success 
[MPI Rank 7] Success 
