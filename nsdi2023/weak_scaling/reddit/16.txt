Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
DONE MPI INIT
Initialized node 8 on machine gnerv7
DONE MPI INIT
DONE MPI INIT
Initialized node 11 on machine gnerv7
Initialized node 10 on machine gnerv7
DONE MPI INITDONE MPI INITDONE MPI INIT
Initialized node 14 on machine gnerv8

Initialized node 9 on machine gnerv7
DONE MPI INIT
DONE MPI INIT
Initialized node 15 on machine gnerv8
Initialized node 13 on machine gnerv8

Initialized node 12 on machine gnerv8
DONE MPI INIT
Initialized node 4 on machine gnerv3
DONE MPI INIT
Initialized node 6 on machine gnerv3
DONE MPI INIT
Initialized node 7 on machine gnerv3
DONE MPI INIT
Initialized node 5 on machine gnerv3
DONE MPI INIT
DONE MPI INIT
Initialized node 2 on machine gnerv2
DONE MPI INITInitialized node 0 on machine gnerv2
DONE MPI INIT
Initialized node 1 on machine gnerv2

Initialized node 3 on machine gnerv2
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
        It takes 2.086 seconds.
Building the CSC structure...
        It takes 2.283 seconds.
Building the CSC structure...
        It takes 2.334 seconds.
Building the CSC structure...
        It takes 2.349 seconds.
Building the CSC structure...
        It takes 2.375 seconds.
Building the CSC structure...
        It takes 2.411 seconds.
Building the CSC structure...
        It takes 2.441 seconds.
Building the CSC structure...
        It takes 2.443 seconds.
Building the CSC structure...
        It takes 2.446 seconds.
Building the CSC structure...
        It takes 2.447 seconds.
Building the CSC structure...
        It takes 2.480 seconds.
Building the CSC structure...
        It takes 2.476 seconds.
Building the CSC structure...
        It takes 2.554 seconds.
Building the CSC structure...
        It takes 2.610 seconds.
Building the CSC structure...
        It takes 2.629 seconds.
Building the CSC structure...
        It takes 2.679 seconds.
Building the CSC structure...
        It takes 1.904 seconds.
        It takes 2.262 seconds.
        It takes 2.304 seconds.
        It takes 2.297 seconds.
        It takes 2.354 seconds.
        It takes 2.349 seconds.
        It takes 2.386 seconds.
        It takes 2.384 seconds.
        It takes 2.380 seconds.
        It takes 2.386 seconds.
        It takes 2.411 seconds.
        It takes 2.377 seconds.
        It takes 2.348 seconds.
        It takes 2.554 seconds.
        It takes 2.435 seconds.
        It takes 2.377 seconds.
Building the Feature Vector...
        It takes 0.264 seconds.
Building the Label Vector...
        It takes 0.031 seconds.
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
        It takes 0.271 seconds.
Building the Label Vector...
Building the Feature Vector...
        It takes 0.038 seconds.
Building the Feature Vector...
        It takes 0.248 seconds.
Building the Label Vector...
        It takes 0.277 seconds.
Building the Label Vector...
        It takes 0.041 seconds.
        It takes 0.040 seconds.
Building the Feature Vector...
        It takes 0.269 seconds.
Building the Label Vector...
        It takes 0.328 seconds.
Building the Label Vector...
Building the Feature Vector...
        It takes 0.032 seconds.
        It takes 0.032 seconds.
        It takes 0.279 seconds.
Building the Label Vector...
Building the Feature Vector...
        It takes 0.030 seconds.
The graph dataset locates at /shared_hdd_storage/jingjichen/gnn_datasets/graph_parallel_datasets/reddit/16_parts
The number of GCN layers: 128
The number of hidden units: 100
The number of training epoches: 50
Learning rate: 0.001000
The partition strategy: model
The dropout rate: 0.500
The checkpointed weight file: /tmp/saved_weights_pipe
The random seed: 1
Number of classes: 41
Number of feature dimensions: 602
Number of vertices: 232965
Number of GPUs: 16
Building the Feature Vector...
        It takes 0.287 seconds.
Building the Label Vector...
Building the Feature Vector...
Building the Feature Vector...
        It takes 0.032 seconds.
GPU 0, layer [0, 128)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
Building the Feature Vector...
Building the Feature Vector...
        It takes 0.302 seconds.
Building the Label Vector...
        It takes 0.033 seconds.
Building the Feature Vector...
        It takes 0.295 seconds.
Building the Label Vector...
        It takes 0.032 seconds.
        It takes 0.277 seconds.
Building the Label Vector...
        It takes 0.031 seconds.
        It takes 0.261 seconds.
Building the Label Vector...
        It takes 0.031 seconds.
        It takes 0.334 seconds.
Building the Label Vector...
        It takes 0.330 seconds.
Building the Label Vector...
        It takes 0.267 seconds.
Building the Label Vector...
        It takes 0.036 seconds.
        It takes 0.034 seconds.
        It takes 0.038 seconds.
GPU 0, layer [0, 128)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
        It takes 0.315 seconds.
Building the Label Vector...
        It takes 0.034 seconds.
232965, 114848857, 114848857
Number of vertices per chunk: 14561
GPU 0, layer [0, 128)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 128)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 128)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 128)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
train nodes 153431, valid nodes 23831, test nodes 55703
GPU 0, layer [0, 128)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
Chunks (number of global chunks: 16): 0-[0, 14136) 1-[14136, 29133) 2-[29133, 43268) 3-[43268, 57403) 4-[57403, 71538) 5-[71538, 86535) 6-[86535, 101510) 7-[101510, 115645) 8-[115645, 129779) ... 15-[218830, 232965)
232965, 114848857, 114848857
Number of vertices per chunk: 14561
GPU 0, layer [0, 128)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
232965, 114848857, 114848857
Number of vertices per chunk: 14561
232965, 114848857, 114848857
Number of vertices per chunk: 14561
GPU 0, layer [0, 128)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 128)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
232965, 114848857, 114848857
Number of vertices per chunk: 14561
GPU 0, layer [0, 128)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
232965, 114848857, 114848857
Number of vertices per chunk: 14561
GPU 0, layer [0, 128)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 128)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 128)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
232965, 114848857, 114848857
Number of vertices per chunk: 14561
GPU 0, layer [0, 128)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 128)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
232965, 114848857, 114848857
Number of vertices per chunk: 14561
232965, 114848857, 114848857
Number of vertices per chunk: 14561
232965, 114848857, 114848857
Number of vertices per chunk: 14561
232965, 114848857, 114848857
Number of vertices per chunk: 14561
232965, 114848857, 114848857
Number of vertices per chunk: 14561
232965, 114848857, 114848857
Number of vertices per chunk: 14561
232965, 114848857, 114848857
Number of vertices per chunk: 14561
232965, 114848857, 114848857
Number of vertices per chunk: 14561
232965, 114848857, 114848857
Number of vertices per chunk: 14561
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
***** Start profiling the layer-level communication performance *******
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
The layer-level communication performance: 59.119 Gbps (per GPU), 945.911 Gbps (aggregated)
The layer-level communication performance: 59.062 Gbps (per GPU), 944.993 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 58.814 Gbps (per GPU), 941.024 Gbps (aggregated)
The layer-level communication performance: 58.799 Gbps (per GPU), 940.786 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 58.574 Gbps (per GPU), 937.187 Gbps (aggregated)
The layer-level communication performance: 58.572 Gbps (per GPU), 937.146 Gbps (aggregated)
The layer-level communication performance: 58.518 Gbps (per GPU), 936.291 Gbps (aggregated)
The layer-level communication performance: 58.471 Gbps (per GPU), 935.532 Gbps (aggregated)
The layer-level communication performance: 58.478 Gbps (per GPU), 935.652 Gbps (aggregated)
The layer-level communication performance: 58.441 Gbps (per GPU), 935.057 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 58.385 Gbps (per GPU), 934.153 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 58.300 Gbps (per GPU), 932.793 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 58.283 Gbps (per GPU), 932.531 Gbps (aggregated)
The layer-level communication performance: 58.258 Gbps (per GPU), 932.127 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 58.201 Gbps (per GPU), 931.221 Gbps (aggregated)
The layer-level communication performance: 58.177 Gbps (per GPU), 930.825 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The graph-level communication performance (supernode = 2): 157.909 Gbps (per GPU), 2526.546 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 157.897 Gbps (per GPU), 2526.356 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 157.918 Gbps (per GPU), 2526.689 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 157.903 Gbps (per GPU), 2526.451 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 157.903 Gbps (per GPU), 2526.451 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 157.900 Gbps (per GPU), 2526.404 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 157.873 Gbps (per GPU), 2525.976 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 157.903 Gbps (per GPU), 2526.451 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 157.915 Gbps (per GPU), 2526.637 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 157.900 Gbps (per GPU), 2526.404 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 157.918 Gbps (per GPU), 2526.689 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 157.900 Gbps (per GPU), 2526.404 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 157.912 Gbps (per GPU), 2526.590 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 157.903 Gbps (per GPU), 2526.444 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 157.880 Gbps (per GPU), 2526.077 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 157.912 Gbps (per GPU), 2526.597 Gbps (aggregated, cluster-wide)
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
The graph-level communication performance (supernode = 4): 100.229 Gbps (per GPU), 1603.672 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 100.230 Gbps (per GPU), 1603.685 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 100.230 Gbps (per GPU), 1603.672 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 100.230 Gbps (per GPU), 1603.672 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 100.230 Gbps (per GPU), 1603.685 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 100.230 Gbps (per GPU), 1603.685 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 100.230 Gbps (per GPU), 1603.672 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 100.228 Gbps (per GPU), 1603.647 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 100.230 Gbps (per GPU), 1603.672 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 100.231 Gbps (per GPU), 1603.697 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 100.230 Gbps (per GPU), 1603.672 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 100.230 Gbps (per GPU), 1603.672 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 100.230 Gbps (per GPU), 1603.685 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 100.230 Gbps (per GPU), 1603.685 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 100.231 Gbps (per GPU), 1603.697 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 100.230 Gbps (per GPU), 1603.685 Gbps (aggregated, cluster-wide)
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
The graph-level communication performance (supernode = 8): 27.115 Gbps (per GPU), 433.845 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 27.115 Gbps (per GPU), 433.840 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 27.115 Gbps (per GPU), 433.842 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 27.115 Gbps (per GPU), 433.843 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 27.115 Gbps (per GPU), 433.843 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 27.115 Gbps (per GPU), 433.841 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 27.115 Gbps (per GPU), 433.840 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 27.115 Gbps (per GPU), 433.833 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 27.115 Gbps (per GPU), 433.836 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 27.114 Gbps (per GPU), 433.830 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 27.113 Gbps (per GPU), 433.815 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 27.115 Gbps (per GPU), 433.838 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 27.113 Gbps (per GPU), 433.802 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 27.115 Gbps (per GPU), 433.837 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 27.113 Gbps (per GPU), 433.812 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 27.114 Gbps (per GPU), 433.829 Gbps (aggregated, cluster-wide)
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
The graph-level communication performance (supernode = 16): 20.889 Gbps (per GPU), 334.231 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 20.889 Gbps (per GPU), 334.229 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 20.889 Gbps (per GPU), 334.227 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 20.889 Gbps (per GPU), 334.221 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 20.888 Gbps (per GPU), 334.216 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 20.889 Gbps (per GPU), 334.230 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 20.889 Gbps (per GPU), 334.218 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 20.889 Gbps (per GPU), 334.221 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 20.889 Gbps (per GPU), 334.226 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 20.889 Gbps (per GPU), 334.217 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 20.889 Gbps (per GPU), 334.227 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 20.889 Gbps (per GPU), 334.224 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 20.889 Gbps (per GPU), 334.217 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 20.889 Gbps (per GPU), 334.228 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 20.889 Gbps (per GPU), 334.228 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 20.889 Gbps (per GPU), 334.224 Gbps (aggregated, cluster-wide)
 LType   LT0   LT1   LT2 Ratio  VSum  ESum
 chk_0  5.89ms  5.76ms  5.62ms  1.05 14.14K  9.26M
 chk_1 10.35ms 10.13ms  9.96ms  1.04 15.00K 13.57M
 chk_2  7.79ms  7.54ms  7.38ms  1.05 14.13K 11.39M
 chk_3  6.79ms  6.57ms  6.40ms  1.06 14.13K 10.00M
 chk_4  4.44ms  4.18ms  4.00ms  1.11 14.13K  6.52M
 chk_5  3.75ms  3.43ms  3.26ms  1.15 15.00K  5.01M
 chk_6  4.69ms  4.36ms  4.22ms  1.11 14.97K  6.66M
 chk_7  4.27ms  3.96ms  3.84ms  1.11 14.13K  6.09M
 chk_8  4.00ms  3.67ms  3.53ms  1.13 14.13K  5.38M
 chk_9  4.92ms  4.68ms  4.45ms  1.11 14.94K  6.63M
chk_10  2.72ms  2.41ms  2.23ms  1.22 15.00K  3.27M
chk_11  2.36ms  1.95ms  1.87ms  1.26 15.00K  2.66M
chk_12  3.36ms  3.03ms  2.92ms  1.15 14.13K  4.74M
chk_13  5.93ms  5.65ms  5.45ms  1.09 14.98K  8.57M
chk_14  3.50ms  3.25ms  3.05ms  1.15 15.00K  4.75M
chk_15  6.86ms  6.46ms  6.39ms  1.07 14.13K 10.11M
   Avg  5.10  4.81  4.66
   Max 10.35 10.13  9.96
   Min  2.36  1.95  1.87
 Ratio  4.39  5.18  5.32
   Var  4.07  4.20  4.18
Profiling takes 2.694 s
*** Node 0, starting model training...
*** Node 1, starting model training...
*** Node 2, starting model training...
*** Node 3, starting model training...
*** Node 4, starting model training...
*** Node 5, starting model training...
*** Node 7, starting model training...
*** Node 6, starting model training...
*** Node 8, starting model training...
*** Node 9, starting model training...
*** Node 10, starting model training...
*** Node 11, starting model training...
*** Node 12, starting model training...
*** Node 13, starting model training...
*** Node 14, starting model training...
*** Node 15, starting model training...
Num Stages: 1 / 1
Node 0, Pipeline Input Tensor: NULL
Node 0, Pipeline Output Tensor: NULL
*** Node 0 owns the model-level partition [0, 640)
*** Node 0, constructing the helper classes...
Node 0, Local Vertex Begin: 0, Num Local Vertices: 14136
Num Stages: 1 / 1
Node 2, Pipeline Input Tensor: NULL
Node 2, Pipeline Output Tensor: NULL
*** Node 2 owns the model-level partition [0, 640)
*** Node 2, constructing the helper classes...
Node 2, Local Vertex Begin: 29133, Num Local Vertices: 14135
Num Stages: 1 / 1
Node 3, Pipeline Input Tensor: NULL
Node 3, Pipeline Output Tensor: NULL
*** Node 3 owns the model-level partition [0, 640)
*** Node 3, constructing the helper classes...
Node 3, Local Vertex Begin: 43268, Num Local Vertices: 14135
Num Stages: 1 / 1
Node 1, Pipeline Input Tensor: NULL
Node 1, Pipeline Output Tensor: NULL
*** Node 1 owns the model-level partition [0, 640)
*** Node 1, constructing the helper classes...
Node 1, Local Vertex Begin: 14136, Num Local Vertices: 14997
Num Stages: 1 / 1
Node 5, Pipeline Input Tensor: NULL
Node 5, Pipeline Output Tensor: NULL
*** Node 5 owns the model-level partition [0, 640)
*** Node 5, constructing the helper classes...
Node 5, Local Vertex Begin: 71538, Num Local Vertices: 14997
Num Stages: 1 / 1
Node 4, Pipeline Input Tensor: NULL
Node 4, Pipeline Output Tensor: NULL
*** Node 4 owns the model-level partition [0, 640)
*** Node 4, constructing the helper classes...
Node 4, Local Vertex Begin: 57403, Num Local Vertices: 14135
Num Stages: 1 / 1
Node 7, Pipeline Input Tensor: NULL
Node 7, Pipeline Output Tensor: NULL
*** Node 7 owns the model-level partition [0, 640)
*** Node 7, constructing the helper classes...
Node 7, Local Vertex Begin: 101510, Num Local Vertices: 14135
Num Stages: 1 / 1
Node 13, Pipeline Input Tensor: NULL
Node 13, Pipeline Output Tensor: NULL
*** Node 13 owns the model-level partition [0, 640)
*** Node 13, constructing the helper classes...
Node 13, Local Vertex Begin: 188852, Num Local Vertices: 14981
Num Stages: 1 / 1
Node 8, Pipeline Input Tensor: NULL
Node 8, Pipeline Output Tensor: NULL
*** Node 8 owns the model-level partition [0, 640)
*** Node 8, constructing the helper classes...
Node 8, Local Vertex Begin: 115645, Num Local Vertices: 14134
Num Stages: 1 / 1
Node 11, Pipeline Input Tensor: NULL
Node 11, Pipeline Output Tensor: NULL
*** Node 11 owns the model-level partition [0, 640)
*** Node 11, constructing the helper classes...
Node 11, Local Vertex Begin: 159720, Num Local Vertices: 14997
Num Stages: 1 / 1
Node 14, Pipeline Input Tensor: NULL
Node 14, Pipeline Output Tensor: NULL
*** Node 14 owns the model-level partition [0, 640)
*** Node 14, constructing the helper classes...
Num Stages: 1 / 1
Node 15, Pipeline Input Tensor: NULL
Node 15, Pipeline Output Tensor: NULL
*** Node 15 owns the model-level partition [0, 640)
*** Node 15, constructing the helper classes...
Node 15, Local Vertex Begin: 218830, Num Local Vertices: 14135
Node 14, Local Vertex Begin: 203833, Num Local Vertices: 14997
Num Stages: 1 / 1
Node 10, Pipeline Input Tensor: NULL
Node 10, Pipeline Output Tensor: NULL
*** Node 10 owns the model-level partition [0, 640)
*** Node 10, constructing the helper classes...
Node 10, Local Vertex Begin: 144723, Num Local Vertices: 14997
Num Stages: 1 / 1
Node 9, Pipeline Input Tensor: NULL
Node 9, Pipeline Output Tensor: NULL
*** Node 9 owns the model-level partition [0, 640)
*** Node 9, constructing the helper classes...
Node 9, Local Vertex Begin: 129779, Num Local Vertices: 14944
Num Stages: 1 / 1
Node 12, Pipeline Input Tensor: NULL
Node 12, Pipeline Output Tensor: NULL
*** Node 12 owns the model-level partition [0, 640)
*** Node 12, constructing the helper classes...
Node 12, Local Vertex Begin: 174717, Num Local Vertices: 14135
Num Stages: 1 / 1
Node 6, Pipeline Input Tensor: NULL
Node 6, Pipeline Output Tensor: NULL
*** Node 6 owns the model-level partition [0, 640)
*** Node 6, constructing the helper classes...
Node 6, Local Vertex Begin: 86535, Num Local Vertices: 14975
*** Node 15, setting up some other necessary information...
*** Node 1, setting up some other necessary information...
*** Node 9, setting up some other necessary information...
*** Node 13, setting up some other necessary information...
*** Node 3, setting up some other necessary information...
*** Node 7, setting up some other necessary information...
*** Node 11, setting up some other necessary information...
*** Node 14, setting up some other necessary information...
*** Node 2, setting up some other necessary information...
*** Node 6, setting up some other necessary information...
*** Node 8, setting up some other necessary information...
*** Node 12, setting up some other necessary information...
*** Node 10, setting up some other necessary information...
*** Node 0, setting up some other necessary information...
*** Node 4, setting up some other necessary information...
*** Node 5, setting up some other necessary information...
+++++++++ Node 1 initializing the weights for op[0, 640)...
+++++++++ Node 13 initializing the weights for op[0, 640)...
+++++++++ Node 3 initializing the weights for op[0, 640)...
+++++++++ Node 7 initializing the weights for op[0, 640)...
+++++++++ Node 15 initializing the weights for op[0, 640)...
+++++++++ Node 0 initializing the weights for op[0, 640)...
+++++++++ Node 5 initializing the weights for op[0, 640)...
+++++++++ Node 9 initializing the weights for op[0, 640)...
+++++++++ Node 14 initializing the weights for op[0, 640)...
+++++++++ Node 2 initializing the weights for op[0, 640)...
+++++++++ Node 11 initializing the weights for op[0, 640)...
+++++++++ Node 12 initializing the weights for op[0, 640)...
+++++++++ Node 10 initializing the weights for op[0, 640)...
+++++++++ Node 8 initializing the weights for op[0, 640)...
+++++++++ Node 4 initializing the weights for op[0, 640)...
+++++++++ Node 6 initializing the weights for op[0, 640)...
Node 8, discovering the vertices that will be sent across graph boundary...
Node 12, discovering the vertices that will be sent across graph boundary...
Node 0, discovering the vertices that will be sent across graph boundary...
Node 4, discovering the vertices that will be sent across graph boundary...
Node 9, discovering the vertices that will be sent across graph boundary...
Node 13, discovering the vertices that will be sent across graph boundary...
Node 1, discovering the vertices that will be sent across graph boundary...
Node 5, discovering the vertices that will be sent across graph boundary...
Node 10, discovering the vertices that will be sent across graph boundary...
Node 14, discovering the vertices that will be sent across graph boundary...
Node 2, discovering the vertices that will be sent across graph boundary...
Node 6, discovering the vertices that will be sent across graph boundary...
Node 11, discovering the vertices that will be sent across graph boundary...
Node 15, discovering the vertices that will be sent across graph boundary...
Node 3, discovering the vertices that will be sent across graph boundary...
Node 7, discovering the vertices that will be sent across graph boundary...
Node 8, discovering the vertices that will be received across the graph boundary.
Node 12, discovering the vertices that will be received across the graph boundary.
The number of mirror vertices: 1294179
Node 0, discovering the vertices that will be received across the graph boundary.
Node 4, discovering the vertices that will be received across the graph boundary.
Node 9, discovering the vertices that will be received across the graph boundary.
Node 13, discovering the vertices that will be received across the graph boundary.
Node 1, discovering the vertices that will be received across the graph boundary.
Node 5, discovering the vertices that will be received across the graph boundary.
Node 10, discovering the vertices that will be received across the graph boundary.
Node 14, discovering the vertices that will be received across the graph boundary.
Node 2, discovering the vertices that will be received across the graph boundary.
Node 6, discovering the vertices that will be received across the graph boundary.
Node 11, discovering the vertices that will be received across the graph boundary.
Node 15, discovering the vertices that will be received across the graph boundary.
Node 3, discovering the vertices that will be received across the graph boundary.
Node 7, discovering the vertices that will be received across the graph boundary.
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
*** Node 14, starting task scheduling...
*** Node 8, starting task scheduling...
*** Node 12, starting task scheduling...
*** Node 9, starting task scheduling...
*** Node 13, starting task scheduling...
*** Node 0, starting task scheduling...



*** Node 4, starting task scheduling...
*** Node 10, starting task scheduling...
*** Node 15, starting task scheduling...
*** Node 1, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 5, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 11, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 2, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 6, starting task scheduling...
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
*** Node 3, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 7, starting task scheduling...
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
	Epoch 1:	Loss 3.7136	TrainAcc 0.0551	ValidAcc 0.0603	TestAcc 0.0576	BestValid 0.0603
	Epoch 50:	Loss 3.7136	TrainAcc 0.0551	ValidAcc 0.0603	TestAcc 0.0576	BestValid 0.0603
****** Epoch Time (Excluding Evaluation Cost): 3.399 s ******
****** Breakdown Analysis ******
Cluster-Wide Average, Bubble-Pipeline: 2.306 ms (Max: 3.493, Min: 0.043, Sum: 36.889)
Cluster-Wide Average, Compute: 424.903 ms (Max: 872.798, Min: 192.916, Sum: 6798.453)
Cluster-Wide Average, Communication-Layer: 0.009 ms (Max: 0.010, Min: 0.008, Sum: 0.137)
Cluster-Wide Average, Bubble-Imbalance: 0.016 ms (Max: 0.018, Min: 0.014, Sum: 0.257)
Cluster-Wide Average, Communication-Graph: 2949.097 ms (Max: 3179.929, Min: 2503.614, Sum: 47185.554)
Cluster-Wide Average, Optimization: 20.980 ms (Max: 21.056, Min: 20.870, Sum: 335.678)
Cluster-Wide Average, Others: 1.898 ms (Max: 2.064, Min: 1.731, Sum: 30.363)
****** Breakdown Sum: 3399.208 ms ******
Cluster-Wide Average, GPU Memory Consumption: 10.778 GB (Max: 12.612, Min: 10.639, Sum: 172.455)
Cluster-Wide Average, Graph-Level Communication Throughput: 23.452 Gbps (Max: 43.575, Min: 13.956, Sum: 375.236)
Cluster-Wide Average, Layer-Level Communication Throughput: 0.000 Gbps (Max: 0.000, Min: 0.000, Sum: 0.000)
Layer-level communication (cluster-wide, per-epoch): 0.000 GB
Graph-level communication (cluster-wide, per-epoch): 123.423 GB
Weight-sync communication (cluster-wide, per-epoch): 0.148 GB
Total communication (cluster-wide, per-epoch): 123.571 GB
****** Accuracy Results ******
Highest valid_acc: 0.0603
Target test_acc: 0.0576
Epoch to reach the target acc: 0
[MPI Rank 8] Success 
[MPI Rank 0] Success 
[MPI Rank 9] Success 
[MPI Rank 12] Success 
[MPI Rank 1] Success 
[MPI Rank 4] Success 
[MPI Rank 10] Success 
[MPI Rank 13] Success 
[MPI Rank 2] Success 
[MPI Rank 6] Success 
[MPI Rank 11] Success 
[MPI Rank 14] Success 
[MPI Rank 3] Success 
[MPI Rank 5] Success 
[MPI Rank 15] Success 
[MPI Rank 7] Success 
