Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
DONE MPI INITDONE MPI INIT
Initialized node 1 on machine gnerv2
DONE MPI INIT
Initialized node 3 on machine gnerv2
DONE MPI INIT
Initialized node 2 on machine gnerv2

Initialized node 0 on machine gnerv2
DONE MPI INIT
Initialized node 6 on machine gnerv3
DONE MPI INIT
Initialized node 4 on machine gnerv3
DONE MPI INIT
Initialized node 7 on machine gnerv3
DONE MPI INIT
Initialized node 5 on machine gnerv3
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
        It takes 2.330 seconds.
Building the CSC structure...
        It takes 2.334 seconds.
Building the CSC structure...
        It takes 2.384 seconds.
Building the CSC structure...
        It takes 2.445 seconds.
Building the CSC structure...
        It takes 2.463 seconds.
Building the CSC structure...
        It takes 2.601 seconds.
Building the CSC structure...
        It takes 2.646 seconds.
Building the CSC structure...
        It takes 2.708 seconds.
Building the CSC structure...
        It takes 2.282 seconds.
        It takes 2.323 seconds.
        It takes 2.297 seconds.
        It takes 2.381 seconds.
        It takes 2.432 seconds.
        It takes 2.299 seconds.
        It takes 2.300 seconds.
        It takes 2.394 seconds.
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
        It takes 0.270 seconds.
Building the Label Vector...
        It takes 0.243 seconds.
Building the Label Vector...
        It takes 0.032 seconds.
        It takes 0.038 seconds.
        It takes 0.297 seconds.
Building the Label Vector...
Building the Feature Vector...
        It takes 0.040 seconds.
Building the Feature Vector...
        It takes 0.289 seconds.
Building the Label Vector...
        It takes 0.045 seconds.
Building the Feature Vector...
        It takes 0.260 seconds.
Building the Label Vector...
        It takes 0.030 seconds.
        It takes 0.257 seconds.
Building the Label Vector...
Building the Feature Vector...
        It takes 0.033 seconds.
        It takes 0.277 seconds.
Building the Label Vector...
        It takes 0.032 seconds.
        It takes 0.270 seconds.
Building the Label Vector...
        It takes 0.037 seconds.
The graph dataset locates at /shared_hdd_storage/jingjichen/gnn_datasets/pipeline_parallel_datasets/reddit/32_parts
The number of GCN layers: 64
The number of hidden units: 100
The number of training epoches: 50
Learning rate: 0.001000
The partition strategy: model
The dropout rate: 0.500
The checkpointed weight file: /tmp/saved_weights_pipe
The random seed: 1
Number of classes: 41
Number of feature dimensions: 602
Number of vertices: 232965
Number of GPUs: 8
GPU 0, layer [0, 8)
GPU 1, layer [8, 16)
GPU 2, layer [16, 24)
GPU 3, layer [24, 32)
GPU 4, layer [32, 40)
GPU 5, layer [40, 48)
GPU 6, layer [48, 56)
GPU 7, layer [56, 64)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 8)
GPU 1, layer [8, 16)
GPU 2, layer [16, 24)
GPU 3, layer [24, 32)
GPU 4, layer [32, 40)
GPU 5, layer [40, 48)
GPU 6, layer [48, 56)
GPU 7, layer [56, 64)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 8)
GPU 1, layer [8, 16)
GPU 2, layer [16, 24)
GPU 3, layer [24, 32)
GPU 4, layer [32, 40)
GPU 5, layer [40, 48)
GPU 6, layer [48, 56)
GPU 7, layer [56, 64)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 8)
GPU 1, layer [8, 16)
GPU 2, layer [16, 24)
GPU 3, layer [24, 32)
GPU 4, layer [32, 40)
GPU 5, layer [40, 48)
GPU 6, layer [48, 56)
GPU 7, layer [56, 64)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 8)
GPU 1, layer [8, 16)
GPU 2, layer [16, 24)
GPU 3, layer [24, 32)
GPU 4, layer [32, 40)
GPU 5, layer [40, 48)
GPU 6, layer [48, 56)
GPU 7, layer [56, 64)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
232965, 114848857, 114848857
Number of vertices per chunk: 7281
232965, 114848857, 114848857
Number of vertices per chunk: 7281
232965, 114848857, 114848857
GPU 0, layer [0, 8)
GPU 1, layer [8, 16)
GPU 2, layer [16, 24)
GPU 3, layer [24, 32)
GPU 4, layer [32, 40)
GPU 5, layer [40, 48)
GPU 6, layer [48, 56)
GPU 7, layer [56, 64)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 8)
GPU 1, layer [8, 16)
GPU 2, layer [16, 24)
GPU 3, layer [24, 32)
GPU 4, layer [32, 40)
GPU 5, layer [40, 48)
GPU 6, layer [48, 56)
GPU 7, layer [56, 64)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
232965, 114848857, 114848857
Number of vertices per chunk: 7281
232965, 114848857, 114848857
Number of vertices per chunk: 7281
Number of vertices per chunk: 7281
232965, 114848857, 114848857
Number of vertices per chunk: 7281
232965, 114848857, 114848857
Number of vertices per chunk: 7281
train nodes 153431, valid nodes 23831, test nodes 55703
GPU 0, layer [0, 8)
GPU 1, layer [8, 16)
GPU 2, layer [16, 24)
GPU 3, layer [24, 32)
GPU 4, layer [32, 40)
GPU 5, layer [40, 48)
GPU 6, layer [48, 56)
GPU 7, layer [56, 64)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
Chunks (number of global chunks: 32): 0-[0, 8381) 1-[8381, 15124) 2-[15124, 22398) 3-[22398, 30320) 4-[30320, 35655) 5-[35655, 45721) 6-[45721, 55131) 7-[55131, 63248) 8-[63248, 69343) ... 31-[226638, 232965)
232965, 114848857, 114848857
Number of vertices per chunk: 7281
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
***** Start profiling the layer-level communication performance *******
The layer-level communication performance: 58.053 Gbps (per GPU), 464.424 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 57.794 Gbps (per GPU), 462.350 Gbps (aggregated)
The layer-level communication performance: 57.793 Gbps (per GPU), 462.347 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 57.553 Gbps (per GPU), 460.428 Gbps (aggregated)
The layer-level communication performance: 57.523 Gbps (per GPU), 460.182 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 57.340 Gbps (per GPU), 458.720 Gbps (aggregated)
The layer-level communication performance: 57.286 Gbps (per GPU), 458.284 Gbps (aggregated)
The layer-level communication performance: 57.256 Gbps (per GPU), 458.049 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The graph-level communication performance (supernode = 2): 156.615 Gbps (per GPU), 1252.919 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 156.606 Gbps (per GPU), 1252.849 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 156.583 Gbps (per GPU), 1252.662 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 156.615 Gbps (per GPU), 1252.919 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 156.580 Gbps (per GPU), 1252.639 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 156.583 Gbps (per GPU), 1252.664 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 156.586 Gbps (per GPU), 1252.685 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 156.483 Gbps (per GPU), 1251.868 Gbps (aggregated, cluster-wide)
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
The graph-level communication performance (supernode = 4): 98.412 Gbps (per GPU), 787.299 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 98.412 Gbps (per GPU), 787.299 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 98.409 Gbps (per GPU), 787.274 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 98.415 Gbps (per GPU), 787.324 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 98.403 Gbps (per GPU), 787.225 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 98.409 Gbps (per GPU), 787.275 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 98.415 Gbps (per GPU), 787.324 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 98.415 Gbps (per GPU), 787.318 Gbps (aggregated, cluster-wide)
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
The graph-level communication performance (supernode = 8): 33.743 Gbps (per GPU), 269.941 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 33.744 Gbps (per GPU), 269.949 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 33.742 Gbps (per GPU), 269.939 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 33.742 Gbps (per GPU), 269.933 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 33.742 Gbps (per GPU), 269.938 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 33.743 Gbps (per GPU), 269.944 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 33.743 Gbps (per GPU), 269.948 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 33.743 Gbps (per GPU), 269.941 Gbps (aggregated, cluster-wide)
 LType   LT0   LT1   LT2 Ratio  VSum  ESum
 chk_0  2.38ms  2.32ms  2.21ms  1.08  8.38K  3.53M
 chk_1  2.71ms  2.60ms  2.52ms  1.08  6.74K  3.60M
 chk_2  2.69ms  2.46ms  2.38ms  1.13  7.27K  3.53M
 chk_3  2.66ms  2.47ms  2.38ms  1.11  7.92K  3.61M
 chk_4  2.55ms  2.44ms  2.38ms  1.07  5.33K  3.68M
 chk_5  2.54ms  2.35ms  2.23ms  1.14 10.07K  3.45M
 chk_6  2.74ms  2.54ms  2.41ms  1.14  9.41K  3.48M
 chk_7  2.58ms  2.41ms  2.31ms  1.12  8.12K  3.60M
 chk_8  2.68ms  2.57ms  2.48ms  1.08  6.09K  3.64M
 chk_9  2.48ms  2.25ms  2.11ms  1.17 11.10K  3.38M
chk_10  2.71ms  2.60ms  2.53ms  1.07  5.67K  3.63M
chk_11  2.56ms  2.43ms  2.32ms  1.10  8.16K  3.54M
chk_12  2.79ms  2.65ms  2.57ms  1.08  7.24K  3.55M
chk_13  2.61ms  2.41ms  2.46ms  1.08  5.41K  3.68M
chk_14  2.87ms  2.71ms  2.63ms  1.09  7.14K  3.53M
chk_15  2.70ms  2.50ms  2.41ms  1.12  9.25K  3.49M
chk_16  2.50ms  2.42ms  2.38ms  1.05  4.78K  3.77M
chk_17  2.67ms  2.52ms  2.45ms  1.09  6.85K  3.60M
chk_18  2.47ms  2.33ms  2.47ms  1.06  7.47K  3.57M
chk_19  2.54ms  2.44ms  2.39ms  1.06  4.88K  3.75M
chk_20  2.54ms  2.40ms  2.30ms  1.10  7.00K  3.63M
chk_21  2.54ms  2.42ms  2.34ms  1.08  5.41K  3.68M
chk_22  2.73ms  2.52ms  2.36ms  1.16 11.07K  3.39M
chk_23  2.66ms  2.51ms  2.41ms  1.10  7.23K  3.64M
chk_24  2.66ms  2.46ms  2.34ms  1.14 10.13K  3.43M
chk_25  2.44ms  2.36ms  2.29ms  1.07  6.40K  3.57M
chk_26  2.70ms  2.54ms  2.51ms  1.07  5.78K  3.55M
chk_27  2.55ms  2.36ms  2.26ms  1.13  9.34K  3.48M
chk_28  2.88ms  2.73ms  2.65ms  1.09  6.37K  3.57M
chk_29  2.68ms  2.57ms  2.49ms  1.08  5.16K  3.78M
chk_30  2.58ms  2.46ms  2.38ms  1.08  5.44K  3.67M
chk_31  2.71ms  2.59ms  2.50ms  1.08  6.33K  3.63M
   Avg  2.63  2.48  2.40
   Max  2.88  2.73  2.65
   Min  2.38  2.25  2.11
 Ratio  1.21  1.21  1.25
   Var  0.01  0.01  0.01
Profiling takes 2.812 s
*** Node 0, starting model training...
Num Stages: 8 / 8
Node 0, Pipeline Input Tensor: NULL
Node 0, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 0 owns the model-level partition [0, 41)
*** Node 0, constructing the helper classes...
Node 0, Local Vertex Begin: 0, Num Local Vertices: 232965
*** Node 1, starting model training...
Num Stages: 8 / 8
Node 1, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 1, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 1 owns the model-level partition [41, 81)
*** Node 1, constructing the helper classes...
Node 1, Local Vertex Begin: 0, Num Local Vertices: 232965
*** Node 2, starting model training...
Num Stages: 8 / 8
Node 2, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 2, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 2 owns the model-level partition [81, 121)
*** Node 2, constructing the helper classes...
Node 2, Local Vertex Begin: 0, Num Local Vertices: 232965
*** Node 3, starting model training...
Num Stages: 8 / 8
Node 3, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 3, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 3 owns the model-level partition [121, 161)
*** Node 3, constructing the helper classes...
Node 3, Local Vertex Begin: 0, Num Local Vertices: 232965
*** Node 4, starting model training...
Num Stages: 8 / 8
Node 4, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 4, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 4 owns the model-level partition [161, 201)
*** Node 4, constructing the helper classes...
Node 4, Local Vertex Begin: 0, Num Local Vertices: 232965
*** Node 5, starting model training...
Num Stages: 8 / 8
Node 5, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 5, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 5 owns the model-level partition [201, 241)
*** Node 5, constructing the helper classes...
Node 5, Local Vertex Begin: 0, Num Local Vertices: 232965
*** Node 6, starting model training...
Num Stages: 8 / 8
Node 6, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 6, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 6 owns the model-level partition [241, 281)
*** Node 6, constructing the helper classes...
Node 6, Local Vertex Begin: 0, Num Local Vertices: 232965
*** Node 7, starting model training...
Num Stages: 8 / 8
Node 7, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 7, Pipeline Output Tensor: NULL
*** Node 7 owns the model-level partition [281, 320)
*** Node 7, constructing the helper classes...
Node 7, Local Vertex Begin: 0, Num Local Vertices: 232965
*** Node 0, setting up some other necessary information...
*** Node 2, setting up some other necessary information...
*** Node 1, setting up some other necessary information...
*** Node 3, setting up some other necessary information...
*** Node 6, setting up some other necessary information...
*** Node 5, setting up some other necessary information...
*** Node 7, setting up some other necessary information...
*** Node 4, setting up some other necessary information...
+++++++++ Node 1 initializing the weights for op[41, 81)...
+++++++++ Node 4 initializing the weights for op[161, 201)...
+++++++++ Node 2 initializing the weights for op[81, 121)...
+++++++++ Node 5 initializing the weights for op[201, 241)...
+++++++++ Node 3 initializing the weights for op[121, 161)...
+++++++++ Node 7 initializing the weights for op[281, 320)...
+++++++++ Node 0 initializing the weights for op[0, 41)...
+++++++++ Node 6 initializing the weights for op[241, 281)...
Node 0, discovering the vertices that will be sent across graph boundary...
The number of mirror vertices: 0
Node 0, discovering the vertices that will be received across the graph boundary.
Node 1, discovering the vertices that will be sent across graph boundary...
Node 1, discovering the vertices that will be received across the graph boundary.
Node 4, discovering the vertices that will be sent across graph boundary...
Node 4, discovering the vertices that will be received across the graph boundary.
Node 2, discovering the vertices that will be sent across graph boundary...
Node 2, discovering the vertices that will be received across the graph boundary.
Node 5, discovering the vertices that will be sent across graph boundary...
Node 5, discovering the vertices that will be received across the graph boundary.
Node 3, discovering the vertices that will be sent across graph boundary...
Node 3, discovering the vertices that will be received across the graph boundary.
Node 6, discovering the vertices that will be sent across graph boundary...
Node 6, discovering the vertices that will be received across the graph boundary.
Node 7, discovering the vertices that will be sent across graph boundary...
Node 7, discovering the vertices that will be received across the graph boundary.
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
*** Node 0, starting task scheduling...
*** Node 1, starting task scheduling...
*** Node 4, starting task scheduling...
*** Node 2, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 5, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 3, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 6, starting task scheduling...
The learning rate specified by the user: 0.001000000



The learning rate specified by the user: 0.001000000
*** Node 7, starting task scheduling...
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
	Epoch 1:	Loss 3.7136	TrainAcc 0.0551	ValidAcc 0.0603	TestAcc 0.0576	BestValid 0.0603
	Epoch 50:	Loss 3.7136	TrainAcc 0.0551	ValidAcc 0.0603	TestAcc 0.0576	BestValid 0.0603
****** Epoch Time (Excluding Evaluation Cost): 0.655 s ******
****** Breakdown Analysis ******
Cluster-Wide Average, Bubble-Pipeline: 118.517 ms (Max: 121.006, Min: 105.300, Sum: 948.136)
Cluster-Wide Average, Compute: 472.734 ms (Max: 488.150, Min: 464.083, Sum: 3781.873)
Cluster-Wide Average, Communication-Layer: 25.742 ms (Max: 31.017, Min: 17.093, Sum: 205.939)
Cluster-Wide Average, Bubble-Imbalance: 31.466 ms (Max: 37.177, Min: 24.764, Sum: 251.729)
Cluster-Wide Average, Communication-Graph: 1.034 ms (Max: 1.149, Min: 0.912, Sum: 8.275)
Cluster-Wide Average, Optimization: 0.190 ms (Max: 0.203, Min: 0.179, Sum: 1.520)
Cluster-Wide Average, Others: 5.472 ms (Max: 18.713, Min: 3.556, Sum: 43.776)
****** Breakdown Sum: 655.156 ms ******
Cluster-Wide Average, GPU Memory Consumption: 8.757 GB (Max: 9.946, Min: 8.389, Sum: 70.054)
Cluster-Wide Average, Graph-Level Communication Throughput: -nan Gbps (Max: -nan, Min: -nan, Sum: -nan)
Cluster-Wide Average, Layer-Level Communication Throughput: 50.049 Gbps (Max: 55.806, Min: 42.598, Sum: 400.391)
Layer-level communication (cluster-wide, per-epoch): 1.215 GB
Graph-level communication (cluster-wide, per-epoch): 0.000 GB
Weight-sync communication (cluster-wide, per-epoch): 0.000 GB
Total communication (cluster-wide, per-epoch): 1.215 GB
****** Accuracy Results ******
Highest valid_acc: 0.0603
Target test_acc: 0.0576
Epoch to reach the target acc: 0
[MPI Rank 0] Success 
[MPI Rank 1] Success 
[MPI Rank 4] Success 
[MPI Rank 2] Success 
[MPI Rank 5] Success 
[MPI Rank 3] Success 
[MPI Rank 6] Success 
[MPI Rank 7] Success 
