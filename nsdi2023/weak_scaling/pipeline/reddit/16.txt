Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
DONE MPI INITDONE MPI INIT
Initialized node 11 on machine gnerv7
DONE MPI INIT

Initialized node 8 on machine gnerv7
Initialized node 10 on machine gnerv7
DONE MPI INIT
Initialized node 9 on machine gnerv7
DONE MPI INITDONE MPI INIT
Initialized node 7 on machine gnerv3

Initialized node 4 on machine gnerv3
DONE MPI INITDONE MPI INIT

DONE MPI INIT
Initialized node 12 on machine gnerv8
DONE MPI INIT
Initialized node 13 on machine gnerv8
DONE MPI INIT
Initialized node 14 on machine gnerv8
DONE MPI INIT
Initialized node 15 on machine gnerv8
Initialized node 5 on machine gnerv3
Initialized node 6 on machine gnerv3
DONE MPI INIT
Initialized node 0 on machine gnerv2
DONE MPI INIT
Initialized node 3 on machine gnerv2
DONE MPI INIT
Initialized node 1 on machine gnerv2
DONE MPI INIT
Initialized node 2 on machine gnerv2
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
        It takes 2.363 seconds.
Building the CSC structure...
        It takes 2.424 seconds.
Building the CSC structure...
        It takes 2.454 seconds.
Building the CSC structure...
        It takes 2.485 seconds.
Building the CSC structure...
        It takes 2.525 seconds.
Building the CSC structure...
        It takes 2.591 seconds.
Building the CSC structure...
        It takes 2.571 seconds.
Building the CSC structure...
        It takes 2.652 seconds.
Building the CSC structure...
        It takes 2.677 seconds.
Building the CSC structure...
        It takes 2.694 seconds.
Building the CSC structure...
        It takes 2.720 seconds.
Building the CSC structure...
        It takes 2.741 seconds.
Building the CSC structure...
        It takes 3.165 seconds.
Building the CSC structure...
        It takes 3.165 seconds.
Building the CSC structure...
        It takes 3.166 seconds.
Building the CSC structure...
        It takes 3.166 seconds.
Building the CSC structure...
        It takes 2.318 seconds.
        It takes 2.362 seconds.
        It takes 2.403 seconds.
        It takes 2.398 seconds.
        It takes 2.360 seconds.
        It takes 2.486 seconds.
        It takes 2.551 seconds.
        It takes 2.382 seconds.
        It takes 2.468 seconds.
        It takes 2.358 seconds.
        It takes 2.362 seconds.
        It takes 2.330 seconds.
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
        It takes 0.279 seconds.
Building the Label Vector...
        It takes 0.038 seconds.
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
        It takes 0.276 seconds.
Building the Label Vector...
        It takes 0.037 seconds.
        It takes 0.321 seconds.
Building the Label Vector...
Building the Feature Vector...
        It takes 0.045 seconds.
Building the Feature Vector...
        It takes 3.042 seconds.
        It takes 3.042 seconds.
        It takes 3.042 seconds.
        It takes 3.042 seconds.
        It takes 0.271 seconds.
Building the Label Vector...
        It takes 0.032 seconds.
        It takes 0.314 seconds.
Building the Label Vector...
        It takes 0.268 seconds.
Building the Label Vector...
        It takes 0.033 seconds.
        It takes 0.032 seconds.
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
GPU 0, layer [0, 8)
GPU 1, layer [8, 16)
GPU 2, layer [16, 24)
GPU 3, layer [24, 32)
GPU 4, layer [32, 40)
GPU 5, layer [40, 48)
GPU 6, layer [48, 56)
GPU 7, layer [56, 64)
GPU 8, layer [64, 72)
GPU 9, layer [72, 80)
GPU 10, layer [80, 88)
GPU 11, layer [88, 96)
GPU 12, layer [96, 104)
GPU 13, layer [104, 112)
GPU 14, layer [112, 120)
GPU 15, layer [120, 128)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
        It takes 0.330 seconds.
Building the Label Vector...
        It takes 0.327 seconds.
Building the Label Vector...
        It takes 0.033 seconds.
        It takes 0.041 seconds.
GPU 0, layer [0, 8)
GPU 1, layer [8, 16)
GPU 2, layer [16, 24)
GPU 3, layer [24, 32)
GPU 4, layer [32, 40)
GPU 5, layer [40, 48)
GPU 6, layer [48, 56)
GPU 7, layer [56, 64)
GPU 8, layer [64, 72)
GPU 9, layer [72, 80)
GPU 10, layer [80, 88)
GPU 11, layer [88, 96)
GPU 12, layer [96, 104)
GPU 13, layer [104, 112)
GPU 14, layer [112, 120)
GPU 15, layer [120, 128)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
        It takes 0.429 seconds.
        It takes 1.077 seconds.
        It takes 1.074 seconds.
        It takes 0.533 seconds.
Building the Label Vector...
Building the Label Vector...
Building the Label Vector...
Building the Label Vector...
GPU 0, layer [0, 8)
GPU 1, layer [8, 16)
GPU 2, layer [16, 24)
GPU 3, layer [24, 32)
GPU 4, layer [32, 40)
GPU 5, layer [40, 48)
GPU 6, layer [48, 56)
GPU 7, layer [56, 64)
GPU 8, layer [64, 72)
GPU 9, layer [72, 80)
GPU 10, layer [80, 88)
GPU 11, layer [88, 96)
GPU 12, layer [96, 104)
GPU 13, layer [104, 112)
GPU 14, layer [112, 120)
GPU 15, layer [120, 128)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
        It takes 0.094 seconds.
        It takes 0.094 seconds.
        It takes 0.094 seconds.
        It takes 0.094 seconds.
Building the Feature Vector...
232965, 114848857, 114848857
Number of vertices per chunk: 3641
GPU 0, layer [0, 8)
GPU 1, layer [8, 16)
GPU 2, layer [16, 24)
GPU 3, layer [24, 32)
GPU 4, layer [32, 40)
GPU 5, layer [40, 48)
GPU 6, layer [48, 56)
GPU 7, layer [56, 64)
GPU 8, layer [64, 72)
GPU 9, layer [72, 80)
GPU 10, layer [80, 88)
GPU 11, layer [88, 96)
GPU 12, layer [96, 104)
GPU 13, layer [104, 112)
GPU 14, layer [112, 120)
GPU 15, layer [120, 128)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
Building the Feature Vector...
GPU 0, layer [0, 8)
GPU 1, layer [8, 16)
GPU 2, layer [16, 24)
GPU 3, layer [24, 32)
GPU 4, layer [32, 40)
GPU 5, layer [40, 48)
GPU 6, layer [48, 56)
GPU 7, layer [56, 64)
GPU 8, layer [64, 72)
GPU 9, layer [72, 80)
GPU 10, layer [80, 88)
GPU 11, layer [88, 96)
GPU 12, layer [96, 104)
GPU 13, layer [104, 112)
GPU 14, layer [112, 120)
GPU 15, layer [120, 128)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
232965, 114848857, 114848857
Number of vertices per chunk: 3641
GPU 0, layer [0, 8)
GPU 1, layer [8, 16)
GPU 2, layer [16, 24)
GPU 3, layer [24, 32)
GPU 4, layer [32, 40)
GPU 5, layer [40, 48)
GPU 6, layer [48, 56)
GPU 7, layer [56, 64)
GPU 8, layer [64, 72)
GPU 9, layer [72, 80)
GPU 10, layer [80, 88)
GPU 11, layer [88, 96)
GPU 12, layer [96, 104)
GPU 13, layer [104, 112)
GPU 14, layer [112, 120)
GPU 15, layer [120, 128)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
232965, 114848857, 114848857
Number of vertices per chunk: 3641
Building the Feature Vector...
232965, 114848857, 114848857
Number of vertices per chunk: 3641
GPU 0, layer [0, 8)
GPU 1, layer [8, 16)
GPU 2, layer [16, 24)
GPU 3, layer [24, 32)
GPU 4, layer [32, 40)
GPU 5, layer [40, 48)
GPU 6, layer [48, 56)
GPU 7, layer [56, 64)
GPU 8, layer [64, 72)
GPU 9, layer [72, 80)
GPU 10, layer [80, 88)
GPU 11, layer [88, 96)
GPU 12, layer [96, 104)
GPU 13, layer [104, 112)
GPU 14, layer [112, 120)
GPU 15, layer [120, 128)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
232965, 114848857, 114848857
Number of vertices per chunk: 3641
GPU 0, layer [0, 8)
GPU 1, layer [8, 16)
GPU 2, layer [16, 24)
GPU 3, layer [24, 32)
GPU 4, layer [32, 40)
GPU 5, layer [40, 48)
GPU 6, layer [48, 56)
GPU 7, layer [56, 64)
GPU 8, layer [64, 72)
GPU 9, layer [72, 80)
GPU 10, layer [80, 88)
GPU 11, layer [88, 96)
GPU 12, layer [96, 104)
GPU 13, layer [104, 112)
GPU 14, layer [112, 120)
GPU 15, layer [120, 128)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
Building the Feature Vector...
GPU 0, layer [0, 8)
GPU 1, layer [8, 16)
GPU 2, layer [16, 24)
GPU 3, layer [24, 32)
GPU 4, layer [32, 40)
GPU 5, layer [40, 48)
GPU 6, layer [48, 56)
GPU 7, layer [56, 64)
GPU 8, layer [64, 72)
GPU 9, layer [72, 80)
GPU 10, layer [80, 88)
GPU 11, layer [88, 96)
GPU 12, layer [96, 104)
GPU 13, layer [104, 112)
GPU 14, layer [112, 120)
GPU 15, layer [120, 128)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 8)
GPU 1, layer [8, 16)
GPU 2, layer [16, 24)
GPU 3, layer [24, 32)
GPU 4, layer [32, 40)
GPU 5, layer [40, 48)
GPU 6, layer [48, 56)
GPU 7, layer [56, 64)
GPU 8, layer [64, 72)
GPU 9, layer [72, 80)
GPU 10, layer [80, 88)
GPU 11, layer [88, 96)
GPU 12, layer [96, 104)
GPU 13, layer [104, 112)
GPU 14, layer [112, 120)
GPU 15, layer [120, 128)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 8)
GPU 1, layer [8, 16)
GPU 2, layer [16, 24)
GPU 3, layer [24, 32)
GPU 4, layer [32, 40)
GPU 5, layer [40, 48)
GPU 6, layer [48, 56)
GPU 7, layer [56, 64)
GPU 8, layer [64, 72)
GPU 9, layer [72, 80)
GPU 10, layer [80, 88)
GPU 11, layer [88, 96)
GPU 12, layer [96, 104)
GPU 13, layer [104, 112)
GPU 14, layer [112, 120)
GPU 15, layer [120, 128)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 8)
GPU 1, layer [8, 16)
GPU 2, layer [16, 24)
GPU 3, layer [24, 32)
GPU 4, layer [32, 40)
GPU 5, layer [40, 48)
GPU 6, layer [48, 56)
GPU 7, layer [56, 64)
GPU 8, layer [64, 72)
GPU 9, layer [72, 80)
GPU 10, layer [80, 88)
GPU 11, layer [88, 96)
GPU 12, layer [96, 104)
GPU 13, layer [104, 112)
GPU 14, layer [112, 120)
GPU 15, layer [120, 128)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
232965, 114848857, 114848857
Number of vertices per chunk: 3641
232965, 114848857, 114848857
Number of vertices per chunk: 3641
232965, 114848857, 114848857
Number of vertices per chunk: 3641
        It takes 0.932 seconds.
        It takes 1.056 seconds.
        It takes 0.627 seconds.
Building the Label Vector...
Building the Label Vector...
Building the Label Vector...
        It takes 0.317 seconds.
Building the Label Vector...
        It takes 0.084 seconds.
        It takes 0.084 seconds.
        It takes 0.084 seconds.
The graph dataset locates at /shared_hdd_storage/jingjichen/gnn_datasets/pipeline_parallel_datasets/reddit/64_parts
The number of GCN layers: 128
The number of hidden units: 100
The number of training epoches: 50
Learning rate: 0.001000
The partition strategy: model
The dropout rate: 0.500
The checkpointed weight file: /tmp/saved_weights_pipe
The random seed: 1
Number of classes: 41
Number of feature dimensions: 602
Number of vertices: 232965
Number of GPUs: 16
        It takes 0.084 seconds.
232965, 114848857, 114848857
Number of vertices per chunk: 3641
232965, 114848857, 114848857
Number of vertices per chunk: 3641
232965, 114848857, 114848857
Number of vertices per chunk: 3641
232965, 114848857, 114848857
Number of vertices per chunk: 3641
GPU 0, layer [0, 8)
GPU 1, layer [8, 16)
GPU 2, layer [16, 24)
GPU 3, layer [24, 32)
GPU 4, layer [32, 40)
GPU 5, layer [40, 48)
GPU 6, layer [48, 56)
GPU 7, layer [56, 64)
GPU 8, layer [64, 72)
GPU 9, layer [72, 80)
GPU 10, layer [80, 88)
GPU 11, layer [88, 96)
GPU 12, layer [96, 104)
GPU 13, layer [104, 112)
GPU 14, layer [112, 120)
GPU 15, layer [120, 128)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 8)
GPU 1, layer [8, 16)
GPU 2, layer [16, 24)
GPU 3, layer [24, 32)
GPU 4, layer [32, 40)
GPU 5, layer [40, 48)
GPU 6, layer [48, 56)
GPU 7, layer [56, 64)
GPU 8, layer [64, 72)
GPU 9, layer [72, 80)
GPU 10, layer [80, 88)
GPU 11, layer [88, 96)
GPU 12, layer [96, 104)
GPU 13, layer [104, 112)
GPU 14, layer [112, 120)
GPU 15, layer [120, 128)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
train nodes 153431, valid nodes 23831, test nodes 55703
GPU 0, layer [0, 8)
GPU 1, layer [8, 16)
GPU 2, layer [16, 24)
GPU 3, layer [24, 32)
GPU 4, layer [32, 40)
GPU 5, layer [40, 48)
GPU 6, layer [48, 56)
GPU 7, layer [56, 64)
GPU 8, layer [64, 72)
GPU 9, layer [72, 80)
GPU 10, layer [80, 88)
GPU 11, layer [88, 96)
GPU 12, layer [96, 104)
GPU 13, layer [104, 112)
GPU 14, layer [112, 120)
GPU 15, layer [120, 128)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
Chunks (number of global chunks: 64): 0-[0, 3383) 1-[3383, 7843) 2-[7843, 12526) 3-[12526, 16576) 4-[16576, 20087) 5-[20087, 24086) 6-[24086, 27150) 7-[27150, 31875) 8-[31875, 38059) ... 63-[229059, 232965)
GPU 0, layer [0, 8)
GPU 1, layer [8, 16)
GPU 2, layer [16, 24)
GPU 3, layer [24, 32)
GPU 4, layer [32, 40)
GPU 5, layer [40, 48)
GPU 6, layer [48, 56)
GPU 7, layer [56, 64)
GPU 8, layer [64, 72)
GPU 9, layer [72, 80)
GPU 10, layer [80, 88)
GPU 11, layer [88, 96)
GPU 12, layer [96, 104)
GPU 13, layer [104, 112)
GPU 14, layer [112, 120)
GPU 15, layer [120, 128)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
232965, 114848857, 114848857
Number of vertices per chunk: 3641
232965, 114848857, 114848857
Number of vertices per chunk: 3641
232965, 114848857, 114848857
Number of vertices per chunk: 3641
csr in-out ready !Start Cost Model Initialization...
232965, 114848857, 114848857
Number of vertices per chunk: 3641
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
***** Start profiling the layer-level communication performance *******
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
The layer-level communication performance: 55.705 Gbps (per GPU), 891.281 Gbps (aggregated)
The layer-level communication performance: 55.636 Gbps (per GPU), 890.177 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 55.463 Gbps (per GPU), 887.401 Gbps (aggregated)
The layer-level communication performance: 55.384 Gbps (per GPU), 886.144 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 55.239 Gbps (per GPU), 883.829 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 55.157 Gbps (per GPU), 882.515 Gbps (aggregated)
The layer-level communication performance: 55.139 Gbps (per GPU), 882.229 Gbps (aggregated)
The layer-level communication performance: 55.128 Gbps (per GPU), 882.050 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 55.057 Gbps (per GPU), 880.912 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 55.026 Gbps (per GPU), 880.417 Gbps (aggregated)
The layer-level communication performance: 55.006 Gbps (per GPU), 880.097 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 54.903 Gbps (per GPU), 878.447 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 54.893 Gbps (per GPU), 878.290 Gbps (aggregated)
The layer-level communication performance: 54.882 Gbps (per GPU), 878.117 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 54.759 Gbps (per GPU), 876.139 Gbps (aggregated)
The layer-level communication performance: 54.791 Gbps (per GPU), 876.657 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The graph-level communication performance (supernode = 2): 156.015 Gbps (per GPU), 2496.238 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 156.012 Gbps (per GPU), 2496.192 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 156.213 Gbps (per GPU), 2499.400 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 156.009 Gbps (per GPU), 2496.147 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 156.012 Gbps (per GPU), 2496.192 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 156.006 Gbps (per GPU), 2496.099 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 156.212 Gbps (per GPU), 2499.399 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 156.044 Gbps (per GPU), 2496.702 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 156.018 Gbps (per GPU), 2496.285 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 156.009 Gbps (per GPU), 2496.145 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 156.218 Gbps (per GPU), 2499.492 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 156.006 Gbps (per GPU), 2496.099 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 156.021 Gbps (per GPU), 2496.331 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 156.015 Gbps (per GPU), 2496.238 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 156.210 Gbps (per GPU), 2499.353 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 156.073 Gbps (per GPU), 2497.167 Gbps (aggregated, cluster-wide)
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
The graph-level communication performance (supernode = 4): 101.178 Gbps (per GPU), 1618.849 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 101.182 Gbps (per GPU), 1618.915 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 101.182 Gbps (per GPU), 1618.915 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 101.178 Gbps (per GPU), 1618.848 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 101.181 Gbps (per GPU), 1618.902 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 101.181 Gbps (per GPU), 1618.888 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 101.183 Gbps (per GPU), 1618.929 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 101.179 Gbps (per GPU), 1618.863 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 101.181 Gbps (per GPU), 1618.902 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 101.183 Gbps (per GPU), 1618.927 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 101.181 Gbps (per GPU), 1618.888 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 101.181 Gbps (per GPU), 1618.902 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 101.184 Gbps (per GPU), 1618.941 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 101.182 Gbps (per GPU), 1618.915 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 101.185 Gbps (per GPU), 1618.954 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 101.184 Gbps (per GPU), 1618.941 Gbps (aggregated, cluster-wide)
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
The graph-level communication performance (supernode = 8): 25.613 Gbps (per GPU), 409.812 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 25.613 Gbps (per GPU), 409.814 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 25.613 Gbps (per GPU), 409.809 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 25.613 Gbps (per GPU), 409.814 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 25.613 Gbps (per GPU), 409.807 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 25.613 Gbps (per GPU), 409.813 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 25.613 Gbps (per GPU), 409.809 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 25.612 Gbps (per GPU), 409.797 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 25.612 Gbps (per GPU), 409.799 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 25.613 Gbps (per GPU), 409.813 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 25.613 Gbps (per GPU), 409.809 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 25.612 Gbps (per GPU), 409.795 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 25.612 Gbps (per GPU), 409.798 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 25.613 Gbps (per GPU), 409.812 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 25.613 Gbps (per GPU), 409.809 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 25.613 Gbps (per GPU), 409.806 Gbps (aggregated, cluster-wide)
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
The graph-level communication performance (supernode = 16): 20.401 Gbps (per GPU), 326.420 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 20.401 Gbps (per GPU), 326.415 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 20.401 Gbps (per GPU), 326.422 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 20.401 Gbps (per GPU), 326.423 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 20.401 Gbps (per GPU), 326.420 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 20.401 Gbps (per GPU), 326.415 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 20.401 Gbps (per GPU), 326.419 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 20.401 Gbps (per GPU), 326.411 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 20.401 Gbps (per GPU), 326.416 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 20.401 Gbps (per GPU), 326.418 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 20.401 Gbps (per GPU), 326.419 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 20.401 Gbps (per GPU), 326.411 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 20.401 Gbps (per GPU), 326.413 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 20.401 Gbps (per GPU), 326.412 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 20.401 Gbps (per GPU), 326.420 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 20.401 Gbps (per GPU), 326.416 Gbps (aggregated, cluster-wide)
 LType   LT0   LT1   LT2 Ratio  VSum  ESum
 chk_0  1.43ms  1.40ms  1.33ms  1.07  3.38K  1.78M
 chk_1  1.40ms  1.34ms  1.26ms  1.12  4.46K  1.78M
 chk_2  1.42ms  1.35ms  1.29ms  1.11  4.68K  1.74M
 chk_3  1.45ms  1.37ms  1.32ms  1.10  4.05K  1.77M
 chk_4  1.42ms  1.34ms  1.29ms  1.10  3.51K  1.79M
 chk_5  1.34ms  1.27ms  1.21ms  1.10  4.00K  1.83M
 chk_6  1.34ms  1.28ms  1.24ms  1.08  3.06K  1.85M
 chk_7  1.42ms  1.32ms  1.26ms  1.13  4.72K  1.71M
 chk_8  1.41ms  1.28ms  1.20ms  1.17  6.18K  1.69M
 chk_9  1.34ms  1.30ms  1.27ms  1.05  2.07K  1.90M
chk_10  1.36ms  1.31ms  1.27ms  1.07  2.79K  1.81M
chk_11  1.51ms  1.40ms  1.33ms  1.14  4.93K  1.76M
chk_12  1.41ms  1.35ms  1.31ms  1.08  2.74K  1.81M
chk_13  1.43ms  1.34ms  1.30ms  1.10  3.26K  1.78M
chk_14  1.44ms  1.33ms  1.29ms  1.12  4.03K  1.77M
chk_15  1.29ms  1.20ms  1.18ms  1.10  3.26K  1.84M
chk_16  1.42ms  1.37ms  1.30ms  1.09  3.22K  1.78M
chk_17  1.44ms  1.37ms  1.31ms  1.10  3.69K  1.82M
chk_18  1.41ms  1.32ms  1.24ms  1.14  4.98K  1.78M
chk_19  1.41ms  1.34ms  1.28ms  1.10  3.53K  1.77M
chk_20  1.42ms  1.36ms  1.30ms  1.09  3.14K  1.79M
chk_21  1.34ms  1.30ms  1.25ms  1.07  2.52K  1.85M
chk_22  1.31ms  1.25ms  1.18ms  1.11  3.62K  1.76M
chk_23  1.39ms  1.33ms  1.27ms  1.10  3.26K  1.81M
chk_24  1.34ms  1.27ms  1.21ms  1.10  3.29K  1.81M
chk_25  1.32ms  1.25ms  1.19ms  1.11  4.05K  1.77M
chk_26  1.29ms  1.26ms  1.22ms  1.06  2.41K  1.87M
chk_27  1.57ms  1.49ms  1.42ms  1.10  3.85K  1.76M
chk_28  1.36ms  1.32ms  1.26ms  1.08  2.90K  1.83M
chk_29  1.49ms  1.43ms  1.36ms  1.09  3.43K  1.77M
chk_30  1.45ms  1.42ms  1.36ms  1.07  2.37K  1.80M
chk_31  1.49ms  1.44ms  1.39ms  1.07  2.71K  1.87M
chk_32  1.35ms  1.25ms  1.17ms  1.16  5.56K  1.69M
chk_33  1.36ms  1.26ms  1.18ms  1.16  5.31K  1.75M
chk_34  1.40ms  1.33ms  1.26ms  1.11  4.07K  1.78M
chk_35  1.41ms  1.25ms  1.18ms  1.19  4.52K  1.75M
chk_36  1.41ms  1.37ms  1.33ms  1.06  2.25K  1.86M
chk_37  1.35ms  1.29ms  1.25ms  1.07  2.93K  1.83M
chk_38  1.48ms  1.43ms  1.39ms  1.07  2.63K  1.78M
chk_39  1.34ms  1.26ms  1.19ms  1.13  4.47K  1.76M
chk_40  1.40ms  1.32ms  1.25ms  1.11  4.06K  1.77M
chk_41  1.40ms  1.31ms  1.23ms  1.14  4.79K  1.73M
chk_42  1.39ms  1.31ms  1.26ms  1.10  3.84K  1.81M
chk_43  1.43ms  1.33ms  1.27ms  1.13  4.60K  1.74M
chk_44  1.42ms  1.37ms  1.33ms  1.07  2.77K  1.81M
chk_45  1.40ms  1.38ms  1.33ms  1.05  2.70K  1.86M
chk_46  1.53ms  1.47ms  1.41ms  1.09  3.46K  1.77M
chk_47  1.37ms  1.28ms  1.21ms  1.13  4.89K  1.70M
chk_48  1.47ms  1.42ms  1.37ms  1.07  2.91K  1.80M
chk_49  1.43ms  1.40ms  1.36ms  1.05  2.35K  1.86M
chk_50  1.27ms  1.22ms  1.18ms  1.07  2.75K  1.89M
chk_51  1.44ms  1.34ms  1.28ms  1.13  4.12K  1.74M
chk_52  1.44ms  1.33ms  1.26ms  1.15  4.93K  1.73M
chk_53  1.32ms  1.26ms  1.22ms  1.08  2.77K  1.86M
chk_54  1.41ms  1.31ms  1.25ms  1.12  3.86K  1.78M
chk_55  1.34ms  1.29ms  1.23ms  1.08  2.83K  1.80M
chk_56  1.45ms  1.39ms  1.32ms  1.10  3.34K  1.78M
chk_57  1.53ms  1.44ms  1.35ms  1.14  5.03K  1.74M
chk_58  1.40ms  1.34ms  1.28ms  1.10  3.16K  1.87M
chk_59  1.38ms  1.31ms  1.23ms  1.12  4.53K  1.75M
chk_60  1.33ms  1.27ms  1.24ms  1.07  2.98K  1.82M
chk_61  1.40ms  1.34ms  1.29ms  1.09  3.55K  1.77M
chk_62  1.29ms  1.25ms  1.22ms  1.06  3.02K  1.79M
chk_63  1.42ms  1.35ms  1.31ms  1.09  3.91K  1.78M
   Avg  1.40  1.33  1.27
   Max  1.57  1.49  1.42
   Min  1.27  1.20  1.17
 Ratio  1.24  1.24  1.22
   Var  0.00  0.00  0.00
Profiling takes 3.044 s
*** Node 0, starting model training...
Num Stages: 16 / 16
Node 0, Pipeline Input Tensor: NULL
Node 0, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 0 owns the model-level partition [0, 41)
*** Node 0, constructing the helper classes...
Node 0, Local Vertex Begin: 0, Num Local Vertices: 232965
*** Node 1, starting model training...
Num Stages: 16 / 16
Node 1, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 1, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 1 owns the model-level partition [41, 81)
*** Node 1, constructing the helper classes...
Node 1, Local Vertex Begin: 0, Num Local Vertices: 232965
*** Node 2, starting model training...
Num Stages: 16 / 16
Node 2, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 2, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 2 owns the model-level partition [81, 121)
*** Node 2, constructing the helper classes...
Node 2, Local Vertex Begin: 0, Num Local Vertices: 232965
*** Node 3, starting model training...
Num Stages: 16 / 16
Node 3, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 3, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 3 owns the model-level partition [121, 161)
*** Node 3, constructing the helper classes...
Node 3, Local Vertex Begin: 0, Num Local Vertices: 232965
*** Node 4, starting model training...
Num Stages: 16 / 16
Node 4, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 4, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 4 owns the model-level partition [161, 201)
*** Node 4, constructing the helper classes...
Node 4, Local Vertex Begin: 0, Num Local Vertices: 232965
*** Node 5, starting model training...
Num Stages: 16 / 16
Node 5, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 5, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 5 owns the model-level partition [201, 241)
*** Node 5, constructing the helper classes...
Node 5, Local Vertex Begin: 0, Num Local Vertices: 232965
*** Node 6, starting model training...
Num Stages: 16 / 16
Node 6, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 6, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 6 owns the model-level partition [241, 281)
*** Node 6, constructing the helper classes...
Node 6, Local Vertex Begin: 0, Num Local Vertices: 232965
*** Node 7, starting model training...
Num Stages: 16 / 16
Node 7, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 7, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 7 owns the model-level partition [281, 321)
*** Node 7, constructing the helper classes...
Node 7, Local Vertex Begin: 0, Num Local Vertices: 232965
*** Node 12, starting model training...
Num Stages: 16 / 16
Node 12, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 12, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 12 owns the model-level partition [481, 521)
*** Node 12, constructing the helper classes...
*** Node 13, starting model training...
Num Stages: 16 / 16
Node 13, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 13, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 13 owns the model-level partition [521, 561)
*** Node 13, constructing the helper classes...
Node 13, Local Vertex Begin: 0, Num Local Vertices: 232965
Node 12, Local Vertex Begin: 0, Num Local Vertices: 232965
*** Node 8, starting model training...
Num Stages: 16 / 16
Node 8, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 8, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 8 owns the model-level partition [321, 361)
*** Node 8, constructing the helper classes...
Node 8, Local Vertex Begin: 0, Num Local Vertices: 232965
*** Node 14, starting model training...
Num Stages: 16 / 16
*** Node 9, starting model training...
Num Stages: 16 / 16
Node 9, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 9, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 9 owns the model-level partition [361, 401)
*** Node 9, constructing the helper classes...
Node 9, Local Vertex Begin: 0, Num Local Vertices: 232965
Node 14, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 14, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 14 owns the model-level partition [561, 601)
*** Node 14, constructing the helper classes...
*** Node 10, starting model training...
Num Stages: 16 / 16
Node 10, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 10, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 10 owns the model-level partition [401, 441)
*** Node 10, constructing the helper classes...
Node 10, Local Vertex Begin: 0, Num Local Vertices: 232965
*** Node 15, starting model training...
Num Stages: 16 / 16
*** Node 11, starting model training...
Num Stages: 16 / 16
Node 11, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 11, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 11 owns the model-level partition [441, 481)
*** Node 11, constructing the helper classes...
Node 11, Local Vertex Begin: 0, Num Local Vertices: 232965
Node 14, Local Vertex Begin: 0, Num Local Vertices: 232965
Node 15, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 15, Pipeline Output Tensor: NULL
*** Node 15 owns the model-level partition [601, 640)
*** Node 15, constructing the helper classes...
Node 15, Local Vertex Begin: 0, Num Local Vertices: 232965
*** Node 0, setting up some other necessary information...
*** Node 11, setting up some other necessary information...
*** Node 14, setting up some other necessary information...
*** Node 2, setting up some other necessary information...
*** Node 9, setting up some other necessary information...
*** Node 13, setting up some other necessary information...
*** Node 1, setting up some other necessary information...
*** Node 10, setting up some other necessary information...
*** Node 12, setting up some other necessary information...
*** Node 3, setting up some other necessary information...
*** Node 8, setting up some other necessary information...
*** Node 15, setting up some other necessary information...
*** Node 4, setting up some other necessary information...
*** Node 5, setting up some other necessary information...
*** Node 6, setting up some other necessary information...
*** Node 7, setting up some other necessary information...
+++++++++ Node 12 initializing the weights for op[481, 521)...
+++++++++ Node 3 initializing the weights for op[121, 161)...
+++++++++ Node 14 initializing the weights for op[561, 601)...
+++++++++ Node 0 initializing the weights for op[0, 41)...
+++++++++ Node 5 initializing the weights for op[201, 241)...
+++++++++ Node 13 initializing the weights for op[521, 561)...
+++++++++ Node 1 initializing the weights for op[41, 81)...
+++++++++ Node 6 initializing the weights for op[241, 281)...
+++++++++ Node 15 initializing the weights for op[601, 640)...
+++++++++ Node 2 initializing the weights for op[81, 121)...
+++++++++ Node 7 initializing the weights for op[281, 321)...
+++++++++ Node 4 initializing the weights for op[161, 201)...
+++++++++ Node 9 initializing the weights for op[361, 401)...
+++++++++ Node 10 initializing the weights for op[401, 441)...
+++++++++ Node 11 initializing the weights for op[441, 481)...
+++++++++ Node 8 initializing the weights for op[321, 361)...
Node 0, discovering the vertices that will be sent across graph boundary...
Node 8, discovering the vertices that will be sent across graph boundary...
Node 12, discovering the vertices that will be sent across graph boundary...
Node 1, discovering the vertices that will be sent across graph boundary...
Node 1, discovering the vertices that will be received across the graph boundary.
Node 4, discovering the vertices that will be sent across graph boundary...
Node 9, discovering the vertices that will be sent across graph boundary...
Node 9, discovering the vertices that will be received across the graph boundary.
Node 13, discovering the vertices that will be sent across graph boundary...
Node 13, discovering the vertices that will be received across the graph boundary.
Node 2, discovering the vertices that will be sent across graph boundary...
Node 2, discovering the vertices that will be received across the graph boundary.
Node 5, discovering the vertices that will be sent across graph boundary...
Node 5, discovering the vertices that will be received across the graph boundary.
Node 10, discovering the vertices that will be sent across graph boundary...
Node 10, discovering the vertices that will be received across the graph boundary.
Node 14, discovering the vertices that will be sent across graph boundary...
Node 14, discovering the vertices that will be received across the graph boundary.
Node 3, discovering the vertices that will be sent across graph boundary...
Node 3, discovering the vertices that will be received across the graph boundary.
Node 6, discovering the vertices that will be sent across graph boundary...
Node 6, discovering the vertices that will be received across the graph boundary.
Node 11, discovering the vertices that will be sent across graph boundary...
Node 11, discovering the vertices that will be received across the graph boundary.
Node 12, discovering the vertices that will be received across the graph boundary.
The number of mirror vertices: 0
Node 0, discovering the vertices that will be received across the graph boundary.
Node 7, discovering the vertices that will be sent across graph boundary...
Node 7, discovering the vertices that will be received across the graph boundary.
Node 8, discovering the vertices that will be received across the graph boundary.
Node 15, discovering the vertices that will be sent across graph boundary...
Node 15, discovering the vertices that will be received across the graph boundary.
Node 4, discovering the vertices that will be received across the graph boundary.
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
*** Node 12, starting task scheduling...
*** Node 0, starting task scheduling...



*** Node 8, starting task scheduling...
*** Node 13, starting task scheduling...
*** Node 1, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 4, starting task scheduling...
*** Node 9, starting task scheduling...
*** Node 14, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 2, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 5, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 10, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 15, starting task scheduling...
*** Node 3, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 6, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 11, starting task scheduling...
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
*** Node 7, starting task scheduling...
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
	Epoch 1:	Loss 3.7136	TrainAcc 0.0551	ValidAcc 0.0603	TestAcc 0.0576	BestValid 0.0603
