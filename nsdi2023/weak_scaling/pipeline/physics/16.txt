Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
DONE MPI INIT
Initialized node 12 on machine gnerv8
DONE MPI INIT
Initialized node 14 on machine gnerv8
DONE MPI INIT
Initialized node 13 on machine gnerv8
DONE MPI INIT
Initialized node 15 on machine gnerv8
DONE MPI INIT
Initialized node 9 on machine gnerv7
DONE MPI INIT
Initialized node 10 on machine gnerv7
DONE MPI INIT
Initialized node 11 on machine gnerv7
DONE MPI INIT
Initialized node 8 on machine gnerv7
DONE MPI INIT
DONE MPI INIT
Initialized node 0 on machine gnerv2
DONE MPI INIT
Initialized node 2 on machine gnerv2
DONE MPI INIT
Initialized node 3 on machine gnerv2
Initialized node 1 on machine gnerv2
DONE MPI INIT
DONE MPI INIT
Initialized node 6 on machine gnerv3
DONE MPI INIT
Initialized node 7 on machine gnerv3
Initialized node 4 on machine gnerv3
DONE MPI INIT
Initialized node 5 on machine gnerv3
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
        It takes 0.048 seconds.
Building the CSC structure...
        It takes 0.051 seconds.
Building the CSC structure...
        It takes 0.052 seconds.
Building the CSC structure...
        It takes 0.051 seconds.
Building the CSC structure...
        It takes 0.052 seconds.
Building the CSC structure...
        It takes 0.050 seconds.
Building the CSC structure...
        It takes 0.052 seconds.
Building the CSC structure...
        It takes 0.052 seconds.
Building the CSC structure...
        It takes 0.052 seconds.
Building the CSC structure...
        It takes 0.052 seconds.
Building the CSC structure...
        It takes 0.048 seconds.
Building the CSC structure...
        It takes 0.052 seconds.
Building the CSC structure...
        It takes 0.052 seconds.
Building the CSC structure...
        It takes 0.048 seconds.
Building the CSC structure...
        It takes 0.051 seconds.
Building the CSC structure...
        It takes 0.050 seconds.
Building the CSC structure...
        It takes 0.013 seconds.
        It takes 0.013 seconds.
        It takes 0.013 seconds.
        It takes 0.013 seconds.
        It takes 0.013 seconds.
        It takes 0.013 seconds.
        It takes 0.014 seconds.
        It takes 0.014 seconds.
        It takes 0.014 seconds.
        It takes 0.014 seconds.
        It takes 0.014 seconds.
        It takes 0.015 seconds.
        It takes 0.015 seconds.
        It takes 0.015 seconds.
        It takes 0.013 seconds.
        It takes 0.016 seconds.
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
        It takes 2.292 seconds.
        It takes 2.292 seconds.
        It takes 2.292 seconds.
Building the Label Vector...
Building the Label Vector...
Building the Label Vector...
        It takes 2.292 seconds.
Building the Label Vector...
        It takes 2.294 seconds.
        It takes 2.294 seconds.
        It takes 2.294 seconds.
        It takes 2.294 seconds.
Building the Label Vector...
Building the Label Vector...
Building the Label Vector...
Building the Label Vector...
        It takes 0.018 seconds.
        It takes 0.017 seconds.
        It takes 0.018 seconds.
        It takes 0.017 seconds.
        It takes 0.018 seconds.
        It takes 0.017 seconds.
        It takes 0.018 seconds.
        It takes 0.017 seconds.
        It takes 2.809 seconds.
        It takes 2.810 seconds.
        It takes 2.806 seconds.
        It takes 2.810 seconds.
Building the Label Vector...
Building the Label Vector...
Building the Label Vector...
Building the Label Vector...
        It takes 2.809 seconds.
        It takes 2.809 seconds.
        It takes 2.809 seconds.
        It takes 2.809 seconds.
Building the Label Vector...
Building the Label Vector...
Building the Label Vector...
Building the Label Vector...
        It takes 0.004 seconds.
        It takes 0.005 seconds.
        It takes 0.007 seconds.
        It takes 0.006 seconds.
        It takes 0.009 seconds.
        It takes 0.008 seconds.
The graph dataset locates at /shared_hdd_storage/jingjichen/gnn_datasets/pipeline_parallel_datasets/physics/64_parts
The number of GCN layers: 128
The number of hidden units: 100
The number of training epoches: 50
Learning rate: 0.001000
        It takes 0.008 seconds.
The partition strategy: model
The dropout rate: 0.500
The checkpointed weight file: /tmp/saved_weights_pipe
The random seed: 1
Number of classes: 5
Number of feature dimensions: 8415
Number of vertices: 34493
Number of GPUs: 16
        It takes 0.009 seconds.
GPU 0, layer [0, 8)
GPU 1, layer [8, 16)
GPU 2, layer [16, 24)
GPU 3, layer [24, 32)
GPU 4, layer [32, 40)
GPU 5, layer [40, 48)
GPU 6, layer [48, 56)
GPU 7, layer [56, 64)
GPU 8, layer [64, 72)
GPU 9, layer [72, 80)
GPU 10, layer [80, 88)
GPU 11, layer [88, 96)
GPU 12, layer [96, 104)
GPU 13, layer [104, 112)
GPU 14, layer [112, 120)
GPU 15, layer [120, 128)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 8)
GPU 1, layer [8, 16)
GPU 2, layer [16, 24)
GPU 3, layer [24, 32)
GPU 4, layer [32, 40)
GPU 5, layer [40, 48)
GPU 6, layer [48, 56)
GPU 7, layer [56, 64)
GPU 8, layer [64, 72)
GPU 9, layer [72, 80)
GPU 10, layer [80, 88)
GPU 11, layer [88, 96)
GPU 12, layer [96, 104)
GPU 13, layer [104, 112)
GPU 14, layer [112, 120)
GPU 15, layer [120, 128)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
34493, 530417, 530417
Number of vertices per chunk: 539
34493, 530417, 530417
Number of vertices per chunk: 539
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
GPU 0, layer [0, 8)
GPU 1, layer [8, 16)
GPU 2, layer [16, 24)
GPU 3, layer [24, 32)
GPU 4, layer [32, 40)
GPU 5, layer [40, 48)
GPU 6, layer [48, 56)
GPU 7, layer [56, 64)
GPU 8, layer [64, 72)
GPU 9, layer [72, 80)
GPU 10, layer [80, 88)
GPU 11, layer [88, 96)
GPU 12, layer [96, 104)
GPU 13, layer [104, 112)
GPU 14, layer [112, 120)
GPU 15, layer [120, 128)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
34493, 530417, 530417
Number of vertices per chunk: 539
GPU 0, layer [0, 8)
GPU 1, layer [8, 16)
GPU 2, layer [16, 24)
GPU 3, layer [24, 32)
GPU 4, layer [32, 40)
GPU 5, layer [40, 48)
GPU 6, layer [48, 56)
GPU 7, layer [56, 64)
GPU 8, layer [64, 72)
GPU 9, layer [72, 80)
GPU 10, layer [80, 88)
GPU 11, layer [88, 96)
GPU 12, layer [96, 104)
GPU 13, layer [104, 112)
GPU 14, layer [112, 120)
GPU 15, layer [120, 128)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 8)
GPU 1, layer [8, 16)
GPU 2, layer [16, 24)
GPU 3, layer [24, 32)
GPU 4, layer [32, 40)
GPU 5, layer [40, 48)
GPU 6, layer [48, 56)
GPU 7, layer [56, 64)
GPU 8, layer [64, 72)
GPU 9, layer [72, 80)
GPU 10, layer [80, 88)
GPU 11, layer [88, 96)
GPU 12, layer [96, 104)
GPU 13, layer [104, 112)
GPU 14, layer [112, 120)
GPU 15, layer [120, 128)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
csr in-out ready !Start Cost Model Initialization...
34493, 530417, 530417
34493, 530417, 530417
Number of vertices per chunk: 539
Number of vertices per chunk: 539
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
GPU 0, layer [0, 8)
GPU 1, layer [8, 16)
GPU 2, layer [16, 24)
GPU 3, layer [24, 32)
GPU 4, layer [32, 40)
GPU 5, layer [40, 48)
GPU 6, layer [48, 56)
GPU 7, layer [56, 64)
GPU 8, layer [64, 72)
GPU 9, layer [72, 80)
GPU 10, layer [80, 88)
GPU 11, layer [88, 96)
GPU 12, layer [96, 104)
GPU 13, layer [104, 112)
GPU 14, layer [112, 120)
GPU 15, layer [120, 128)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 8)
GPU 1, layer [8, 16)
GPU 2, layer [16, 24)
GPU 3, layer [24, 32)
GPU 4, layer [32, 40)
GPU 5, layer [40, 48)
GPU 6, layer [48, 56)
GPU 7, layer [56, 64)
GPU 8, layer [64, 72)
GPU 9, layer [72, 80)
GPU 10, layer [80, 88)
GPU 11, layer [88, 96)
GPU 12, layer [96, 104)
GPU 13, layer [104, 112)
GPU 14, layer [112, 120)
GPU 15, layer [120, 128)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 8)
GPU 1, layer [8, 16)
GPU 2, layer [16, 24)
GPU 3, layer [24, 32)
GPU 4, layer [32, 40)
GPU 5, layer [40, 48)
GPU 6, layer [48, 56)
GPU 7, layer [56, 64)
GPU 8, layer [64, 72)
GPU 9, layer [72, 80)
GPU 10, layer [80, 88)
GPU 11, layer [88, 96)
GPU 12, layer [96, 104)
GPU 13, layer [104, 112)
GPU 14, layer [112, 120)
GPU 15, layer [120, 128)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
34493, 530417, 530417
Number of vertices per chunk: 539
34493, 530417, 530417
Number of vertices per chunk: 539
34493, 530417, 530417
Number of vertices per chunk: 539
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
GPU 0, layer [0, 8)
GPU 1, layer [8, 16)
GPU 2, layer [16, 24)
GPU 3, layer [24, 32)
GPU 4, layer [32, 40)
GPU 5, layer [40, 48)
GPU 6, layer [48, 56)
GPU 7, layer [56, 64)
GPU 8, layer [64, 72)
GPU 9, layer [72, 80)
GPU 10, layer [80, 88)
GPU 11, layer [88, 96)
GPU 12, layer [96, 104)
GPU 13, layer [104, 112)
GPU 14, layer [112, 120)
GPU 15, layer [120, 128)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 8)
GPU 1, layer [8, 16)
GPU 2, layer [16, 24)
GPU 3, layer [24, 32)
GPU 4, layer [32, 40)
GPU 5, layer [40, 48)
GPU 6, layer [48, 56)
GPU 7, layer [56, 64)
GPU 8, layer [64, 72)
GPU 9, layer [72, 80)
GPU 10, layer [80, 88)
GPU 11, layer [88, 96)
GPU 12, layer [96, 104)
GPU 13, layer [104, 112)
GPU 14, layer [112, 120)
GPU 15, layer [120, 128)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
34493, 530417, 530417
Number of vertices per chunk: 539
train nodes 100, valid nodes 500, test nodes 1000
GPU 0, layer [0, 8)
GPU 1, layer [8, 16)
GPU 2, layer [16, 24)
GPU 3, layer [24, 32)
GPU 4, layer [32, 40)
GPU 5, layer [40, 48)
GPU 6, layer [48, 56)
GPU 7, layer [56, 64)
GPU 8, layer [64, 72)
GPU 9, layer [72, 80)
GPU 10, layer [80, 88)
GPU 11, layer [88, 96)
GPU 12, layer [96, 104)
GPU 13, layer [104, 112)
GPU 14, layer [112, 120)
GPU 15, layer [120, 128)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
34493, 530417, 530417
Chunks (number of global chunks: 64): 0-[0, 550) 1-[550, 1069) 2-[1069, 1562) 3-[1562, 2046) 4-[2046, 2605) 5-[2605, 3162) 6-[3162, 3639) 7-[3639, 4178) 8-[4178, 4748) ... 63-[33964, 34493)
Number of vertices per chunk: 539
34493, 530417, 530417
Number of vertices per chunk: 539
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
***** Start profiling the layer-level communication performance *******
GPU 0, layer [0, 8)
GPU 1, layer [8, 16)
GPU 2, layer [16, 24)
GPU 3, layer [24, 32)
GPU 4, layer [32, 40)
GPU 5, layer [40, 48)
GPU 6, layer [48, 56)
GPU 7, layer [56, 64)
GPU 8, layer [64, 72)
GPU 9, layer [72, 80)
GPU 10, layer [80, 88)
GPU 11, layer [88, 96)
GPU 12, layer [96, 104)
GPU 13, layer [104, 112)
GPU 14, layer [112, 120)
GPU 15, layer [120, 128)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 8)
GPU 1, layer [8, 16)
GPU 2, layer [16, 24)
GPU 3, layer [24, 32)
GPU 4, layer [32, 40)
GPU 5, layer [40, 48)
GPU 6, layer [48, 56)
GPU 7, layer [56, 64)
GPU 8, layer [64, 72)
GPU 9, layer [72, 80)
GPU 10, layer [80, 88)
GPU 11, layer [88, 96)
GPU 12, layer [96, 104)
GPU 13, layer [104, 112)
GPU 14, layer [112, 120)
GPU 15, layer [120, 128)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
34493, 530417, 530417
Number of vertices per chunk: 539
GPU 0, layer [0, 8)
GPU 1, layer [8, 16)
GPU 2, layer [16, 24)
GPU 3, layer [24, 32)
GPU 4, layer [32, 40)
GPU 5, layer [40, 48)
GPU 6, layer [48, 56)
GPU 7, layer [56, 64)
GPU 8, layer [64, 72)
GPU 9, layer [72, 80)
GPU 10, layer [80, 88)
GPU 11, layer [88, 96)
GPU 12, layer [96, 104)
GPU 13, layer [104, 112)
GPU 14, layer [112, 120)
GPU 15, layer [120, 128)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 8)
GPU 1, layer [8, 16)
GPU 2, layer [16, 24)
GPU 3, layer [24, 32)
GPU 4, layer [32, 40)
GPU 5, layer [40, 48)
GPU 6, layer [48, 56)
GPU 7, layer [56, 64)
GPU 8, layer [64, 72)
GPU 9, layer [72, 80)
GPU 10, layer [80, 88)
GPU 11, layer [88, 96)
GPU 12, layer [96, 104)
GPU 13, layer [104, 112)
GPU 14, layer [112, 120)
GPU 15, layer [120, 128)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
34493, 530417, 530417
Number of vertices per chunk: 539
34493, 530417, 530417
Number of vertices per chunk: 539
34493, 530417, 530417
Number of vertices per chunk: 539
csr in-out ready !Start Cost Model Initialization...
GPU 0, layer [0, 8)
GPU 1, layer [8, 16)
GPU 2, layer [16, 24)
GPU 3, layer [24, 32)
GPU 4, layer [32, 40)
GPU 5, layer [40, 48)
GPU 6, layer [48, 56)
GPU 7, layer [56, 64)
GPU 8, layer [64, 72)
GPU 9, layer [72, 80)
GPU 10, layer [80, 88)
GPU 11, layer [88, 96)
GPU 12, layer [96, 104)
GPU 13, layer [104, 112)
GPU 14, layer [112, 120)
GPU 15, layer [120, 128)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
34493, 530417, 530417
csr in-out ready !Start Cost Model Initialization...
Number of vertices per chunk: 539
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
The layer-level communication performance: 57.004 Gbps (per GPU), 912.067 Gbps (aggregated)
The layer-level communication performance: 56.869 Gbps (per GPU), 909.908 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 56.726 Gbps (per GPU), 907.617 Gbps (aggregated)
The layer-level communication performance: 56.632 Gbps (per GPU), 906.118 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 56.489 Gbps (per GPU), 903.822 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 56.406 Gbps (per GPU), 902.488 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 56.318 Gbps (per GPU), 901.088 Gbps (aggregated)
The layer-level communication performance: 56.279 Gbps (per GPU), 900.471 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 56.301 Gbps (per GPU), 900.810 Gbps (aggregated)
The layer-level communication performance: 56.221 Gbps (per GPU), 899.537 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 56.200 Gbps (per GPU), 899.196 Gbps (aggregated)
The layer-level communication performance: 56.171 Gbps (per GPU), 898.742 Gbps (aggregated)
The layer-level communication performance: 56.129 Gbps (per GPU), 898.068 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 55.968 Gbps (per GPU), 895.491 Gbps (aggregated)
The layer-level communication performance: 55.859 Gbps (per GPU), 893.749 Gbps (aggregated)
The layer-level communication performance: 55.842 Gbps (per GPU), 893.474 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The graph-level communication performance (supernode = 2): 153.519 Gbps (per GPU), 2456.311 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 153.452 Gbps (per GPU), 2455.232 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 153.508 Gbps (per GPU), 2456.135 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 153.945 Gbps (per GPU), 2463.117 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 153.556 Gbps (per GPU), 2456.895 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 153.480 Gbps (per GPU), 2455.681 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 153.505 Gbps (per GPU), 2456.086 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 153.905 Gbps (per GPU), 2462.485 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 153.497 Gbps (per GPU), 2455.951 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 153.404 Gbps (per GPU), 2454.466 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 153.505 Gbps (per GPU), 2456.086 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 153.936 Gbps (per GPU), 2462.982 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 153.539 Gbps (per GPU), 2456.625 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 153.486 Gbps (per GPU), 2455.771 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 153.508 Gbps (per GPU), 2456.131 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 153.903 Gbps (per GPU), 2462.441 Gbps (aggregated, cluster-wide)
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
The graph-level communication performance (supernode = 4): 99.237 Gbps (per GPU), 1587.787 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 99.235 Gbps (per GPU), 1587.762 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 99.237 Gbps (per GPU), 1587.799 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 99.236 Gbps (per GPU), 1587.774 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 99.237 Gbps (per GPU), 1587.799 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 99.235 Gbps (per GPU), 1587.762 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 99.237 Gbps (per GPU), 1587.787 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 99.236 Gbps (per GPU), 1587.774 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 99.236 Gbps (per GPU), 1587.774 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 99.234 Gbps (per GPU), 1587.749 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 99.235 Gbps (per GPU), 1587.762 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 99.236 Gbps (per GPU), 1587.774 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 99.237 Gbps (per GPU), 1587.798 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 99.236 Gbps (per GPU), 1587.774 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 99.236 Gbps (per GPU), 1587.774 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 99.237 Gbps (per GPU), 1587.787 Gbps (aggregated, cluster-wide)
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
The graph-level communication performance (supernode = 8): 26.683 Gbps (per GPU), 426.931 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 26.680 Gbps (per GPU), 426.888 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 26.683 Gbps (per GPU), 426.929 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 26.682 Gbps (per GPU), 426.905 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 26.683 Gbps (per GPU), 426.931 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 26.680 Gbps (per GPU), 426.886 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 26.682 Gbps (per GPU), 426.919 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 26.683 Gbps (per GPU), 426.928 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 26.683 Gbps (per GPU), 426.931 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 26.678 Gbps (per GPU), 426.851 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 26.683 Gbps (per GPU), 426.921 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 26.681 Gbps (per GPU), 426.899 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 26.683 Gbps (per GPU), 426.929 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 26.677 Gbps (per GPU), 426.824 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 26.683 Gbps (per GPU), 426.930 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 26.682 Gbps (per GPU), 426.920 Gbps (aggregated, cluster-wide)
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
The graph-level communication performance (supernode = 16): 19.549 Gbps (per GPU), 312.779 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 19.549 Gbps (per GPU), 312.780 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 19.549 Gbps (per GPU), 312.785 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 19.548 Gbps (per GPU), 312.774 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 19.549 Gbps (per GPU), 312.779 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 19.549 Gbps (per GPU), 312.778 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 19.549 Gbps (per GPU), 312.781 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 19.549 Gbps (per GPU), 312.779 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 19.549 Gbps (per GPU), 312.783 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 19.549 Gbps (per GPU), 312.780 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 19.548 Gbps (per GPU), 312.776 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 19.549 Gbps (per GPU), 312.776 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 19.549 Gbps (per GPU), 312.778 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 19.549 Gbps (per GPU), 312.776 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 19.548 Gbps (per GPU), 312.770 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 19.549 Gbps (per GPU), 312.780 Gbps (aggregated, cluster-wide)
 LType   LT0   LT1   LT2 Ratio  VSum  ESum
 chk_0  0.44ms  0.20ms  0.14ms  3.16  0.55K  0.01M
 chk_1  0.43ms  0.20ms  0.14ms  3.14  0.52K  0.01M
 chk_2  0.42ms  0.20ms  0.14ms  3.01  0.49K  0.01M
 chk_3  0.42ms  0.20ms  0.14ms  3.00  0.48K  0.01M
 chk_4  0.44ms  0.20ms  0.14ms  3.18  0.56K  0.01M
 chk_5  0.44ms  0.20ms  0.22ms  2.19  0.56K  0.01M
 chk_6  0.41ms  0.20ms  0.14ms  2.99  0.48K  0.01M
 chk_7  0.44ms  0.20ms  0.14ms  3.13  0.54K  0.01M
 chk_8  0.44ms  0.20ms  0.14ms  3.20  0.57K  0.01M
 chk_9  0.44ms  0.20ms  0.14ms  3.17  0.53K  0.01M
chk_10  0.49ms  0.20ms  0.14ms  3.55  0.53K  0.01M
chk_11  0.50ms  0.20ms  0.14ms  3.65  0.54K  0.01M
chk_12  0.50ms  0.20ms  0.14ms  3.63  0.55K  0.01M
chk_13  0.44ms  0.20ms  0.14ms  3.17  0.57K  0.01M
chk_14  0.44ms  0.20ms  0.14ms  3.19  0.57K  0.01M
chk_15  0.43ms  0.20ms  0.14ms  3.13  0.53K  0.01M
chk_16  0.42ms  0.20ms  0.14ms  3.04  0.50K  0.01M
chk_17  0.44ms  0.20ms  0.14ms  3.19  0.57K  0.01M
chk_18  0.44ms  0.20ms  0.14ms  3.16  0.53K  0.01M
chk_19  0.44ms  0.20ms  0.14ms  3.16  0.55K  0.01M
chk_20  0.45ms  0.20ms  0.14ms  3.20  0.58K  0.01M
chk_21  0.44ms  0.20ms  0.14ms  3.20  0.57K  0.01M
chk_22  0.44ms  0.20ms  0.14ms  3.16  0.55K  0.01M
chk_23  0.44ms  0.20ms  0.14ms  3.16  0.54K  0.01M
chk_24  0.42ms  0.20ms  0.14ms  3.06  0.50K  0.01M
chk_25  0.44ms  0.20ms  0.14ms  3.14  0.54K  0.01M
chk_26  0.43ms  0.20ms  0.14ms  3.10  0.53K  0.01M
chk_27  0.41ms  0.20ms  0.14ms  2.99  0.48K  0.01M
chk_28  0.44ms  0.20ms  0.14ms  3.19  0.56K  0.01M
chk_29  0.45ms  0.20ms  0.14ms  3.21  0.57K  0.01M
chk_30  0.43ms  0.20ms  0.14ms  3.13  0.53K  0.01M
chk_31  0.43ms  0.20ms  0.14ms  3.13  0.52K  0.01M
chk_32  0.44ms  0.20ms  0.14ms  3.17  0.55K  0.01M
chk_33  0.42ms  0.20ms  0.14ms  3.05  0.50K  0.01M
chk_34  0.44ms  0.20ms  0.14ms  3.20  0.57K  0.01M
chk_35  0.44ms  0.20ms  0.14ms  3.15  0.53K  0.01M
chk_36  0.45ms  0.20ms  0.14ms  3.23  0.59K  0.01M
chk_37  0.44ms  0.20ms  0.14ms  3.16  0.54K  0.01M
chk_38  0.43ms  0.20ms  0.14ms  3.13  0.52K  0.01M
chk_39  0.42ms  0.20ms  0.14ms  3.03  0.50K  0.01M
chk_40  0.45ms  0.20ms  0.14ms  3.21  0.59K  0.00M
chk_41  0.43ms  0.20ms  0.14ms  3.10  0.52K  0.01M
chk_42  0.44ms  0.20ms  0.14ms  3.16  0.55K  0.01M
chk_43  0.42ms  0.20ms  0.14ms  2.99  0.49K  0.01M
chk_44  0.44ms  0.20ms  0.14ms  3.18  0.56K  0.01M
chk_45  0.45ms  0.20ms  0.14ms  3.22  0.59K  0.00M
chk_46  0.44ms  0.20ms  0.14ms  3.17  0.54K  0.01M
chk_47  0.44ms  0.20ms  0.14ms  3.17  0.56K  0.01M
chk_48  0.44ms  0.20ms  0.14ms  3.16  0.53K  0.01M
chk_49  0.44ms  0.20ms  0.14ms  3.16  0.56K  0.01M
chk_50  0.43ms  0.20ms  0.14ms  3.13  0.53K  0.01M
chk_51  0.44ms  0.20ms  0.14ms  3.17  0.56K  0.01M
chk_52  0.42ms  0.20ms  0.14ms  3.02  0.49K  0.01M
chk_53  0.44ms  0.20ms  0.14ms  3.18  0.55K  0.01M
chk_54  0.44ms  0.20ms  0.14ms  3.18  0.57K  0.01M
chk_55  0.43ms  0.20ms  0.14ms  3.13  0.53K  0.01M
chk_56  0.44ms  0.20ms  0.14ms  3.16  0.56K  0.01M
chk_57  0.44ms  0.20ms  0.14ms  3.17  0.56K  0.01M
chk_58  0.43ms  0.20ms  0.14ms  3.13  0.52K  0.01M
chk_59  0.44ms  0.20ms  0.14ms  3.14  0.55K  0.01M
chk_60  0.44ms  0.20ms  0.14ms  3.16  0.53K  0.01M
chk_61  0.44ms  0.20ms  0.14ms  3.17  0.53K  0.01M
chk_62  0.44ms  0.20ms  0.14ms  3.14  0.55K  0.01M
chk_63  0.43ms  0.20ms  0.14ms  3.14  0.53K  0.01M
   Avg  0.44  0.20  0.14
   Max  0.50  0.20  0.22
   Min  0.41  0.20  0.14
 Ratio  1.23  1.04  1.59
   Var  0.00  0.00  0.00
Profiling takes 0.711 s
*** Node 0, starting model training...
Num Stages: 16 / 16
Node 0, Pipeline Input Tensor: NULL
Node 0, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 0 owns the model-level partition [0, 41)
*** Node 0, constructing the helper classes...
Node 0, Local Vertex Begin: 0, Num Local Vertices: 34493
*** Node 8, starting model training...
Num Stages: 16 / 16
Node 8, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 8, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 8 owns the model-level partition [321, 361)
*** Node 8, constructing the helper classes...
Node 8, Local Vertex Begin: 0, Num Local Vertices: 34493
*** Node 12, starting model training...
Num Stages: 16 / 16
Node 12, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 12, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 12 owns the model-level partition [481, 521)
*** Node 12, constructing the helper classes...
Node 12, Local Vertex Begin: 0, Num Local Vertices: 34493
*** Node 4, starting model training...
Num Stages: 16 / 16
Node 4, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 4, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 4 owns the model-level partition [161, 201)
*** Node 4, constructing the helper classes...
Node 4, Local Vertex Begin: 0, Num Local Vertices: 34493
*** Node 1, starting model training...
Num Stages: 16 / 16
Node 1, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 1, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 1 owns the model-level partition [41, 81)
*** Node 1, constructing the helper classes...
Node 1, Local Vertex Begin: 0, Num Local Vertices: 34493
*** Node 9, starting model training...
Num Stages: 16 / 16
*** Node 13, starting model training...
Num Stages: 16 / 16
Node 13, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 13, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 13 owns the model-level partition [521, 561)
*** Node 13, constructing the helper classes...
Node 13, Local Vertex Begin: 0, Num Local Vertices: 34493
*** Node 5, starting model training...
Num Stages: 16 / 16
Node 5, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 5, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 5 owns the model-level partition [201, 241)
*** Node 5, constructing the helper classes...
Node 5, Local Vertex Begin: 0, Num Local Vertices: 34493
*** Node 2, starting model training...
Num Stages: 16 / 16
Node 9, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 9, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 9 owns the model-level partition [361, 401)
*** Node 9, constructing the helper classes...
Node 9, Local Vertex Begin: 0, Num Local Vertices: 34493
*** Node 14, starting model training...
Num Stages: 16 / 16
Node 14, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 14, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 14 owns the model-level partition [561, 601)
*** Node 14, constructing the helper classes...
Node 14, Local Vertex Begin: 0, Num Local Vertices: 34493
*** Node 6, starting model training...
Num Stages: 16 / 16
Node 6, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 6, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 6 owns the model-level partition [241, 281)
*** Node 6, constructing the helper classes...
Node 6, Local Vertex Begin: 0, Num Local Vertices: 34493
*** Node 3, starting model training...
Num Stages: 16 / 16
*** Node 10, starting model training...
Num Stages: 16 / 16
Node 10, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 10, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 10 owns the model-level partition [401, 441)
*** Node 10, constructing the helper classes...
Node 10, Local Vertex Begin: 0, Num Local Vertices: 34493
*** Node 15, starting model training...
Num Stages: 16 / 16
Node 15, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 15, Pipeline Output Tensor: NULL
*** Node 15 owns the model-level partition [601, 640)
*** Node 15, constructing the helper classes...
Node 15, Local Vertex Begin: 0, Num Local Vertices: 34493
Node 2, Pipeline Input Tensor: OPERATOR_DROPOUT
*** Node 11, starting model training...
Num Stages: 16 / 16
Node 11, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 11, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 11 owns the model-level partition [441, 481)
*** Node 11, constructing the helper classes...
Node 11, Local Vertex Begin: 0, Num Local Vertices: 34493
Node 2, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 2 owns the model-level partition [81, 121)
*** Node 2, constructing the helper classes...
Node 2, Local Vertex Begin: 0, Num Local Vertices: 34493
Node 3, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 3, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 3 owns the model-level partition [121, 161)
*** Node 3, constructing the helper classes...
Node 3, Local Vertex Begin: 0, Num Local Vertices: 34493
*** Node 7, starting model training...
Num Stages: 16 / 16
Node 7, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 7, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 7 owns the model-level partition [281, 321)
*** Node 7, constructing the helper classes...
Node 7, Local Vertex Begin: 0, Num Local Vertices: 34493
*** Node 11, setting up some other necessary information...
*** Node 9, setting up some other necessary information...
*** Node 14, setting up some other necessary information...
*** Node 8, setting up some other necessary information...
*** Node 10, setting up some other necessary information...
*** Node 0, setting up some other necessary information...
*** Node 6, setting up some other necessary information...
*** Node 12, setting up some other necessary information...
*** Node 13, setting up some other necessary information...
*** Node 15, setting up some other necessary information...
*** Node 2, setting up some other necessary information...
*** Node 3, setting up some other necessary information...
*** Node 4, setting up some other necessary information...
*** Node 5, setting up some other necessary information...
*** Node 1, setting up some other necessary information...
*** Node 7, setting up some other necessary information...
+++++++++ Node 8 initializing the weights for op[321, 361)...
+++++++++ Node 10 initializing the weights for op[401, 441)...
+++++++++ Node 12 initializing the weights for op[481, 521)...
+++++++++ Node 5 initializing the weights for op[201, 241)...
+++++++++ Node 3 initializing the weights for op[121, 161)...
+++++++++ Node 11 initializing the weights for op[441, 481)...
+++++++++ Node 1 initializing the weights for op[41, 81)...
+++++++++ Node 9 initializing the weights for op[361, 401)...
+++++++++ Node 7 initializing the weights for op[281, 321)...
+++++++++ Node 4 initializing the weights for op[161, 201)...
+++++++++ Node 13 initializing the weights for op[521, 561)...
+++++++++ Node 15 initializing the weights for op[601, 640)...
+++++++++ Node 6 initializing the weights for op[241, 281)...
+++++++++ Node 0 initializing the weights for op[0, 41)...
+++++++++ Node 14 initializing the weights for op[561, 601)...
+++++++++ Node 2 initializing the weights for op[81, 121)...
Node 8, discovering the vertices that will be sent across graph boundary...
Node 13, discovering the vertices that will be sent across graph boundary...
Node 4, discovering the vertices that will be sent across graph boundary...
Node 1, discovering the vertices that will be sent across graph boundary...
Node 11, discovering the vertices that will be sent across graph boundary...
Node 15, discovering the vertices that will be sent across graph boundary...
Node 5, discovering the vertices that will be sent across graph boundary...
Node 0, discovering the vertices that will be sent across graph boundary...
Node 9, discovering the vertices that will be sent across graph boundary...
Node 12, discovering the vertices that will be sent across graph boundary...
Node 7, discovering the vertices that will be sent across graph boundary...
Node 2, discovering the vertices that will be sent across graph boundary...
Node 6, discovering the vertices that will be sent across graph boundary...
Node 3, discovering the vertices that will be sent across graph boundary...
Node 10, discovering the vertices that will be sent across graph boundary...
Node 14, discovering the vertices that will be sent across graph boundary...
Node 12, discovering the vertices that will be received across the graph boundary.
Node 13, discovering the vertices that will be received across the graph boundary.
Node 14, discovering the vertices that will be received across the graph boundary.
Node 4, discovering the vertices that will be received across the graph boundary.
Node 8, discovering the vertices that will be received across the graph boundary.
Node 15, discovering the vertices that will be received across the graph boundary.
Node 5, discovering the vertices that will be received across the graph boundary.
The number of mirror vertices: 0
Node 0, discovering the vertices that will be received across the graph boundary.
Node 9, discovering the vertices that will be received across the graph boundary.
****** Start Scheduling the Tasks in a Pipelined Fashion ******
Node 6, discovering the vertices that will be received across the graph boundary.
Node 1, discovering the vertices that will be received across the graph boundary.
****** Start Scheduling the Tasks in a Pipelined Fashion ******
Node 10, discovering the vertices that will be received across the graph boundary.
****** Start Scheduling the Tasks in a Pipelined Fashion ******
Node 7, discovering the vertices that will be received across the graph boundary.
Node 2, discovering the vertices that will be received across the graph boundary.
****** Start Scheduling the Tasks in a Pipelined Fashion ******
Node 11, discovering the vertices that will be received across the graph boundary.
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
Node 3, discovering the vertices that will be received across the graph boundary.
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
*** Node 8, starting task scheduling...
*** Node 14, starting task scheduling...
*** Node 4, starting task scheduling...
*** Node 0, starting task scheduling...



The learning rate specified by the user: 0.001000000
*** Node 9, starting task scheduling...
*** Node 12, starting task scheduling...
*** Node 5, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 1, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 10, starting task scheduling...
*** Node 13, starting task scheduling...
*** Node 6, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 2, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 11, starting task scheduling...
*** Node 15, starting task scheduling...
*** Node 7, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 3, starting task scheduling...
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
	Epoch 1:	Loss 1.6094	TrainAcc 0.2000	ValidAcc 0.1860	TestAcc 0.1750	BestValid 0.1860
	Epoch 50:	Loss 1.6094	TrainAcc 0.2000	ValidAcc 0.1860	TestAcc 0.1750	BestValid 0.1860
****** Epoch Time (Excluding Evaluation Cost): 0.190 s ******
****** Breakdown Analysis ******
Cluster-Wide Average, Bubble-Pipeline: 35.440 ms (Max: 36.504, Min: 34.353, Sum: 567.034)
Cluster-Wide Average, Compute: 124.927 ms (Max: 141.550, Min: 116.601, Sum: 1998.828)
Cluster-Wide Average, Communication-Layer: 8.463 ms (Max: 11.669, Min: 5.808, Sum: 135.404)
Cluster-Wide Average, Bubble-Imbalance: 17.828 ms (Max: 27.551, Min: 4.761, Sum: 285.248)
Cluster-Wide Average, Communication-Graph: 2.216 ms (Max: 2.877, Min: 1.862, Sum: 35.455)
Cluster-Wide Average, Optimization: 0.236 ms (Max: 0.450, Min: 0.212, Sum: 3.779)
Cluster-Wide Average, Others: 1.237 ms (Max: 2.941, Min: 1.056, Sum: 19.785)
****** Breakdown Sum: 190.346 ms ******
Cluster-Wide Average, GPU Memory Consumption: 5.690 GB (Max: 7.747, Min: 5.061, Sum: 91.043)
Cluster-Wide Average, Graph-Level Communication Throughput: -nan Gbps (Max: -nan, Min: -nan, Sum: -nan)
Cluster-Wide Average, Layer-Level Communication Throughput: 25.168 Gbps (Max: 31.122, Min: 18.917, Sum: 402.688)
Layer-level communication (cluster-wide, per-epoch): 0.385 GB
Graph-level communication (cluster-wide, per-epoch): 0.000 GB
Weight-sync communication (cluster-wide, per-epoch): 0.000 GB
Total communication (cluster-wide, per-epoch): 0.385 GB
****** Accuracy Results ******
Highest valid_acc: 0.1860
Target test_acc: 0.1750
Epoch to reach the target acc: 0
[MPI Rank 0] Success 
[MPI Rank 8] Success 
[MPI Rank 12] Success 
[MPI Rank 4] Success 
[MPI Rank 1] Success 
[MPI Rank 9] Success 
[MPI Rank 13] Success 
[MPI Rank 5] Success 
[MPI Rank 2] Success 
[MPI Rank 10] Success 
[MPI Rank 14] Success 
[MPI Rank 6] Success 
[MPI Rank 3] Success 
[MPI Rank 11] Success 
[MPI Rank 15] Success 
[MPI Rank 7] Success 
