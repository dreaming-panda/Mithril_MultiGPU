Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
DONE MPI INIT
DONE MPI INIT
Initialized node 5 on machine gnerv3
DONE MPI INIT
Initialized node 7 on machine gnerv3
Initialized node 4 on machine gnerv3
DONE MPI INIT
Initialized node 6 on machine gnerv3
DONE MPI INITDONE MPI INIT
Initialized node 1 on machine gnerv2
DONE MPI INIT
Initialized node 2 on machine gnerv2

Initialized node 0 on machine gnerv2
DONE MPI INIT
Initialized node 3 on machine gnerv2
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
        It takes 0.022 seconds.
Building the CSC structure...
        It takes 0.022 seconds.
Building the CSC structure...
        It takes 0.018 seconds.
Building the CSC structure...
        It takes 0.020 seconds.
Building the CSC structure...
        It takes 0.026 seconds.
Building the CSC structure...
        It takes 0.028 seconds.
Building the CSC structure...
        It takes 0.025 seconds.
Building the CSC structure...
        It takes 0.025 seconds.
Building the CSC structure...
        It takes 0.020 seconds.
        It takes 0.021 seconds.
        It takes 0.021 seconds.
        It takes 0.023 seconds.
        It takes 0.021 seconds.
        It takes 0.019 seconds.
        It takes 0.020 seconds.
        It takes 0.020 seconds.
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
        It takes 0.106 seconds.
        It takes 0.108 seconds.
        It takes 0.105 seconds.
Building the Label Vector...
Building the Label Vector...
Building the Label Vector...
        It takes 0.106 seconds.
Building the Label Vector...
        It takes 0.112 seconds.
Building the Label Vector...
        It takes 0.006 seconds.
The graph dataset locates at /shared_hdd_storage/jingjichen/gnn_datasets/pipeline_parallel_datasets/flickr/32_parts
The number of GCN layers: 64
The number of hidden units: 100
The number of training epoches: 50
Learning rate: 0.001000
The partition strategy: model
The dropout rate: 0.500
The checkpointed weight file: /tmp/saved_weights_pipe
The random seed: 1
Number of classes: 7
Number of feature dimensions: 500
Number of vertices: 89250
Number of GPUs: 8
        It takes 0.007 seconds.
        It takes 0.007 seconds.
        It takes 0.007 seconds.
        It takes 0.113 seconds.
Building the Label Vector...
        It takes 0.121 seconds.
Building the Label Vector...
        It takes 0.007 seconds.
        It takes 0.121 seconds.
Building the Label Vector...
        It takes 0.007 seconds.
        It takes 0.007 seconds.
        It takes 0.013 seconds.
GPU 0, layer [0, 8)
GPU 1, layer [8, 16)
GPU 2, layer [16, 24)
GPU 3, layer [24, 32)
GPU 4, layer [32, 40)
GPU 5, layer [40, 48)
GPU 6, layer [48, 56)
GPU 7, layer [56, 64)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 8)
GPU 1, layer [8, 16)
GPU 2, layer [16, 24)
GPU 3, layer [24, 32)
GPU 4, layer [32, 40)
GPU 5, layer [40, 48)
GPU 6, layer [48, 56)
GPU 7, layer [56, 64)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
89250, 989006, 989006
Number of vertices per chunk: 2790
89250, 989006, 989006
GPU 0, layer [0, 8)
GPU 1, layer [8, 16)
GPU 2, layer [16, 24)
GPU 3, layer [24, 32)
GPU 4, layer [32, 40)
GPU 5, layer [40, 48)
GPU 6, layer [48, 56)
GPU 7, layer [56, 64)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
Number of vertices per chunk: 2790
89250, 989006, 989006
Number of vertices per chunk: 2790
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
train nodes 44625, valid nodes 22312, test nodes 22313
GPU 0, layer [0, 8)
GPU 1, layer [8, 16)
GPU 2, layer [16, 24)
GPU 3, layer [24, 32)
GPU 4, layer [32, 40)
GPU 5, layer [40, 48)
GPU 6, layer [48, 56)
GPU 7, layer [56, 64)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
Chunks (number of global chunks: 32): 0-[0, 2809) 1-[2809, 5626) 2-[5626, 8426) 3-[8426, 11230) 4-[11230, 14047) 5-[14047, 16800) 6-[16800, 19507) 7-[19507, 22266) 8-[22266, 25059) ... 31-[86469, 89250)
89250, 989006, 989006
GPU 0, layer [0, 8)
GPU 1, layer [8, 16)
GPU 2, layer [16, 24)
GPU 3, layer [24, 32)
GPU 4, layer [32, 40)
GPU 5, layer [40, 48)
GPU 6, layer [48, 56)
GPU 7, layer [56, 64)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
Number of vertices per chunk: 2790
89250, 989006, 989006
Number of vertices per chunk: 2790
csr in-out ready !Start Cost Model Initialization...
***** Start profiling the layer-level communication performance *******
GPU 0, layer [0, 8)
GPU 1, layer [8, 16)
GPU 2, layer [16, 24)
GPU 3, layer [24, 32)
GPU 4, layer [32, 40)
GPU 5, layer [40, 48)
GPU 6, layer [48, 56)
GPU 7, layer [56, 64)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 8)
GPU 1, layer [8, 16)
GPU 2, layer [16, 24)
GPU 3, layer [24, 32)
GPU 4, layer [32, 40)
GPU 5, layer [40, 48)
GPU 6, layer [48, 56)
GPU 7, layer [56, 64)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
csr in-out ready !Start Cost Model Initialization...
89250, 989006, 989006
89250, 989006, 989006
Number of vertices per chunk: 2790
Number of vertices per chunk: 2790
GPU 0, layer [0, 8)
GPU 1, layer [8, 16)
GPU 2, layer [16, 24)
GPU 3, layer [24, 32)
GPU 4, layer [32, 40)
GPU 5, layer [40, 48)
GPU 6, layer [48, 56)
GPU 7, layer [56, 64)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
89250, 989006, 989006
Number of vertices per chunk: 2790
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
The layer-level communication performance: 55.094 Gbps (per GPU), 440.749 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 54.823 Gbps (per GPU), 438.585 Gbps (aggregated)
The layer-level communication performance: 54.812 Gbps (per GPU), 438.498 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 54.609 Gbps (per GPU), 436.871 Gbps (aggregated)
The layer-level communication performance: 54.583 Gbps (per GPU), 436.665 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 54.391 Gbps (per GPU), 435.126 Gbps (aggregated)
The layer-level communication performance: 54.347 Gbps (per GPU), 434.778 Gbps (aggregated)
The layer-level communication performance: 54.320 Gbps (per GPU), 434.562 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The graph-level communication performance (supernode = 2): 157.981 Gbps (per GPU), 1263.844 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.007 Gbps (per GPU), 1264.059 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 157.998 Gbps (per GPU), 1263.987 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.046 Gbps (per GPU), 1264.368 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 157.999 Gbps (per GPU), 1263.991 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 157.986 Gbps (per GPU), 1263.892 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.002 Gbps (per GPU), 1264.013 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.043 Gbps (per GPU), 1264.345 Gbps (aggregated, cluster-wide)
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
The graph-level communication performance (supernode = 4): 102.144 Gbps (per GPU), 817.152 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 102.146 Gbps (per GPU), 817.172 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 102.142 Gbps (per GPU), 817.139 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 102.146 Gbps (per GPU), 817.172 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 102.144 Gbps (per GPU), 817.152 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 102.141 Gbps (per GPU), 817.125 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 102.143 Gbps (per GPU), 817.145 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 102.115 Gbps (per GPU), 816.920 Gbps (aggregated, cluster-wide)
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
The graph-level communication performance (supernode = 8): 30.804 Gbps (per GPU), 246.431 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 30.804 Gbps (per GPU), 246.432 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 30.804 Gbps (per GPU), 246.429 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 30.798 Gbps (per GPU), 246.385 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 30.803 Gbps (per GPU), 246.428 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 30.799 Gbps (per GPU), 246.389 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 30.798 Gbps (per GPU), 246.382 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 30.801 Gbps (per GPU), 246.411 Gbps (aggregated, cluster-wide)
 LType   LT0   LT1   LT2 Ratio  VSum  ESum
 chk_0  0.31ms  0.27ms  0.21ms  1.46  2.81K  0.03M
 chk_1  0.32ms  0.26ms  0.21ms  1.47  2.82K  0.03M
 chk_2  0.32ms  0.26ms  0.21ms  1.49  2.80K  0.03M
 chk_3  0.31ms  0.26ms  0.21ms  1.47  2.80K  0.03M
 chk_4  0.32ms  0.26ms  0.22ms  1.46  2.82K  0.03M
 chk_5  0.32ms  0.26ms  0.22ms  1.45  2.75K  0.03M
 chk_6  0.31ms  0.25ms  0.21ms  1.48  2.71K  0.03M
 chk_7  0.31ms  0.26ms  0.21ms  1.47  2.76K  0.03M
 chk_8  0.31ms  0.26ms  0.21ms  1.47  2.79K  0.03M
 chk_9  0.31ms  0.26ms  0.21ms  1.46  2.81K  0.03M
chk_10  0.31ms  0.25ms  0.21ms  1.49  2.81K  0.03M
chk_11  0.31ms  0.26ms  0.22ms  1.46  2.74K  0.03M
chk_12  0.31ms  0.26ms  0.21ms  1.47  2.76K  0.03M
chk_13  0.34ms  0.26ms  0.21ms  1.62  2.75K  0.03M
chk_14  0.31ms  0.26ms  0.21ms  1.47  2.81K  0.03M
chk_15  0.31ms  0.26ms  0.21ms  1.47  2.77K  0.03M
chk_16  0.31ms  0.26ms  0.21ms  1.46  2.78K  0.03M
chk_17  0.31ms  0.26ms  0.21ms  1.46  2.79K  0.03M
chk_18  0.31ms  0.26ms  0.21ms  1.47  2.82K  0.03M
chk_19  0.31ms  0.25ms  0.21ms  1.49  2.81K  0.03M
chk_20  0.31ms  0.26ms  0.21ms  1.46  2.77K  0.03M
chk_21  0.31ms  0.26ms  0.21ms  1.47  2.84K  0.02M
chk_22  0.31ms  0.26ms  0.21ms  1.46  2.78K  0.03M
chk_23  0.31ms  0.26ms  0.21ms  1.46  2.80K  0.03M
chk_24  0.31ms  0.26ms  0.21ms  1.47  2.80K  0.03M
chk_25  0.31ms  0.26ms  0.21ms  1.48  2.81K  0.03M
chk_26  0.31ms  0.26ms  0.21ms  1.48  2.81K  0.03M
chk_27  0.31ms  0.26ms  0.21ms  1.46  2.79K  0.03M
chk_28  0.31ms  0.26ms  0.21ms  1.45  2.77K  0.03M
chk_29  0.31ms  0.26ms  0.21ms  1.46  2.77K  0.03M
chk_30  0.31ms  0.26ms  0.21ms  1.46  2.80K  0.03M
chk_31  0.31ms  0.26ms  0.21ms  1.47  2.78K  0.03M
   Avg  0.31  0.26  0.21
   Max  0.34  0.27  0.22
   Min  0.31  0.25  0.21
 Ratio  1.12  1.06  1.06
   Var  0.00  0.00  0.00
Profiling takes 0.388 s
*** Node 0, starting model training...
Num Stages: 8 / 8
Node 0, Pipeline Input Tensor: NULL
Node 0, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 0 owns the model-level partition [0, 41)
*** Node 0, constructing the helper classes...
Node 0, Local Vertex Begin: 0, Num Local Vertices: 89250
*** Node 1, starting model training...
Num Stages: 8 / 8
Node 1, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 1, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 1 owns the model-level partition [41, 81)
*** Node 1, constructing the helper classes...
Node 1, Local Vertex Begin: 0, Num Local Vertices: 89250
*** Node 2, starting model training...
Num Stages: 8 / 8
*** Node 3, starting model training...
Num Stages: 8 / 8
Node 3, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 3, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 3 owns the model-level partition [121, 161)
*** Node 3, constructing the helper classes...
Node 3, Local Vertex Begin: 0, Num Local Vertices: 89250
Node 2, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 2, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 2 owns the model-level partition [81, 121)
*** Node 2, constructing the helper classes...
Node 2, Local Vertex Begin: 0, Num Local Vertices: 89250
*** Node 4, starting model training...
Num Stages: 8 / 8
Node 4, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 4, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 4 owns the model-level partition [161, 201)
*** Node 4, constructing the helper classes...
*** Node 5, starting model training...
Num Stages: 8 / 8
Node 5, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 5, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 5 owns the model-level partition [201, 241)
*** Node 5, constructing the helper classes...
Node 5, Local Vertex Begin: 0, Num Local Vertices: 89250
*** Node 6, starting model training...
Num Stages: 8 / 8
Node 6, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 6, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 6 owns the model-level partition [241, 281)
*** Node 6, constructing the helper classes...
Node 6, Local Vertex Begin: 0, Num Local Vertices: 89250
*** Node 7, starting model training...
Num Stages: 8 / 8
Node 7, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 7, Pipeline Output Tensor: NULL
*** Node 7 owns the model-level partition [281, 320)
*** Node 7, constructing the helper classes...
Node 7, Local Vertex Begin: 0, Num Local Vertices: 89250
Node 4, Local Vertex Begin: 0, Num Local Vertices: 89250
*** Node 4, setting up some other necessary information...
*** Node 1, setting up some other necessary information...
*** Node 5, setting up some other necessary information...
*** Node 3, setting up some other necessary information...
*** Node 6, setting up some other necessary information...
*** Node 0, setting up some other necessary information...
*** Node 7, setting up some other necessary information...
*** Node 2, setting up some other necessary information...
+++++++++ Node 4 initializing the weights for op[161, 201)...
+++++++++ Node 1 initializing the weights for op[41, 81)...
+++++++++ Node 5 initializing the weights for op[201, 241)...
+++++++++ Node 0 initializing the weights for op[0, 41)...
+++++++++ Node 6 initializing the weights for op[241, 281)...
+++++++++ Node 3 initializing the weights for op[121, 161)...
+++++++++ Node 2 initializing the weights for op[81, 121)...
+++++++++ Node 7 initializing the weights for op[281, 320)...
Node 4, discovering the vertices that will be sent across graph boundary...
Node 0, discovering the vertices that will be sent across graph boundary...
Node 5, discovering the vertices that will be sent across graph boundary...
Node 5, discovering the vertices that will be received across the graph boundary.
Node 1, discovering the vertices that will be sent across graph boundary...
Node 1, discovering the vertices that will be received across the graph boundary.
Node 6, discovering the vertices that will be sent across graph boundary...
Node 6, discovering the vertices that will be received across the graph boundary.
Node 3, discovering the vertices that will be sent across graph boundary...
Node 3, discovering the vertices that will be received across the graph boundary.
Node 7, discovering the vertices that will be sent across graph boundary...
Node 7, discovering the vertices that will be received across the graph boundary.
The number of mirror vertices: 0
Node 0, discovering the vertices that will be received across the graph boundary.
Node 4, discovering the vertices that will be received across the graph boundary.
Node 2, discovering the vertices that will be sent across graph boundary...
Node 2, discovering the vertices that will be received across the graph boundary.
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
*** Node 0, starting task scheduling...



The learning rate specified by the user: 0.001000000
*** Node 1, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 2, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 3, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 4, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 5, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 6, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 7, starting task scheduling...
The learning rate specified by the user: 0.001000000
	Epoch 1:	Loss 1.9459	TrainAcc 0.0589	ValidAcc 0.0575	TestAcc 0.0607	BestValid 0.0575
	Epoch 50:	Loss 1.9459	TrainAcc 0.0589	ValidAcc 0.0575	TestAcc 0.0607	BestValid 0.0575
****** Epoch Time (Excluding Evaluation Cost): 0.111 s ******
****** Breakdown Analysis ******
Cluster-Wide Average, Bubble-Pipeline: 20.248 ms (Max: 20.700, Min: 18.018, Sum: 161.987)
Cluster-Wide Average, Compute: 73.136 ms (Max: 74.678, Min: 70.513, Sum: 585.087)
Cluster-Wide Average, Communication-Layer: 9.970 ms (Max: 11.585, Min: 7.302, Sum: 79.764)
Cluster-Wide Average, Bubble-Imbalance: 4.953 ms (Max: 8.732, Min: 2.434, Sum: 39.626)
Cluster-Wide Average, Communication-Graph: 1.005 ms (Max: 1.062, Min: 0.885, Sum: 8.043)
Cluster-Wide Average, Optimization: 0.191 ms (Max: 0.198, Min: 0.171, Sum: 1.526)
Cluster-Wide Average, Others: 1.930 ms (Max: 4.655, Min: 1.526, Sum: 15.436)
****** Breakdown Sum: 111.434 ms ******
Cluster-Wide Average, GPU Memory Consumption: 4.537 GB (Max: 5.251, Min: 4.184, Sum: 36.298)
Cluster-Wide Average, Graph-Level Communication Throughput: -nan Gbps (Max: -nan, Min: -nan, Sum: -nan)
Cluster-Wide Average, Layer-Level Communication Throughput: 49.390 Gbps (Max: 58.511, Min: 38.539, Sum: 395.120)
Layer-level communication (cluster-wide, per-epoch): 0.465 GB
Graph-level communication (cluster-wide, per-epoch): 0.000 GB
Weight-sync communication (cluster-wide, per-epoch): 0.000 GB
Total communication (cluster-wide, per-epoch): 0.465 GB
****** Accuracy Results ******
Highest valid_acc: 0.0575
Target test_acc: 0.0607
Epoch to reach the target acc: 0
[MPI Rank 4] Success 
[MPI Rank 0] Success 
[MPI Rank 5] Success 
[MPI Rank 1] Success 
[MPI Rank 6] Success 
[MPI Rank 2] Success 
[MPI Rank 7] Success 
[MPI Rank 3] Success 
