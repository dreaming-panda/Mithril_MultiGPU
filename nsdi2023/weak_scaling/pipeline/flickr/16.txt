Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
DONE MPI INITDONE MPI INIT
Initialized node 14 on machine gnerv8
DONE MPI INIT
Initialized node 15 on machine gnerv8
DONE MPI INIT
Initialized node 12 on machine gnerv8

Initialized node 13 on machine gnerv8
DONE MPI INIT
DONE MPI INITInitialized node 0 on machine gnerv2
DONE MPI INIT
DONE MPI INIT
Initialized node 3 on machine gnerv2
Initialized node 1 on machine gnerv2

Initialized node 2 on machine gnerv2
DONE MPI INIT
DONE MPI INITInitialized node 8 on machine gnerv7
DONE MPI INIT
Initialized node 9 on machine gnerv7

Initialized node 10 on machine gnerv7
DONE MPI INIT
Initialized node 11 on machine gnerv7
DONE MPI INIT
Initialized node 4 on machine gnerv3
DONE MPI INIT
Initialized node 5 on machine gnerv3
DONE MPI INIT
Initialized node 6 on machine gnerv3
DONE MPI INIT
Initialized node 7 on machine gnerv3
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
        It takes 0.064 seconds.
Building the CSC structure...
        It takes 0.064 seconds.
Building the CSC structure...
        It takes 0.064 seconds.
Building the CSC structure...
        It takes 0.064 seconds.
Building the CSC structure...
        It takes 0.060 seconds.
Building the CSC structure...
        It takes 0.060 seconds.
Building the CSC structure...
        It takes 0.060 seconds.
Building the CSC structure...
        It takes 0.061 seconds.
Building the CSC structure...
        It takes 0.061 seconds.
        It takes 0.061 seconds.
Building the CSC structure...
Building the CSC structure...
        It takes 0.062 seconds.
Building the CSC structure...
        It takes 0.068 seconds.
Building the CSC structure...
        It takes 0.068 seconds.
Building the CSC structure...
        It takes 0.068 seconds.
Building the CSC structure...
        It takes 0.068 seconds.
Building the CSC structure...
        It takes 0.064 seconds.
Building the CSC structure...
        It takes 0.022 seconds.
        It takes 0.022 seconds.
        It takes 0.023 seconds.
        It takes 0.023 seconds.
        It takes 0.021 seconds.
        It takes 0.021 seconds.
        It takes 0.024 seconds.
        It takes 0.024 seconds.
        It takes 0.024 seconds.
        It takes 0.024 seconds.
        It takes 0.020 seconds.
        It takes 0.023 seconds.
        It takes 0.023 seconds.
        It takes 0.023 seconds.
        It takes 0.023 seconds.
        It takes 0.024 seconds.
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
        It takes 0.326 seconds.
        It takes 0.326 seconds.
        It takes 0.326 seconds.
        It takes 0.326 seconds.
Building the Label Vector...
Building the Label Vector...
Building the Label Vector...
Building the Label Vector...
        It takes 0.329 seconds.
        It takes 0.329 seconds.
        It takes 0.329 seconds.
        It takes 0.328 seconds.
Building the Label Vector...
Building the Label Vector...
Building the Label Vector...
Building the Label Vector...
        It takes 0.012 seconds.
        It takes 0.017 seconds.
        It takes 0.012 seconds.
        It takes 0.012 seconds.
        It takes 0.012 seconds.
        It takes 0.017 seconds.
        It takes 0.017 seconds.
        It takes 0.018 seconds.
        It takes 0.373 seconds.
        It takes 0.373 seconds.
Building the Label Vector...
        It takes 0.370 seconds.
Building the Label Vector...
        It takes 0.371 seconds.
Building the Label Vector...
Building the Label Vector...
        It takes 0.009 seconds.
        It takes 0.009 seconds.
        It takes 0.009 seconds.
        It takes 0.010 seconds.
        It takes 0.419 seconds.
        It takes 0.419 seconds.
        It takes 0.419 seconds.
        It takes 0.419 seconds.
Building the Label Vector...
Building the Label Vector...
Building the Label Vector...
Building the Label Vector...
        It takes 0.011 seconds.
        It takes 0.011 seconds.
        It takes 0.011 seconds.
        It takes 0.011 seconds.
The graph dataset locates at /shared_hdd_storage/jingjichen/gnn_datasets/pipeline_parallel_datasets/flickr/64_parts
The number of GCN layers: 128
The number of hidden units: 100
The number of training epoches: 50
Learning rate: 0.001000
The partition strategy: model
The dropout rate: 0.500
The checkpointed weight file: /tmp/saved_weights_pipe
The random seed: 1
Number of classes: 7
Number of feature dimensions: 500
Number of vertices: 89250
Number of GPUs: 16
GPU 0, layer [0, 8)
GPU 1, layer [8, 16)
GPU 2, layer [16, 24)
GPU 3, layer [24, 32)
GPU 4, layer [32, 40)
GPU 5, layer [40, 48)
GPU 6, layer [48, 56)
GPU 7, layer [56, 64)
GPU 8, layer [64, 72)
GPU 9, layer [72, 80)
GPU 10, layer [80, 88)
GPU 11, layer [88, 96)
GPU 12, layer [96, 104)
GPU 13, layer [104, 112)
GPU 14, layer [112, 120)
GPU 15, layer [120, 128)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 8)
GPU 1, layer [8, 16)
GPU 2, layer [16, 24)
GPU 3, layer [24, 32)
GPU 4, layer [32, 40)
GPU 5, layer [40, 48)
GPU 6, layer [48, 56)
GPU 7, layer [56, 64)
GPU 8, layer [64, 72)
GPU 9, layer [72, 80)
GPU 10, layer [80, 88)
GPU 11, layer [88, 96)
GPU 12, layer [96, 104)
GPU 13, layer [104, 112)
GPU 14, layer [112, 120)
GPU 15, layer [120, 128)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 8)
GPU 1, layer [8, 16)
GPU 2, layer [16, 24)
GPU 3, layer [24, 32)
GPU 4, layer [32, 40)
GPU 5, layer [40, 48)
GPU 6, layer [48, 56)
GPU 7, layer [56, 64)
GPU 8, layer [64, 72)
GPU 9, layer [72, 80)
GPU 10, layer [80, 88)
GPU 11, layer [88, 96)
GPU 12, layer [96, 104)
GPU 13, layer [104, 112)
GPU 14, layer [112, 120)
GPU 15, layer [120, 128)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
89250, 989006, 989006
Number of vertices per chunk: 1395
GPU 0, layer [0, 8)
GPU 1, layer [8, 16)
GPU 2, layer [16, 24)
GPU 3, layer [24, 32)
GPU 4, layer [32, 40)
GPU 5, layer [40, 48)
GPU 6, layer [48, 56)
GPU 7, layer [56, 64)
GPU 8, layer [64, 72)
GPU 9, layer [72, 80)
GPU 10, layer [80, 88)
GPU 11, layer [88, 96)
GPU 12, layer [96, 104)
GPU 13, layer [104, 112)
GPU 14, layer [112, 120)
GPU 15, layer [120, 128)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
89250, 989006, 989006
89250, 989006, 989006
Number of vertices per chunk: 1395
GPU 0, layer [0, 8)
GPU 1, layer [8, 16)
GPU 2, layer [16, 24)
GPU 3, layer [24, 32)
GPU 4, layer [32, 40)
GPU 5, layer [40, 48)
GPU 6, layer [48, 56)
GPU 7, layer [56, 64)
GPU 8, layer [64, 72)
GPU 9, layer [72, 80)
GPU 10, layer [80, 88)
GPU 11, layer [88, 96)
GPU 12, layer [96, 104)
GPU 13, layer [104, 112)
GPU 14, layer [112, 120)
GPU 15, layer [120, 128)
Number of vertices per chunk: 1395
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 8)
GPU 1, layer [8, 16)
GPU 2, layer [16, 24)
GPU 3, layer [24, 32)
GPU 4, layer [32, 40)
GPU 5, layer [40, 48)
GPU 6, layer [48, 56)
GPU 7, layer [56, 64)
GPU 8, layer [64, 72)
GPU 9, layer [72, 80)
GPU 10, layer [80, 88)
GPU 11, layer [88, 96)
GPU 12, layer [96, 104)
GPU 13, layer [104, 112)
GPU 14, layer [112, 120)
GPU 15, layer [120, 128)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 8)
GPU 1, layer [8, 16)
GPU 2, layer [16, 24)
GPU 3, layer [24, 32)
GPU 4, layer [32, 40)
GPU 5, layer [40, 48)
GPU 6, layer [48, 56)
GPU 7, layer [56, 64)
GPU 8, layer [64, 72)
GPU 9, layer [72, 80)
GPU 10, layer [80, 88)
GPU 11, layer [88, 96)
GPU 12, layer [96, 104)
GPU 13, layer [104, 112)
GPU 14, layer [112, 120)
GPU 15, layer [120, 128)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 8)
GPU 1, layer [8, 16)
GPU 2, layer [16, 24)
GPU 3, layer [24, 32)
GPU 4, layer [32, 40)
GPU 5, layer [40, 48)
GPU 6, layer [48, 56)
GPU 7, layer [56, 64)
GPU 8, layer [64, 72)
GPU 9, layer [72, 80)
GPU 10, layer [80, 88)
GPU 11, layer [88, 96)
GPU 12, layer [96, 104)
GPU 13, layer [104, 112)
GPU 14, layer [112, 120)
GPU 15, layer [120, 128)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
89250, 989006, 989006
89250, 989006, 989006
Number of vertices per chunk: 1395
Number of vertices per chunk: 1395
89250, 989006, 989006
Number of vertices per chunk: 1395
89250, 989006, 989006
csr in-out ready !Start Cost Model Initialization...
Number of vertices per chunk: 1395
89250, 989006, 989006
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
Number of vertices per chunk: 1395
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
GPU 0, layer [0, 8)
GPU 1, layer [8, 16)
GPU 2, layer [16, 24)
GPU 3, layer [24, 32)
GPU 4, layer [32, 40)
GPU 5, layer [40, 48)
GPU 6, layer [48, 56)
GPU 7, layer [56, 64)
GPU 8, layer [64, 72)
GPU 9, layer [72, 80)
GPU 10, layer [80, 88)
GPU 11, layer [88, 96)
GPU 12, layer [96, 104)
GPU 13, layer [104, 112)
GPU 14, layer [112, 120)
GPU 15, layer [120, 128)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
csr in-out ready !Start Cost Model Initialization...
GPU 0, layer [0, 8)
GPU 1, layer [8, 16)
GPU 2, layer [16, 24)
GPU 3, layer [24, 32)
GPU 4, layer [32, 40)
GPU 5, layer [40, 48)
GPU 6, layer [48, 56)
GPU 7, layer [56, 64)
GPU 8, layer [64, 72)
GPU 9, layer [72, 80)
GPU 10, layer [80, 88)
GPU 11, layer [88, 96)
GPU 12, layer [96, 104)
GPU 13, layer [104, 112)
GPU 14, layer [112, 120)
GPU 15, layer [120, 128)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
89250, 989006, 989006
Number of vertices per chunk: 1395
89250, 989006, 989006
Number of vertices per chunk: 1395
GPU 0, layer [0, 8)
GPU 1, layer [8, 16)
GPU 2, layer [16, 24)
GPU 3, layer [24, 32)
GPU 4, layer [32, 40)
GPU 5, layer [40, 48)
GPU 6, layer [48, 56)
GPU 7, layer [56, 64)
GPU 8, layer [64, 72)
GPU 9, layer [72, 80)
GPU 10, layer [80, 88)
GPU 11, layer [88, 96)
GPU 12, layer [96, 104)
GPU 13, layer [104, 112)
GPU 14, layer [112, 120)
GPU 15, layer [120, 128)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 8)
GPU 1, layer [8, 16)
GPU 2, layer [16, 24)
GPU 3, layer [24, 32)
GPU 4, layer [32, 40)
GPU 5, layer [40, 48)
GPU 6, layer [48, 56)
GPU 7, layer [56, 64)
GPU 8, layer [64, 72)
GPU 9, layer [72, 80)
GPU 10, layer [80, 88)
GPU 11, layer [88, 96)
GPU 12, layer [96, 104)
GPU 13, layer [104, 112)
GPU 14, layer [112, 120)
GPU 15, layer [120, 128)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
89250, 989006, 989006
Number of vertices per chunk: 1395
89250, 989006, 989006
Number of vertices per chunk: 1395
csr in-out ready !Start Cost Model Initialization...
GPU 0, layer [0, 8)
GPU 1, layer [8, 16)
GPU 2, layer [16, 24)
GPU 3, layer [24, 32)
GPU 4, layer [32, 40)
GPU 5, layer [40, 48)
GPU 6, layer [48, 56)
GPU 7, layer [56, 64)
GPU 8, layer [64, 72)
GPU 9, layer [72, 80)
GPU 10, layer [80, 88)
GPU 11, layer [88, 96)
GPU 12, layer [96, 104)
GPU 13, layer [104, 112)
GPU 14, layer [112, 120)
GPU 15, layer [120, 128)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 8)
GPU 1, layer [8, 16)
GPU 2, layer [16, 24)
GPU 3, layer [24, 32)
GPU 4, layer [32, 40)
GPU 5, layer [40, 48)
GPU 6, layer [48, 56)
GPU 7, layer [56, 64)
GPU 8, layer [64, 72)
GPU 9, layer [72, 80)
GPU 10, layer [80, 88)
GPU 11, layer [88, 96)
GPU 12, layer [96, 104)
GPU 13, layer [104, 112)
GPU 14, layer [112, 120)
GPU 15, layer [120, 128)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
csr in-out ready !Start Cost Model Initialization...
GPU 0, layer [0, 8)
GPU 1, layer [8, 16)
GPU 2, layer [16, 24)
GPU 3, layer [24, 32)
GPU 4, layer [32, 40)
GPU 5, layer [40, 48)
GPU 6, layer [48, 56)
GPU 7, layer [56, 64)
GPU 8, layer [64, 72)
GPU 9, layer [72, 80)
GPU 10, layer [80, 88)
GPU 11, layer [88, 96)
GPU 12, layer [96, 104)
GPU 13, layer [104, 112)
GPU 14, layer [112, 120)
GPU 15, layer [120, 128)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
89250, 989006, 989006
Number of vertices per chunk: 1395
89250, 989006, 989006
Number of vertices per chunk: 1395
csr in-out ready !Start Cost Model Initialization...
89250, 989006, 989006
Number of vertices per chunk: 1395
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
train nodes 44625, valid nodes 22312, test nodes 22313
GPU 0, layer [0, 8)
GPU 1, layer [8, 16)
GPU 2, layer [16, 24)
GPU 3, layer [24, 32)
GPU 4, layer [32, 40)
GPU 5, layer [40, 48)
GPU 6, layer [48, 56)
GPU 7, layer [56, 64)
GPU 8, layer [64, 72)
GPU 9, layer [72, 80)
GPU 10, layer [80, 88)
GPU 11, layer [88, 96)
GPU 12, layer [96, 104)
GPU 13, layer [104, 112)
GPU 14, layer [112, 120)
GPU 15, layer [120, 128)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
Chunks (number of global chunks: 64): 0-[0, 1395) 1-[1395, 2797) 2-[2797, 4194) 3-[4194, 5593) 4-[5593, 6990) 5-[6990, 8395) 6-[8395, 9809) 7-[9809, 11224) 8-[11224, 12552) ... 63-[87835, 89250)
csr in-out ready !Start Cost Model Initialization...
89250, 989006, 989006
Number of vertices per chunk: 1395
csr in-out ready !Start Cost Model Initialization...
***** Start profiling the layer-level communication performance *******
The layer-level communication performance: 57.135 Gbps (per GPU), 914.161 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 56.929 Gbps (per GPU), 910.857 Gbps (aggregated)
The layer-level communication performance: 56.885 Gbps (per GPU), 910.158 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 56.674 Gbps (per GPU), 906.785 Gbps (aggregated)
The layer-level communication performance: 56.673 Gbps (per GPU), 906.773 Gbps (aggregated)
The layer-level communication performance: 56.659 Gbps (per GPU), 906.542 Gbps (aggregated)
The layer-level communication performance: 56.583 Gbps (per GPU), 905.334 Gbps (aggregated)
The layer-level communication performance: 56.566 Gbps (per GPU), 905.057 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 56.485 Gbps (per GPU), 903.755 Gbps (aggregated)
The layer-level communication performance: 56.459 Gbps (per GPU), 903.338 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 56.428 Gbps (per GPU), 902.847 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 56.389 Gbps (per GPU), 902.227 Gbps (aggregated)
The layer-level communication performance: 56.366 Gbps (per GPU), 901.854 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 56.263 Gbps (per GPU), 900.201 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 56.165 Gbps (per GPU), 898.641 Gbps (aggregated)
The layer-level communication performance: 56.144 Gbps (per GPU), 898.310 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The graph-level communication performance (supernode = 2): 155.627 Gbps (per GPU), 2490.035 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 155.622 Gbps (per GPU), 2489.946 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 155.613 Gbps (per GPU), 2489.802 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 155.581 Gbps (per GPU), 2489.294 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 155.624 Gbps (per GPU), 2489.986 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 155.621 Gbps (per GPU), 2489.940 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 155.630 Gbps (per GPU), 2490.078 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 155.630 Gbps (per GPU), 2490.078 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 155.627 Gbps (per GPU), 2490.038 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 155.621 Gbps (per GPU), 2489.940 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 155.621 Gbps (per GPU), 2489.940 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 155.633 Gbps (per GPU), 2490.132 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 155.627 Gbps (per GPU), 2490.032 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 155.621 Gbps (per GPU), 2489.940 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 155.313 Gbps (per GPU), 2485.007 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 155.636 Gbps (per GPU), 2490.171 Gbps (aggregated, cluster-wide)
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
The graph-level communication performance (supernode = 4): 93.346 Gbps (per GPU), 1493.543 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 93.339 Gbps (per GPU), 1493.421 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 93.345 Gbps (per GPU), 1493.521 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 93.346 Gbps (per GPU), 1493.532 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 93.342 Gbps (per GPU), 1493.465 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 93.345 Gbps (per GPU), 1493.521 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 93.346 Gbps (per GPU), 1493.543 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 93.343 Gbps (per GPU), 1493.488 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 93.340 Gbps (per GPU), 1493.443 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 93.343 Gbps (per GPU), 1493.488 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 93.340 Gbps (per GPU), 1493.432 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 93.342 Gbps (per GPU), 1493.476 Gbps (aggregated, cluster-wide)
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
The graph-level communication performance (supernode = 4): 92.614 Gbps (per GPU), 1481.824 Gbps (aggregated, cluster-wide)
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
The graph-level communication performance (supernode = 4): 92.617 Gbps (per GPU), 1481.879 Gbps (aggregated, cluster-wide)
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
The graph-level communication performance (supernode = 4): 92.613 Gbps (per GPU), 1481.803 Gbps (aggregated, cluster-wide)
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
The graph-level communication performance (supernode = 4): 92.585 Gbps (per GPU), 1481.367 Gbps (aggregated, cluster-wide)
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
The graph-level communication performance (supernode = 8): 25.308 Gbps (per GPU), 404.930 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 25.307 Gbps (per GPU), 404.911 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 25.308 Gbps (per GPU), 404.927 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 25.305 Gbps (per GPU), 404.875 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 25.307 Gbps (per GPU), 404.919 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 25.308 Gbps (per GPU), 404.932 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 25.302 Gbps (per GPU), 404.835 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 25.307 Gbps (per GPU), 404.911 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 25.307 Gbps (per GPU), 404.917 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 25.303 Gbps (per GPU), 404.851 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 25.305 Gbps (per GPU), 404.879 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 25.300 Gbps (per GPU), 404.801 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 25.307 Gbps (per GPU), 404.917 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 25.308 Gbps (per GPU), 404.931 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 25.303 Gbps (per GPU), 404.851 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 25.308 Gbps (per GPU), 404.927 Gbps (aggregated, cluster-wide)
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
****** Start profiling the graph-level communication performance with supernodesize = 16 ******
The graph-level communication performance (supernode = 16): 20.511 Gbps (per GPU), 328.176 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 20.510 Gbps (per GPU), 328.162 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 20.511 Gbps (per GPU), 328.171 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 20.511 Gbps (per GPU), 328.172 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 20.510 Gbps (per GPU), 328.162 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 20.510 Gbps (per GPU), 328.155 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 20.510 Gbps (per GPU), 328.162 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 20.511 Gbps (per GPU), 328.172 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 20.511 Gbps (per GPU), 328.170 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 20.511 Gbps (per GPU), 328.169 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 20.511 Gbps (per GPU), 328.171 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 20.509 Gbps (per GPU), 328.145 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 20.509 Gbps (per GPU), 328.138 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 20.510 Gbps (per GPU), 328.164 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 20.509 Gbps (per GPU), 328.151 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 16): 20.509 Gbps (per GPU), 328.144 Gbps (aggregated, cluster-wide)
 LType   LT0   LT1   LT2 Ratio  VSum  ESum
 chk_0  0.25ms  0.24ms  0.17ms  1.44  1.40K  0.01M
 chk_1  0.25ms  0.24ms  0.18ms  1.39  1.40K  0.01M
 chk_2  0.25ms  0.23ms  0.17ms  1.47  1.40K  0.01M
 chk_3  0.25ms  0.23ms  0.17ms  1.44  1.40K  0.01M
 chk_4  0.25ms  0.23ms  0.17ms  1.48  1.40K  0.01M
 chk_5  0.24ms  0.23ms  0.17ms  1.44  1.41K  0.01M
 chk_6  0.24ms  0.23ms  0.17ms  1.46  1.41K  0.01M
 chk_7  0.24ms  0.23ms  0.17ms  1.45  1.42K  0.01M
 chk_8  0.25ms  0.24ms  0.18ms  1.41  1.33K  0.02M
 chk_9  0.24ms  0.23ms  0.17ms  1.46  1.40K  0.01M
chk_10  0.24ms  0.23ms  0.17ms  1.46  1.38K  0.01M
chk_11  0.24ms  0.23ms  0.17ms  1.47  1.38K  0.01M
chk_12  0.24ms  0.23ms  0.16ms  1.47  1.33K  0.02M
chk_13  0.24ms  0.23ms  0.17ms  1.44  1.39K  0.01M
chk_14  0.24ms  0.23ms  0.17ms  1.45  1.41K  0.01M
chk_15  0.24ms  0.23ms  0.17ms  1.46  1.40K  0.01M
chk_16  0.24ms  0.23ms  0.17ms  1.46  1.40K  0.01M
chk_17  0.24ms  0.24ms  0.17ms  1.46  1.41K  0.01M
chk_18  0.25ms  0.24ms  0.17ms  1.45  1.40K  0.01M
chk_19  0.24ms  0.24ms  0.17ms  1.45  1.39K  0.02M
chk_20  0.24ms  0.23ms  0.17ms  1.47  1.38K  0.02M
chk_21  0.24ms  0.23ms  0.17ms  1.46  1.41K  0.01M
chk_22  0.24ms  0.24ms  0.17ms  1.44  1.39K  0.01M
chk_23  0.24ms  0.24ms  0.17ms  1.44  1.41K  0.01M
chk_24  0.24ms  0.24ms  0.17ms  1.45  1.38K  0.01M
chk_25  0.24ms  0.24ms  0.17ms  1.45  1.40K  0.01M
chk_26  0.24ms  0.23ms  0.17ms  1.45  1.42K  0.01M
chk_27  0.24ms  0.24ms  0.17ms  1.44  1.40K  0.01M
chk_28  0.35ms  0.24ms  0.17ms  2.10  1.39K  0.01M
chk_29  0.33ms  0.23ms  0.17ms  1.93  1.39K  0.01M
chk_30  0.25ms  0.24ms  0.17ms  1.49  1.40K  0.01M
chk_31  0.27ms  0.24ms  0.17ms  1.59  1.39K  0.01M
chk_32  0.27ms  0.23ms  0.17ms  1.60  1.41K  0.01M
chk_33  0.25ms  0.24ms  0.17ms  1.48  1.38K  0.02M
chk_34  0.25ms  0.24ms  0.17ms  1.48  1.41K  0.01M
chk_35  0.25ms  0.24ms  0.17ms  1.44  1.39K  0.01M
chk_36  0.24ms  0.24ms  0.17ms  1.46  1.39K  0.01M
chk_37  0.24ms  0.23ms  0.17ms  1.46  1.41K  0.01M
chk_38  0.25ms  0.24ms  0.17ms  1.48  1.40K  0.01M
chk_39  0.24ms  0.23ms  0.17ms  1.47  1.41K  0.01M
chk_40  0.24ms  0.24ms  0.17ms  1.45  1.42K  0.01M
chk_41  0.25ms  0.24ms  0.17ms  1.46  1.41K  0.01M
chk_42  0.25ms  0.23ms  0.17ms  1.45  1.41K  0.01M
chk_43  0.25ms  0.24ms  0.17ms  1.45  1.39K  0.02M
chk_44  0.25ms  0.24ms  0.17ms  1.45  1.38K  0.01M
chk_45  0.25ms  0.24ms  0.17ms  1.44  1.41K  0.01M
chk_46  0.24ms  0.23ms  0.17ms  1.45  1.40K  0.01M
chk_47  0.25ms  0.24ms  0.17ms  1.48  1.40K  0.01M
chk_48  0.25ms  0.24ms  0.17ms  1.46  1.42K  0.01M
chk_49  0.24ms  0.23ms  0.17ms  1.47  1.41K  0.01M
chk_50  0.27ms  0.24ms  0.17ms  1.60  1.41K  0.01M
chk_51  0.24ms  0.24ms  0.17ms  1.44  1.37K  0.01M
chk_52  0.24ms  0.24ms  0.17ms  1.45  1.38K  0.02M
chk_53  0.24ms  0.23ms  0.17ms  1.43  1.39K  0.01M
chk_54  0.24ms  0.24ms  0.17ms  1.43  1.39K  0.01M
chk_55  0.24ms  0.24ms  0.17ms  1.45  1.40K  0.01M
chk_56  0.24ms  0.24ms  0.17ms  1.45  1.39K  0.02M
chk_57  0.25ms  0.24ms  0.17ms  1.43  1.35K  0.02M
chk_58  0.24ms  0.24ms  0.17ms  1.46  1.38K  0.01M
chk_59  0.25ms  0.24ms  0.17ms  1.44  1.41K  0.01M
chk_60  0.24ms  0.24ms  0.17ms  1.45  1.38K  0.02M
chk_61  0.24ms  0.24ms  0.17ms  1.43  1.37K  0.02M
chk_62  0.25ms  0.24ms  0.17ms  1.45  1.37K  0.01M
chk_63  0.25ms  0.24ms  0.17ms  1.46  1.42K  0.01M
   Avg  0.25  0.24  0.17
   Max  0.35  0.24  0.18
   Min  0.24  0.23  0.16
 Ratio  1.46  1.03  1.09
   Var  0.00  0.00  0.00
Profiling takes 0.634 s
*** Node 0, starting model training...
Num Stages: 16 / 16
Node 0, Pipeline Input Tensor: NULL
Node 0, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 0 owns the model-level partition [0, 41)
*** Node 0, constructing the helper classes...
Node 0, Local Vertex Begin: 0, Num Local Vertices: 89250
*** Node 2, starting model training...
Num Stages: 16 / 16
Node 2, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 2, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 2 owns the model-level partition [81, 121)
*** Node 2, constructing the helper classes...
Node 2, Local Vertex Begin: 0, Num Local Vertices: 89250
*** Node 4, starting model training...
Num Stages: 16 / 16
Node 4, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 4, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 4 owns the model-level partition [161, 201)
*** Node 4, constructing the helper classes...
Node 4, Local Vertex Begin: 0, Num Local Vertices: 89250
*** Node 3, starting model training...
Num Stages: 16 / 16
*** Node 6, starting model training...
Num Stages: 16 / 16
Node 6, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 6, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 6 owns the model-level partition [241, 281)
*** Node 6, constructing the helper classes...
Node 6, Local Vertex Begin: 0, Num Local Vertices: 89250
*** Node 1, starting model training...
Num Stages: 16 / 16
*** Node 7, starting model training...
Num Stages: 16 / 16
Node 7, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 7, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 7 owns the model-level partition [281, 321)
*** Node 7, constructing the helper classes...
Node 7, Local Vertex Begin: 0, Num Local Vertices: 89250
*** Node 5, starting model training...
Num Stages: 16 / 16
Node 5, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 5, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 5 owns the model-level partition [201, 241)
*** Node 5, constructing the helper classes...
Node 5, Local Vertex Begin: 0, Num Local Vertices: 89250
Node 1, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 1, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 1 owns the model-level partition [41, 81)
*** Node 1, constructing the helper classes...
Node 1, Local Vertex Begin: 0, Num Local Vertices: 89250
Node 3, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 3, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 3 owns the model-level partition [121, 161)
*** Node 3, constructing the helper classes...
Node 3, Local Vertex Begin: 0, Num Local Vertices: 89250
*** Node 8, starting model training...
Num Stages: 16 / 16
Node 8, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 8, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 8 owns the model-level partition [321, 361)
*** Node 8, constructing the helper classes...
Node 8, Local Vertex Begin: 0, Num Local Vertices: 89250
*** Node 9, starting model training...
Num Stages: 16 / 16
Node 9, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 9, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 9 owns the model-level partition [361, 401)
*** Node 9, constructing the helper classes...
Node 9, Local Vertex Begin: 0, Num Local Vertices: 89250
*** Node 12, starting model training...
Num Stages: 16 / 16
Node 12, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 12, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 12 owns the model-level partition [481, 521)
*** Node 12, constructing the helper classes...
Node 12, Local Vertex Begin: 0, Num Local Vertices: 89250
*** Node 10, starting model training...
Num Stages: 16 / 16
Node 10, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 10, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 10 owns the model-level partition [401, 441)
*** Node 10, constructing the helper classes...
Node 10, Local Vertex Begin: 0, Num Local Vertices: 89250
*** Node 13, starting model training...
Num Stages: 16 / 16
*** Node 11, starting model training...
Num Stages: 16 / 16
Node 11, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 11, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 11 owns the model-level partition [441, 481)
*** Node 11, constructing the helper classes...
Node 11, Local Vertex Begin: 0, Num Local Vertices: 89250
*** Node 14, starting model training...
Num Stages: 16 / 16
Node 14, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 14, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 14 owns the model-level partition [561, 601)
*** Node 14, constructing the helper classes...
Node 14, Local Vertex Begin: 0, Num Local Vertices: 89250
*** Node 15, starting model training...
Num Stages: 16 / 16
Node 15, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 15, Pipeline Output Tensor: NULL
*** Node 15 owns the model-level partition [601, 640)
*** Node 15, constructing the helper classes...
Node 15, Local Vertex Begin: 0, Num Local Vertices: 89250
Node 13, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 13, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 13 owns the model-level partition [521, 561)
*** Node 13, constructing the helper classes...
Node 13, Local Vertex Begin: 0, Num Local Vertices: 89250
*** Node 0, setting up some other necessary information...
*** Node 3, setting up some other necessary information...
*** Node 1, setting up some other necessary information...
*** Node 11, setting up some other necessary information...
*** Node 10, setting up some other necessary information...
*** Node 12, setting up some other necessary information...
*** Node 6, setting up some other necessary information...
*** Node 2, setting up some other necessary information...
*** Node 15, setting up some other necessary information...
*** Node 7, setting up some other necessary information...
*** Node 4, setting up some other necessary information...
*** Node 5, setting up some other necessary information...
*** Node 8, setting up some other necessary information...
*** Node 9, setting up some other necessary information...
*** Node 14, setting up some other necessary information...
*** Node 13, setting up some other necessary information...
+++++++++ Node 4 initializing the weights for op[161, 201)...
+++++++++ Node 6 initializing the weights for op[241, 281)...
+++++++++ Node 9 initializing the weights for op[361, 401)...
+++++++++ Node 14 initializing the weights for op[561, 601)...
+++++++++ Node 7 initializing the weights for op[281, 321)...
+++++++++ Node 1 initializing the weights for op[41, 81)...
+++++++++ Node 11 initializing the weights for op[441, 481)...
+++++++++ Node 15 initializing the weights for op[601, 640)...
+++++++++ Node 3 initializing the weights for op[121, 161)...
+++++++++ Node 10 initializing the weights for op[401, 441)...
+++++++++ Node 12 initializing the weights for op[481, 521)...
+++++++++ Node 0 initializing the weights for op[0, 41)...
+++++++++ Node 8 initializing the weights for op[321, 361)...
+++++++++ Node 13 initializing the weights for op[521, 561)...
+++++++++ Node 2 initializing the weights for op[81, 121)...
+++++++++ Node 5 initializing the weights for op[201, 241)...
Node 0, discovering the vertices that will be sent across graph boundary...
Node 1, discovering the vertices that will be sent across graph boundary...
Node 2, discovering the vertices that will be sent across graph boundary...
Node 3, discovering the vertices that will be sent across graph boundary...
Node 8, discovering the vertices that will be sent across graph boundary...
Node 12, discovering the vertices that will be sent across graph boundary...
Node 4, discovering the vertices that will be sent across graph boundary...
Node 10, discovering the vertices that will be sent across graph boundary...
Node 10, discovering the vertices that will be received across the graph boundary.
Node 14, discovering the vertices that will be sent across graph boundary...
Node 5, discovering the vertices that will be sent across graph boundary...
The number of mirror vertices: 0
Node 0, discovering the vertices that will be received across the graph boundary.
Node 11, discovering the vertices that will be sent across graph boundary...
Node 11, discovering the vertices that will be received across the graph boundary.
Node 15, discovering the vertices that will be sent across graph boundary...
Node 15, discovering the vertices that will be received across the graph boundary.
Node 6, discovering the vertices that will be sent across graph boundary...
Node 1, discovering the vertices that will be received across the graph boundary.
Node 8, discovering the vertices that will be received across the graph boundary.
****** Start Scheduling the Tasks in a Pipelined Fashion ******
Node 12, discovering the vertices that will be received across the graph boundary.
Node 7, discovering the vertices that will be sent across graph boundary...
Node 2, discovering the vertices that will be received across the graph boundary.
Node 9, discovering the vertices that will be sent across graph boundary...
Node 9, discovering the vertices that will be received across the graph boundary.
Node 13, discovering the vertices that will be sent across graph boundary...
Node 13, discovering the vertices that will be received across the graph boundary.
Node 4, discovering the vertices that will be received across the graph boundary.
Node 3, discovering the vertices that will be received across the graph boundary.
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
Node 14, discovering the vertices that will be received across the graph boundary.
Node 5, discovering the vertices that will be received across the graph boundary.
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
Node 6, discovering the vertices that will be received across the graph boundary.
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
Node 7, discovering the vertices that will be received across the graph boundary.
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
*** Node 8, starting task scheduling...
*** Node 12, starting task scheduling...
*** Node 4, starting task scheduling...
*** Node 0, starting task scheduling...
*** Node 9, starting task scheduling...
*** Node 13, starting task scheduling...
*** Node 5, starting task scheduling...
*** Node 1, starting task scheduling...
*** Node 10, starting task scheduling...
*** Node 14, starting task scheduling...
*** Node 6, starting task scheduling...
*** Node 2, starting task scheduling...
*** Node 11, starting task scheduling...
*** Node 15, starting task scheduling...
*** Node 7, starting task scheduling...
*** Node 3, starting task scheduling...
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000



The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
	Epoch 1:	Loss 1.9459	TrainAcc 0.0589	ValidAcc 0.0575	TestAcc 0.0607	BestValid 0.0575
	Epoch 50:	Loss 1.9459	TrainAcc 0.0589	ValidAcc 0.0575	TestAcc 0.0607	BestValid 0.0575
****** Epoch Time (Excluding Evaluation Cost): 0.207 s ******
****** Breakdown Analysis ******
Cluster-Wide Average, Bubble-Pipeline: 41.836 ms (Max: 42.810, Min: 36.643, Sum: 669.369)
Cluster-Wide Average, Compute: 132.939 ms (Max: 135.801, Min: 127.085, Sum: 2127.024)
Cluster-Wide Average, Communication-Layer: 14.665 ms (Max: 16.938, Min: 10.472, Sum: 234.636)
Cluster-Wide Average, Bubble-Imbalance: 12.202 ms (Max: 16.189, Min: 6.918, Sum: 195.236)
Cluster-Wide Average, Communication-Graph: 2.193 ms (Max: 2.629, Min: 1.892, Sum: 35.083)
Cluster-Wide Average, Optimization: 0.205 ms (Max: 0.209, Min: 0.198, Sum: 3.280)
Cluster-Wide Average, Others: 2.597 ms (Max: 8.661, Min: 2.049, Sum: 41.546)
****** Breakdown Sum: 206.636 ms ******
Cluster-Wide Average, GPU Memory Consumption: 6.539 GB (Max: 7.887, Min: 5.948, Sum: 104.621)
Cluster-Wide Average, Graph-Level Communication Throughput: -nan Gbps (Max: -nan, Min: -nan, Sum: -nan)
Cluster-Wide Average, Layer-Level Communication Throughput: 36.340 Gbps (Max: 40.845, Min: 27.149, Sum: 581.432)
Layer-level communication (cluster-wide, per-epoch): 0.997 GB
Graph-level communication (cluster-wide, per-epoch): 0.000 GB
Weight-sync communication (cluster-wide, per-epoch): 0.000 GB
Total communication (cluster-wide, per-epoch): 0.997 GB
****** Accuracy Results ******
Highest valid_acc: 0.0575
Target test_acc: 0.0607
Epoch to reach the target acc: 0
[MPI Rank 0] Success 
[MPI Rank 1] Success 
[MPI Rank 2] Success 
[MPI Rank 3] Success 
[MPI Rank 8] Success 
[MPI Rank 12] Success 
[MPI Rank 4] Success 
[MPI Rank 9] Success 
[MPI Rank 13] Success 
[MPI Rank 5] Success 
[MPI Rank 10] Success 
[MPI Rank 14] Success 
[MPI Rank 6] Success 
[MPI Rank 11] Success 
[MPI Rank 15] Success 
[MPI Rank 7] Success 
