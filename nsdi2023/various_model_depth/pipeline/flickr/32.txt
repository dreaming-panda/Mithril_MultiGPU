Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
DONE MPI INIT
DONE MPI INIT
Initialized node 2 on machine gnerv7
DONE MPI INIT
Initialized node 3 on machine gnerv7
Initialized node 0 on machine gnerv7
DONE MPI INIT
Initialized node 1 on machine gnerv7
DONE MPI INIT
Initialized node 4 on machine gnerv8
DONE MPI INIT
Initialized node 5 on machine gnerv8
DONE MPI INIT
Initialized node 7 on machine gnerv8
DONE MPI INIT
Initialized node 6 on machine gnerv8
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
        It takes 0.020 seconds.
Building the CSC structure...
        It takes 0.021 seconds.
Building the CSC structure...
        It takes 0.021 seconds.
Building the CSC structure...
        It takes 0.021 seconds.
Building the CSC structure...
        It takes 0.021 seconds.
Building the CSC structure...
        It takes 0.026 seconds.
Building the CSC structure...
        It takes 0.027 seconds.
Building the CSC structure...
        It takes 0.029 seconds.
Building the CSC structure...
        It takes 0.021 seconds.
        It takes 0.023 seconds.
        It takes 0.019 seconds.
        It takes 0.025 seconds.
        It takes 0.025 seconds.
        It takes 0.020 seconds.
        It takes 0.026 seconds.
        It takes 0.020 seconds.
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
        It takes 0.098 seconds.
Building the Label Vector...
        It takes 0.007 seconds.
        It takes 0.108 seconds.
Building the Label Vector...
        It takes 0.105 seconds.
Building the Label Vector...
        It takes 0.109 seconds.
Building the Label Vector...
        It takes 0.007 seconds.
        It takes 0.007 seconds.
        It takes 0.008 seconds.
        It takes 0.130 seconds.
Building the Label Vector...
        It takes 0.128 seconds.
        It takes 0.129 seconds.
        It takes 0.127 seconds.
Building the Label Vector...
Building the Label Vector...
Building the Label Vector...
        It takes 0.007 seconds.
        It takes 0.007 seconds.
        It takes 0.007 seconds.
        It takes 0.009 seconds.
The graph dataset locates at /shared_hdd_storage/jingjichen/gnn_datasets/pipeline_parallel_datasets/flickr/32_parts
The number of GCNII layers: 32
The number of hidden units: 100
The number of training epoches: 50
Learning rate: 0.001000
The partition strategy: model
The dropout rate: 0.500
The checkpointed weight file: /tmp/saved_weights_pipe
The random seed: 1
GCN hyper-parameter alpha: 0.100000
GCN hyper-parameter lambda: 0.500000
Number of classes: 7
Number of feature dimensions: 500
Number of vertices: 89250
Number of GPUs: 8
GPU 0, layer [0, 5)
GPU 1, layer [5, 9)
GPU 2, layer [9, 13)
GPU 3, layer [13, 17)
GPU 4, layer [17, 21)
GPU 5, layer [21, 25)
GPU 6, layer [25, 29)
GPU 7, layer [29, 33)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 5)
GPU 1, layer [5, 9)
GPU 2, layer [9, 13)
GPU 3, layer [13, 17)
GPU 4, layer [17, 21)
GPU 5, layer [21, 25)
GPU 6, layer [25, 29)
GPU 7, layer [29, 33)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
89250, 989006, 989006
Number of vertices per chunk: 2790
89250, 989006, 989006
Number of vertices per chunk: 2790
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
GPU 0, layer [0, 5)
GPU 1, layer [5, 9)
GPU 2, layer [9, 13)
GPU 3, layer [13, 17)
GPU 4, layer [17, 21)
GPU 5, layer [21, 25)
GPU 6, layer [25, 29)
GPU 7, layer [29, 33)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
89250, 989006, 989006
Number of vertices per chunk: 2790
GPU 0, layer [0, 5)
GPU 1, layer [5, 9)
GPU 2, layer [9, 13)
GPU 3, layer [13, 17)
GPU 4, layer [17, 21)
GPU 5, layer [21, 25)
GPU 6, layer [25, 29)
GPU 7, layer [29, 33)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 5)
GPU 1, layer [5, 9)
GPU 2, layer [9, 13)
GPU 3, layer [13, 17)
GPU 4, layer [17, 21)
GPU 5, layer [21, 25)
GPU 6, layer [25, 29)
GPU 7, layer [29, 33)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
csr in-out ready !Start Cost Model Initialization...
89250, 989006, 989006
Number of vertices per chunk: 2790
89250, 989006, 989006
Number of vertices per chunk: 2790
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
GPU 0, layer [0, 5)
GPU 1, layer [5, 9)
GPU 2, layer [9, 13)
GPU 3, layer [13, 17)
GPU 4, layer [17, 21)
GPU 5, layer [21, 25)
GPU 6, layer [25, 29)
GPU 7, layer [29, 33)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 5)
GPU 1, layer [5, 9)
GPU 2, layer [9, 13)
GPU 3, layer [13, 17)
GPU 4, layer [17, 21)
GPU 5, layer [21, 25)
GPU 6, layer [25, 29)
GPU 7, layer [29, 33)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
89250, 989006, 989006
Number of vertices per chunk: 2790
89250, 989006, 989006
train nodes 44625, valid nodes 22312, test nodes 22313
GPU 0, layer [0, 5)
GPU 1, layer [5, 9)
GPU 2, layer [9, 13)
GPU 3, layer [13, 17)
GPU 4, layer [17, 21)
GPU 5, layer [21, 25)
GPU 6, layer [25, 29)
GPU 7, layer [29, 33)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
Chunks (number of global chunks: 32): 0-[0, 2809) 1-[2809, 5626) 2-[5626, 8426) 3-[8426, 11230) 4-[11230, 14047) 5-[14047, 16800) 6-[16800, 19507) 7-[19507, 22266) 8-[22266, 25059) ... 31-[86469, 89250)
Number of vertices per chunk: 2790
89250, 989006, 989006
Number of vertices per chunk: 2790
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
***** Start profiling the layer-level communication performance *******
The layer-level communication performance: 61.097 Gbps (per GPU), 488.773 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 60.787 Gbps (per GPU), 486.292 Gbps (aggregated)
The layer-level communication performance: 60.782 Gbps (per GPU), 486.255 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 60.526 Gbps (per GPU), 484.204 Gbps (aggregated)
The layer-level communication performance: 60.500 Gbps (per GPU), 483.998 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 60.269 Gbps (per GPU), 482.156 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 60.217 Gbps (per GPU), 481.735 Gbps (aggregated)
The layer-level communication performance: 60.184 Gbps (per GPU), 481.470 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The graph-level communication performance (supernode = 2): 139.110 Gbps (per GPU), 1112.880 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 139.110 Gbps (per GPU), 1112.881 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 139.096 Gbps (per GPU), 1112.769 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 139.117 Gbps (per GPU), 1112.935 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 139.098 Gbps (per GPU), 1112.787 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 139.115 Gbps (per GPU), 1112.916 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 139.096 Gbps (per GPU), 1112.769 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 139.091 Gbps (per GPU), 1112.732 Gbps (aggregated, cluster-wide)
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
The graph-level communication performance (supernode = 4): 105.724 Gbps (per GPU), 845.789 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 105.725 Gbps (per GPU), 845.796 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 105.725 Gbps (per GPU), 845.803 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 105.722 Gbps (per GPU), 845.775 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 105.725 Gbps (per GPU), 845.796 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 105.725 Gbps (per GPU), 845.803 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 105.725 Gbps (per GPU), 845.796 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 105.725 Gbps (per GPU), 845.803 Gbps (aggregated, cluster-wide)
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
The graph-level communication performance (supernode = 8): 39.390 Gbps (per GPU), 315.119 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 39.389 Gbps (per GPU), 315.109 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 39.389 Gbps (per GPU), 315.116 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 39.389 Gbps (per GPU), 315.114 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 39.389 Gbps (per GPU), 315.112 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 39.381 Gbps (per GPU), 315.049 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 39.389 Gbps (per GPU), 315.113 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 39.382 Gbps (per GPU), 315.052 Gbps (aggregated, cluster-wide)
 LType   LT0   LT1   LT2 Ratio  VSum  ESum
 chk_0  0.41ms  0.36ms  0.52ms  1.47  2.81K  0.03M
 chk_1  0.41ms  0.36ms  0.53ms  1.46  2.82K  0.03M
 chk_2  0.41ms  0.36ms  0.53ms  1.46  2.80K  0.03M
 chk_3  0.42ms  0.36ms  0.53ms  1.46  2.80K  0.03M
 chk_4  0.42ms  0.36ms  0.52ms  1.45  2.82K  0.03M
 chk_5  0.41ms  0.37ms  0.53ms  1.45  2.75K  0.03M
 chk_6  0.41ms  0.36ms  0.52ms  1.44  2.71K  0.03M
 chk_7  0.41ms  0.36ms  0.52ms  1.45  2.76K  0.03M
 chk_8  0.41ms  0.36ms  0.52ms  1.46  2.79K  0.03M
 chk_9  0.41ms  0.36ms  0.52ms  1.46  2.81K  0.03M
chk_10  0.41ms  0.36ms  0.52ms  1.44  2.81K  0.03M
chk_11  0.41ms  0.37ms  0.53ms  1.44  2.74K  0.03M
chk_12  0.41ms  0.36ms  0.52ms  1.44  2.76K  0.03M
chk_13  0.41ms  0.36ms  0.52ms  1.44  2.75K  0.03M
chk_14  0.41ms  0.36ms  0.52ms  1.45  2.81K  0.03M
chk_15  0.41ms  0.36ms  0.52ms  1.44  2.77K  0.03M
chk_16  0.41ms  0.36ms  0.52ms  1.46  2.78K  0.03M
chk_17  0.41ms  0.37ms  0.53ms  1.44  2.79K  0.03M
chk_18  0.41ms  0.37ms  0.53ms  1.44  2.82K  0.03M
chk_19  0.41ms  0.36ms  0.52ms  1.45  2.81K  0.03M
chk_20  0.41ms  0.37ms  0.53ms  1.44  2.77K  0.03M
chk_21  0.42ms  0.36ms  0.52ms  1.45  2.84K  0.02M
chk_22  0.41ms  0.36ms  0.52ms  1.44  2.78K  0.03M
chk_23  0.41ms  0.36ms  0.52ms  1.45  2.80K  0.03M
chk_24  0.41ms  0.47ms  0.52ms  1.27  2.80K  0.03M
chk_25  0.41ms  0.36ms  0.52ms  1.44  2.81K  0.03M
chk_26  0.41ms  0.36ms  0.52ms  1.44  2.81K  0.03M
chk_27  0.41ms  0.36ms  0.53ms  1.44  2.79K  0.03M
chk_28  0.41ms  0.36ms  0.52ms  1.44  2.77K  0.03M
chk_29  0.41ms  0.36ms  0.52ms  1.45  2.77K  0.03M
chk_30  0.41ms  0.36ms  0.53ms  1.44  2.80K  0.03M
chk_31  0.41ms  0.36ms  0.53ms  1.44  2.78K  0.03M
   Avg  0.41  0.37  0.52
   Max  0.42  0.47  0.53
   Min  0.41  0.36  0.52
 Ratio  1.02  1.32  1.03
   Var  0.00  0.00  0.00
Profiling takes 0.625 s
*** Node 0, starting model training...
Num Stages: 8 / 8
Node 0, Pipeline Input Tensor: NULL
Node 0, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 0 owns the model-level partition [0, 34)
*** Node 0, constructing the helper classes...
Node 0, Local Vertex Begin: 0, Num Local Vertices: 89250
*** Node 1, starting model training...
Num Stages: 8 / 8
Node 1, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 1, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 1 owns the model-level partition [34, 62)
*** Node 1, constructing the helper classes...
Node 1, Local Vertex Begin: 0, Num Local Vertices: 89250
*** Node 2, starting model training...
Num Stages: 8 / 8
Node 2, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 2, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 2 owns the model-level partition [62, 90)
*** Node 2, constructing the helper classes...
Node 2, Local Vertex Begin: 0, Num Local Vertices: 89250
*** Node 3, starting model training...
Num Stages: 8 / 8
Node 3, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 3, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 3 owns the model-level partition [90, 118)
*** Node 3, constructing the helper classes...
Node 3, Local Vertex Begin: 0, Num Local Vertices: 89250
*** Node 4, starting model training...
Num Stages: 8 / 8
Node 4, Pipeline Input Tensor: OPERATOR_DROPOUT
*** Node 5, starting model training...
Num Stages: 8 / 8
Node 5, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 5, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 5 owns the model-level partition [146, 174)
*** Node 5, constructing the helper classes...
Node 5, Local Vertex Begin: 0, Num Local Vertices: 89250
Node 4, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 4 owns the model-level partition [118, 146)
*** Node 4, constructing the helper classes...
Node 4, Local Vertex Begin: 0, Num Local Vertices: 89250
*** Node 6, starting model training...
Num Stages: 8 / 8
Node 6, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 6, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 6 owns the model-level partition [174, 202)
*** Node 6, constructing the helper classes...
Node 6, Local Vertex Begin: 0, Num Local Vertices: 89250
*** Node 7, starting model training...
Num Stages: 8 / 8
Node 7, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 7, Pipeline Output Tensor: NULL
*** Node 7 owns the model-level partition [202, 233)
*** Node 7, constructing the helper classes...
Node 7, Local Vertex Begin: 0, Num Local Vertices: 89250
*** Node 2, setting up some other necessary information...
*** Node 3, setting up some other necessary information...
*** Node 5, setting up some other necessary information...
*** Node 0, setting up some other necessary information...
*** Node 6, setting up some other necessary information...
*** Node 7, setting up some other necessary information...
*** Node 4, setting up some other necessary information...
*** Node 1, setting up some other necessary information...
+++++++++ Node 1 initializing the weights for op[34, 62)...
+++++++++ Node 2 initializing the weights for op[62, 90)...
+++++++++ Node 3 initializing the weights for op[90, 118)...
+++++++++ Node 0 initializing the weights for op[0, 34)...
+++++++++ Node 4 initializing the weights for op[118, 146)...
+++++++++ Node 5 initializing the weights for op[146, 174)...
+++++++++ Node 6 initializing the weights for op[174, 202)...
+++++++++ Node 7 initializing the weights for op[202, 233)...
Node 0, discovering the vertices that will be sent across graph boundary...
Node 2, discovering the vertices that will be sent across graph boundary...
Node 3, discovering the vertices that will be sent across graph boundary...
Node 4, discovering the vertices that will be sent across graph boundary...
Node 1, discovering the vertices that will be sent across graph boundary...
Node 5, discovering the vertices that will be sent across graph boundary...
The number of mirror vertices: 0
Node 0, discovering the vertices that will be received across the graph boundary.
Node 1, discovering the vertices that will be received across the graph boundary.
Node 6, discovering the vertices that will be sent across graph boundary...
Node 2, discovering the vertices that will be received across the graph boundary.
Node 3, discovering the vertices that will be received across the graph boundary.
Node 7, discovering the vertices that will be sent across graph boundary...
Node 7, discovering the vertices that will be received across the graph boundary.
Node 4, discovering the vertices that will be received across the graph boundary.
Node 5, discovering the vertices that will be received across the graph boundary.
Node 6, discovering the vertices that will be received across the graph boundary.
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
*** Node 4, starting task scheduling...
*** Node 5, starting task scheduling...
*** Node 0, starting task scheduling...



The learning rate specified by the user: 0.001000000
*** Node 6, starting task scheduling...
*** Node 1, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 7, starting task scheduling...
*** Node 2, starting task scheduling...
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
*** Node 3, starting task scheduling...
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
	Epoch 1:	Loss 1.9379	TrainAcc 0.4153	ValidAcc 0.4187	TestAcc 0.4183	BestValid 0.4187
	Epoch 50:	Loss 1.6079	TrainAcc 0.4608	ValidAcc 0.4600	TestAcc 0.4601	BestValid 0.4600
****** Epoch Time (Excluding Evaluation Cost): 0.095 s ******
****** Breakdown Analysis ******
Cluster-Wide Average, Bubble-Pipeline: 17.450 ms (Max: 18.543, Min: 15.913, Sum: 139.604)
Cluster-Wide Average, Compute: 51.331 ms (Max: 62.865, Min: 47.244, Sum: 410.644)
Cluster-Wide Average, Communication-Layer: 14.422 ms (Max: 16.788, Min: 10.883, Sum: 115.375)
Cluster-Wide Average, Bubble-Imbalance: 10.146 ms (Max: 13.016, Min: 2.484, Sum: 81.171)
Cluster-Wide Average, Communication-Graph: 0.460 ms (Max: 0.507, Min: 0.398, Sum: 3.676)
Cluster-Wide Average, Optimization: 0.094 ms (Max: 0.113, Min: 0.087, Sum: 0.749)
Cluster-Wide Average, Others: 1.179 ms (Max: 3.925, Min: 0.782, Sum: 9.430)
****** Breakdown Sum: 95.081 ms ******
Cluster-Wide Average, GPU Memory Consumption: 3.004 GB (Max: 4.174, Min: 2.821, Sum: 24.030)
Cluster-Wide Average, Graph-Level Communication Throughput: -nan Gbps (Max: -nan, Min: -nan, Sum: -nan)
Cluster-Wide Average, Layer-Level Communication Throughput: 68.348 Gbps (Max: 82.036, Min: 51.147, Sum: 546.784)
Layer-level communication (cluster-wide, per-epoch): 0.931 GB
Graph-level communication (cluster-wide, per-epoch): 0.000 GB
Weight-sync communication (cluster-wide, per-epoch): 0.000 GB
Total communication (cluster-wide, per-epoch): 0.931 GB
****** Accuracy Results ******
Highest valid_acc: 0.4600
Target test_acc: 0.4601
Epoch to reach the target acc: 49
[MPI Rank 0] Success 
[MPI Rank 1] Success 
[MPI Rank 4] Success 
[MPI Rank 2] Success 
[MPI Rank 5] Success 
[MPI Rank 3] Success 
[MPI Rank 6] Success 
[MPI Rank 7] Success 
