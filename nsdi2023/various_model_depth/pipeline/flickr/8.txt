Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
DONE MPI INIT
DONE MPI INIT
Initialized node 1 on machine gnerv7
DONE MPI INIT
Initialized node 2 on machine gnerv7
Initialized node 0 on machine gnerv7
DONE MPI INIT
Initialized node 3 on machine gnerv7
DONE MPI INIT
DONE MPI INIT
Initialized node 6 on machine gnerv8
DONE MPI INIT
Initialized node 7 on machine gnerv8
Initialized node 5 on machine gnerv8
DONE MPI INIT
Initialized node 4 on machine gnerv8
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
        It takes 0.019 seconds.
Building the CSC structure...
        It takes 0.020 seconds.
Building the CSC structure...
        It takes 0.020 seconds.
Building the CSC structure...
        It takes 0.021 seconds.
Building the CSC structure...
        It takes 0.023 seconds.
Building the CSC structure...
        It takes 0.024 seconds.
Building the CSC structure...
        It takes 0.027 seconds.
Building the CSC structure...
        It takes 0.027 seconds.
Building the CSC structure...
        It takes 0.020 seconds.
        It takes 0.020 seconds.
        It takes 0.019 seconds.
        It takes 0.023 seconds.
        It takes 0.025 seconds.
        It takes 0.020 seconds.
        It takes 0.021 seconds.
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
        It takes 0.029 seconds.
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
        It takes 0.105 seconds.
Building the Label Vector...
        It takes 0.108 seconds.
Building the Label Vector...
        It takes 0.007 seconds.
        It takes 0.113 seconds.
Building the Label Vector...
        It takes 0.108 seconds.
Building the Label Vector...
        It takes 0.108 seconds.
Building the Label Vector...
        It takes 0.007 seconds.
        It takes 0.007 seconds.
The graph dataset locates at /shared_hdd_storage/jingjichen/gnn_datasets/pipeline_parallel_datasets/flickr/32_parts
The number of GCNII layers: 8
The number of hidden units: 100
The number of training epoches: 50
Learning rate: 0.001000
The partition strategy: model
The dropout rate: 0.500
The checkpointed weight file: /tmp/saved_weights_pipe
The random seed: 1
GCN hyper-parameter alpha: 0.100000
GCN hyper-parameter lambda: 0.500000
Number of classes: 7
Number of feature dimensions: 500
Number of vertices: 89250
Number of GPUs: 8
        It takes 0.007 seconds.
        It takes 0.007 seconds.
        It takes 0.122 seconds.
Building the Label Vector...
        It takes 0.123 seconds.
Building the Label Vector...
        It takes 0.007 seconds.
        It takes 0.121 seconds.
Building the Label Vector...
        It takes 0.008 seconds.
        It takes 0.008 seconds.
GPU 0, layer [0, 2)
GPU 1, layer [2, 3)
GPU 2, layer [3, 4)
GPU 3, layer [4, 5)
GPU 4, layer [5, 6)
GPU 5, layer [6, 7)
GPU 6, layer [7, 8)
GPU 7, layer [8, 9)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 2)
GPU 1, layer [2, 3)
GPU 2, layer [3, 4)
GPU 3, layer [4, 5)
GPU 4, layer [5, 6)
GPU 5, layer [6, 7)
GPU 6, layer [7, 8)
GPU 7, layer [8, 9)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
89250, 989006, 989006
Number of vertices per chunk: 2790
89250, 989006, 989006
Number of vertices per chunk: 2790
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
GPU 0, layer [0, 2)
GPU 1, layer [2, 3)
GPU 2, layer [3, 4)
GPU 3, layer [4, 5)
GPU 4, layer [5, 6)
GPU 5, layer [6, 7)
GPU 6, layer [7, 8)
GPU 7, layer [8, 9)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 2)
GPU 1, layer [2, 3)
GPU 2, layer [3, 4)
GPU 3, layer [4, 5)
GPU 4, layer [5, 6)
GPU 5, layer [6, 7)
GPU 6, layer [7, 8)
GPU 7, layer [8, 9)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 2)
GPU 1, layer [2, 3)
GPU 2, layer [3, 4)
GPU 3, layer [4, 5)
GPU 4, layer [5, 6)
GPU 5, layer [6, 7)
GPU 6, layer [7, 8)
GPU 7, layer [8, 9)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
89250, 989006, 989006
89250, 989006, 989006
GPU 0, layer [0, 2)
GPU 1, layer [2, 3)
GPU 2, layer [3, 4)
GPU 3, layer [4, 5)
GPU 4, layer [5, 6)
GPU 5, layer [6, 7)
GPU 6, layer [7, 8)
GPU 7, layer [8, 9)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
Number of vertices per chunk: 2790
Number of vertices per chunk: 2790
89250, 989006, 989006
89250, 989006, 989006
Number of vertices per chunk: 2790
Number of vertices per chunk: 2790
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
train nodes 44625, valid nodes 22312, test nodes 22313
GPU 0, layer [0, 2)
GPU 1, layer [2, 3)
GPU 2, layer [3, 4)
GPU 3, layer [4, 5)
GPU 4, layer [5, 6)
GPU 5, layer [6, 7)
GPU 6, layer [7, 8)
GPU 7, layer [8, 9)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
Chunks (number of global chunks: 32): 0-[0, 2809) 1-[2809, 5626) 2-[5626, 8426) 3-[8426, 11230) 4-[11230, 14047) 5-[14047, 16800) 6-[16800, 19507) 7-[19507, 22266) 8-[22266, 25059) ... 31-[86469, 89250)
GPU 0, layer [0, 2)
GPU 1, layer [2, 3)
GPU 2, layer [3, 4)
GPU 3, layer [4, 5)
GPU 4, layer [5, 6)
GPU 5, layer [6, 7)
GPU 6, layer [7, 8)
GPU 7, layer [8, 9)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
89250, 989006, 989006
Number of vertices per chunk: 2790
89250, 989006, 989006
Number of vertices per chunk: 2790
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
***** Start profiling the layer-level communication performance *******
The layer-level communication performance: 61.114 Gbps (per GPU), 488.909 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 60.812 Gbps (per GPU), 486.499 Gbps (aggregated)
The layer-level communication performance: 60.811 Gbps (per GPU), 486.491 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 60.558 Gbps (per GPU), 484.460 Gbps (aggregated)
The layer-level communication performance: 60.531 Gbps (per GPU), 484.246 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 60.318 Gbps (per GPU), 482.541 Gbps (aggregated)
The layer-level communication performance: 60.267 Gbps (per GPU), 482.134 Gbps (aggregated)
The layer-level communication performance: 60.232 Gbps (per GPU), 481.855 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The graph-level communication performance (supernode = 2): 159.240 Gbps (per GPU), 1273.921 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 159.246 Gbps (per GPU), 1273.969 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 159.243 Gbps (per GPU), 1273.945 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 159.252 Gbps (per GPU), 1274.017 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 159.249 Gbps (per GPU), 1273.993 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 159.243 Gbps (per GPU), 1273.947 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 159.228 Gbps (per GPU), 1273.825 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 159.231 Gbps (per GPU), 1273.848 Gbps (aggregated, cluster-wide)
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
The graph-level communication performance (supernode = 4): 104.365 Gbps (per GPU), 834.923 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 104.365 Gbps (per GPU), 834.923 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 104.366 Gbps (per GPU), 834.930 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 104.365 Gbps (per GPU), 834.923 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 104.364 Gbps (per GPU), 834.916 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 104.358 Gbps (per GPU), 834.867 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 104.364 Gbps (per GPU), 834.909 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 104.364 Gbps (per GPU), 834.916 Gbps (aggregated, cluster-wide)
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
The graph-level communication performance (supernode = 8): 37.305 Gbps (per GPU), 298.440 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 37.306 Gbps (per GPU), 298.445 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 37.306 Gbps (per GPU), 298.450 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 37.297 Gbps (per GPU), 298.375 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 37.302 Gbps (per GPU), 298.417 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 37.301 Gbps (per GPU), 298.407 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 37.304 Gbps (per GPU), 298.436 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 37.297 Gbps (per GPU), 298.379 Gbps (aggregated, cluster-wide)
 LType   LT0   LT1   LT2 Ratio  VSum  ESum
 chk_0  0.41ms  0.36ms  0.52ms  1.47  2.81K  0.03M
 chk_1  0.41ms  0.36ms  0.52ms  1.46  2.82K  0.03M
 chk_2  0.41ms  0.36ms  0.52ms  1.46  2.80K  0.03M
 chk_3  0.41ms  0.36ms  0.53ms  1.46  2.80K  0.03M
 chk_4  0.42ms  0.36ms  0.52ms  1.46  2.82K  0.03M
 chk_5  0.41ms  0.36ms  0.53ms  1.45  2.75K  0.03M
 chk_6  0.41ms  0.36ms  0.52ms  1.46  2.71K  0.03M
 chk_7  0.41ms  0.36ms  0.52ms  1.45  2.76K  0.03M
 chk_8  0.41ms  0.36ms  0.52ms  1.46  2.79K  0.03M
 chk_9  0.41ms  0.36ms  0.53ms  1.47  2.81K  0.03M
chk_10  0.42ms  0.36ms  0.52ms  1.46  2.81K  0.03M
chk_11  0.41ms  0.37ms  0.66ms  1.80  2.74K  0.03M
chk_12  0.41ms  0.36ms  0.53ms  1.46  2.76K  0.03M
chk_13  0.41ms  0.36ms  0.53ms  1.46  2.75K  0.03M
chk_14  0.41ms  0.36ms  0.52ms  1.46  2.81K  0.03M
chk_15  0.41ms  0.36ms  0.52ms  1.46  2.77K  0.03M
chk_16  0.41ms  0.36ms  0.52ms  1.46  2.78K  0.03M
chk_17  0.41ms  0.37ms  0.53ms  1.45  2.79K  0.03M
chk_18  0.42ms  0.36ms  0.53ms  1.45  2.82K  0.03M
chk_19  0.41ms  0.35ms  0.52ms  1.47  2.81K  0.03M
chk_20  0.41ms  0.36ms  0.53ms  1.45  2.77K  0.03M
chk_21  0.42ms  0.36ms  0.53ms  1.46  2.84K  0.02M
chk_22  0.41ms  0.36ms  0.52ms  1.46  2.78K  0.03M
chk_23  0.41ms  0.69ms  0.52ms  1.68  2.80K  0.03M
chk_24  0.41ms  0.36ms  0.58ms  1.62  2.80K  0.03M
chk_25  0.41ms  0.36ms  0.53ms  1.48  2.81K  0.03M
chk_26  0.41ms  0.36ms  0.56ms  1.55  2.81K  0.03M
chk_27  0.41ms  0.36ms  0.53ms  1.47  2.79K  0.03M
chk_28  0.41ms  0.36ms  0.53ms  1.45  2.77K  0.03M
chk_29  0.41ms  0.36ms  0.53ms  1.47  2.77K  0.03M
chk_30  0.41ms  0.36ms  0.53ms  1.47  2.80K  0.03M
chk_31  0.41ms  0.36ms  0.53ms  1.46  2.78K  0.03M
   Avg  0.41  0.37  0.53
   Max  0.42  0.69  0.66
   Min  0.41  0.35  0.52
 Ratio  1.02  1.96  1.27
   Var  0.00  0.00  0.00
Profiling takes 0.629 s
*** Node 0, starting model training...
Num Stages: 8 / 8
Node 0, Pipeline Input Tensor: NULL
Node 0, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 0 owns the model-level partition [0, 13)
*** Node 0, constructing the helper classes...
Node 0, Local Vertex Begin: 0, Num Local Vertices: 89250
*** Node 1, starting model training...
Num Stages: 8 / 8
Node 1, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 1, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 1 owns the model-level partition [13, 20)
*** Node 1, constructing the helper classes...
Node 1, Local Vertex Begin: 0, Num Local Vertices: 89250
*** Node 2, starting model training...
Num Stages: 8 / 8
Node 2, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 2, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 2 owns the model-level partition [20, 27)
*** Node 2, constructing the helper classes...
Node 2, Local Vertex Begin: 0, Num Local Vertices: 89250
*** Node 3, starting model training...
Num Stages: 8 / 8
Node 3, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 3, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 3 owns the model-level partition [27, 34)
*** Node 3, constructing the helper classes...
Node 3, Local Vertex Begin: 0, Num Local Vertices: 89250
*** Node 4, starting model training...
Num Stages: 8 / 8
*** Node 5, starting model training...
Num Stages: 8 / 8
Node 5, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 5, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 5 owns the model-level partition [41, 48)
*** Node 5, constructing the helper classes...
Node 5, Local Vertex Begin: 0, Num Local Vertices: 89250
*** Node 6, starting model training...
Num Stages: 8 / 8
Node 6, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 6, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 6 owns the model-level partition [48, 55)
*** Node 6, constructing the helper classes...
Node 6, Local Vertex Begin: 0, Num Local Vertices: 89250
*** Node 7, starting model training...
Num Stages: 8 / 8
Node 7, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 7, Pipeline Output Tensor: NULL
*** Node 7 owns the model-level partition [55, 65)
*** Node 7, constructing the helper classes...
Node 7, Local Vertex Begin: 0, Num Local Vertices: 89250
Node 4, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 4, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 4 owns the model-level partition [34, 41)
*** Node 4, constructing the helper classes...
Node 4, Local Vertex Begin: 0, Num Local Vertices: 89250
*** Node 1, setting up some other necessary information...
*** Node 2, setting up some other necessary information...
*** Node 3, setting up some other necessary information...
*** Node 0, setting up some other necessary information...
*** Node 4, setting up some other necessary information...
*** Node 5, setting up some other necessary information...
*** Node 6, setting up some other necessary information...
*** Node 7, setting up some other necessary information...
+++++++++ Node 0 initializing the weights for op[0, 13)...
+++++++++ Node 1 initializing the weights for op[13, 20)...
+++++++++ Node 2 initializing the weights for op[20, 27)...
+++++++++ Node 3 initializing the weights for op[27, 34)...
+++++++++ Node 4 initializing the weights for op[34, 41)...
+++++++++ Node 5 initializing the weights for op[41, 48)...
+++++++++ Node 6 initializing the weights for op[48, 55)...
+++++++++ Node 7 initializing the weights for op[55, 65)...
Node 1, discovering the vertices that will be sent across graph boundary...
Node 2, discovering the vertices that will be sent across graph boundary...
Node 3, discovering the vertices that will be sent across graph boundary...
Node 4, discovering the vertices that will be sent across graph boundary...
Node 5, discovering the vertices that will be sent across graph boundary...
Node 6, discovering the vertices that will be sent across graph boundary...
Node 7, discovering the vertices that will be sent across graph boundary...
Node 0, discovering the vertices that will be sent across graph boundary...
The number of mirror vertices: 0
Node 0, discovering the vertices that will be received across the graph boundary.
Node 1, discovering the vertices that will be received across the graph boundary.
Node 2, discovering the vertices that will be received across the graph boundary.
Node 3, discovering the vertices that will be received across the graph boundary.
Node 4, discovering the vertices that will be received across the graph boundary.
Node 5, discovering the vertices that will be received across the graph boundary.
Node 6, discovering the vertices that will be received across the graph boundary.
Node 7, discovering the vertices that will be received across the graph boundary.
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
*** Node 0, starting task scheduling...
*** Node 4, starting task scheduling...
*** Node 1, starting task scheduling...
*** Node 5, starting task scheduling...
*** Node 2, starting task scheduling...
*** Node 6, starting task scheduling...
*** Node 3, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 7, starting task scheduling...
The learning rate specified by the user: 0.001000000



The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
	Epoch 1:	Loss 2.6099	TrainAcc 0.1821	ValidAcc 0.1821	TestAcc 0.1809	BestValid 0.1821
	Epoch 50:	Loss 1.6276	TrainAcc 0.4513	ValidAcc 0.4516	TestAcc 0.4526	BestValid 0.4516
****** Epoch Time (Excluding Evaluation Cost): 0.049 s ******
****** Breakdown Analysis ******
Cluster-Wide Average, Bubble-Pipeline: 9.963 ms (Max: 10.846, Min: 8.023, Sum: 79.704)
Cluster-Wide Average, Compute: 16.086 ms (Max: 26.718, Min: 13.159, Sum: 128.688)
Cluster-Wide Average, Communication-Layer: 13.682 ms (Max: 16.185, Min: 10.253, Sum: 109.455)
Cluster-Wide Average, Bubble-Imbalance: 8.791 ms (Max: 12.373, Min: 1.996, Sum: 70.326)
Cluster-Wide Average, Communication-Graph: 0.113 ms (Max: 0.122, Min: 0.097, Sum: 0.900)
Cluster-Wide Average, Optimization: 0.029 ms (Max: 0.046, Min: 0.023, Sum: 0.228)
Cluster-Wide Average, Others: 0.639 ms (Max: 3.362, Min: 0.230, Sum: 5.111)
****** Breakdown Sum: 49.302 ms ******
Cluster-Wide Average, GPU Memory Consumption: 1.663 GB (Max: 2.608, Min: 1.512, Sum: 13.304)
Cluster-Wide Average, Graph-Level Communication Throughput: -nan Gbps (Max: -nan, Min: -nan, Sum: -nan)
Cluster-Wide Average, Layer-Level Communication Throughput: 72.152 Gbps (Max: 88.848, Min: 54.362, Sum: 577.218)
Layer-level communication (cluster-wide, per-epoch): 0.931 GB
Graph-level communication (cluster-wide, per-epoch): 0.000 GB
Weight-sync communication (cluster-wide, per-epoch): 0.000 GB
Total communication (cluster-wide, per-epoch): 0.931 GB
****** Accuracy Results ******
Highest valid_acc: 0.4516
Target test_acc: 0.4526
Epoch to reach the target acc: 49
[MPI Rank 0] Success 
[MPI Rank 4] Success 
[MPI Rank 1] Success 
[MPI Rank 5] Success 
[MPI Rank 2] Success 
[MPI Rank 6] Success 
[MPI Rank 3] Success 
[MPI Rank 7] Success 
