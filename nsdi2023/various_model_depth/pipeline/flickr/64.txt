Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
DONE MPI INIT
Initialized node 0 on machine gnerv7
DONE MPI INIT
Initialized node 1 on machine gnerv7
DONE MPI INIT
Initialized node 3 on machine gnerv7
DONE MPI INIT
Initialized node 2 on machine gnerv7
DONE MPI INIT
Initialized node 5 on machine gnerv8
DONE MPI INIT
DONE MPI INIT
Initialized node 6 on machine gnerv8
Initialized node 7 on machine gnerv8
DONE MPI INIT
Initialized node 4 on machine gnerv8
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
        It takes 0.019 seconds.
Building the CSC structure...
        It takes 0.019 seconds.
Building the CSC structure...
        It takes 0.023 seconds.
Building the CSC structure...
        It takes 0.024 seconds.
Building the CSC structure...
        It takes 0.025 seconds.
Building the CSC structure...
        It takes 0.025 seconds.
Building the CSC structure...
        It takes 0.024 seconds.
Building the CSC structure...
        It takes 0.025 seconds.
Building the CSC structure...
        It takes 0.021 seconds.
        It takes 0.022 seconds.
        It takes 0.021 seconds.
        It takes 0.019 seconds.
        It takes 0.020 seconds.
        It takes 0.021 seconds.
        It takes 0.022 seconds.
        It takes 0.019 seconds.
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
        It takes 0.101 seconds.
Building the Label Vector...
        It takes 0.007 seconds.
        It takes 0.107 seconds.
Building the Label Vector...
        It takes 0.108 seconds.
Building the Label Vector...
        It takes 0.107 seconds.
Building the Label Vector...
        It takes 0.114 seconds.
Building the Label Vector...
        It takes 0.007 seconds.
        It takes 0.113 seconds.
Building the Label Vector...
        It takes 0.007 seconds.
        It takes 0.007 seconds.
        It takes 0.007 seconds.
The graph dataset locates at /shared_hdd_storage/jingjichen/gnn_datasets/pipeline_parallel_datasets/flickr/32_parts
The number of GCNII layers: 64
The number of hidden units: 100
The number of training epoches: 50
Learning rate: 0.001000
The partition strategy: model
The dropout rate: 0.500
The checkpointed weight file: /tmp/saved_weights_pipe
The random seed: 1
GCN hyper-parameter alpha: 0.100000
GCN hyper-parameter lambda: 0.500000
Number of classes: 7
Number of feature dimensions: 500
Number of vertices: 89250
Number of GPUs: 8
        It takes 0.007 seconds.
        It takes 0.121 seconds.
Building the Label Vector...
        It takes 0.123 seconds.
Building the Label Vector...
        It takes 0.007 seconds.
        It takes 0.007 seconds.
GPU 0, layer [0, 9)
GPU 1, layer [9, 17)
GPU 2, layer [17, 25)
GPU 3, layer [25, 33)
GPU 4, layer [33, 41)
GPU 5, layer [41, 49)
GPU 6, layer [49, 57)
GPU 7, layer [57, 65)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 9)
GPU 1, layer [9, 17)
GPU 2, layer [17, 25)
GPU 3, layer [25, 33)
GPU 4, layer [33, 41)
GPU 5, layer [41, 49)
GPU 6, layer [49, 57)
GPU 7, layer [57, 65)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
89250, 989006, 989006
Number of vertices per chunk: 2790
89250, 989006, 989006
Number of vertices per chunk: 2790
csr in-out ready !Start Cost Model Initialization...
GPU 0, layer [0, 9)
GPU 1, layer [9, 17)
GPU 2, layer [17, 25)
GPU 3, layer [25, 33)
GPU 4, layer [33, 41)
GPU 5, layer [41, 49)
GPU 6, layer [49, 57)
GPU 7, layer [57, 65)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 9)
GPU 1, layer [9, 17)
GPU 2, layer [17, 25)
GPU 3, layer [25, 33)
GPU 4, layer [33, 41)
GPU 5, layer [41, 49)
GPU 6, layer [49, 57)
GPU 7, layer [57, 65)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 9)
GPU 1, layer [9, 17)
GPU 2, layer [17, 25)
GPU 3, layer [25, 33)
GPU 4, layer [33, 41)
GPU 5, layer [41, 49)
GPU 6, layer [49, 57)
GPU 7, layer [57, 65)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
csr in-out ready !Start Cost Model Initialization...
89250, 989006, 989006
Number of vertices per chunk: 2790
89250, 989006, 989006
Number of vertices per chunk: 2790
89250, 989006, 989006
Number of vertices per chunk: 2790
csr in-out ready !Start Cost Model Initialization...
GPU 0, layer [0, 9)
GPU 1, layer [9, 17)
GPU 2, layer [17, 25)
GPU 3, layer [25, 33)
GPU 4, layer [33, 41)
GPU 5, layer [41, 49)
GPU 6, layer [49, 57)
GPU 7, layer [57, 65)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
89250, 989006, 989006
Number of vertices per chunk: 2790
csr in-out ready !Start Cost Model Initialization...
GPU 0, layer [0, 9)
GPU 1, layer [9, 17)
GPU 2, layer [17, 25)
GPU 3, layer [25, 33)
GPU 4, layer [33, 41)
GPU 5, layer [41, 49)
GPU 6, layer [49, 57)
GPU 7, layer [57, 65)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
89250, 989006, 989006
Number of vertices per chunk: 2790
train nodes 44625, valid nodes 22312, test nodes 22313
GPU 0, layer [0, 9)
GPU 1, layer [9, 17)
GPU 2, layer [17, 25)
GPU 3, layer [25, 33)
GPU 4, layer [33, 41)
GPU 5, layer [41, 49)
GPU 6, layer [49, 57)
GPU 7, layer [57, 65)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
Chunks (number of global chunks: 32): 0-[0, 2809) 1-[2809, 5626) 2-[5626, 8426) 3-[8426, 11230) 4-[11230, 14047) 5-[14047, 16800) 6-[16800, 19507) 7-[19507, 22266) 8-[22266, 25059) ... 31-[86469, 89250)
89250, 989006, 989006
Number of vertices per chunk: 2790
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
***** Start profiling the layer-level communication performance *******
The layer-level communication performance: 61.006 Gbps (per GPU), 488.045 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 60.703 Gbps (per GPU), 485.622 Gbps (aggregated)
The layer-level communication performance: 60.702 Gbps (per GPU), 485.619 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 60.437 Gbps (per GPU), 483.499 Gbps (aggregated)
The layer-level communication performance: 60.404 Gbps (per GPU), 483.234 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 60.192 Gbps (per GPU), 481.537 Gbps (aggregated)
The layer-level communication performance: 60.139 Gbps (per GPU), 481.114 Gbps (aggregated)
The layer-level communication performance: 60.106 Gbps (per GPU), 480.849 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The graph-level communication performance (supernode = 2): 157.538 Gbps (per GPU), 1260.308 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 157.530 Gbps (per GPU), 1260.237 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 157.530 Gbps (per GPU), 1260.237 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 157.521 Gbps (per GPU), 1260.166 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 157.518 Gbps (per GPU), 1260.142 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 157.530 Gbps (per GPU), 1260.241 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 157.515 Gbps (per GPU), 1260.118 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 157.535 Gbps (per GPU), 1260.283 Gbps (aggregated, cluster-wide)
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
The graph-level communication performance (supernode = 4): 104.052 Gbps (per GPU), 832.417 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 104.054 Gbps (per GPU), 832.430 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 104.053 Gbps (per GPU), 832.424 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 104.050 Gbps (per GPU), 832.403 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 104.050 Gbps (per GPU), 832.403 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 104.045 Gbps (per GPU), 832.362 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 104.051 Gbps (per GPU), 832.410 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 104.051 Gbps (per GPU), 832.410 Gbps (aggregated, cluster-wide)
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
The graph-level communication performance (supernode = 8): 37.671 Gbps (per GPU), 301.368 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 37.670 Gbps (per GPU), 301.359 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 37.668 Gbps (per GPU), 301.345 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 37.670 Gbps (per GPU), 301.359 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 37.669 Gbps (per GPU), 301.352 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 37.662 Gbps (per GPU), 301.299 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 37.659 Gbps (per GPU), 301.269 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 37.663 Gbps (per GPU), 301.306 Gbps (aggregated, cluster-wide)
 LType   LT0   LT1   LT2 Ratio  VSum  ESum
 chk_0  0.41ms  0.36ms  0.52ms  1.47  2.81K  0.03M
 chk_1  0.41ms  0.36ms  0.53ms  1.47  2.82K  0.03M
 chk_2  0.41ms  0.36ms  0.53ms  1.47  2.80K  0.03M
 chk_3  0.41ms  0.36ms  0.53ms  1.46  2.80K  0.03M
 chk_4  0.41ms  0.36ms  0.53ms  1.47  2.82K  0.03M
 chk_5  0.41ms  0.36ms  0.53ms  1.46  2.75K  0.03M
 chk_6  0.41ms  0.36ms  0.53ms  1.48  2.71K  0.03M
 chk_7  0.41ms  0.36ms  0.53ms  1.46  2.76K  0.03M
 chk_8  0.41ms  0.36ms  0.53ms  1.46  2.79K  0.03M
 chk_9  0.41ms  0.36ms  0.53ms  1.47  2.81K  0.03M
chk_10  0.41ms  0.36ms  0.53ms  1.47  2.81K  0.03M
chk_11  0.41ms  0.37ms  0.53ms  1.46  2.74K  0.03M
chk_12  0.41ms  0.36ms  0.53ms  1.46  2.76K  0.03M
chk_13  0.41ms  0.36ms  0.53ms  1.46  2.75K  0.03M
chk_14  0.41ms  0.36ms  0.53ms  1.47  2.81K  0.03M
chk_15  0.41ms  0.36ms  0.53ms  1.47  2.77K  0.03M
chk_16  0.41ms  0.36ms  0.52ms  1.47  2.78K  0.03M
chk_17  0.41ms  0.37ms  0.53ms  1.46  2.79K  0.03M
chk_18  0.42ms  0.36ms  0.53ms  1.46  2.82K  0.03M
chk_19  0.41ms  0.35ms  0.52ms  1.48  2.81K  0.03M
chk_20  0.41ms  0.47ms  0.53ms  1.30  2.77K  0.03M
chk_21  0.42ms  0.36ms  0.53ms  1.46  2.84K  0.02M
chk_22  0.41ms  0.36ms  0.53ms  1.46  2.78K  0.03M
chk_23  0.41ms  0.36ms  0.53ms  1.46  2.80K  0.03M
chk_24  0.41ms  0.36ms  0.53ms  1.46  2.80K  0.03M
chk_25  0.41ms  0.36ms  0.53ms  1.47  2.81K  0.03M
chk_26  0.41ms  0.36ms  0.53ms  1.46  2.81K  0.03M
chk_27  0.41ms  0.36ms  0.53ms  1.47  2.79K  0.03M
chk_28  0.41ms  0.36ms  0.53ms  1.47  2.77K  0.03M
chk_29  0.64ms  0.36ms  0.52ms  1.78  2.77K  0.03M
chk_30  0.41ms  0.36ms  0.53ms  1.47  2.80K  0.03M
chk_31  0.41ms  0.37ms  0.53ms  1.45  2.78K  0.03M
   Avg  0.42  0.36  0.53
   Max  0.64  0.47  0.53
   Min  0.41  0.35  0.52
 Ratio  1.57  1.33  1.02
   Var  0.00  0.00  0.00
Profiling takes 0.620 s
*** Node 0, starting model training...
Num Stages: 8 / 8
Node 0, Pipeline Input Tensor: NULL
Node 0, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 0 owns the model-level partition [0, 62)
*** Node 0, constructing the helper classes...
Node 0, Local Vertex Begin: 0, Num Local Vertices: 89250
*** Node 1, starting model training...
Num Stages: 8 / 8
*** Node 2, starting model training...
Num Stages: 8 / 8
Node 2, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 2, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 2 owns the model-level partition [118, 174)
*** Node 2, constructing the helper classes...
Node 2, Local Vertex Begin: 0, Num Local Vertices: 89250
*** Node 3, starting model training...
Num Stages: 8 / 8
Node 3, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 3, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 3 owns the model-level partition [174, 230)
*** Node 3, constructing the helper classes...
Node 3, Local Vertex Begin: 0, Num Local Vertices: 89250
Node 1, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 1, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 1 owns the model-level partition [62, 118)
*** Node 1, constructing the helper classes...
Node 1, Local Vertex Begin: 0, Num Local Vertices: 89250
*** Node 4, starting model training...
Num Stages: 8 / 8
*** Node 5, starting model training...
Num Stages: 8 / 8
Node 5, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 5, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 5 owns the model-level partition [286, 342)
*** Node 5, constructing the helper classes...
*** Node 6, starting model training...
Num Stages: 8 / 8
Node 6, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 6, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 6 owns the model-level partition [342, 398)
*** Node 6, constructing the helper classes...
Node 6, Local Vertex Begin: 0, Num Local Vertices: 89250
*** Node 7, starting model training...
Num Stages: 8 / 8
Node 7, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 7, Pipeline Output Tensor: NULL
*** Node 7 owns the model-level partition [398, 457)
*** Node 7, constructing the helper classes...
Node 7, Local Vertex Begin: 0, Num Local Vertices: 89250
Node 4, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 4, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 4 owns the model-level partition [230, 286)
*** Node 4, constructing the helper classes...
Node 4, Local Vertex Begin: 0, Num Local Vertices: 89250
Node 5, Local Vertex Begin: 0, Num Local Vertices: 89250
*** Node 1, setting up some other necessary information...
*** Node 2, setting up some other necessary information...
*** Node 3, setting up some other necessary information...
*** Node 4, setting up some other necessary information...
*** Node 0, setting up some other necessary information...
*** Node 5, setting up some other necessary information...
*** Node 6, setting up some other necessary information...
*** Node 7, setting up some other necessary information...
+++++++++ Node 6 initializing the weights for op[342, 398)...
+++++++++ Node 1 initializing the weights for op[62, 118)...
+++++++++ Node 4 initializing the weights for op[230, 286)...
+++++++++ Node 2 initializing the weights for op[118, 174)...
+++++++++ Node 5 initializing the weights for op[286, 342)...
+++++++++ Node 3 initializing the weights for op[174, 230)...
+++++++++ Node 7 initializing the weights for op[398, 457)...
+++++++++ Node 0 initializing the weights for op[0, 62)...
Node 0, discovering the vertices that will be sent across graph boundary...
Node 2, discovering the vertices that will be sent across graph boundary...
Node 2, discovering the vertices that will be received across the graph boundary.
Node 3, discovering the vertices that will be sent across graph boundary...
Node 3, discovering the vertices that will be received across the graph boundary.
Node 4, discovering the vertices that will be sent across graph boundary...
The number of mirror vertices: 0
Node 0, discovering the vertices that will be received across the graph boundary.
Node 5, discovering the vertices that will be sent across graph boundary...
Node 5, discovering the vertices that will be received across the graph boundary.
Node 1, discovering the vertices that will be sent across graph boundary...
Node 1, discovering the vertices that will be received across the graph boundary.
Node 6, discovering the vertices that will be sent across graph boundary...
Node 6, discovering the vertices that will be received across the graph boundary.
Node 7, discovering the vertices that will be sent across graph boundary...
Node 7, discovering the vertices that will be received across the graph boundary.
Node 4, discovering the vertices that will be received across the graph boundary.
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
*** Node 0, starting task scheduling...
*** Node 1, starting task scheduling...
*** Node 2, starting task scheduling...
*** Node 3, starting task scheduling...
*** Node 4, starting task scheduling...



The learning rate specified by the user: 0.001000000
*** Node 5, starting task scheduling...
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
*** Node 6, starting task scheduling...
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
*** Node 7, starting task scheduling...
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
	Epoch 1:	Loss 2.1068	TrainAcc 0.2604	ValidAcc 0.2598	TestAcc 0.2569	BestValid 0.2598
	Epoch 50:	Loss 1.6272	TrainAcc 0.4673	ValidAcc 0.4708	TestAcc 0.4642	BestValid 0.4708
****** Epoch Time (Excluding Evaluation Cost): 0.159 s ******
****** Breakdown Analysis ******
Cluster-Wide Average, Bubble-Pipeline: 28.192 ms (Max: 29.626, Min: 26.744, Sum: 225.535)
Cluster-Wide Average, Compute: 99.467 ms (Max: 112.886, Min: 93.984, Sum: 795.737)
Cluster-Wide Average, Communication-Layer: 16.577 ms (Max: 18.512, Min: 12.837, Sum: 132.616)
Cluster-Wide Average, Bubble-Imbalance: 11.728 ms (Max: 16.901, Min: 2.266, Sum: 93.823)
Cluster-Wide Average, Communication-Graph: 0.932 ms (Max: 1.046, Min: 0.791, Sum: 7.456)
Cluster-Wide Average, Optimization: 0.182 ms (Max: 0.203, Min: 0.172, Sum: 1.454)
Cluster-Wide Average, Others: 1.947 ms (Max: 4.783, Min: 1.526, Sum: 15.577)
****** Breakdown Sum: 159.025 ms ******
Cluster-Wide Average, GPU Memory Consumption: 4.808 GB (Max: 6.266, Min: 4.585, Sum: 38.468)
Cluster-Wide Average, Graph-Level Communication Throughput: -nan Gbps (Max: -nan, Min: -nan, Sum: -nan)
Cluster-Wide Average, Layer-Level Communication Throughput: 59.344 Gbps (Max: 71.135, Min: 42.194, Sum: 474.753)
Layer-level communication (cluster-wide, per-epoch): 0.931 GB
Graph-level communication (cluster-wide, per-epoch): 0.000 GB
Weight-sync communication (cluster-wide, per-epoch): 0.000 GB
Total communication (cluster-wide, per-epoch): 0.931 GB
****** Accuracy Results ******
Highest valid_acc: 0.4708
Target test_acc: 0.4642
Epoch to reach the target acc: 49
[MPI Rank 4] Success 
[MPI Rank 0] Success 
[MPI Rank 5] Success 
[MPI Rank 1] Success 
[MPI Rank 6] Success 
[MPI Rank 2] Success 
[MPI Rank 7] Success 
[MPI Rank 3] Success 
