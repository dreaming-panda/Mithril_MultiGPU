Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
DONE MPI INIT
Initialized node 4 on machine gnerv8
DONE MPI INIT
DONE MPI INIT
Initialized node 5 on machine gnerv8
Initialized node 7 on machine gnerv8
DONE MPI INIT
Initialized node 6 on machine gnerv8
DONE MPI INIT
DONE MPI INITDONE MPI INIT
Initialized node 2 on machine gnerv7
DONE MPI INIT
Initialized node 3 on machine gnerv7
Initialized node 0 on machine gnerv7

Initialized node 1 on machine gnerv7
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
        It takes 0.020 seconds.
Building the CSC structure...
        It takes 0.022 seconds.
Building the CSC structure...
        It takes 0.024 seconds.
Building the CSC structure...
        It takes 0.025 seconds.
Building the CSC structure...
        It takes 0.027 seconds.
Building the CSC structure...
        It takes 0.026 seconds.
Building the CSC structure...
        It takes 0.028 seconds.
Building the CSC structure...
        It takes 0.027 seconds.
Building the CSC structure...
        It takes 0.021 seconds.
        It takes 0.022 seconds.
        It takes 0.019 seconds.
        It takes 0.019 seconds.
        It takes 0.021 seconds.
        It takes 0.021 seconds.
        It takes 0.020 seconds.
        It takes 0.021 seconds.
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
        It takes 0.100 seconds.
Building the Label Vector...
        It takes 0.101 seconds.
Building the Label Vector...
        It takes 0.007 seconds.
        It takes 0.007 seconds.
        It takes 0.110 seconds.
Building the Label Vector...
        It takes 0.108 seconds.
Building the Label Vector...
        It takes 0.114 seconds.
Building the Label Vector...
        It takes 0.007 seconds.
        It takes 0.007 seconds.
        It takes 0.007 seconds.
The graph dataset locates at /shared_hdd_storage/jingjichen/gnn_datasets/pipeline_parallel_datasets/flickr/32_parts
The number of GCNII layers: 16
The number of hidden units: 100
The number of training epoches: 50
Learning rate: 0.001000
The partition strategy: model
The dropout rate: 0.500
The checkpointed weight file: /tmp/saved_weights_pipe
The random seed: 1
GCN hyper-parameter alpha: 0.100000
GCN hyper-parameter lambda: 0.500000
Number of classes: 7
Number of feature dimensions: 500
Number of vertices: 89250
Number of GPUs: 8
        It takes 0.121 seconds.
Building the Label Vector...
        It takes 0.123 seconds.
Building the Label Vector...
        It takes 0.007 seconds.
        It takes 0.126 seconds.
Building the Label Vector...
        It takes 0.008 seconds.
        It takes 0.007 seconds.
GPU 0, layer [0, 3)
GPU 1, layer [3, 5)
GPU 2, layer [5, 7)
GPU 3, layer [7, 9)
GPU 4, layer [9, 11)
GPU 5, layer [11, 13)
GPU 6, layer [13, 15)
GPU 7, layer [15, 17)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
89250, 989006, 989006
Number of vertices per chunk: 2790
GPU 0, layer [0, 3)
GPU 1, layer [3, 5)
GPU 2, layer [5, 7)
GPU 3, layer [7, 9)
GPU 4, layer [9, 11)
GPU 5, layer [11, 13)
GPU 6, layer [13, 15)
GPU 7, layer [15, 17)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
89250, 989006, 989006
Number of vertices per chunk: 2790
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
GPU 0, layer [0, 3)
GPU 1, layer [3, 5)
GPU 2, layer [5, 7)
GPU 3, layer [7, 9)
GPU 4, layer [9, 11)
GPU 5, layer [11, 13)
GPU 6, layer [13, 15)
GPU 7, layer [15, 17)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
89250, 989006, 989006
Number of vertices per chunk: 2790
GPU 0, layer [0, 3)
GPU 1, layer [3, 5)
GPU 2, layer [5, 7)
GPU 3, layer [7, 9)
GPU 4, layer [9, 11)
GPU 5, layer [11, 13)
GPU 6, layer [13, 15)
GPU 7, layer [15, 17)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 3)
GPU 1, layer [3, 5)
GPU 2, layer [5, 7)
GPU 3, layer [7, 9)
GPU 4, layer [9, 11)
GPU 5, layer [11, 13)
GPU 6, layer [13, 15)
GPU 7, layer [15, 17)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 3)
GPU 1, layer [3, 5)
GPU 2, layer [5, 7)
GPU 3, layer [7, 9)
GPU 4, layer [9, 11)
GPU 5, layer [11, 13)
GPU 6, layer [13, 15)
GPU 7, layer [15, 17)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
89250, 989006, 989006
Number of vertices per chunk: 2790
89250, 989006, 989006
Number of vertices per chunk: 2790
89250, 989006, 989006
Number of vertices per chunk: 2790
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
train nodes 44625, valid nodes 22312, test nodes 22313
GPU 0, layer [0, 3)
GPU 1, layer [3, 5)
GPU 2, layer [5, 7)
GPU 3, layer [7, 9)
GPU 4, layer [9, 11)
GPU 5, layer [11, 13)
GPU 6, layer [13, 15)
GPU 7, layer [15, 17)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
Chunks (number of global chunks: 32): 0-[0, 2809) 1-[2809, 5626) 2-[5626, 8426) 3-[8426, 11230) 4-[11230, 14047) 5-[14047, 16800) 6-[16800, 19507) 7-[19507, 22266) 8-[22266, 25059) ... 31-[86469, 89250)
GPU 0, layer [0, 3)
GPU 1, layer [3, 5)
GPU 2, layer [5, 7)
GPU 3, layer [7, 9)
GPU 4, layer [9, 11)
GPU 5, layer [11, 13)
GPU 6, layer [13, 15)
GPU 7, layer [15, 17)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
89250, 989006, 989006
Number of vertices per chunk: 2790
89250, 989006, 989006
Number of vertices per chunk: 2790
csr in-out ready !Start Cost Model Initialization...
***** Start profiling the layer-level communication performance *******
csr in-out ready !Start Cost Model Initialization...
The layer-level communication performance: 60.435 Gbps (per GPU), 483.481 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 60.135 Gbps (per GPU), 481.079 Gbps (aggregated)
The layer-level communication performance: 60.126 Gbps (per GPU), 481.008 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 59.882 Gbps (per GPU), 479.056 Gbps (aggregated)
The layer-level communication performance: 59.851 Gbps (per GPU), 478.811 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 59.574 Gbps (per GPU), 476.593 Gbps (aggregated)
The layer-level communication performance: 59.542 Gbps (per GPU), 476.333 Gbps (aggregated)
The layer-level communication performance: 59.625 Gbps (per GPU), 476.999 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The graph-level communication performance (supernode = 2): 158.626 Gbps (per GPU), 1269.008 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.587 Gbps (per GPU), 1268.694 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.629 Gbps (per GPU), 1269.029 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.590 Gbps (per GPU), 1268.717 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.605 Gbps (per GPU), 1268.838 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.746 Gbps (per GPU), 1269.967 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.620 Gbps (per GPU), 1268.958 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.713 Gbps (per GPU), 1269.703 Gbps (aggregated, cluster-wide)
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
The graph-level communication performance (supernode = 4): 104.286 Gbps (per GPU), 834.286 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 104.285 Gbps (per GPU), 834.279 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 104.287 Gbps (per GPU), 834.293 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 104.287 Gbps (per GPU), 834.293 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 104.278 Gbps (per GPU), 834.224 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 104.276 Gbps (per GPU), 834.210 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 104.261 Gbps (per GPU), 834.086 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 104.208 Gbps (per GPU), 833.665 Gbps (aggregated, cluster-wide)
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
The graph-level communication performance (supernode = 8): 39.337 Gbps (per GPU), 314.693 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 39.339 Gbps (per GPU), 314.710 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 39.339 Gbps (per GPU), 314.716 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 39.336 Gbps (per GPU), 314.692 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 39.336 Gbps (per GPU), 314.687 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 39.333 Gbps (per GPU), 314.666 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 39.331 Gbps (per GPU), 314.651 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 39.332 Gbps (per GPU), 314.652 Gbps (aggregated, cluster-wide)
 LType   LT0   LT1   LT2 Ratio  VSum  ESum
 chk_0  0.42ms  0.36ms  0.52ms  1.46  2.81K  0.03M
 chk_1  0.42ms  0.36ms  0.53ms  1.46  2.82K  0.03M
 chk_2  0.41ms  0.36ms  0.53ms  1.45  2.80K  0.03M
 chk_3  0.41ms  0.36ms  0.53ms  1.45  2.80K  0.03M
 chk_4  0.41ms  0.36ms  0.53ms  1.45  2.82K  0.03M
 chk_5  0.41ms  0.37ms  0.53ms  1.45  2.75K  0.03M
 chk_6  0.41ms  0.36ms  0.52ms  1.46  2.71K  0.03M
 chk_7  0.41ms  0.36ms  0.53ms  1.45  2.76K  0.03M
 chk_8  0.41ms  0.36ms  0.53ms  1.45  2.79K  0.03M
 chk_9  0.41ms  0.36ms  0.53ms  1.46  2.81K  0.03M
chk_10  0.43ms  0.36ms  0.53ms  1.46  2.81K  0.03M
chk_11  0.41ms  0.37ms  0.53ms  1.44  2.74K  0.03M
chk_12  0.41ms  0.37ms  0.53ms  1.45  2.76K  0.03M
chk_13  0.41ms  0.36ms  0.53ms  1.45  2.75K  0.03M
chk_14  0.41ms  0.36ms  0.53ms  1.46  2.81K  0.03M
chk_15  0.41ms  0.36ms  0.52ms  1.46  2.77K  0.03M
chk_16  0.41ms  0.36ms  0.52ms  1.45  2.78K  0.03M
chk_17  0.41ms  0.37ms  0.53ms  1.45  2.79K  0.03M
chk_18  0.42ms  0.37ms  0.53ms  1.46  2.82K  0.03M
chk_19  0.41ms  0.35ms  0.52ms  1.47  2.81K  0.03M
chk_20  0.41ms  0.37ms  0.53ms  1.44  2.77K  0.03M
chk_21  0.42ms  0.36ms  0.53ms  1.45  2.84K  0.02M
chk_22  0.41ms  0.40ms  0.53ms  1.32  2.78K  0.03M
chk_23  0.42ms  0.36ms  0.53ms  1.46  2.80K  0.03M
chk_24  0.41ms  0.36ms  0.53ms  1.46  2.80K  0.03M
chk_25  0.42ms  0.36ms  0.53ms  1.46  2.81K  0.03M
chk_26  0.42ms  0.36ms  0.53ms  1.46  2.81K  0.03M
chk_27  0.41ms  0.36ms  0.53ms  1.46  2.79K  0.03M
chk_28  0.41ms  0.37ms  0.53ms  1.44  2.77K  0.03M
chk_29  0.41ms  0.36ms  0.52ms  1.46  2.77K  0.03M
chk_30  0.42ms  0.36ms  0.53ms  1.46  2.80K  0.03M
chk_31  0.41ms  0.36ms  0.53ms  1.46  2.78K  0.03M
   Avg  0.41  0.36  0.53
   Max  0.43  0.40  0.53
   Min  0.41  0.35  0.52
 Ratio  1.06  1.12  1.02
   Var  0.00  0.00  0.00
Profiling takes 0.616 s
*** Node 0, starting model training...
Num Stages: 8 / 8
Node 0, Pipeline Input Tensor: NULL
Node 0, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 0 owns the model-level partition [0, 20)
*** Node 0, constructing the helper classes...
Node 0, Local Vertex Begin: 0, Num Local Vertices: 89250
*** Node 4, starting model training...
Num Stages: 8 / 8
*** Node 1, starting model training...
Num Stages: 8 / 8
*** Node 5, starting model training...
Num Stages: 8 / 8
Node 5, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 5, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 5 owns the model-level partition [76, 90)
*** Node 5, constructing the helper classes...
Node 5, Local Vertex Begin: 0, Num Local Vertices: 89250
*** Node 2, starting model training...
Num Stages: 8 / 8
Node 2, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 2, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 2 owns the model-level partition [34, 48)
*** Node 2, constructing the helper classes...
Node 2, Local Vertex Begin: 0, Num Local Vertices: 89250
*** Node 6, starting model training...
Num Stages: 8 / 8
Node 6, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 6, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 6 owns the model-level partition [90, 104)
*** Node 6, constructing the helper classes...
Node 6, Local Vertex Begin: 0, Num Local Vertices: 89250
*** Node 3, starting model training...
Num Stages: 8 / 8
Node 3, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 3, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 3 owns the model-level partition [48, 62)
*** Node 3, constructing the helper classes...
Node 3, Local Vertex Begin: 0, Num Local Vertices: 89250
*** Node 7, starting model training...
Num Stages: 8 / 8
Node 7, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 7, Pipeline Output Tensor: NULL
*** Node 7 owns the model-level partition [104, 121)
*** Node 7, constructing the helper classes...
Node 7, Local Vertex Begin: 0, Num Local Vertices: 89250
Node 1, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 1, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 1 owns the model-level partition [20, 34)
*** Node 1, constructing the helper classes...
Node 1, Local Vertex Begin: 0, Num Local Vertices: 89250
Node 4, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 4, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 4 owns the model-level partition [62, 76)
*** Node 4, constructing the helper classes...
Node 4, Local Vertex Begin: 0, Num Local Vertices: 89250
*** Node 1, setting up some other necessary information...
*** Node 2, setting up some other necessary information...
*** Node 4, setting up some other necessary information...
*** Node 3, setting up some other necessary information...
*** Node 5, setting up some other necessary information...
*** Node 6, setting up some other necessary information...
*** Node 0, setting up some other necessary information...
*** Node 7, setting up some other necessary information...
+++++++++ Node 0 initializing the weights for op[0, 20)...
+++++++++ Node 4 initializing the weights for op[62, 76)...
+++++++++ Node 1 initializing the weights for op[20, 34)...
+++++++++ Node 5 initializing the weights for op[76, 90)...
+++++++++ Node 2 initializing the weights for op[34, 48)...
+++++++++ Node 6 initializing the weights for op[90, 104)...
+++++++++ Node 3 initializing the weights for op[48, 62)...
+++++++++ Node 7 initializing the weights for op[104, 121)...
Node 0, discovering the vertices that will be sent across graph boundary...
The number of mirror vertices: 0
Node 0, discovering the vertices that will be received across the graph boundary.
Node 1, discovering the vertices that will be sent across graph boundary...
Node 1, discovering the vertices that will be received across the graph boundary.
Node 4, discovering the vertices that will be sent across graph boundary...
Node 4, discovering the vertices that will be received across the graph boundary.
Node 2, discovering the vertices that will be sent across graph boundary...
Node 2, discovering the vertices that will be received across the graph boundary.
Node 5, discovering the vertices that will be sent across graph boundary...
Node 5, discovering the vertices that will be received across the graph boundary.
Node 6, discovering the vertices that will be sent across graph boundary...
Node 6, discovering the vertices that will be received across the graph boundary.
Node 3, discovering the vertices that will be sent across graph boundary...
Node 3, discovering the vertices that will be received across the graph boundary.
Node 7, discovering the vertices that will be sent across graph boundary...
Node 7, discovering the vertices that will be received across the graph boundary.
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
*** Node 4, starting task scheduling...
*** Node 5, starting task scheduling...
*** Node 6, starting task scheduling...
*** Node 7, starting task scheduling...
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
*** Node 0, starting task scheduling...



The learning rate specified by the user: 0.001000000
*** Node 1, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 2, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 3, starting task scheduling...
The learning rate specified by the user: 0.001000000
	Epoch 1:	Loss 2.3810	TrainAcc 0.0938	ValidAcc 0.0917	TestAcc 0.0898	BestValid 0.0917
	Epoch 50:	Loss 1.6211	TrainAcc 0.4676	ValidAcc 0.4684	TestAcc 0.4679	BestValid 0.4684
****** Epoch Time (Excluding Evaluation Cost): 0.064 s ******
****** Breakdown Analysis ******
Cluster-Wide Average, Bubble-Pipeline: 12.543 ms (Max: 13.506, Min: 10.771, Sum: 100.344)
Cluster-Wide Average, Compute: 27.839 ms (Max: 38.876, Min: 24.643, Sum: 222.708)
Cluster-Wide Average, Communication-Layer: 13.995 ms (Max: 16.552, Min: 10.541, Sum: 111.961)
Cluster-Wide Average, Bubble-Imbalance: 9.113 ms (Max: 12.607, Min: 2.035, Sum: 72.906)
Cluster-Wide Average, Communication-Graph: 0.226 ms (Max: 0.248, Min: 0.195, Sum: 1.810)
Cluster-Wide Average, Optimization: 0.050 ms (Max: 0.068, Min: 0.044, Sum: 0.402)
Cluster-Wide Average, Others: 0.790 ms (Max: 3.555, Min: 0.389, Sum: 6.318)
****** Breakdown Sum: 64.556 ms ******
Cluster-Wide Average, GPU Memory Consumption: 2.109 GB (Max: 3.130, Min: 1.948, Sum: 16.874)
Cluster-Wide Average, Graph-Level Communication Throughput: -nan Gbps (Max: -nan, Min: -nan, Sum: -nan)
Cluster-Wide Average, Layer-Level Communication Throughput: 70.511 Gbps (Max: 85.985, Min: 53.549, Sum: 564.086)
Layer-level communication (cluster-wide, per-epoch): 0.931 GB
Graph-level communication (cluster-wide, per-epoch): 0.000 GB
Weight-sync communication (cluster-wide, per-epoch): 0.000 GB
Total communication (cluster-wide, per-epoch): 0.931 GB
****** Accuracy Results ******
Highest valid_acc: 0.4684
Target test_acc: 0.4679
Epoch to reach the target acc: 49
[MPI Rank 0] Success 
[MPI Rank 4] Success 
[MPI Rank 1] Success 
[MPI Rank 5] Success 
[MPI Rank 2] Success 
[MPI Rank 6] Success 
[MPI Rank 3] Success 
[MPI Rank 7] Success 
