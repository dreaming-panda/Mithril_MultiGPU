Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
DONE MPI INIT
DONE MPI INITInitialized node 4 on machine gnerv4
DONE MPI INIT
Initialized node 6 on machine gnerv4
DONE MPI INIT
Initialized node 7 on machine gnerv4

Initialized node 5 on machine gnerv4
DONE MPI INIT
DONE MPI INITInitialized node 0 on machine gnerv2
DONE MPI INIT
DONE MPI INIT
Initialized node 3 on machine gnerv2
Initialized node 1 on machine gnerv2

Initialized node 2 on machine gnerv2
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
        It takes 0.007 seconds.
Building the CSC structure...
        It takes 0.009 seconds.
Building the CSC structure...
        It takes 0.009 seconds.
Building the CSC structure...
        It takes 0.008 seconds.
Building the CSC structure...
        It takes 0.011 seconds.
Building the CSC structure...
        It takes 0.009 seconds.
Building the CSC structure...
        It takes 0.011 seconds.
Building the CSC structure...
        It takes 0.012 seconds.
Building the CSC structure...
        It takes 0.009 seconds.
        It takes 0.008 seconds.
        It takes 0.008 seconds.
        It takes 0.008 seconds.
        It takes 0.008 seconds.
        It takes 0.009 seconds.
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
        It takes 0.010 seconds.
Building the Feature Vector...
        It takes 0.017 seconds.
Building the Feature Vector...
        It takes 0.029 seconds.
Building the Label Vector...
        It takes 0.000 seconds.
The graph dataset locates at /shared_hdd_storage/jingjichen/gnn_datasets/pipeline_parallel_datasets/squirrel/32_parts
The number of GCNII layers: 8
The number of hidden units: 1000
The number of training epoches: 50
Learning rate: 0.001000
The partition strategy: model
The dropout rate: 0.500
The checkpointed weight file: /tmp/saved_weights_pipe
The random seed: 1
GCN hyper-parameter alpha: 0.100000
GCN hyper-parameter lambda: 0.500000
Number of classes: 5
Number of feature dimensions: 2089
Number of vertices: 5201
Number of GPUs: 8
        It takes 0.033 seconds.
        It takes 0.026 seconds.
Building the Label Vector...
Building the Label Vector...
        It takes 0.000 seconds.
        It takes 0.000 seconds.
        It takes 0.027 seconds.
Building the Label Vector...
        It takes 0.000 seconds.
        It takes 0.072 seconds.
        It takes 0.073 seconds.
        It takes 0.072 seconds.
        It takes 0.071 seconds.
Building the Label Vector...
Building the Label Vector...
Building the Label Vector...
Building the Label Vector...
        It takes 0.001 seconds.
        It takes 0.001 seconds.
        It takes 0.001 seconds.
        It takes 0.001 seconds.
GPU 0, layer [0, 2)
GPU 1, layer [2, 3)
GPU 2, layer [3, 4)
GPU 3, layer [4, 5)
GPU 4, layer [5, 6)
GPU 5, layer [6, 7)
GPU 6, layer [7, 8)
GPU 7, layer [8, 9)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
5201, 401907, 401907
Number of vertices per chunk: 163
csr in-out ready !Start Cost Model Initialization...
GPU 0, layer [0, 2)
GPU 1, layer [2, 3)
GPU 2, layer [3, 4)
GPU 3, layer [4, 5)
GPU 4, layer [5, 6)
GPU 5, layer [6, 7)
GPU 6, layer [7, 8)
GPU 7, layer [8, 9)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
5201, 401907, 401907
Number of vertices per chunk: 163
csr in-out ready !Start Cost Model Initialization...
train nodes 2496, valid nodes 1664, test nodes 1041
GPU 0, layer [0, 2)
GPU 1, layer [2, 3)
GPU 2, layer [3, 4)
GPU 3, layer [4, 5)
GPU 4, layer [5, 6)
GPU 5, layer [6, 7)
GPU 6, layer [7, 8)
GPU 7, layer [8, 9)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
Chunks (number of global chunks: 32): 0-[0, 80) 1-[80, 237) 2-[237, 364) 3-[364, 546) 4-[546, 693) 5-[693, 945) 6-[945, 1041) 7-[1041, 1148) 8-[1148, 1376) ... 31-[5004, 5201)
5201, 401907, 401907
Number of vertices per chunk: 163
GPU 0, layer [0, 2)
GPU 1, layer [2, 3)
GPU 2, layer [3, 4)
GPU 3, layer [4, 5)
GPU 4, layer [5, 6)
GPU 5, layer [6, 7)
GPU 6, layer [7, 8)
GPU 7, layer [8, 9)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
5201, 401907, 401907
Number of vertices per chunk: 163
csr in-out ready !Start Cost Model Initialization...
***** Start profiling the layer-level communication performance *******
GPU 0, layer [0, 2)
GPU 1, layer [2, 3)
GPU 2, layer [3, 4)
GPU 3, layer [4, 5)
GPU 4, layer [5, 6)
GPU 5, layer [6, 7)
GPU 6, layer [7, 8)
GPU 7, layer [8, 9)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
csr in-out ready !Start Cost Model Initialization...
5201, 401907, 401907
Number of vertices per chunk: 163
GPU 0, layer [0, 2)
GPU 1, layer [2, 3)
GPU 2, layer [3, 4)
GPU 3, layer [4, 5)
GPU 4, layer [5, 6)
GPU 5, layer [6, 7)
GPU 6, layer [7, 8)
GPU 7, layer [8, 9)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
csr in-out ready !Start Cost Model Initialization...
5201, 401907, 401907
Number of vertices per chunk: 163
csr in-out ready !Start Cost Model Initialization...
GPU 0, layer [0, 2)
GPU 1, layer [2, 3)
GPU 2, layer [3, 4)
GPU 3, layer [4, 5)
GPU 4, layer [5, 6)
GPU 5, layer [6, 7)
GPU 6, layer [7, 8)
GPU 7, layer [8, 9)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
5201, 401907, 401907
Number of vertices per chunk: 163
csr in-out ready !Start Cost Model Initialization...
GPU 0, layer [0, 2)
GPU 1, layer [2, 3)
GPU 2, layer [3, 4)
GPU 3, layer [4, 5)
GPU 4, layer [5, 6)
GPU 5, layer [6, 7)
GPU 6, layer [7, 8)
GPU 7, layer [8, 9)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
5201, 401907, 401907
Number of vertices per chunk: 163
csr in-out ready !Start Cost Model Initialization...
The layer-level communication performance: 54.648 Gbps (per GPU), 437.186 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 54.418 Gbps (per GPU), 435.348 Gbps (aggregated)
The layer-level communication performance: 54.397 Gbps (per GPU), 435.176 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 54.208 Gbps (per GPU), 433.662 Gbps (aggregated)
The layer-level communication performance: 54.172 Gbps (per GPU), 433.379 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 53.984 Gbps (per GPU), 431.875 Gbps (aggregated)
The layer-level communication performance: 53.948 Gbps (per GPU), 431.585 Gbps (aggregated)
The layer-level communication performance: 53.917 Gbps (per GPU), 431.339 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The graph-level communication performance (supernode = 2): 156.329 Gbps (per GPU), 1250.634 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 156.312 Gbps (per GPU), 1250.492 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 156.320 Gbps (per GPU), 1250.561 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 156.309 Gbps (per GPU), 1250.469 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 156.329 Gbps (per GPU), 1250.631 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 156.306 Gbps (per GPU), 1250.445 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 156.329 Gbps (per GPU), 1250.631 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 156.308 Gbps (per GPU), 1250.468 Gbps (aggregated, cluster-wide)
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
The graph-level communication performance (supernode = 4): 78.953 Gbps (per GPU), 631.625 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 78.954 Gbps (per GPU), 631.629 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 78.956 Gbps (per GPU), 631.645 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 78.954 Gbps (per GPU), 631.633 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 78.955 Gbps (per GPU), 631.641 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 78.955 Gbps (per GPU), 631.637 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 78.890 Gbps (per GPU), 631.118 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 78.900 Gbps (per GPU), 631.196 Gbps (aggregated, cluster-wide)
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
The graph-level communication performance (supernode = 8): 29.745 Gbps (per GPU), 237.959 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 29.744 Gbps (per GPU), 237.951 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 29.744 Gbps (per GPU), 237.953 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 29.742 Gbps (per GPU), 237.937 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 29.742 Gbps (per GPU), 237.935 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 29.743 Gbps (per GPU), 237.945 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 29.739 Gbps (per GPU), 237.914 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 29.734 Gbps (per GPU), 237.873 Gbps (aggregated, cluster-wide)
 LType   LT0   LT1   LT2 Ratio  VSum  ESum
 chk_0  0.36ms  0.43ms  0.56ms  1.57  0.08K  0.02M
 chk_1  0.44ms  0.46ms  0.60ms  1.36  0.16K  0.01M
 chk_2  0.40ms  0.43ms  0.57ms  1.43  0.13K  0.01M
 chk_3  0.46ms  0.49ms  0.64ms  1.38  0.18K  0.01M
 chk_4  0.44ms  0.46ms  0.60ms  1.36  0.15K  0.01M
 chk_5  0.52ms  0.50ms  0.64ms  1.28  0.25K  0.01M
 chk_6  0.36ms  0.43ms  0.57ms  1.58  0.10K  0.02M
 chk_7  0.40ms  0.45ms  0.58ms  1.48  0.11K  0.02M
 chk_8  0.51ms  0.50ms  0.64ms  1.28  0.23K  0.01M
 chk_9  0.43ms  0.46ms  0.59ms  1.37  0.14K  0.01M
chk_10  0.50ms  0.50ms  0.64ms  1.29  0.20K  0.01M
chk_11  0.36ms  0.43ms  0.57ms  1.58  0.09K  0.02M
chk_12  0.45ms  0.46ms  0.60ms  1.35  0.16K  0.01M
chk_13  0.45ms  0.46ms  0.60ms  1.35  0.16K  0.01M
chk_14  0.44ms  0.46ms  0.59ms  1.36  0.14K  0.01M
chk_15  0.51ms  0.50ms  0.64ms  1.28  0.21K  0.01M
chk_16  0.47ms  0.50ms  0.64ms  1.35  0.18K  0.01M
chk_17  0.57ms  0.50ms  0.65ms  1.30  0.29K  0.01M
chk_18  0.58ms  0.51ms  0.65ms  1.28  0.31K  0.00M
chk_19  0.40ms  0.44ms  0.57ms  1.45  0.13K  0.01M
chk_20  0.40ms  0.44ms  0.57ms  1.45  0.13K  0.01M
chk_21  0.46ms  0.50ms  0.64ms  1.38  0.18K  0.01M
chk_22  0.40ms  0.43ms  0.57ms  1.43  0.13K  0.01M
chk_23  0.45ms  0.49ms  0.63ms  1.40  0.16K  0.01M
chk_24  0.36ms  0.43ms  0.56ms  1.57  0.09K  0.02M
chk_25  0.36ms  0.43ms  0.57ms  1.60  0.09K  0.02M
chk_26  0.46ms  0.49ms  0.64ms  1.38  0.18K  0.01M
chk_27  0.40ms  0.43ms  0.57ms  1.44  0.13K  0.01M
chk_28  0.46ms  0.49ms  0.63ms  1.38  0.17K  0.01M
chk_29  0.44ms  0.46ms  0.60ms  1.37  0.15K  0.01M
chk_30  0.51ms  0.50ms  0.64ms  1.28  0.24K  0.01M
chk_31  0.50ms  0.49ms  0.63ms  1.29  0.20K  0.01M
   Avg  0.44  0.47  0.61
   Max  0.58  0.51  0.65
   Min  0.36  0.43  0.56
 Ratio  1.62  1.18  1.15
   Var  0.00  0.00  0.00
Profiling takes 0.687 s
*** Node 0, starting model training...
Num Stages: 8 / 8
Node 0, Pipeline Input Tensor: NULL
Node 0, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 0 owns the model-level partition [0, 13)
*** Node 0, constructing the helper classes...
Node 0, Local Vertex Begin: 0, Num Local Vertices: 5201
*** Node 1, starting model training...
Num Stages: 8 / 8
Node 1, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 1, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 1 owns the model-level partition [13, 20)
*** Node 1, constructing the helper classes...
Node 1, Local Vertex Begin: 0, Num Local Vertices: 5201
*** Node 2, starting model training...
Num Stages: 8 / 8
Node 2, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 2, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 2 owns the model-level partition [20, 27)
*** Node 2, constructing the helper classes...
Node 2, Local Vertex Begin: 0, Num Local Vertices: 5201
*** Node 4, starting model training...
Num Stages: 8 / 8
Node 4, Pipeline Input Tensor: OPERATOR_DROPOUT
*** Node 5, starting model training...
Num Stages: 8 / 8
Node 5, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 5, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 5 owns the model-level partition [41, 48)
*** Node 5, constructing the helper classes...
Node 5, Local Vertex Begin: 0, Num Local Vertices: 5201
*** Node 3, starting model training...
Num Stages: 8 / 8
Node 3, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 3, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 3 owns the model-level partition [27, 34)
*** Node 3, constructing the helper classes...
Node 3, Local Vertex Begin: 0, Num Local Vertices: 5201
*** Node 6, starting model training...
Num Stages: 8 / 8
Node 6, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 6, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 6 owns the model-level partition [48, 55)
*** Node 6, constructing the helper classes...
Node 6, Local Vertex Begin: 0, Num Local Vertices: 5201
*** Node 7, starting model training...
Num Stages: 8 / 8
Node 7, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 7, Pipeline Output Tensor: NULL
*** Node 7 owns the model-level partition [55, 65)
*** Node 7, constructing the helper classes...
Node 7, Local Vertex Begin: 0, Num Local Vertices: 5201
Node 4, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 4 owns the model-level partition [34, 41)
*** Node 4, constructing the helper classes...
Node 4, Local Vertex Begin: 0, Num Local Vertices: 5201
*** Node 5, setting up some other necessary information...
*** Node 6, setting up some other necessary information...
*** Node 7, setting up some other necessary information...
*** Node 4, setting up some other necessary information...
*** Node 1, setting up some other necessary information...
*** Node 0, setting up some other necessary information...
*** Node 3, setting up some other necessary information...
*** Node 2, setting up some other necessary information...
+++++++++ Node 4 initializing the weights for op[34, 41)...
+++++++++ Node 7 initializing the weights for op[55, 65)...
+++++++++ Node 0 initializing the weights for op[0, 13)...
+++++++++ Node 1 initializing the weights for op[13, 20)...
+++++++++ Node 2 initializing the weights for op[20, 27)...
+++++++++ Node 3 initializing the weights for op[27, 34)...
+++++++++ Node 5 initializing the weights for op[41, 48)...
+++++++++ Node 6 initializing the weights for op[48, 55)...
Node 0, discovering the vertices that will be sent across graph boundary...
Node 5, discovering the vertices that will be sent across graph boundary...
Node 2, discovering the vertices that will be sent across graph boundary...
Node 4, discovering the vertices that will be sent across graph boundary...
Node 1, discovering the vertices that will be sent across graph boundary...
Node 7, discovering the vertices that will be sent across graph boundary...
Node 3, discovering the vertices that will be sent across graph boundary...
Node 6, discovering the vertices that will be sent across graph boundary...
The number of mirror vertices: 0
Node 0, discovering the vertices that will be received across the graph boundary.
Node 4, discovering the vertices that will be received across the graph boundary.
Node 1, discovering the vertices that will be received across the graph boundary.
Node 5, discovering the vertices that will be received across the graph boundary.
Node 2, discovering the vertices that will be received across the graph boundary.
Node 6, discovering the vertices that will be received across the graph boundary.
Node 3, discovering the vertices that will be received across the graph boundary.
Node 7, discovering the vertices that will be received across the graph boundary.
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
*** Node 0, starting task scheduling...



*** Node 4, starting task scheduling...
*** Node 1, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 5, starting task scheduling...
*** Node 2, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 6, starting task scheduling...
*** Node 3, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 7, starting task scheduling...
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
	Epoch 1:	Loss 1.6107	TrainAcc 0.2003	ValidAcc 0.2007	TestAcc 0.1979	BestValid 0.2007
	Epoch 50:	Loss 1.0749	TrainAcc 0.6506	ValidAcc 0.3347	TestAcc 0.3295	BestValid 0.3347
****** Epoch Time (Excluding Evaluation Cost): 0.048 s ******
****** Breakdown Analysis ******
Cluster-Wide Average, Bubble-Pipeline: 8.092 ms (Max: 9.089, Min: 6.846, Sum: 64.734)
Cluster-Wide Average, Compute: 18.561 ms (Max: 30.640, Min: 15.966, Sum: 148.484)
Cluster-Wide Average, Communication-Layer: 9.436 ms (Max: 11.031, Min: 7.464, Sum: 75.485)
Cluster-Wide Average, Bubble-Imbalance: 10.544 ms (Max: 13.630, Min: 1.579, Sum: 84.349)
Cluster-Wide Average, Communication-Graph: 0.118 ms (Max: 0.126, Min: 0.103, Sum: 0.943)
Cluster-Wide Average, Optimization: 0.312 ms (Max: 0.790, Min: 0.236, Sum: 2.494)
Cluster-Wide Average, Others: 0.786 ms (Max: 1.731, Min: 0.219, Sum: 6.290)
****** Breakdown Sum: 47.847 ms ******
Cluster-Wide Average, GPU Memory Consumption: 1.638 GB (Max: 2.448, Min: 1.508, Sum: 13.101)
Cluster-Wide Average, Graph-Level Communication Throughput: -nan Gbps (Max: -nan, Min: -nan, Sum: -nan)
Cluster-Wide Average, Layer-Level Communication Throughput: 60.834 Gbps (Max: 72.301, Min: 44.285, Sum: 486.672)
Layer-level communication (cluster-wide, per-epoch): 0.543 GB
Graph-level communication (cluster-wide, per-epoch): 0.000 GB
Weight-sync communication (cluster-wide, per-epoch): 0.000 GB
Total communication (cluster-wide, per-epoch): 0.543 GB
****** Accuracy Results ******
Highest valid_acc: 0.3347
Target test_acc: 0.3295
Epoch to reach the target acc: 49
[MPI Rank 0] Success 
[MPI Rank 1] Success 
[MPI Rank 4] Success 
[MPI Rank 2] Success 
[MPI Rank 5] Success 
[MPI Rank 3] Success 
[MPI Rank 6] Success 
[MPI Rank 7] Success 
