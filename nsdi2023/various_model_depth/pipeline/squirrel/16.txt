Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
DONE MPI INITDONE MPI INIT
Initialized node 2 on machine gnerv2
DONE MPI INIT
Initialized node 0 on machine gnerv2

Initialized node 1 on machine gnerv2
DONE MPI INIT
Initialized node 3 on machine gnerv2
DONE MPI INIT
DONE MPI INITDONE MPI INIT
Initialized node 6 on machine gnerv4
DONE MPI INIT
Initialized node 7 on machine gnerv4
Initialized node 4 on machine gnerv4

Initialized node 5 on machine gnerv4
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
        It takes 0.008 seconds.
Building the CSC structure...
        It takes 0.008 seconds.
Building the CSC structure...
        It takes 0.009 seconds.
Building the CSC structure...
        It takes 0.009 seconds.
Building the CSC structure...
        It takes 0.009 seconds.
Building the CSC structure...
        It takes 0.015 seconds.
Building the CSC structure...
        It takes 0.008 seconds.
        It takes 0.017 seconds.
Building the CSC structure...
        It takes 0.017 seconds.
Building the CSC structure...
        It takes 0.008 seconds.
        It takes 0.008 seconds.
        It takes 0.008 seconds.
        It takes 0.008 seconds.
Building the Feature Vector...
Building the Feature Vector...
        It takes 0.006 seconds.
        It takes 0.008 seconds.
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
        It takes 0.011 seconds.
Building the Feature Vector...
Building the Feature Vector...
        It takes 0.026 seconds.
Building the Label Vector...
        It takes 0.000 seconds.
        It takes 0.027 seconds.
Building the Label Vector...
        It takes 0.000 seconds.
The graph dataset locates at /shared_hdd_storage/jingjichen/gnn_datasets/pipeline_parallel_datasets/squirrel/32_parts
The number of GCNII layers: 16
The number of hidden units: 1000
The number of training epoches: 50
Learning rate: 0.001000
The partition strategy: model
The dropout rate: 0.500
The checkpointed weight file: /tmp/saved_weights_pipe
The random seed: 1
GCN hyper-parameter alpha: 0.100000
GCN hyper-parameter lambda: 0.500000
Number of classes: 5
Number of feature dimensions: 2089
Number of vertices: 5201
Number of GPUs: 8
        It takes 0.026 seconds.
Building the Label Vector...
        It takes 0.000 seconds.
        It takes 0.026 seconds.
Building the Label Vector...
        It takes 0.000 seconds.
        It takes 0.030 seconds.
Building the Label Vector...
        It takes 0.000 seconds.
        It takes 0.026 seconds.
Building the Label Vector...
        It takes 0.000 seconds.
        It takes 0.034 seconds.
        It takes 0.031 seconds.
Building the Label Vector...
Building the Label Vector...
        It takes 0.000 seconds.
        It takes 0.000 seconds.
GPU 0, layer [0, 3)
GPU 1, layer [3, 5)
GPU 2, layer [5, 7)
GPU 3, layer [7, 9)
GPU 4, layer [9, 11)
GPU 5, layer [11, 13)
GPU 6, layer [13, 15)
GPU 7, layer [15, 17)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
5201, 401907, 401907
Number of vertices per chunk: 163
csr in-out ready !Start Cost Model Initialization...
GPU 0, layer [0, 3)
GPU 1, layer [3, 5)
GPU 2, layer [5, 7)
GPU 3, layer [7, 9)
GPU 4, layer [9, 11)
GPU 5, layer [11, 13)
GPU 6, layer [13, 15)
GPU 7, layer [15, 17)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 3)
GPU 1, layer [3, 5)
GPU 2, layer [5, 7)
GPU 3, layer [7, 9)
GPU 4, layer [9, 11)
GPU 5, layer [11, 13)
GPU 6, layer [13, 15)
GPU 7, layer [15, 17)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
5201, 401907, 401907
Number of vertices per chunk: 163
5201, 401907, 401907
Number of vertices per chunk: 163
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
train nodes 2496, valid nodes 1664, test nodes 1041
GPU 0, layer [0, 3)
GPU 1, layer [3, 5)
GPU 2, layer [5, 7)
GPU 3, layer [7, 9)
GPU 4, layer [9, 11)
GPU 5, layer [11, 13)
GPU 6, layer [13, 15)
GPU 7, layer [15, 17)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
Chunks (number of global chunks: 32): 0-[0, 80) 1-[80, 237) 2-[237, 364) 3-[364, 546) 4-[546, 693) 5-[693, 945) 6-[945, 1041) 7-[1041, 1148) 8-[1148, 1376) ... 31-[5004, 5201)
5201, 401907, 401907
Number of vertices per chunk: 163
GPU 0, layer [0, 3)
GPU 1, layer [3, 5)
GPU 2, layer [5, 7)
GPU 3, layer [7, 9)
GPU 4, layer [9, 11)
GPU 5, layer [11, 13)
GPU 6, layer [13, 15)
GPU 7, layer [15, 17)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
5201, 401907, 401907
csr in-out ready !Start Cost Model Initialization...
***** Start profiling the layer-level communication performance *******
Number of vertices per chunk: 163
GPU 0, layer [0, 3)
GPU 1, layer [3, 5)
GPU 2, layer [5, 7)
GPU 3, layer [7, 9)
GPU 4, layer [9, 11)
GPU 5, layer [11, 13)
GPU 6, layer [13, 15)
GPU 7, layer [15, 17)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
csr in-out ready !Start Cost Model Initialization...
5201, 401907, 401907
Number of vertices per chunk: 163
csr in-out ready !Start Cost Model Initialization...
GPU 0, layer [0, 3)
GPU 1, layer [3, 5)
GPU 2, layer [5, 7)
GPU 3, layer [7, 9)
GPU 4, layer [9, 11)
GPU 5, layer [11, 13)
GPU 6, layer [13, 15)
GPU 7, layer [15, 17)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
5201, 401907, 401907
GPU 0, layer [0, 3)
GPU 1, layer [3, 5)
GPU 2, layer [5, 7)
GPU 3, layer [7, 9)
GPU 4, layer [9, 11)
GPU 5, layer [11, 13)
GPU 6, layer [13, 15)
GPU 7, layer [15, 17)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
Number of vertices per chunk: 163
5201, 401907, 401907
Number of vertices per chunk: 163
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
The layer-level communication performance: 59.619 Gbps (per GPU), 476.954 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 59.328 Gbps (per GPU), 474.625 Gbps (aggregated)
The layer-level communication performance: 59.318 Gbps (per GPU), 474.547 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 59.084 Gbps (per GPU), 472.676 Gbps (aggregated)
The layer-level communication performance: 59.049 Gbps (per GPU), 472.392 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 58.834 Gbps (per GPU), 470.668 Gbps (aggregated)
The layer-level communication performance: 58.793 Gbps (per GPU), 470.347 Gbps (aggregated)
The layer-level communication performance: 58.758 Gbps (per GPU), 470.064 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The graph-level communication performance (supernode = 2): 155.714 Gbps (per GPU), 1245.710 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 155.671 Gbps (per GPU), 1245.367 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 155.693 Gbps (per GPU), 1245.548 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 155.688 Gbps (per GPU), 1245.507 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 155.708 Gbps (per GPU), 1245.665 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 155.670 Gbps (per GPU), 1245.363 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 155.708 Gbps (per GPU), 1245.663 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 155.685 Gbps (per GPU), 1245.478 Gbps (aggregated, cluster-wide)
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
The graph-level communication performance (supernode = 4): 101.369 Gbps (per GPU), 810.951 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 101.368 Gbps (per GPU), 810.943 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 101.369 Gbps (per GPU), 810.951 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 101.357 Gbps (per GPU), 810.859 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 101.365 Gbps (per GPU), 810.918 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 101.336 Gbps (per GPU), 810.689 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 101.368 Gbps (per GPU), 810.944 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 101.368 Gbps (per GPU), 810.944 Gbps (aggregated, cluster-wide)
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
The graph-level communication performance (supernode = 8): 33.865 Gbps (per GPU), 270.918 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 33.861 Gbps (per GPU), 270.887 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 33.866 Gbps (per GPU), 270.924 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 33.859 Gbps (per GPU), 270.875 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 33.865 Gbps (per GPU), 270.917 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 33.858 Gbps (per GPU), 270.863 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 33.864 Gbps (per GPU), 270.912 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 33.861 Gbps (per GPU), 270.890 Gbps (aggregated, cluster-wide)
 LType   LT0   LT1   LT2 Ratio  VSum  ESum
 chk_0  0.36ms  0.43ms  0.57ms  1.59  0.08K  0.02M
 chk_1  0.45ms  0.46ms  0.61ms  1.36  0.16K  0.01M
 chk_2  0.40ms  0.44ms  0.58ms  1.43  0.13K  0.01M
 chk_3  0.46ms  0.50ms  0.64ms  1.38  0.18K  0.01M
 chk_4  0.44ms  0.46ms  0.60ms  1.36  0.15K  0.01M
 chk_5  0.52ms  0.51ms  0.65ms  1.28  0.25K  0.01M
 chk_6  0.36ms  0.43ms  0.57ms  1.58  0.10K  0.02M
 chk_7  0.40ms  0.45ms  0.59ms  1.47  0.11K  0.02M
 chk_8  0.51ms  0.50ms  0.65ms  1.29  0.23K  0.01M
 chk_9  0.44ms  0.46ms  0.60ms  1.37  0.14K  0.01M
chk_10  0.50ms  0.50ms  0.64ms  1.29  0.20K  0.01M
chk_11  0.36ms  0.43ms  0.57ms  1.57  0.09K  0.02M
chk_12  0.45ms  0.46ms  0.61ms  1.35  0.16K  0.01M
chk_13  0.45ms  0.46ms  0.60ms  1.35  0.16K  0.01M
chk_14  0.44ms  0.46ms  0.60ms  1.37  0.14K  0.01M
chk_15  0.51ms  0.50ms  0.64ms  1.29  0.21K  0.01M
chk_16  0.46ms  0.50ms  0.64ms  1.38  0.18K  0.01M
chk_17  0.57ms  0.50ms  0.65ms  1.30  0.29K  0.01M
chk_18  0.58ms  0.51ms  0.65ms  1.29  0.31K  0.00M
chk_19  0.40ms  0.44ms  0.58ms  1.45  0.13K  0.01M
chk_20  0.40ms  0.44ms  0.58ms  1.45  0.13K  0.01M
chk_21  0.46ms  0.50ms  0.64ms  1.38  0.18K  0.01M
chk_22  0.40ms  0.44ms  0.58ms  1.44  0.13K  0.01M
chk_23  0.46ms  0.49ms  0.64ms  1.40  0.16K  0.01M
chk_24  0.36ms  0.43ms  0.57ms  1.58  0.09K  0.02M
chk_25  0.36ms  0.43ms  0.57ms  1.59  0.09K  0.02M
chk_26  0.46ms  0.49ms  0.64ms  1.38  0.18K  0.01M
chk_27  0.40ms  0.44ms  0.58ms  1.44  0.13K  0.01M
chk_28  0.46ms  0.49ms  0.64ms  1.39  0.17K  0.01M
chk_29  0.45ms  0.46ms  0.61ms  1.36  0.15K  0.01M
chk_30  0.52ms  0.50ms  0.65ms  1.29  0.24K  0.01M
chk_31  0.51ms  0.50ms  0.64ms  1.29  0.20K  0.01M
   Avg  0.45  0.47  0.61
   Max  0.58  0.51  0.65
   Min  0.36  0.43  0.57
 Ratio  1.64  1.18  1.15
   Var  0.00  0.00  0.00
Profiling takes 0.689 s
*** Node 0, starting model training...
Num Stages: 8 / 8
Node 0, Pipeline Input Tensor: NULL
Node 0, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 0 owns the model-level partition [0, 20)
*** Node 0, constructing the helper classes...
Node 0, Local Vertex Begin: 0, Num Local Vertices: 5201
*** Node 4, starting model training...
Num Stages: 8 / 8
*** Node 1, starting model training...
Num Stages: 8 / 8
Node 1, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 1, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 1 owns the model-level partition [20, 34)
*** Node 1, constructing the helper classes...
Node 1, Local Vertex Begin: 0, Num Local Vertices: 5201
*** Node 5, starting model training...
Num Stages: 8 / 8
Node 5, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 5, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 5 owns the model-level partition [76, 90)
*** Node 5, constructing the helper classes...
Node 5, Local Vertex Begin: 0, Num Local Vertices: 5201
*** Node 2, starting model training...
Num Stages: 8 / 8
Node 2, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 2, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 2 owns the model-level partition [34, 48)
*** Node 2, constructing the helper classes...
Node 2, Local Vertex Begin: 0, Num Local Vertices: 5201
*** Node 6, starting model training...
Num Stages: 8 / 8
Node 6, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 6, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 6 owns the model-level partition [90, 104)
*** Node 6, constructing the helper classes...
Node 6, Local Vertex Begin: 0, Num Local Vertices: 5201
*** Node 3, starting model training...
Num Stages: 8 / 8
*** Node 7, starting model training...
Num Stages: 8 / 8
Node 7, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 7, Pipeline Output Tensor: NULL
*** Node 7 owns the model-level partition [104, 121)
*** Node 7, constructing the helper classes...
Node 7, Local Vertex Begin: 0, Num Local Vertices: 5201
Node 3, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 3, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 3 owns the model-level partition [48, 62)
*** Node 3, constructing the helper classes...
Node 4, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 4, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 4 owns the model-level partition [62, 76)
*** Node 4, constructing the helper classes...
Node 4, Local Vertex Begin: 0, Num Local Vertices: 5201
Node 3, Local Vertex Begin: 0, Num Local Vertices: 5201
*** Node 5, setting up some other necessary information...
*** Node 4, setting up some other necessary information...
*** Node 7, setting up some other necessary information...
*** Node 6, setting up some other necessary information...
*** Node 1, setting up some other necessary information...
*** Node 0, setting up some other necessary information...
*** Node 2, setting up some other necessary information...
*** Node 3, setting up some other necessary information...
+++++++++ Node 6 initializing the weights for op[90, 104)...
+++++++++ Node 2 initializing the weights for op[34, 48)...
+++++++++ Node 7 initializing the weights for op[104, 121)...
+++++++++ Node 1 initializing the weights for op[20, 34)...
+++++++++ Node 4 initializing the weights for op[62, 76)...
+++++++++ Node 5 initializing the weights for op[76, 90)...
+++++++++ Node 0 initializing the weights for op[0, 20)...
+++++++++ Node 3 initializing the weights for op[48, 62)...
Node 1, discovering the vertices that will be sent across graph boundary...
Node 4, discovering the vertices that will be sent across graph boundary...
Node 3, discovering the vertices that will be sent across graph boundary...
Node 3, discovering the vertices that will be received across the graph boundary.
Node 6, discovering the vertices that will be sent across graph boundary...
Node 6, discovering the vertices that will be received across the graph boundary.
Node 0, discovering the vertices that will be sent across graph boundary...
The number of mirror vertices: 0
Node 0, discovering the vertices that will be received across the graph boundary.
Node 7, discovering the vertices that will be sent across graph boundary...
Node 7, discovering the vertices that will be received across the graph boundary.
Node 1, discovering the vertices that will be received across the graph boundary.
Node 4, discovering the vertices that will be received across the graph boundary.
Node 2, discovering the vertices that will be sent across graph boundary...
Node 2, discovering the vertices that will be received across the graph boundary.
Node 5, discovering the vertices that will be sent across graph boundary...
Node 5, discovering the vertices that will be received across the graph boundary.
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
*** Node 0, starting task scheduling...



The learning rate specified by the user: 0.001000000
*** Node 4, starting task scheduling...
*** Node 1, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 5, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 2, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 6, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 3, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 7, starting task scheduling...
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
	Epoch 1:	Loss 1.6347	TrainAcc 0.2023	ValidAcc 0.2031	TestAcc 0.1969	BestValid 0.2031
	Epoch 50:	Loss 1.2074	TrainAcc 0.5809	ValidAcc 0.3347	TestAcc 0.3391	BestValid 0.3347
****** Epoch Time (Excluding Evaluation Cost): 0.068 s ******
****** Breakdown Analysis ******
Cluster-Wide Average, Bubble-Pipeline: 11.512 ms (Max: 12.629, Min: 10.053, Sum: 92.095)
Cluster-Wide Average, Compute: 33.183 ms (Max: 45.968, Min: 29.750, Sum: 265.466)
Cluster-Wide Average, Communication-Layer: 10.096 ms (Max: 11.402, Min: 7.867, Sum: 80.768)
Cluster-Wide Average, Bubble-Imbalance: 11.624 ms (Max: 14.510, Min: 1.811, Sum: 92.996)
Cluster-Wide Average, Communication-Graph: 0.241 ms (Max: 0.269, Min: 0.198, Sum: 1.932)
Cluster-Wide Average, Optimization: 0.551 ms (Max: 1.036, Min: 0.467, Sum: 4.407)
Cluster-Wide Average, Others: 0.828 ms (Max: 1.817, Min: 0.350, Sum: 6.622)
****** Breakdown Sum: 68.036 ms ******
Cluster-Wide Average, GPU Memory Consumption: 2.118 GB (Max: 2.985, Min: 1.981, Sum: 16.946)
Cluster-Wide Average, Graph-Level Communication Throughput: -nan Gbps (Max: -nan, Min: -nan, Sum: -nan)
Cluster-Wide Average, Layer-Level Communication Throughput: 56.801 Gbps (Max: 68.005, Min: 39.426, Sum: 454.411)
Layer-level communication (cluster-wide, per-epoch): 0.543 GB
Graph-level communication (cluster-wide, per-epoch): 0.000 GB
Weight-sync communication (cluster-wide, per-epoch): 0.000 GB
Total communication (cluster-wide, per-epoch): 0.543 GB
****** Accuracy Results ******
Highest valid_acc: 0.3347
Target test_acc: 0.3391
Epoch to reach the target acc: 49
[MPI Rank 4] Success 
[MPI Rank 0] Success 
[MPI Rank 5] Success 
[MPI Rank 1] Success 
[MPI Rank 6] Success 
[MPI Rank 2] Success 
[MPI Rank 7] Success 
[MPI Rank 3] Success 
