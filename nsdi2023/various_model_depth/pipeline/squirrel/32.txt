Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
DONE MPI INITDONE MPI INIT
Initialized node 2 on machine gnerv7
DONE MPI INIT
DONE MPI INIT
Initialized node 1 on machine gnerv7
Initialized node 3 on machine gnerv7

Initialized node 0 on machine gnerv7
DONE MPI INITDONE MPI INIT
Initialized node 7 on machine gnerv8
DONE MPI INIT
Initialized node 4 on machine gnerv8
DONE MPI INIT
Initialized node 6 on machine gnerv8

Initialized node 5 on machine gnerv8
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
        It takes 0.008 seconds.
Building the CSC structure...
        It takes 0.008 seconds.
Building the CSC structure...
        It takes 0.009 seconds.
Building the CSC structure...
        It takes 0.011 seconds.
Building the CSC structure...
        It takes 0.012 seconds.
Building the CSC structure...
        It takes 0.012 seconds.
Building the CSC structure...
        It takes 0.011 seconds.
Building the CSC structure...
        It takes 0.012 seconds.
Building the CSC structure...
        It takes 0.008 seconds.
        It takes 0.008 seconds.
        It takes 0.009 seconds.
        It takes 0.008 seconds.
Building the Feature Vector...
        It takes 0.009 seconds.
Building the Feature Vector...
        It takes 0.010 seconds.
Building the Feature Vector...
        It takes 0.011 seconds.
        It takes 0.013 seconds.
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
        It takes 0.025 seconds.
Building the Label Vector...
        It takes 0.000 seconds.
        It takes 0.026 seconds.
Building the Label Vector...
        It takes 0.000 seconds.
        It takes 0.027 seconds.
Building the Label Vector...
        It takes 0.000 seconds.
The graph dataset locates at /shared_hdd_storage/jingjichen/gnn_datasets/pipeline_parallel_datasets/squirrel/32_parts
The number of GCNII layers: 32
The number of hidden units: 1000
The number of training epoches: 50
Learning rate: 0.001000
The partition strategy: model
The dropout rate: 0.500
The checkpointed weight file: /tmp/saved_weights_pipe
The random seed: 1
GCN hyper-parameter alpha: 0.100000
GCN hyper-parameter lambda: 0.500000
Number of classes: 5
Number of feature dimensions: 2089
Number of vertices: 5201
Number of GPUs: 8
        It takes 0.026 seconds.
Building the Label Vector...
        It takes 0.000 seconds.
        It takes 0.027 seconds.
Building the Label Vector...
        It takes 0.000 seconds.
        It takes 0.028 seconds.
Building the Label Vector...
        It takes 0.000 seconds.
        It takes 0.029 seconds.
Building the Label Vector...
        It takes 0.000 seconds.
        It takes 0.030 seconds.
Building the Label Vector...
        It takes 0.000 seconds.
GPU 0, layer [0, 5)
GPU 1, layer [5, 9)
GPU 2, layer [9, 13)
GPU 3, layer [13, 17)
GPU 4, layer [17, 21)
GPU 5, layer [21, 25)
GPU 6, layer [25, 29)
GPU 7, layer [29, 33)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
5201, 401907, 401907
Number of vertices per chunk: 163
GPU 0, layer [0, 5)
GPU 1, layer [5, 9)
GPU 2, layer [9, 13)
GPU 3, layer [13, 17)
GPU 4, layer [17, 21)
GPU 5, layer [21, 25)
GPU 6, layer [25, 29)
GPU 7, layer [29, 33)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
csr in-out ready !Start Cost Model Initialization...
5201, 401907, 401907
Number of vertices per chunk: 163
csr in-out ready !Start Cost Model Initialization...
GPU 0, layer [0, 5)
GPU 1, layer [5, 9)
GPU 2, layer [9, 13)
GPU 3, layer [13, 17)
GPU 4, layer [17, 21)
GPU 5, layer [21, 25)
GPU 6, layer [25, 29)
GPU 7, layer [29, 33)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
5201, 401907, 401907
Number of vertices per chunk: 163
GPU 0, layer [0, 5)
GPU 1, layer [5, 9)
GPU 2, layer [9, 13)
GPU 3, layer [13, 17)
GPU 4, layer [17, 21)
GPU 5, layer [21, 25)
GPU 6, layer [25, 29)
GPU 7, layer [29, 33)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 5)
GPU 1, layer [5, 9)
GPU 2, layer [9, 13)
GPU 3, layer [13, 17)
GPU 4, layer [17, 21)
GPU 5, layer [21, 25)
GPU 6, layer [25, 29)
GPU 7, layer [29, 33)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
csr in-out ready !Start Cost Model Initialization...
5201, 401907, 401907
Number of vertices per chunk: 163
5201, 401907, 401907
Number of vertices per chunk: 163
GPU 0, layer [0, 5)
GPU 1, layer [5, 9)
GPU 2, layer [9, 13)
GPU 3, layer [13, 17)
GPU 4, layer [17, 21)
GPU 5, layer [21, 25)
GPU 6, layer [25, 29)
GPU 7, layer [29, 33)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
5201, 401907, 401907
Number of vertices per chunk: 163
csr in-out ready !Start Cost Model Initialization...
GPU 0, layer [0, 5)
GPU 1, layer [5, 9)
GPU 2, layer [9, 13)
GPU 3, layer [13, 17)
GPU 4, layer [17, 21)
GPU 5, layer [21, 25)
GPU 6, layer [25, 29)
GPU 7, layer [29, 33)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
5201, 401907, 401907
Number of vertices per chunk: 163
csr in-out ready !Start Cost Model Initialization...
train nodes 2496, valid nodes 1664, test nodes 1041
GPU 0, layer [0, 5)
GPU 1, layer [5, 9)
GPU 2, layer [9, 13)
GPU 3, layer [13, 17)
GPU 4, layer [17, 21)
GPU 5, layer [21, 25)
GPU 6, layer [25, 29)
GPU 7, layer [29, 33)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
Chunks (number of global chunks: 32): 0-[0, 80) 1-[80, 237) 2-[237, 364) 3-[364, 546) 4-[546, 693) 5-[693, 945) 6-[945, 1041) 7-[1041, 1148) 8-[1148, 1376) ... 31-[5004, 5201)
5201, 401907, 401907
Number of vertices per chunk: 163
csr in-out ready !Start Cost Model Initialization...
***** Start profiling the layer-level communication performance *******
The layer-level communication performance: 60.085 Gbps (per GPU), 480.678 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 59.805 Gbps (per GPU), 478.439 Gbps (aggregated)
The layer-level communication performance: 59.794 Gbps (per GPU), 478.353 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 59.530 Gbps (per GPU), 476.237 Gbps (aggregated)
The layer-level communication performance: 59.502 Gbps (per GPU), 476.019 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 59.264 Gbps (per GPU), 474.112 Gbps (aggregated)
The layer-level communication performance: 59.217 Gbps (per GPU), 473.734 Gbps (aggregated)
The layer-level communication performance: 59.189 Gbps (per GPU), 473.515 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The graph-level communication performance (supernode = 2): 159.270 Gbps (per GPU), 1274.163 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 159.264 Gbps (per GPU), 1274.114 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 159.270 Gbps (per GPU), 1274.163 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 159.264 Gbps (per GPU), 1274.114 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 159.270 Gbps (per GPU), 1274.163 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 159.271 Gbps (per GPU), 1274.168 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 159.270 Gbps (per GPU), 1274.163 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 159.250 Gbps (per GPU), 1273.999 Gbps (aggregated, cluster-wide)
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
The graph-level communication performance (supernode = 4): 101.205 Gbps (per GPU), 809.640 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 101.199 Gbps (per GPU), 809.594 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 101.204 Gbps (per GPU), 809.633 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 101.200 Gbps (per GPU), 809.600 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 101.203 Gbps (per GPU), 809.627 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 101.198 Gbps (per GPU), 809.587 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 101.204 Gbps (per GPU), 809.633 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 101.203 Gbps (per GPU), 809.620 Gbps (aggregated, cluster-wide)
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
The graph-level communication performance (supernode = 8): 38.017 Gbps (per GPU), 304.137 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 38.017 Gbps (per GPU), 304.138 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 38.018 Gbps (per GPU), 304.143 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 38.013 Gbps (per GPU), 304.100 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 38.015 Gbps (per GPU), 304.122 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 38.011 Gbps (per GPU), 304.092 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 38.013 Gbps (per GPU), 304.104 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 38.009 Gbps (per GPU), 304.076 Gbps (aggregated, cluster-wide)
 LType   LT0   LT1   LT2 Ratio  VSum  ESum
 chk_0  0.35ms  0.43ms  0.57ms  1.62  0.08K  0.02M
 chk_1  0.45ms  0.46ms  0.61ms  1.37  0.16K  0.01M
 chk_2  0.39ms  0.44ms  0.58ms  1.47  0.13K  0.01M
 chk_3  0.46ms  0.50ms  0.64ms  1.39  0.18K  0.01M
 chk_4  0.44ms  0.46ms  0.61ms  1.37  0.15K  0.01M
 chk_5  0.52ms  0.51ms  0.65ms  1.28  0.25K  0.01M
 chk_6  0.36ms  0.44ms  0.57ms  1.60  0.10K  0.02M
 chk_7  0.40ms  0.45ms  0.59ms  1.48  0.11K  0.02M
 chk_8  0.51ms  0.50ms  0.64ms  1.29  0.23K  0.01M
 chk_9  0.43ms  0.46ms  0.60ms  1.38  0.14K  0.01M
chk_10  0.50ms  0.50ms  0.64ms  1.29  0.20K  0.01M
chk_11  0.36ms  0.43ms  0.57ms  1.59  0.09K  0.02M
chk_12  0.45ms  0.46ms  0.61ms  1.36  0.16K  0.01M
chk_13  0.44ms  0.46ms  0.61ms  1.36  0.16K  0.01M
chk_14  0.44ms  0.46ms  0.60ms  1.38  0.14K  0.01M
chk_15  1.05ms  0.50ms  0.64ms  2.11  0.21K  0.01M
chk_16  0.46ms  0.50ms  0.64ms  1.38  0.18K  0.01M
chk_17  0.57ms  0.50ms  0.65ms  1.30  0.29K  0.01M
chk_18  0.58ms  0.51ms  0.65ms  1.29  0.31K  0.00M
chk_19  0.40ms  0.44ms  0.58ms  1.46  0.13K  0.01M
chk_20  0.40ms  0.44ms  0.58ms  1.46  0.13K  0.01M
chk_21  0.46ms  0.50ms  0.64ms  1.39  0.18K  0.01M
chk_22  0.40ms  0.44ms  0.58ms  1.46  0.13K  0.01M
chk_23  0.46ms  0.49ms  0.64ms  1.40  0.16K  0.01M
chk_24  0.36ms  0.44ms  0.57ms  1.60  0.09K  0.02M
chk_25  0.36ms  0.58ms  0.58ms  1.63  0.09K  0.02M
chk_26  0.46ms  0.50ms  0.64ms  1.39  0.18K  0.01M
chk_27  0.40ms  0.44ms  0.58ms  1.47  0.13K  0.01M
chk_28  0.46ms  0.49ms  0.64ms  1.38  0.17K  0.01M
chk_29  0.44ms  0.46ms  0.61ms  1.38  0.15K  0.01M
chk_30  0.51ms  0.50ms  0.64ms  1.30  0.24K  0.01M
chk_31  0.50ms  0.49ms  0.63ms  1.30  0.20K  0.01M
   Avg  0.46  0.47  0.61
   Max  1.05  0.58  0.65
   Min  0.35  0.43  0.57
 Ratio  2.97  1.35  1.15
   Var  0.01  0.00  0.00
Profiling takes 0.702 s
*** Node 0, starting model training...
Num Stages: 8 / 8
Node 0, Pipeline Input Tensor: NULL
Node 0, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 0 owns the model-level partition [0, 34)
*** Node 0, constructing the helper classes...
Node 0, Local Vertex Begin: 0, Num Local Vertices: 5201
*** Node 2, starting model training...
Num Stages: 8 / 8
Node 2, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 2, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 2 owns the model-level partition [62, 90)
*** Node 2, constructing the helper classes...
Node 2, Local Vertex Begin: 0, Num Local Vertices: 5201
*** Node 1, starting model training...
Num Stages: 8 / 8
Node 1, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 1, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 1 owns the model-level partition [34, 62)
*** Node 1, constructing the helper classes...
Node 1, Local Vertex Begin: 0, Num Local Vertices: 5201
*** Node 4, starting model training...
Num Stages: 8 / 8
Node 4, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 4, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 4 owns the model-level partition [118, 146)
*** Node 4, constructing the helper classes...
Node 4, Local Vertex Begin: 0, Num Local Vertices: 5201
*** Node 5, starting model training...
Num Stages: 8 / 8
Node 5, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 5, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 5 owns the model-level partition [146, 174)
*** Node 5, constructing the helper classes...
Node 5, Local Vertex Begin: 0, Num Local Vertices: 5201
*** Node 6, starting model training...
Num Stages: 8 / 8
Node 6, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 6, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 6 owns the model-level partition [174, 202)
*** Node 6, constructing the helper classes...
Node 6, Local Vertex Begin: 0, Num Local Vertices: 5201
*** Node 7, starting model training...
Num Stages: 8 / 8
Node 7, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 7, Pipeline Output Tensor: NULL
*** Node 7 owns the model-level partition [202, 233)
*** Node 7, constructing the helper classes...
Node 7, Local Vertex Begin: 0, Num Local Vertices: 5201
*** Node 3, starting model training...
Num Stages: 8 / 8
Node 3, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 3, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 3 owns the model-level partition [90, 118)
*** Node 3, constructing the helper classes...
Node 3, Local Vertex Begin: 0, Num Local Vertices: 5201
*** Node 3, setting up some other necessary information...
*** Node 5, setting up some other necessary information...
*** Node 2, setting up some other necessary information...
*** Node 4, setting up some other necessary information...
*** Node 0, setting up some other necessary information...
*** Node 6, setting up some other necessary information...
*** Node 1, setting up some other necessary information...
*** Node 7, setting up some other necessary information...
+++++++++ Node 2 initializing the weights for op[62, 90)...
+++++++++ Node 0 initializing the weights for op[0, 34)...
+++++++++ Node 1 initializing the weights for op[34, 62)...
+++++++++ Node 3 initializing the weights for op[90, 118)...
+++++++++ Node 4 initializing the weights for op[118, 146)...
+++++++++ Node 5 initializing the weights for op[146, 174)...
+++++++++ Node 6 initializing the weights for op[174, 202)...
+++++++++ Node 7 initializing the weights for op[202, 233)...
Node 2, discovering the vertices that will be sent across graph boundary...
Node 3, discovering the vertices that will be sent across graph boundary...
Node 4, discovering the vertices that will be sent across graph boundary...
Node 0, discovering the vertices that will be sent across graph boundary...
The number of mirror vertices: 0
Node 0, discovering the vertices that will be received across the graph boundary.
Node 5, discovering the vertices that will be sent across graph boundary...
Node 5, discovering the vertices that will be received across the graph boundary.
Node 1, discovering the vertices that will be sent across graph boundary...
Node 1, discovering the vertices that will be received across the graph boundary.
Node 7, discovering the vertices that will be sent across graph boundary...
Node 7, discovering the vertices that will be received across the graph boundary.
Node 2, discovering the vertices that will be received across the graph boundary.
Node 4, discovering the vertices that will be received across the graph boundary.
Node 3, discovering the vertices that will be received across the graph boundary.
Node 6, discovering the vertices that will be sent across graph boundary...
Node 6, discovering the vertices that will be received across the graph boundary.
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
*** Node 0, starting task scheduling...
*** Node 4, starting task scheduling...
*** Node 1, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 5, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 2, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 6, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 3, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 7, starting task scheduling...
The learning rate specified by the user: 0.001000000



The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
	Epoch 1:	Loss 1.7465	TrainAcc 0.2007	ValidAcc 0.2007	TestAcc 0.1988	BestValid 0.2007
	Epoch 50:	Loss 1.4120	TrainAcc 0.4880	ValidAcc 0.3209	TestAcc 0.3036	BestValid 0.3209
****** Epoch Time (Excluding Evaluation Cost): 0.109 s ******
****** Breakdown Analysis ******
Cluster-Wide Average, Bubble-Pipeline: 18.608 ms (Max: 19.682, Min: 17.276, Sum: 148.861)
Cluster-Wide Average, Compute: 62.461 ms (Max: 76.450, Min: 58.665, Sum: 499.686)
Cluster-Wide Average, Communication-Layer: 11.650 ms (Max: 13.343, Min: 9.162, Sum: 93.196)
Cluster-Wide Average, Bubble-Imbalance: 13.359 ms (Max: 16.807, Min: 2.486, Sum: 106.876)
Cluster-Wide Average, Communication-Graph: 0.481 ms (Max: 0.546, Min: 0.427, Sum: 3.845)
Cluster-Wide Average, Optimization: 1.030 ms (Max: 1.530, Min: 0.952, Sum: 8.244)
Cluster-Wide Average, Others: 1.023 ms (Max: 1.904, Min: 0.640, Sum: 8.186)
****** Breakdown Sum: 108.612 ms ******
Cluster-Wide Average, GPU Memory Consumption: 3.080 GB (Max: 4.061, Min: 2.926, Sum: 24.640)
Cluster-Wide Average, Graph-Level Communication Throughput: -nan Gbps (Max: -nan, Min: -nan, Sum: -nan)
Cluster-Wide Average, Layer-Level Communication Throughput: 49.241 Gbps (Max: 59.539, Min: 34.861, Sum: 393.929)
Layer-level communication (cluster-wide, per-epoch): 0.543 GB
Graph-level communication (cluster-wide, per-epoch): 0.000 GB
Weight-sync communication (cluster-wide, per-epoch): 0.000 GB
Total communication (cluster-wide, per-epoch): 0.543 GB
****** Accuracy Results ******
Highest valid_acc: 0.3209
Target test_acc: 0.3036
Epoch to reach the target acc: 49
[MPI Rank 0] Success 
[MPI Rank 4] Success 
[MPI Rank 1] Success 
[MPI Rank 5] Success 
[MPI Rank 2] Success 
[MPI Rank 6] Success 
[MPI Rank 3] Success 
[MPI Rank 7] Success 
