Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
DONE MPI INITDONE MPI INIT
Initialized node 3 on machine gnerv2
DONE MPI INIT
DONE MPI INIT
Initialized node 1 on machine gnerv2
Initialized node 0 on machine gnerv2

Initialized node 2 on machine gnerv2
DONE MPI INIT
Initialized node 4 on machine gnerv4
DONE MPI INIT
Initialized node 5 on machine gnerv4
DONE MPI INIT
Initialized node 6 on machine gnerv4
DONE MPI INIT
Initialized node 7 on machine gnerv4
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
        It takes 0.006 seconds.
Building the CSC structure...
        It takes 0.008 seconds.
Building the CSC structure...
        It takes 0.008 seconds.
Building the CSC structure...
        It takes 0.008 seconds.
Building the CSC structure...
        It takes 0.010 seconds.
Building the CSC structure...
        It takes 0.011 seconds.
Building the CSC structure...
        It takes 0.006 seconds.
        It takes 0.015 seconds.
Building the CSC structure...
        It takes 0.008 seconds.
        It takes 0.008 seconds.
        It takes 0.008 seconds.
Building the Feature Vector...
        It takes 0.019 seconds.
Building the CSC structure...
        It takes 0.008 seconds.
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
        It takes 0.009 seconds.
Building the Feature Vector...
Building the Feature Vector...
        It takes 0.008 seconds.
        It takes 0.013 seconds.
Building the Feature Vector...
Building the Feature Vector...
        It takes 0.025 seconds.
Building the Label Vector...
        It takes 0.000 seconds.
The graph dataset locates at /shared_hdd_storage/jingjichen/gnn_datasets/pipeline_parallel_datasets/squirrel/32_parts
The number of GCNII layers: 128
The number of hidden units: 1000
The number of training epoches: 50
Learning rate: 0.001000
The partition strategy: model
The dropout rate: 0.500
The checkpointed weight file: /tmp/saved_weights_pipe
The random seed: 1
GCN hyper-parameter alpha: 0.100000
GCN hyper-parameter lambda: 0.500000
Number of classes: 5
Number of feature dimensions: 2089
Number of vertices: 5201
Number of GPUs: 8
        It takes 0.026 seconds.
Building the Label Vector...
        It takes 0.000 seconds.
        It takes 0.026 seconds.
Building the Label Vector...
        It takes 0.000 seconds.
        It takes 0.031 seconds.
Building the Label Vector...
        It takes 0.000 seconds.
        It takes 0.031 seconds.
Building the Label Vector...
        It takes 0.000 seconds.
        It takes 0.031 seconds.
        It takes 0.025 seconds.
Building the Label Vector...
Building the Label Vector...
        It takes 0.000 seconds.
        It takes 0.000 seconds.
        It takes 0.028 seconds.
Building the Label Vector...
        It takes 0.001 seconds.
GPU 0, layer [0, 17)
GPU 1, layer [17, 33)
GPU 2, layer [33, 49)
GPU 3, layer [49, 65)
GPU 4, layer [65, 81)
GPU 5, layer [81, 97)
GPU 6, layer [97, 113)
GPU 7, layer [113, 129)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
5201, 401907, 401907
Number of vertices per chunk: 163
csr in-out ready !Start Cost Model Initialization...
GPU 0, layer [0, 17)
GPU 1, layer [17, 33)
GPU 2, layer [33, 49)
GPU 3, layer [49, 65)
GPU 4, layer [65, 81)
GPU 5, layer [81, 97)
GPU 6, layer [97, 113)
GPU 7, layer [113, 129)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 17)
GPU 1, layer [17, 33)
GPU 2, layer [33, 49)
GPU 3, layer [49, 65)
GPU 4, layer [65, 81)
GPU 5, layer [81, 97)
GPU 6, layer [97, 113)
GPU 7, layer [113, 129)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
5201, 401907, 401907
5201, 401907, 401907
Number of vertices per chunk: 163
Number of vertices per chunk: 163
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
GPU 0, layer [0, 17)
GPU 1, layer [17, 33)
GPU 2, layer [33, 49)
GPU 3, layer [49, 65)
GPU 4, layer [65, 81)
GPU 5, layer [81, 97)
GPU 6, layer [97, 113)
GPU 7, layer [113, 129)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 17)
GPU 1, layer [17, 33)
GPU 2, layer [33, 49)
GPU 3, layer [49, 65)
GPU 4, layer [65, 81)
GPU 5, layer [81, 97)
GPU 6, layer [97, 113)
GPU 7, layer [113, 129)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
5201, 401907, 401907
Number of vertices per chunk: 163
5201, 401907, 401907
Number of vertices per chunk: 163
train nodes 2496, valid nodes 1664, test nodes 1041
GPU 0, layer [0, 17)
GPU 1, layer [17, 33)
GPU 2, layer [33, 49)
GPU 3, layer [49, 65)
GPU 4, layer [65, 81)
GPU 5, layer [81, 97)
GPU 6, layer [97, 113)
GPU 7, layer [113, 129)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
Chunks (number of global chunks: 32): 0-[0, 80) 1-[80, 237) 2-[237, 364) 3-[364, 546) 4-[546, 693) 5-[693, 945) 6-[945, 1041) 7-[1041, 1148) 8-[1148, 1376) ... 31-[5004, 5201)
5201, 401907, 401907
Number of vertices per chunk: 163
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
***** Start profiling the layer-level communication performance *******
GPU 0, layer [0, 17)
GPU 1, layer [17, 33)
GPU 2, layer [33, 49)
GPU 3, layer [49, 65)
GPU 4, layer [65, 81)
GPU 5, layer [81, 97)
GPU 6, layer [97, 113)
GPU 7, layer [113, 129)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 17)
GPU 1, layer [17, 33)
GPU 2, layer [33, 49)
GPU 3, layer [49, 65)
GPU 4, layer [65, 81)
GPU 5, layer [81, 97)
GPU 6, layer [97, 113)
GPU 7, layer [113, 129)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
5201, 401907, 401907
Number of vertices per chunk: 163
5201, 401907, 401907
Number of vertices per chunk: 163
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
The layer-level communication performance: 47.868 Gbps (per GPU), 382.942 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 47.678 Gbps (per GPU), 381.426 Gbps (aggregated)
The layer-level communication performance: 47.672 Gbps (per GPU), 381.377 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 47.519 Gbps (per GPU), 380.149 Gbps (aggregated)
The layer-level communication performance: 47.494 Gbps (per GPU), 379.953 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 47.349 Gbps (per GPU), 378.791 Gbps (aggregated)
The layer-level communication performance: 47.322 Gbps (per GPU), 378.573 Gbps (aggregated)
The layer-level communication performance: 47.297 Gbps (per GPU), 378.375 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The graph-level communication performance (supernode = 2): 158.761 Gbps (per GPU), 1270.087 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.761 Gbps (per GPU), 1270.087 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.764 Gbps (per GPU), 1270.109 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.764 Gbps (per GPU), 1270.111 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.752 Gbps (per GPU), 1270.015 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.776 Gbps (per GPU), 1270.207 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.755 Gbps (per GPU), 1270.039 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.761 Gbps (per GPU), 1270.087 Gbps (aggregated, cluster-wide)
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
The graph-level communication performance (supernode = 4): 101.617 Gbps (per GPU), 812.935 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 101.621 Gbps (per GPU), 812.968 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 101.619 Gbps (per GPU), 812.948 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 101.619 Gbps (per GPU), 812.955 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 101.618 Gbps (per GPU), 812.942 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 101.619 Gbps (per GPU), 812.955 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 101.619 Gbps (per GPU), 812.948 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 101.622 Gbps (per GPU), 812.974 Gbps (aggregated, cluster-wide)
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
The graph-level communication performance (supernode = 8): 30.697 Gbps (per GPU), 245.574 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 30.694 Gbps (per GPU), 245.554 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 30.697 Gbps (per GPU), 245.575 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 30.690 Gbps (per GPU), 245.520 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 30.696 Gbps (per GPU), 245.568 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 30.688 Gbps (per GPU), 245.504 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 30.694 Gbps (per GPU), 245.550 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 30.692 Gbps (per GPU), 245.535 Gbps (aggregated, cluster-wide)
 LType   LT0   LT1   LT2 Ratio  VSum  ESum
 chk_0  0.35ms  0.41ms  0.54ms  1.56  0.08K  0.02M
 chk_1  0.44ms  0.44ms  0.58ms  1.32  0.16K  0.01M
 chk_2  0.39ms  0.42ms  0.55ms  1.41  0.13K  0.01M
 chk_3  0.45ms  0.48ms  0.62ms  1.36  0.18K  0.01M
 chk_4  0.43ms  0.44ms  0.58ms  1.33  0.15K  0.01M
 chk_5  0.51ms  0.59ms  0.62ms  1.22  0.25K  0.01M
 chk_6  0.35ms  0.53ms  0.55ms  1.54  0.10K  0.02M
 chk_7  0.39ms  0.43ms  0.56ms  1.45  0.11K  0.02M
 chk_8  0.50ms  0.49ms  0.62ms  1.27  0.23K  0.01M
 chk_9  0.43ms  0.44ms  0.57ms  1.34  0.14K  0.01M
chk_10  0.49ms  0.48ms  0.62ms  1.28  0.20K  0.01M
chk_11  0.35ms  0.42ms  0.55ms  1.55  0.09K  0.02M
chk_12  0.44ms  0.44ms  0.58ms  1.32  0.16K  0.01M
chk_13  0.44ms  0.44ms  0.58ms  1.32  0.16K  0.01M
chk_14  0.43ms  0.44ms  0.57ms  1.33  0.14K  0.01M
chk_15  0.50ms  0.48ms  0.61ms  1.27  0.21K  0.01M
chk_16  0.45ms  0.48ms  0.62ms  1.35  0.18K  0.01M
chk_17  0.56ms  0.49ms  0.63ms  1.29  0.29K  0.01M
chk_18  0.58ms  0.49ms  0.63ms  1.28  0.31K  0.00M
chk_19  0.39ms  0.42ms  0.55ms  1.41  0.13K  0.01M
chk_20  0.39ms  0.42ms  0.55ms  1.41  0.13K  0.01M
chk_21  0.45ms  0.48ms  0.62ms  1.36  0.18K  0.01M
chk_22  0.39ms  0.42ms  0.55ms  1.40  0.13K  0.01M
chk_23  0.45ms  0.47ms  0.61ms  1.37  0.16K  0.01M
chk_24  0.35ms  0.41ms  0.54ms  1.54  0.09K  0.02M
chk_25  0.35ms  0.42ms  0.55ms  1.56  0.09K  0.02M
chk_26  0.45ms  0.48ms  0.61ms  1.35  0.18K  0.01M
chk_27  0.39ms  0.42ms  0.55ms  1.41  0.13K  0.01M
chk_28  0.45ms  0.47ms  0.61ms  1.35  0.17K  0.01M
chk_29  0.43ms  0.44ms  0.58ms  1.34  0.15K  0.01M
chk_30  0.51ms  0.49ms  0.62ms  1.28  0.24K  0.01M
chk_31  0.50ms  0.48ms  0.61ms  1.28  0.20K  0.01M
   Avg  0.44  0.46  0.59
   Max  0.58  0.59  0.63
   Min  0.35  0.41  0.54
 Ratio  1.65  1.43  1.16
   Var  0.00  0.00  0.00
Profiling takes 0.681 s
*** Node 0, starting model training...
Num Stages: 8 / 8
Node 0, Pipeline Input Tensor: NULL
Node 0, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 0 owns the model-level partition [0, 118)
*** Node 0, constructing the helper classes...
Node 0, Local Vertex Begin: 0, Num Local Vertices: 5201
*** Node 1, starting model training...
Num Stages: 8 / 8
Node 1, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 1, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 1 owns the model-level partition [118, 230)
*** Node 1, constructing the helper classes...
Node 1, Local Vertex Begin: 0, Num Local Vertices: 5201
*** Node 2, starting model training...
Num Stages: 8 / 8
Node 2, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 2, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 2 owns the model-level partition [230, 342)
*** Node 2, constructing the helper classes...
Node 2, Local Vertex Begin: 0, Num Local Vertices: 5201
*** Node 5, starting model training...
Num Stages: 8 / 8
Node 5, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 5, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 5 owns the model-level partition [566, 678)
*** Node 5, constructing the helper classes...
Node 5, Local Vertex Begin: 0, Num Local Vertices: 5201
*** Node 6, starting model training...
Num Stages: 8 / 8
Node 6, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 6, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 6 owns the model-level partition [678, 790)
*** Node 6, constructing the helper classes...
Node 6, Local Vertex Begin: 0, Num Local Vertices: 5201
*** Node 7, starting model training...
Num Stages: 8 / 8
Node 7, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 7, Pipeline Output Tensor: NULL
*** Node 7 owns the model-level partition [790, 905)
*** Node 7, constructing the helper classes...
Node 7, Local Vertex Begin: 0, Num Local Vertices: 5201
*** Node 3, starting model training...
Num Stages: 8 / 8
Node 3, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 3, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 3 owns the model-level partition [342, 454)
*** Node 3, constructing the helper classes...
Node 3, Local Vertex Begin: 0, Num Local Vertices: 5201
*** Node 4, starting model training...
Num Stages: 8 / 8
Node 4, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 4, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 4 owns the model-level partition [454, 566)
*** Node 4, constructing the helper classes...
Node 4, Local Vertex Begin: 0, Num Local Vertices: 5201
*** Node 4, setting up some other necessary information...
*** Node 6, setting up some other necessary information...
*** Node 5, setting up some other necessary information...
*** Node 7, setting up some other necessary information...
*** Node 0, setting up some other necessary information...
*** Node 1, setting up some other necessary information...
*** Node 2, setting up some other necessary information...
*** Node 3, setting up some other necessary information...
+++++++++ Node 4 initializing the weights for op[454, 566)...
+++++++++ Node 1 initializing the weights for op[118, 230)...
+++++++++ Node 0 initializing the weights for op[0, 118)...
+++++++++ Node 5 initializing the weights for op[566, 678)...
+++++++++ Node 7 initializing the weights for op[790, 905)...
+++++++++ Node 3 initializing the weights for op[342, 454)...
+++++++++ Node 2 initializing the weights for op[230, 342)...
+++++++++ Node 6 initializing the weights for op[678, 790)...
Node 0, discovering the vertices that will be sent across graph boundary...
The number of mirror vertices: 0
Node 0, discovering the vertices that will be received across the graph boundary.
Node 4, discovering the vertices that will be sent across graph boundary...
Node 4, discovering the vertices that will be received across the graph boundary.
Node 1, discovering the vertices that will be sent across graph boundary...
Node 1, discovering the vertices that will be received across the graph boundary.
Node 5, discovering the vertices that will be sent across graph boundary...
Node 5, discovering the vertices that will be received across the graph boundary.
Node 2, discovering the vertices that will be sent across graph boundary...
Node 2, discovering the vertices that will be received across the graph boundary.
Node 6, discovering the vertices that will be sent across graph boundary...
Node 6, discovering the vertices that will be received across the graph boundary.
Node 3, discovering the vertices that will be sent across graph boundary...
Node 3, discovering the vertices that will be received across the graph boundary.
Node 7, discovering the vertices that will be sent across graph boundary...
Node 7, discovering the vertices that will be received across the graph boundary.
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
*** Node 4, starting task scheduling...
*** Node 0, starting task scheduling...



The learning rate specified by the user: 0.001000000
*** Node 5, starting task scheduling...
*** Node 1, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 6, starting task scheduling...
*** Node 2, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 7, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 3, starting task scheduling...
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
	Epoch 1:	Loss 1.7918	TrainAcc 0.2011	ValidAcc 0.2019	TestAcc 0.1979	BestValid 0.2019
	Epoch 50:	Loss 1.9698	TrainAcc 0.4207	ValidAcc 0.2722	TestAcc 0.2805	BestValid 0.2722
****** Epoch Time (Excluding Evaluation Cost): 0.341 s ******
****** Breakdown Analysis ******
Cluster-Wide Average, Bubble-Pipeline: 59.107 ms (Max: 60.024, Min: 58.217, Sum: 472.859)
Cluster-Wide Average, Compute: 235.123 ms (Max: 247.627, Min: 230.867, Sum: 1880.983)
Cluster-Wide Average, Communication-Layer: 14.517 ms (Max: 16.307, Min: 11.186, Sum: 116.137)
Cluster-Wide Average, Bubble-Imbalance: 23.678 ms (Max: 27.932, Min: 14.747, Sum: 189.422)
Cluster-Wide Average, Communication-Graph: 1.956 ms (Max: 2.023, Min: 1.827, Sum: 15.645)
Cluster-Wide Average, Optimization: 3.888 ms (Max: 4.366, Min: 3.768, Sum: 31.106)
Cluster-Wide Average, Others: 2.442 ms (Max: 3.294, Min: 2.302, Sum: 19.534)
****** Breakdown Sum: 340.711 ms ******
Cluster-Wide Average, GPU Memory Consumption: 8.849 GB (Max: 10.510, Min: 8.598, Sum: 70.792)
Cluster-Wide Average, Graph-Level Communication Throughput: -nan Gbps (Max: -nan, Min: -nan, Sum: -nan)
Cluster-Wide Average, Layer-Level Communication Throughput: 39.426 Gbps (Max: 44.943, Min: 29.659, Sum: 315.410)
Layer-level communication (cluster-wide, per-epoch): 0.543 GB
Graph-level communication (cluster-wide, per-epoch): 0.000 GB
Weight-sync communication (cluster-wide, per-epoch): 0.000 GB
Total communication (cluster-wide, per-epoch): 0.543 GB
****** Accuracy Results ******
Highest valid_acc: 0.2722
Target test_acc: 0.2805
Epoch to reach the target acc: 49
[MPI Rank 4] Success 
[MPI Rank 0] Success 
[MPI Rank 5] Success 
[MPI Rank 1] Success 
[MPI Rank 6] Success 
[MPI Rank 2] Success 
[MPI Rank 7] Success 
[MPI Rank 3] Success 
