Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
DONE MPI INIT
DONE MPI INIT
Initialized node 5 on machine gnerv4
DONE MPI INIT
Initialized node 6 on machine gnerv4
DONE MPI INIT
Initialized node 7 on machine gnerv4
Initialized node 4 on machine gnerv4
DONE MPI INIT
Initialized node 1 on machine gnerv2
DONE MPI INIT
Initialized node 0 on machine gnerv2
DONE MPI INIT
Initialized node 2 on machine gnerv2
DONE MPI INIT
Initialized node 3 on machine gnerv2
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
        It takes 0.006 seconds.
Building the CSC structure...
        It takes 0.007 seconds.
Building the CSC structure...
        It takes 0.008 seconds.
Building the CSC structure...
        It takes 0.006 seconds.
        It takes 0.012 seconds.
Building the CSC structure...
        It takes 0.012 seconds.
Building the CSC structure...
        It takes 0.011 seconds.
Building the CSC structure...
        It takes 0.012 seconds.
Building the CSC structure...
        It takes 0.011 seconds.
Building the CSC structure...
Building the Feature Vector...
        It takes 0.008 seconds.
        It takes 0.009 seconds.
Building the Feature Vector...
Building the Feature Vector...
        It takes 0.008 seconds.
        It takes 0.010 seconds.
        It takes 0.010 seconds.
        It takes 0.011 seconds.
        It takes 0.011 seconds.
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
        It takes 0.025 seconds.
Building the Label Vector...
        It takes 0.000 seconds.
        It takes 0.026 seconds.
Building the Label Vector...
        It takes 0.000 seconds.
The graph dataset locates at /shared_hdd_storage/jingjichen/gnn_datasets/pipeline_parallel_datasets/squirrel/32_parts
The number of GCNII layers: 64
The number of hidden units: 1000
The number of training epoches: 50
Learning rate: 0.001000
The partition strategy: model
The dropout rate: 0.500
The checkpointed weight file: /tmp/saved_weights_pipe
The random seed: 1
GCN hyper-parameter alpha: 0.100000
GCN hyper-parameter lambda: 0.500000
Number of classes: 5
Number of feature dimensions: 2089
Number of vertices: 5201
Number of GPUs: 8
        It takes 0.030 seconds.
Building the Label Vector...
        It takes 0.000 seconds.
        It takes 0.025 seconds.
Building the Label Vector...
        It takes 0.000 seconds.
        It takes 0.026 seconds.
Building the Label Vector...
        It takes 0.028 seconds.
Building the Label Vector...
        It takes 0.000 seconds.
        It takes 0.000 seconds.
        It takes 0.026 seconds.
Building the Label Vector...
        It takes 0.000 seconds.
        It takes 0.029 seconds.
Building the Label Vector...
        It takes 0.000 seconds.
GPU 0, layer [0, 9)
GPU 1, layer [9, 17)
GPU 2, layer [17, 25)
GPU 3, layer [25, 33)
GPU 4, layer [33, 41)
GPU 5, layer [41, 49)
GPU 6, layer [49, 57)
GPU 7, layer [57, 65)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
5201, 401907, 401907
Number of vertices per chunk: 163
csr in-out ready !Start Cost Model Initialization...
GPU 0, layer [0, 9)
GPU 1, layer [9, 17)
GPU 2, layer [17, 25)
GPU 3, layer [25, 33)
GPU 4, layer [33, 41)
GPU 5, layer [41, 49)
GPU 6, layer [49, 57)
GPU 7, layer [57, 65)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
5201, 401907, 401907
Number of vertices per chunk: 163
GPU 0, layer [0, 9)
GPU 1, layer [9, 17)
GPU 2, layer [17, 25)
GPU 3, layer [25, 33)
GPU 4, layer [33, 41)
GPU 5, layer [41, 49)
GPU 6, layer [49, 57)
GPU 7, layer [57, 65)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
5201, 401907, 401907
Number of vertices per chunk: 163
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
train nodes 2496, valid nodes 1664, test nodes 1041
GPU 0, layer [0, 9)
GPU 1, layer [9, 17)
GPU 2, layer [17, 25)
GPU 3, layer [25, 33)
GPU 4, layer [33, 41)
GPU 5, layer [41, 49)
GPU 6, layer [49, 57)
GPU 7, layer [57, 65)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
Chunks (number of global chunks: 32): 0-[0, 80) 1-[80, 237) 2-[237, 364) 3-[364, 546) 4-[546, 693) 5-[693, 945) 6-[945, 1041) 7-[1041, 1148) 8-[1148, 1376) ... 31-[5004, 5201)
5201, 401907, 401907
Number of vertices per chunk: 163
csr in-out ready !Start Cost Model Initialization...
***** Start profiling the layer-level communication performance *******
GPU 0, layer [0, 9)
GPU 1, layer [9, 17)
GPU 2, layer [17, 25)
GPU 3, layer [25, 33)
GPU 4, layer [33, 41)
GPU 5, layer [41, 49)
GPU 6, layer [49, 57)
GPU 7, layer [57, 65)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
5201, 401907, 401907
Number of vertices per chunk: 163
csr in-out ready !Start Cost Model Initialization...
GPU 0, layer [0, 9)
GPU 1, layer [9, 17)
GPU 2, layer [17, 25)
GPU 3, layer [25, 33)
GPU 4, layer [33, 41)
GPU 5, layer [41, 49)
GPU 6, layer [49, 57)
GPU 7, layer [57, 65)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
5201, 401907, 401907
Number of vertices per chunk: 163
csr in-out ready !Start Cost Model Initialization...
GPU 0, layer [0, 9)
GPU 1, layer [9, 17)
GPU 2, layer [17, 25)
GPU 3, layer [25, 33)
GPU 4, layer [33, 41)
GPU 5, layer [41, 49)
GPU 6, layer [49, 57)
GPU 7, layer [57, 65)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
5201, 401907, 401907
Number of vertices per chunk: 163
GPU 0, layer [0, 9)
GPU 1, layer [9, 17)
GPU 2, layer [17, 25)
GPU 3, layer [25, 33)
GPU 4, layer [33, 41)
GPU 5, layer [41, 49)
GPU 6, layer [49, 57)
GPU 7, layer [57, 65)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
csr in-out ready !Start Cost Model Initialization...
5201, 401907, 401907
Number of vertices per chunk: 163
csr in-out ready !Start Cost Model Initialization...
The layer-level communication performance: 59.627 Gbps (per GPU), 477.015 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 59.329 Gbps (per GPU), 474.630 Gbps (aggregated)
The layer-level communication performance: 59.326 Gbps (per GPU), 474.611 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 59.085 Gbps (per GPU), 472.683 Gbps (aggregated)
The layer-level communication performance: 59.051 Gbps (per GPU), 472.404 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 58.841 Gbps (per GPU), 470.731 Gbps (aggregated)
The layer-level communication performance: 58.797 Gbps (per GPU), 470.374 Gbps (aggregated)
The layer-level communication performance: 58.760 Gbps (per GPU), 470.080 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The graph-level communication performance (supernode = 2): 156.533 Gbps (per GPU), 1252.265 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 156.501 Gbps (per GPU), 1252.008 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 156.498 Gbps (per GPU), 1251.984 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 156.536 Gbps (per GPU), 1252.288 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 156.533 Gbps (per GPU), 1252.265 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 156.498 Gbps (per GPU), 1251.987 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 156.524 Gbps (per GPU), 1252.195 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 156.527 Gbps (per GPU), 1252.218 Gbps (aggregated, cluster-wide)
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
The graph-level communication performance (supernode = 4): 102.448 Gbps (per GPU), 819.587 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 102.450 Gbps (per GPU), 819.600 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 102.445 Gbps (per GPU), 819.560 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 102.446 Gbps (per GPU), 819.567 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 102.447 Gbps (per GPU), 819.574 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 102.450 Gbps (per GPU), 819.599 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 102.445 Gbps (per GPU), 819.560 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 102.449 Gbps (per GPU), 819.594 Gbps (aggregated, cluster-wide)
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
The graph-level communication performance (supernode = 8): 32.427 Gbps (per GPU), 259.416 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 32.425 Gbps (per GPU), 259.400 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 32.424 Gbps (per GPU), 259.391 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 32.427 Gbps (per GPU), 259.413 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 32.426 Gbps (per GPU), 259.409 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 32.420 Gbps (per GPU), 259.360 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 32.421 Gbps (per GPU), 259.365 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 32.421 Gbps (per GPU), 259.367 Gbps (aggregated, cluster-wide)
 LType   LT0   LT1   LT2 Ratio  VSum  ESum
 chk_0  0.35ms  0.41ms  0.55ms  1.58  0.08K  0.02M
 chk_1  0.44ms  0.44ms  0.59ms  1.33  0.16K  0.01M
 chk_2  0.39ms  0.42ms  0.56ms  1.43  0.13K  0.01M
 chk_3  0.45ms  0.48ms  0.62ms  1.37  0.18K  0.01M
 chk_4  0.43ms  0.44ms  0.58ms  1.34  0.15K  0.01M
 chk_5  0.51ms  0.49ms  0.63ms  1.28  0.25K  0.01M
 chk_6  0.35ms  0.42ms  0.55ms  1.56  0.10K  0.02M
 chk_7  0.39ms  0.43ms  0.57ms  1.45  0.11K  0.02M
 chk_8  0.50ms  0.49ms  0.63ms  1.29  0.23K  0.01M
 chk_9  0.43ms  0.44ms  0.57ms  1.35  0.14K  0.01M
chk_10  0.50ms  0.48ms  0.62ms  1.29  0.20K  0.01M
chk_11  0.35ms  0.42ms  0.55ms  1.56  0.09K  0.02M
chk_12  0.44ms  0.44ms  0.58ms  1.33  0.16K  0.01M
chk_13  0.44ms  0.44ms  0.58ms  1.33  0.16K  0.01M
chk_14  0.43ms  0.44ms  0.58ms  1.34  0.14K  0.01M
chk_15  0.50ms  0.49ms  0.62ms  1.29  0.21K  0.01M
chk_16  0.46ms  0.48ms  0.62ms  1.37  0.18K  0.01M
chk_17  0.56ms  0.49ms  0.63ms  1.29  0.29K  0.01M
chk_18  0.57ms  0.49ms  0.63ms  1.28  0.31K  0.00M
chk_19  0.39ms  0.42ms  0.55ms  1.42  0.13K  0.01M
chk_20  0.39ms  0.42ms  0.56ms  1.42  0.13K  0.01M
chk_21  0.46ms  0.48ms  0.62ms  1.36  0.18K  0.01M
chk_22  0.39ms  0.42ms  0.55ms  1.40  0.13K  0.01M
chk_23  0.45ms  0.48ms  0.62ms  1.38  0.16K  0.01M
chk_24  0.35ms  0.42ms  0.55ms  1.55  0.09K  0.02M
chk_25  0.35ms  0.42ms  0.55ms  1.57  0.09K  0.02M
chk_26  0.45ms  0.48ms  0.62ms  1.36  0.18K  0.01M
chk_27  0.39ms  0.42ms  0.56ms  1.42  0.13K  0.01M
chk_28  0.46ms  0.48ms  0.62ms  1.34  0.17K  0.01M
chk_29  0.43ms  0.45ms  0.58ms  1.34  0.15K  0.01M
chk_30  0.51ms  0.49ms  0.63ms  1.28  0.24K  0.01M
chk_31  0.50ms  0.48ms  0.62ms  1.29  0.20K  0.01M
   Avg  0.44  0.45  0.59
   Max  0.57  0.49  0.63
   Min  0.35  0.41  0.55
 Ratio  1.65  1.19  1.15
   Var  0.00  0.00  0.00
Profiling takes 0.672 s
*** Node 1, starting model training...
Num Stages: 8 / 8
*** Node 2, starting model training...
Num Stages: 8 / 8
Node 2, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 2, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 2 owns the model-level partition [118, 174)
*** Node 2, constructing the helper classes...
Node 2, Local Vertex Begin: 0, Num Local Vertices: 5201
*** Node 3, starting model training...
Num Stages: 8 / 8
Node 3, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 3, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 3 owns the model-level partition [174, 230)
*** Node 3, constructing the helper classes...
Node 3, Local Vertex Begin: 0, Num Local Vertices: 5201
*** Node 0, starting model training...
Num Stages: 8 / 8
Node 0, Pipeline Input Tensor: NULL
Node 0, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 0 owns the model-level partition [0, 62)
*** Node 0, constructing the helper classes...
Node 0, Local Vertex Begin: 0, Num Local Vertices: 5201
Node 1, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 1, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 1 owns the model-level partition [62, 118)
*** Node 1, constructing the helper classes...
Node 1, Local Vertex Begin: 0, Num Local Vertices: 5201
*** Node 6, starting model training...
Num Stages: 8 / 8
Node 6, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 6, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 6 owns the model-level partition [342, 398)
*** Node 6, constructing the helper classes...
Node 6, Local Vertex Begin: 0, Num Local Vertices: 5201
*** Node 7, starting model training...
Num Stages: 8 / 8
Node 7, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 7, Pipeline Output Tensor: NULL
*** Node 7 owns the model-level partition [398, 457)
*** Node 7, constructing the helper classes...
Node 7, Local Vertex Begin: 0, Num Local Vertices: 5201
*** Node 4, starting model training...
Num Stages: 8 / 8
Node 4, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 4, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 4 owns the model-level partition [230, 286)
*** Node 4, constructing the helper classes...
Node 4, Local Vertex Begin: 0, Num Local Vertices: 5201
*** Node 5, starting model training...
Num Stages: 8 / 8
Node 5, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 5, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 5 owns the model-level partition [286, 342)
*** Node 5, constructing the helper classes...
Node 5, Local Vertex Begin: 0, Num Local Vertices: 5201
*** Node 6, setting up some other necessary information...
*** Node 4, setting up some other necessary information...
*** Node 5, setting up some other necessary information...
*** Node 7, setting up some other necessary information...
*** Node 1, setting up some other necessary information...
*** Node 3, setting up some other necessary information...
*** Node 0, setting up some other necessary information...
*** Node 2, setting up some other necessary information...
+++++++++ Node 1 initializing the weights for op[62, 118)...
+++++++++ Node 0 initializing the weights for op[0, 62)...
+++++++++ Node 6 initializing the weights for op[342, 398)...
+++++++++ Node 5 initializing the weights for op[286, 342)...
+++++++++ Node 4 initializing the weights for op[230, 286)...
+++++++++ Node 3 initializing the weights for op[174, 230)...
+++++++++ Node 2 initializing the weights for op[118, 174)...
+++++++++ Node 7 initializing the weights for op[398, 457)...
Node 0, discovering the vertices that will be sent across graph boundary...
The number of mirror vertices: 0
Node 0, discovering the vertices that will be received across the graph boundary.
Node 1, discovering the vertices that will be sent across graph boundary...
Node 1, discovering the vertices that will be received across the graph boundary.
Node 4, discovering the vertices that will be sent across graph boundary...
Node 4, discovering the vertices that will be received across the graph boundary.
Node 5, discovering the vertices that will be sent across graph boundary...
Node 5, discovering the vertices that will be received across the graph boundary.
Node 2, discovering the vertices that will be sent across graph boundary...
Node 2, discovering the vertices that will be received across the graph boundary.
Node 6, discovering the vertices that will be sent across graph boundary...
Node 6, discovering the vertices that will be received across the graph boundary.
Node 3, discovering the vertices that will be sent across graph boundary...
Node 3, discovering the vertices that will be received across the graph boundary.
Node 7, discovering the vertices that will be sent across graph boundary...
Node 7, discovering the vertices that will be received across the graph boundary.
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
*** Node 0, starting task scheduling...



*** Node 4, starting task scheduling...
*** Node 1, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 5, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 2, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 6, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 3, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 7, starting task scheduling...
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
	Epoch 1:	Loss 1.8132	TrainAcc 0.1995	ValidAcc 0.2031	TestAcc 0.1950	BestValid 0.2031
	Epoch 50:	Loss 1.6064	TrainAcc 0.4519	ValidAcc 0.2897	TestAcc 0.2939	BestValid 0.2897
****** Epoch Time (Excluding Evaluation Cost): 0.186 s ******
****** Breakdown Analysis ******
Cluster-Wide Average, Bubble-Pipeline: 32.202 ms (Max: 33.063, Min: 31.297, Sum: 257.615)
Cluster-Wide Average, Compute: 120.768 ms (Max: 131.411, Min: 116.956, Sum: 966.140)
Cluster-Wide Average, Communication-Layer: 14.088 ms (Max: 15.746, Min: 10.702, Sum: 112.701)
Cluster-Wide Average, Bubble-Imbalance: 14.870 ms (Max: 17.141, Min: 8.075, Sum: 118.963)
Cluster-Wide Average, Communication-Graph: 1.005 ms (Max: 1.109, Min: 0.884, Sum: 8.039)
Cluster-Wide Average, Optimization: 1.983 ms (Max: 2.452, Min: 1.866, Sum: 15.864)
Cluster-Wide Average, Others: 1.392 ms (Max: 2.258, Min: 1.226, Sum: 11.133)
****** Breakdown Sum: 186.307 ms ******
Cluster-Wide Average, GPU Memory Consumption: 5.003 GB (Max: 6.212, Min: 4.817, Sum: 40.024)
Cluster-Wide Average, Graph-Level Communication Throughput: -nan Gbps (Max: -nan, Min: -nan, Sum: -nan)
Cluster-Wide Average, Layer-Level Communication Throughput: 40.613 Gbps (Max: 45.336, Min: 30.114, Sum: 324.902)
Layer-level communication (cluster-wide, per-epoch): 0.543 GB
Graph-level communication (cluster-wide, per-epoch): 0.000 GB
Weight-sync communication (cluster-wide, per-epoch): 0.000 GB
Total communication (cluster-wide, per-epoch): 0.543 GB
****** Accuracy Results ******
Highest valid_acc: 0.2897
Target test_acc: 0.2939
Epoch to reach the target acc: 49
[MPI Rank 0] Success 
[MPI Rank 4] Success 
[MPI Rank 1] Success 
[MPI Rank 5] Success 
[MPI Rank 2] Success 
[MPI Rank 6] Success 
[MPI Rank 3] Success 
[MPI Rank 7] Success 
