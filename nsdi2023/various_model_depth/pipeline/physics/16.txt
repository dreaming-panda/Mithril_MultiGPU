Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
DONE MPI INIT
DONE MPI INITDONE MPI INIT
Initialized node 2 on machine gnerv7
Initialized node 0 on machine gnerv7
DONE MPI INIT
Initialized node 3 on machine gnerv7

Initialized node 1 on machine gnerv7
DONE MPI INIT
DONE MPI INIT
Initialized node 6 on machine gnerv8
DONE MPI INITInitialized node 4 on machine gnerv8

Initialized node 7 on machine gnerv8
DONE MPI INIT
Initialized node 5 on machine gnerv8
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
        It takes 0.011 seconds.
Building the CSC structure...
        It takes 0.010 seconds.
Building the CSC structure...
        It takes 0.010 seconds.
Building the CSC structure...
        It takes 0.010 seconds.
Building the CSC structure...
        It takes 0.011 seconds.
Building the CSC structure...
        It takes 0.011 seconds.
Building the CSC structure...
        It takes 0.019 seconds.
Building the CSC structure...
        It takes 0.021 seconds.
Building the CSC structure...
        It takes 0.012 seconds.
        It takes 0.011 seconds.
        It takes 0.015 seconds.
        It takes 0.015 seconds.
Building the Feature Vector...
Building the Feature Vector...
        It takes 0.017 seconds.
        It takes 0.010 seconds.
Building the Feature Vector...
        It takes 0.020 seconds.
        It takes 0.010 seconds.
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
        It takes 0.457 seconds.
Building the Label Vector...
        It takes 0.453 seconds.
Building the Label Vector...
        It takes 0.002 seconds.
        It takes 0.002 seconds.
        It takes 0.509 seconds.
Building the Label Vector...
        It takes 0.003 seconds.
        It takes 0.513 seconds.
Building the Label Vector...
        It takes 0.007 seconds.
        It takes 0.538 seconds.
Building the Label Vector...
        It takes 0.007 seconds.
        It takes 0.551 seconds.
Building the Label Vector...
        It takes 0.003 seconds.
        It takes 0.618 seconds.
Building the Label Vector...
        It takes 0.615 seconds.
Building the Label Vector...
        It takes 0.004 seconds.
The graph dataset locates at /shared_hdd_storage/jingjichen/gnn_datasets/pipeline_parallel_datasets/physics/32_parts
The number of GCNII layers: 16
The number of hidden units: 100
The number of training epoches: 50
Learning rate: 0.001000
The partition strategy: model
The dropout rate: 0.500
The checkpointed weight file: /tmp/saved_weights_pipe
The random seed: 1
GCN hyper-parameter alpha: 0.100000
GCN hyper-parameter lambda: 0.500000
Number of classes: 5
Number of feature dimensions: 8415
Number of vertices: 34493
Number of GPUs: 8
        It takes 0.007 seconds.
GPU 0, layer [0, 3)
GPU 1, layer [3, 5)
GPU 2, layer [5, 7)
GPU 3, layer [7, 9)
GPU 4, layer [9, 11)
GPU 5, layer [11, 13)
GPU 6, layer [13, 15)
GPU 7, layer [15, 17)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
34493, 530417, 530417
Number of vertices per chunk: 1078
csr in-out ready !Start Cost Model Initialization...
GPU 0, layer [0, 3)
GPU 1, layer [3, 5)
GPU 2, layer [5, 7)
GPU 3, layer [7, 9)
GPU 4, layer [9, 11)
GPU 5, layer [11, 13)
GPU 6, layer [13, 15)
GPU 7, layer [15, 17)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
34493, 530417, 530417
Number of vertices per chunk: 1078
GPU 0, layer [0, 3)
GPU 1, layer [3, 5)
GPU 2, layer [5, 7)
GPU 3, layer [7, 9)
GPU 4, layer [9, 11)
GPU 5, layer [11, 13)
GPU 6, layer [13, 15)
GPU 7, layer [15, 17)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
34493, 530417, 530417
Number of vertices per chunk: 1078
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
GPU 0, layer [0, 3)
GPU 1, layer [3, 5)
GPU 2, layer [5, 7)
GPU 3, layer [7, 9)
GPU 4, layer [9, 11)
GPU 5, layer [11, 13)
GPU 6, layer [13, 15)
GPU 7, layer [15, 17)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 3)
GPU 1, layer [3, 5)
GPU 2, layer [5, 7)
GPU 3, layer [7, 9)
GPU 4, layer [9, 11)
GPU 5, layer [11, 13)
GPU 6, layer [13, 15)
GPU 7, layer [15, 17)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
34493, 530417, 530417
34493, 530417, 530417
Number of vertices per chunk: 1078
Number of vertices per chunk: 1078
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
GPU 0, layer [0, 3)
GPU 1, layer [3, 5)
GPU 2, layer [5, 7)
GPU 3, layer [7, 9)
GPU 4, layer [9, 11)
GPU 5, layer [11, 13)
GPU 6, layer [13, 15)
GPU 7, layer [15, 17)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
34493, 530417, 530417
Number of vertices per chunk: 1078
csr in-out ready !Start Cost Model Initialization...
GPU 0, layer [0, 3)
GPU 1, layer [3, 5)
GPU 2, layer [5, 7)
GPU 3, layer [7, 9)
GPU 4, layer [9, 11)
GPU 5, layer [11, 13)
GPU 6, layer [13, 15)
GPU 7, layer [15, 17)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
34493, 530417, 530417
Number of vertices per chunk: 1078
csr in-out ready !Start Cost Model Initialization...
train nodes 100, valid nodes 500, test nodes 1000
GPU 0, layer [0, 3)
GPU 1, layer [3, 5)
GPU 2, layer [5, 7)
GPU 3, layer [7, 9)
GPU 4, layer [9, 11)
GPU 5, layer [11, 13)
GPU 6, layer [13, 15)
GPU 7, layer [15, 17)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
Chunks (number of global chunks: 32): 0-[0, 1025) 1-[1025, 2154) 2-[2154, 3262) 3-[3262, 4284) 4-[4284, 5334) 5-[5334, 6511) 6-[6511, 7597) 7-[7597, 8680) 8-[8680, 9764) ... 31-[33337, 34493)
34493, 530417, 530417
Number of vertices per chunk: 1078
csr in-out ready !Start Cost Model Initialization...
***** Start profiling the layer-level communication performance *******
The layer-level communication performance: 60.512 Gbps (per GPU), 484.094 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 60.204 Gbps (per GPU), 481.633 Gbps (aggregated)
The layer-level communication performance: 60.206 Gbps (per GPU), 481.648 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 59.949 Gbps (per GPU), 479.592 Gbps (aggregated)
The layer-level communication performance: 59.923 Gbps (per GPU), 479.384 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 59.696 Gbps (per GPU), 477.567 Gbps (aggregated)
The layer-level communication performance: 59.640 Gbps (per GPU), 477.119 Gbps (aggregated)
The layer-level communication performance: 59.611 Gbps (per GPU), 476.892 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The graph-level communication performance (supernode = 2): 157.338 Gbps (per GPU), 1258.700 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 157.326 Gbps (per GPU), 1258.606 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 157.208 Gbps (per GPU), 1257.662 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 157.332 Gbps (per GPU), 1258.654 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 157.220 Gbps (per GPU), 1257.757 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 157.338 Gbps (per GPU), 1258.700 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 157.217 Gbps (per GPU), 1257.733 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 156.999 Gbps (per GPU), 1255.991 Gbps (aggregated, cluster-wide)
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
The graph-level communication performance (supernode = 4): 104.502 Gbps (per GPU), 836.018 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 104.503 Gbps (per GPU), 836.025 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 104.502 Gbps (per GPU), 836.018 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 104.503 Gbps (per GPU), 836.025 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 104.495 Gbps (per GPU), 835.963 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 104.492 Gbps (per GPU), 835.935 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 104.468 Gbps (per GPU), 835.748 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 104.436 Gbps (per GPU), 835.484 Gbps (aggregated, cluster-wide)
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
The graph-level communication performance (supernode = 8): 36.004 Gbps (per GPU), 288.034 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 36.005 Gbps (per GPU), 288.038 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 36.005 Gbps (per GPU), 288.039 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 36.005 Gbps (per GPU), 288.040 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 36.005 Gbps (per GPU), 288.042 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 36.004 Gbps (per GPU), 288.029 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 36.004 Gbps (per GPU), 288.031 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 36.003 Gbps (per GPU), 288.027 Gbps (aggregated, cluster-wide)
 LType   LT0   LT1   LT2 Ratio  VSum  ESum
 chk_0  1.28ms  0.30ms  0.42ms  4.24  1.02K  0.02M
 chk_1  1.36ms  0.30ms  0.42ms  4.51  1.13K  0.01M
 chk_2  1.35ms  0.30ms  0.42ms  4.47  1.11K  0.01M
 chk_3  1.29ms  0.30ms  0.42ms  4.35  1.02K  0.02M
 chk_4  1.30ms  0.30ms  0.42ms  4.34  1.05K  0.02M
 chk_5  1.39ms  0.30ms  0.43ms  4.65  1.18K  0.01M
 chk_6  1.34ms  0.30ms  0.42ms  4.42  1.09K  0.02M
 chk_7  1.34ms  0.30ms  0.42ms  4.46  1.08K  0.02M
 chk_8  1.34ms  0.30ms  0.42ms  4.46  1.08K  0.01M
 chk_9  1.31ms  0.30ms  0.42ms  4.39  1.06K  0.02M
chk_10  1.31ms  0.30ms  0.42ms  4.35  1.04K  0.02M
chk_11  1.35ms  0.30ms  0.42ms  4.50  1.11K  0.01M
chk_12  1.35ms  0.30ms  0.42ms  4.49  1.11K  0.01M
chk_13  1.27ms  0.29ms  0.42ms  4.31  1.01K  0.02M
chk_14  1.34ms  0.30ms  0.42ms  4.46  1.09K  0.01M
chk_15  1.29ms  0.30ms  0.42ms  4.34  1.03K  0.02M
chk_16  1.24ms  0.29ms  0.42ms  4.22  0.98K  0.02M
chk_17  1.34ms  0.30ms  0.42ms  4.46  1.09K  0.01M
chk_18  1.30ms  0.30ms  0.42ms  4.32  1.04K  0.02M
chk_19  1.38ms  0.30ms  0.43ms  4.57  1.12K  0.01M
chk_20  1.36ms  0.30ms  0.42ms  4.49  1.13K  0.01M
chk_21  1.30ms  0.30ms  0.42ms  4.33  1.05K  0.02M
chk_22  1.35ms  0.30ms  0.43ms  4.43  1.11K  0.01M
chk_23  1.34ms  0.30ms  0.43ms  4.43  1.10K  0.01M
chk_24  1.28ms  0.30ms  0.42ms  4.29  1.02K  0.02M
chk_25  1.26ms  0.29ms  0.42ms  4.29  1.01K  0.02M
chk_26  1.37ms  0.30ms  0.43ms  4.54  1.12K  0.01M
chk_27  1.32ms  0.30ms  0.43ms  4.40  1.08K  0.02M
chk_28  1.32ms  0.30ms  0.43ms  4.35  1.07K  0.02M
chk_29  1.77ms  0.30ms  0.42ms  5.92  1.11K  0.01M
chk_30  1.34ms  0.30ms  0.42ms  4.44  1.10K  0.01M
chk_31  1.38ms  0.30ms  0.43ms  4.62  1.16K  0.01M
   Avg  1.34  0.30  0.42
   Max  1.77  0.30  0.43
   Min  1.24  0.29  0.42
 Ratio  1.43  1.04  1.03
   Var  0.01  0.00  0.00
Profiling takes 0.895 s
*** Node 0, starting model training...
Num Stages: 8 / 8
Node 0, Pipeline Input Tensor: NULL
Node 0, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 0 owns the model-level partition [0, 20)
*** Node 0, constructing the helper classes...
Node 0, Local Vertex Begin: 0, Num Local Vertices: 34493
*** Node 2, starting model training...
Num Stages: 8 / 8
Node 2, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 2, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 2 owns the model-level partition [34, 48)
*** Node 2, constructing the helper classes...
Node 2, Local Vertex Begin: 0, Num Local Vertices: 34493
*** Node 3, starting model training...
Num Stages: 8 / 8
Node 3, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 3, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 3 owns the model-level partition [48, 62)
*** Node 3, constructing the helper classes...
Node 3, Local Vertex Begin: 0, Num Local Vertices: 34493
*** Node 1, starting model training...
Num Stages: 8 / 8
Node 1, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 1, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 1 owns the model-level partition [20, 34)
*** Node 1, constructing the helper classes...
Node 1, Local Vertex Begin: 0, Num Local Vertices: 34493
*** Node 4, starting model training...
Num Stages: 8 / 8
Node 4, Pipeline Input Tensor: OPERATOR_DROPOUT
*** Node 5, starting model training...
Num Stages: 8 / 8
Node 5, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 5, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 5 owns the model-level partition [76, 90)
*** Node 5, constructing the helper classes...
Node 5, Local Vertex Begin: 0, Num Local Vertices: 34493
*** Node 6, starting model training...
Num Stages: 8 / 8
Node 6, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 6, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 6 owns the model-level partition [90, 104)
*** Node 6, constructing the helper classes...
Node 6, Local Vertex Begin: 0, Num Local Vertices: 34493
*** Node 7, starting model training...
Num Stages: 8 / 8
Node 7, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 7, Pipeline Output Tensor: NULL
*** Node 7 owns the model-level partition [104, 121)
*** Node 7, constructing the helper classes...
Node 7, Local Vertex Begin: 0, Num Local Vertices: 34493
Node 4, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 4 owns the model-level partition [62, 76)
*** Node 4, constructing the helper classes...
Node 4, Local Vertex Begin: 0, Num Local Vertices: 34493
*** Node 5, setting up some other necessary information...
*** Node 6, setting up some other necessary information...
*** Node 4, setting up some other necessary information...
*** Node 3, setting up some other necessary information...
*** Node 0, setting up some other necessary information...
*** Node 1, setting up some other necessary information...
*** Node 2, setting up some other necessary information...
*** Node 7, setting up some other necessary information...
+++++++++ Node 0 initializing the weights for op[0, 20)...
+++++++++ Node 1 initializing the weights for op[20, 34)...
+++++++++ Node 2 initializing the weights for op[34, 48)...
+++++++++ Node 3 initializing the weights for op[48, 62)...
+++++++++ Node 4 initializing the weights for op[62, 76)...
+++++++++ Node 6 initializing the weights for op[90, 104)...
+++++++++ Node 5 initializing the weights for op[76, 90)...
+++++++++ Node 7 initializing the weights for op[104, 121)...
Node 2, discovering the vertices that will be sent across graph boundary...
Node 0, discovering the vertices that will be sent across graph boundary...
Node 1, discovering the vertices that will be sent across graph boundary...
Node 3, discovering the vertices that will be sent across graph boundary...
Node 5, discovering the vertices that will be sent across graph boundary...
Node 7, discovering the vertices that will be sent across graph boundary...
Node 6, discovering the vertices that will be sent across graph boundary...
Node 4, discovering the vertices that will be sent across graph boundary...
Node 4, discovering the vertices that will be received across the graph boundary.
The number of mirror vertices: 0
Node 0, discovering the vertices that will be received across the graph boundary.
Node 1, discovering the vertices that will be received across the graph boundary.
Node 5, discovering the vertices that will be received across the graph boundary.
Node 2, discovering the vertices that will be received across the graph boundary.
Node 6, discovering the vertices that will be received across the graph boundary.
Node 3, discovering the vertices that will be received across the graph boundary.
****** Start Scheduling the Tasks in a Pipelined Fashion ******
Node 7, discovering the vertices that will be received across the graph boundary.
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
*** Node 0, starting task scheduling...
*** Node 4, starting task scheduling...
*** Node 1, starting task scheduling...
*** Node 5, starting task scheduling...
*** Node 2, starting task scheduling...
*** Node 6, starting task scheduling...
*** Node 3, starting task scheduling...
*** Node 7, starting task scheduling...



The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
	Epoch 1:	Loss 1.6797	TrainAcc 0.6400	ValidAcc 0.5600	TestAcc 0.6050	BestValid 0.5600
	Epoch 50:	Loss 0.4474	TrainAcc 0.9900	ValidAcc 0.9420	TestAcc 0.9390	BestValid 0.9420
****** Epoch Time (Excluding Evaluation Cost): 0.082 s ******
****** Breakdown Analysis ******
Cluster-Wide Average, Bubble-Pipeline: 12.578 ms (Max: 16.320, Min: 7.510, Sum: 100.621)
Cluster-Wide Average, Compute: 28.345 ms (Max: 64.557, Min: 22.211, Sum: 226.762)
Cluster-Wide Average, Communication-Layer: 9.399 ms (Max: 10.766, Min: 7.461, Sum: 75.188)
Cluster-Wide Average, Bubble-Imbalance: 31.020 ms (Max: 38.076, Min: 1.235, Sum: 248.162)
Cluster-Wide Average, Communication-Graph: 0.250 ms (Max: 0.318, Min: 0.226, Sum: 2.004)
Cluster-Wide Average, Optimization: 0.081 ms (Max: 0.282, Min: 0.050, Sum: 0.648)
Cluster-Wide Average, Others: 0.534 ms (Max: 1.417, Min: 0.245, Sum: 4.273)
****** Breakdown Sum: 82.207 ms ******
Cluster-Wide Average, GPU Memory Consumption: 1.960 GB (Max: 3.905, Min: 1.669, Sum: 15.681)
Cluster-Wide Average, Graph-Level Communication Throughput: -nan Gbps (Max: -nan, Min: -nan, Sum: -nan)
Cluster-Wide Average, Layer-Level Communication Throughput: 40.554 Gbps (Max: 50.209, Min: 28.121, Sum: 324.431)
Layer-level communication (cluster-wide, per-epoch): 0.360 GB
Graph-level communication (cluster-wide, per-epoch): 0.000 GB
Weight-sync communication (cluster-wide, per-epoch): 0.000 GB
Total communication (cluster-wide, per-epoch): 0.360 GB
****** Accuracy Results ******
Highest valid_acc: 0.9420
Target test_acc: 0.9390
Epoch to reach the target acc: 49
[MPI Rank 0] Success 
[MPI Rank 4] Success 
[MPI Rank 1] Success 
[MPI Rank 5] Success 
[MPI Rank 2] Success 
[MPI Rank 6] Success 
[MPI Rank 3] Success 
[MPI Rank 7] Success 
