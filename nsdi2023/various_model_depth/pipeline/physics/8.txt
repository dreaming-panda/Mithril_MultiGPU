Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
DONE MPI INITDONE MPI INIT
Initialized node 3 on machine gnerv7
DONE MPI INIT
Initialized node 0 on machine gnerv7

Initialized node 1 on machine gnerv7
DONE MPI INIT
Initialized node 2 on machine gnerv7
DONE MPI INITDONE MPI INIT
Initialized node 4 on machine gnerv8

Initialized node 5 on machine gnerv8
DONE MPI INIT
Initialized node 6 on machine gnerv8
DONE MPI INIT
Initialized node 7 on machine gnerv8
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
        It takes 0.009 seconds.
Building the CSC structure...
        It takes 0.010 seconds.
Building the CSC structure...
        It takes 0.010 seconds.
Building the CSC structure...
        It takes 0.011 seconds.
Building the CSC structure...
        It takes 0.011 seconds.
Building the CSC structure...
        It takes 0.011 seconds.
Building the CSC structure...
        It takes 0.012 seconds.
Building the CSC structure...
        It takes 0.013 seconds.
Building the CSC structure...
        It takes 0.011 seconds.
        It takes 0.011 seconds.
        It takes 0.011 seconds.
        It takes 0.011 seconds.
        It takes 0.011 seconds.
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
        It takes 0.016 seconds.
        It takes 0.018 seconds.
        It takes 0.018 seconds.
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
        It takes 0.460 seconds.
Building the Label Vector...
        It takes 0.003 seconds.
        It takes 0.484 seconds.
Building the Label Vector...
        It takes 0.002 seconds.
        It takes 0.512 seconds.
Building the Label Vector...
        It takes 0.002 seconds.
        It takes 0.517 seconds.
Building the Label Vector...
        It takes 0.002 seconds.
        It takes 0.609 seconds.
Building the Label Vector...
        It takes 0.617 seconds.
Building the Label Vector...
        It takes 0.004 seconds.
The graph dataset locates at /shared_hdd_storage/jingjichen/gnn_datasets/pipeline_parallel_datasets/physics/32_parts
The number of GCNII layers: 8
The number of hidden units: 100
The number of training epoches: 50
Learning rate: 0.001000
The partition strategy: model
The dropout rate: 0.500
The checkpointed weight file: /tmp/saved_weights_pipe
The random seed: 1
GCN hyper-parameter alpha: 0.100000
GCN hyper-parameter lambda: 0.500000
Number of classes: 5
Number of feature dimensions: 8415
Number of vertices: 34493
Number of GPUs: 8
        It takes 0.611 seconds.
Building the Label Vector...
        It takes 0.007 seconds.
        It takes 0.615 seconds.
Building the Label Vector...
        It takes 0.003 seconds.
        It takes 0.003 seconds.
GPU 0, layer [0, 2)
GPU 1, layer [2, 3)
GPU 2, layer [3, 4)
GPU 3, layer [4, 5)
GPU 4, layer [5, 6)
GPU 5, layer [6, 7)
GPU 6, layer [7, 8)
GPU 7, layer [8, 9)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
34493, 530417, 530417
Number of vertices per chunk: 1078
csr in-out ready !Start Cost Model Initialization...
GPU 0, layer [0, 2)
GPU 1, layer [2, 3)
GPU 2, layer [3, 4)
GPU 3, layer [4, 5)
GPU 4, layer [5, 6)
GPU 5, layer [6, 7)
GPU 6, layer [7, 8)
GPU 7, layer [8, 9)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 2)
GPU 1, layer [2, 3)
GPU 2, layer [3, 4)
GPU 3, layer [4, 5)
GPU 4, layer [5, 6)
GPU 5, layer [6, 7)
GPU 6, layer [7, 8)
GPU 7, layer [8, 9)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
34493, 530417, 530417
34493, 530417, 530417
Number of vertices per chunk: 1078
Number of vertices per chunk: 1078
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
GPU 0, layer [0, 2)
GPU 1, layer [2, 3)
GPU 2, layer [3, 4)
GPU 3, layer [4, 5)
GPU 4, layer [5, 6)
GPU 5, layer [6, 7)
GPU 6, layer [7, 8)
GPU 7, layer [8, 9)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
34493, 530417, 530417
Number of vertices per chunk: 1078
csr in-out ready !Start Cost Model Initialization...
GPU 0, layer [0, 2)
GPU 1, layer [2, 3)
GPU 2, layer [3, 4)
GPU 3, layer [4, 5)
GPU 4, layer [5, 6)
GPU 5, layer [6, 7)
GPU 6, layer [7, 8)
GPU 7, layer [8, 9)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 2)
GPU 1, layer [2, 3)
GPU 2, layer [3, 4)
GPU 3, layer [4, 5)
GPU 4, layer [5, 6)
GPU 5, layer [6, 7)
GPU 6, layer [7, 8)
GPU 7, layer [8, 9)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
34493, 530417, 530417
Number of vertices per chunk: 1078
34493, 530417, 530417
Number of vertices per chunk: 1078
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
GPU 0, layer [0, 2)
GPU 1, layer [2, 3)
GPU 2, layer [3, 4)
GPU 3, layer [4, 5)
GPU 4, layer [5, 6)
GPU 5, layer [6, 7)
GPU 6, layer [7, 8)
GPU 7, layer [8, 9)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
34493, 530417, 530417
Number of vertices per chunk: 1078
train nodes 100, valid nodes 500, test nodes 1000
GPU 0, layer [0, 2)
GPU 1, layer [2, 3)
GPU 2, layer [3, 4)
GPU 3, layer [4, 5)
GPU 4, layer [5, 6)
GPU 5, layer [6, 7)
GPU 6, layer [7, 8)
GPU 7, layer [8, 9)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
Chunks (number of global chunks: 32): 0-[0, 1025) 1-[1025, 2154) 2-[2154, 3262) 3-[3262, 4284) 4-[4284, 5334) 5-[5334, 6511) 6-[6511, 7597) 7-[7597, 8680) 8-[8680, 9764) ... 31-[33337, 34493)
34493, 530417, 530417
Number of vertices per chunk: 1078
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
***** Start profiling the layer-level communication performance *******
The layer-level communication performance: 60.534 Gbps (per GPU), 484.276 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 60.204 Gbps (per GPU), 481.636 Gbps (aggregated)
The layer-level communication performance: 60.196 Gbps (per GPU), 481.566 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 59.937 Gbps (per GPU), 479.496 Gbps (aggregated)
The layer-level communication performance: 59.902 Gbps (per GPU), 479.217 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 59.698 Gbps (per GPU), 477.584 Gbps (aggregated)
The layer-level communication performance: 59.648 Gbps (per GPU), 477.181 Gbps (aggregated)
The layer-level communication performance: 59.618 Gbps (per GPU), 476.948 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The graph-level communication performance (supernode = 2): 158.605 Gbps (per GPU), 1268.837 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.605 Gbps (per GPU), 1268.841 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.605 Gbps (per GPU), 1268.839 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.596 Gbps (per GPU), 1268.766 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.608 Gbps (per GPU), 1268.864 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.587 Gbps (per GPU), 1268.698 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.602 Gbps (per GPU), 1268.817 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.596 Gbps (per GPU), 1268.766 Gbps (aggregated, cluster-wide)
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
The graph-level communication performance (supernode = 4): 105.202 Gbps (per GPU), 841.617 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 105.196 Gbps (per GPU), 841.568 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 105.201 Gbps (per GPU), 841.610 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 105.199 Gbps (per GPU), 841.596 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 105.199 Gbps (per GPU), 841.596 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 105.192 Gbps (per GPU), 841.540 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 105.201 Gbps (per GPU), 841.610 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 105.152 Gbps (per GPU), 841.217 Gbps (aggregated, cluster-wide)
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
The graph-level communication performance (supernode = 8): 37.702 Gbps (per GPU), 301.614 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 37.700 Gbps (per GPU), 301.598 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 37.697 Gbps (per GPU), 301.579 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 37.699 Gbps (per GPU), 301.588 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 37.699 Gbps (per GPU), 301.593 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 37.701 Gbps (per GPU), 301.604 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 37.694 Gbps (per GPU), 301.556 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 37.672 Gbps (per GPU), 301.372 Gbps (aggregated, cluster-wide)
 LType   LT0   LT1   LT2 Ratio  VSum  ESum
 chk_0  1.28ms  0.30ms  0.42ms  4.24  1.02K  0.02M
 chk_1  1.36ms  0.30ms  0.42ms  4.47  1.13K  0.01M
 chk_2  2.38ms  0.30ms  0.43ms  7.82  1.11K  0.01M
 chk_3  1.28ms  0.30ms  0.42ms  4.25  1.02K  0.02M
 chk_4  1.30ms  0.30ms  0.42ms  4.33  1.05K  0.02M
 chk_5  1.40ms  0.30ms  0.43ms  4.65  1.18K  0.01M
 chk_6  1.33ms  0.30ms  0.42ms  4.41  1.09K  0.02M
 chk_7  1.33ms  0.30ms  0.43ms  4.42  1.08K  0.02M
 chk_8  1.33ms  0.30ms  0.43ms  4.42  1.08K  0.01M
 chk_9  1.31ms  0.30ms  0.42ms  4.40  1.06K  0.02M
chk_10  1.31ms  0.30ms  0.47ms  4.37  1.04K  0.02M
chk_11  1.35ms  0.30ms  0.43ms  4.49  1.11K  0.01M
chk_12  1.35ms  0.30ms  0.43ms  4.50  1.11K  0.01M
chk_13  1.27ms  0.29ms  0.42ms  4.31  1.01K  0.02M
chk_14  1.35ms  0.30ms  0.43ms  4.46  1.09K  0.01M
chk_15  1.29ms  0.30ms  0.43ms  4.31  1.03K  0.02M
chk_16  1.25ms  0.29ms  0.42ms  4.23  0.98K  0.02M
chk_17  1.34ms  0.30ms  0.43ms  4.48  1.09K  0.01M
chk_18  1.30ms  0.30ms  0.43ms  4.34  1.04K  0.02M
chk_19  1.36ms  0.30ms  0.43ms  4.52  1.12K  0.01M
chk_20  1.36ms  0.30ms  0.43ms  4.53  1.13K  0.01M
chk_21  1.31ms  0.30ms  0.43ms  4.37  1.05K  0.02M
chk_22  1.35ms  0.30ms  0.43ms  4.50  1.11K  0.01M
chk_23  1.35ms  0.30ms  0.43ms  4.45  1.10K  0.01M
chk_24  2.21ms  0.30ms  0.42ms  7.40  1.02K  0.02M
chk_25  1.27ms  0.29ms  0.42ms  4.30  1.01K  0.02M
chk_26  1.36ms  0.30ms  0.43ms  4.51  1.12K  0.01M
chk_27  1.32ms  0.30ms  0.43ms  4.40  1.08K  0.02M
chk_28  1.32ms  0.30ms  0.43ms  4.36  1.07K  0.02M
chk_29  1.35ms  0.30ms  0.43ms  4.53  1.11K  0.01M
chk_30  1.34ms  0.30ms  0.43ms  4.45  1.10K  0.01M
chk_31  1.39ms  0.30ms  0.43ms  4.63  1.16K  0.01M
   Avg  1.39  0.30  0.43
   Max  2.38  0.30  0.47
   Min  1.25  0.29  0.42
 Ratio  1.91  1.03  1.11
   Var  0.06  0.00  0.00
Profiling takes 0.895 s
*** Node 0, starting model training...
Num Stages: 8 / 8
Node 0, Pipeline Input Tensor: NULL
Node 0, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 0 owns the model-level partition [0, 13)
*** Node 0, constructing the helper classes...
Node 0, Local Vertex Begin: 0, Num Local Vertices: 34493
*** Node 4, starting model training...
Num Stages: 8 / 8
*** Node 2, starting model training...
Num Stages: 8 / 8
Node 2, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 2, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 2 owns the model-level partition [20, 27)
*** Node 2, constructing the helper classes...
*** Node 5, starting model training...
Num Stages: 8 / 8
Node 5, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 5, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 5 owns the model-level partition [41, 48)
*** Node 5, constructing the helper classes...
Node 5, Local Vertex Begin: 0, Num Local Vertices: 34493
*** Node 3, starting model training...
Num Stages: 8 / 8
Node 3, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 3, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 3 owns the model-level partition [27, 34)
*** Node 3, constructing the helper classes...
Node 3, Local Vertex Begin: 0, Num Local Vertices: 34493
Node 4, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 4, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 4 owns the model-level partition [34, 41)
*** Node 4, constructing the helper classes...
Node 4, Local Vertex Begin: 0, Num Local Vertices: 34493
*** Node 1, starting model training...
Num Stages: 8 / 8
Node 1, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 1, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 1 owns the model-level partition [13, 20)
*** Node 1, constructing the helper classes...
Node 1, Local Vertex Begin: 0, Num Local Vertices: 34493
Node 2, Local Vertex Begin: 0, Num Local Vertices: 34493
*** Node 7, starting model training...
Num Stages: 8 / 8
Node 7, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 7, Pipeline Output Tensor: NULL
*** Node 7 owns the model-level partition [55, 65)
*** Node 7, constructing the helper classes...
Node 7, Local Vertex Begin: 0, Num Local Vertices: 34493
*** Node 6, starting model training...
Num Stages: 8 / 8
Node 6, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 6, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 6 owns the model-level partition [48, 55)
*** Node 6, constructing the helper classes...
Node 6, Local Vertex Begin: 0, Num Local Vertices: 34493
*** Node 3, setting up some other necessary information...
*** Node 5, setting up some other necessary information...
*** Node 0, setting up some other necessary information...
*** Node 4, setting up some other necessary information...
*** Node 1, setting up some other necessary information...
*** Node 6, setting up some other necessary information...
*** Node 2, setting up some other necessary information...
*** Node 7, setting up some other necessary information...
+++++++++ Node 1 initializing the weights for op[13, 20)...
+++++++++ Node 3 initializing the weights for op[27, 34)...
+++++++++ Node 2 initializing the weights for op[20, 27)...
+++++++++ Node 4 initializing the weights for op[34, 41)...
+++++++++ Node 5 initializing the weights for op[41, 48)...
+++++++++ Node 6 initializing the weights for op[48, 55)...
+++++++++ Node 0 initializing the weights for op[0, 13)...
+++++++++ Node 7 initializing the weights for op[55, 65)...
Node 0, discovering the vertices that will be sent across graph boundary...
Node 4, discovering the vertices that will be sent across graph boundary...
Node 2, discovering the vertices that will be sent across graph boundary...
Node 5, discovering the vertices that will be sent across graph boundary...
The number of mirror vertices: 0
Node 0, discovering the vertices that will be received across the graph boundary.
Node 7, discovering the vertices that will be sent across graph boundary...
Node 7, discovering the vertices that will be received across the graph boundary.
Node 1, discovering the vertices that will be sent across graph boundary...
Node 1, discovering the vertices that will be received across the graph boundary.
Node 4, discovering the vertices that will be received across the graph boundary.
Node 2, discovering the vertices that will be received across the graph boundary.
****** Start Scheduling the Tasks in a Pipelined Fashion ******
Node 5, discovering the vertices that will be received across the graph boundary.
Node 3, discovering the vertices that will be sent across graph boundary...
Node 3, discovering the vertices that will be received across the graph boundary.
Node 6, discovering the vertices that will be sent across graph boundary...
Node 6, discovering the vertices that will be received across the graph boundary.
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
*** Node 0, starting task scheduling...
*** Node 1, starting task scheduling...
*** Node 2, starting task scheduling...
*** Node 3, starting task scheduling...



*** Node 4, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 5, starting task scheduling...
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
*** Node 6, starting task scheduling...
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
*** Node 7, starting task scheduling...
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
	Epoch 1:	Loss 1.5997	TrainAcc 0.4500	ValidAcc 0.2780	TestAcc 0.2730	BestValid 0.2780
	Epoch 50:	Loss 0.0671	TrainAcc 0.9900	ValidAcc 0.9460	TestAcc 0.9430	BestValid 0.9460
****** Epoch Time (Excluding Evaluation Cost): 0.068 s ******
****** Breakdown Analysis ******
Cluster-Wide Average, Bubble-Pipeline: 10.117 ms (Max: 13.845, Min: 5.002, Sum: 80.938)
Cluster-Wide Average, Compute: 17.951 ms (Max: 54.023, Min: 11.973, Sum: 143.610)
Cluster-Wide Average, Communication-Layer: 8.410 ms (Max: 9.994, Min: 7.013, Sum: 67.283)
Cluster-Wide Average, Bubble-Imbalance: 30.951 ms (Max: 39.424, Min: 1.270, Sum: 247.609)
Cluster-Wide Average, Communication-Graph: 0.125 ms (Max: 0.143, Min: 0.109, Sum: 0.998)
Cluster-Wide Average, Optimization: 0.057 ms (Max: 0.258, Min: 0.026, Sum: 0.457)
Cluster-Wide Average, Others: 0.456 ms (Max: 1.332, Min: 0.137, Sum: 3.648)
****** Breakdown Sum: 68.068 ms ******
Cluster-Wide Average, GPU Memory Consumption: 1.630 GB (Max: 3.518, Min: 1.346, Sum: 13.038)
Cluster-Wide Average, Graph-Level Communication Throughput: -nan Gbps (Max: -nan, Min: -nan, Sum: -nan)
Cluster-Wide Average, Layer-Level Communication Throughput: 45.341 Gbps (Max: 54.295, Min: 31.409, Sum: 362.726)
Layer-level communication (cluster-wide, per-epoch): 0.360 GB
Graph-level communication (cluster-wide, per-epoch): 0.000 GB
Weight-sync communication (cluster-wide, per-epoch): 0.000 GB
Total communication (cluster-wide, per-epoch): 0.360 GB
****** Accuracy Results ******
Highest valid_acc: 0.9460
Target test_acc: 0.9430
Epoch to reach the target acc: 49
[MPI Rank 0] Success 
[MPI Rank 1] Success 
[MPI Rank 4] Success 
[MPI Rank 2] Success 
[MPI Rank 6] Success 
[MPI Rank 3] Success 
[MPI Rank 7] Success 
[MPI Rank 5] Success 
