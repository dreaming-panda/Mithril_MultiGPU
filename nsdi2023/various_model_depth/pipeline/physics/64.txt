Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
DONE MPI INITDONE MPI INIT
DONE MPI INIT
Initialized node 4 on machine gnerv8
Initialized node 7 on machine gnerv8

Initialized node 5 on machine gnerv8
DONE MPI INIT
Initialized node 6 on machine gnerv8
DONE MPI INITDONE MPI INIT
Initialized node 1 on machine gnerv7
DONE MPI INIT
Initialized node 3 on machine gnerv7
DONE MPI INIT

Initialized node 2 on machine gnerv7
Initialized node 0 on machine gnerv7
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
        It takes 0.010 seconds.
Building the CSC structure...
        It takes 0.011 seconds.
Building the CSC structure...
        It takes 0.012 seconds.
Building the CSC structure...
        It takes 0.013 seconds.
Building the CSC structure...
        It takes 0.014 seconds.
Building the CSC structure...
        It takes 0.012 seconds.
        It takes 0.019 seconds.
Building the CSC structure...
        It takes 0.012 seconds.
        It takes 0.018 seconds.
Building the CSC structure...
        It takes 0.019 seconds.
Building the CSC structure...
Building the Feature Vector...
        It takes 0.017 seconds.
Building the Feature Vector...
        It takes 0.017 seconds.
        It takes 0.017 seconds.
Building the Feature Vector...
        It takes 0.010 seconds.
        It takes 0.010 seconds.
Building the Feature Vector...
Building the Feature Vector...
        It takes 0.011 seconds.
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
        It takes 0.456 seconds.
Building the Label Vector...
        It takes 0.002 seconds.
        It takes 0.456 seconds.
Building the Label Vector...
        It takes 0.002 seconds.
        It takes 0.509 seconds.
Building the Label Vector...
        It takes 0.511 seconds.
Building the Label Vector...
        It takes 0.003 seconds.
        It takes 0.007 seconds.
        It takes 0.568 seconds.
Building the Label Vector...
        It takes 0.003 seconds.
        It takes 0.621 seconds.
Building the Label Vector...
        It takes 0.612 seconds.
Building the Label Vector...
        It takes 0.004 seconds.
The graph dataset locates at /shared_hdd_storage/jingjichen/gnn_datasets/pipeline_parallel_datasets/physics/32_parts
The number of GCNII layers: 64
The number of hidden units: 100
The number of training epoches: 50
Learning rate: 0.001000
The partition strategy: model
The dropout rate: 0.500
The checkpointed weight file: /tmp/saved_weights_pipe
The random seed: 1
GCN hyper-parameter alpha: 0.100000
GCN hyper-parameter lambda: 0.500000
Number of classes: 5
Number of feature dimensions: 8415
Number of vertices: 34493
Number of GPUs: 8
        It takes 0.614 seconds.
Building the Label Vector...
        It takes 0.006 seconds.
        It takes 0.003 seconds.
GPU 0, layer [0, 9)
GPU 1, layer [9, 17)
GPU 2, layer [17, 25)
GPU 3, layer [25, 33)
GPU 4, layer [33, 41)
GPU 5, layer [41, 49)
GPU 6, layer [49, 57)
GPU 7, layer [57, 65)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
34493, 530417, 530417
Number of vertices per chunk: 1078
csr in-out ready !Start Cost Model Initialization...
GPU 0, layer [0, 9)
GPU 1, layer [9, 17)
GPU 2, layer [17, 25)
GPU 3, layer [25, 33)
GPU 4, layer [33, 41)
GPU 5, layer [41, 49)
GPU 6, layer [49, 57)
GPU 7, layer [57, 65)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
34493, 530417, 530417
Number of vertices per chunk: 1078
csr in-out ready !Start Cost Model Initialization...
GPU 0, layer [0, 9)
GPU 1, layer [9, 17)
GPU 2, layer [17, 25)
GPU 3, layer [25, 33)
GPU 4, layer [33, 41)
GPU 5, layer [41, 49)
GPU 6, layer [49, 57)
GPU 7, layer [57, 65)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
34493, 530417, 530417
Number of vertices per chunk: 1078
csr in-out ready !Start Cost Model Initialization...
GPU 0, layer [0, 9)
GPU 1, layer [9, 17)
GPU 2, layer [17, 25)
GPU 3, layer [25, 33)
GPU 4, layer [33, 41)
GPU 5, layer [41, 49)
GPU 6, layer [49, 57)
GPU 7, layer [57, 65)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
34493, 530417, 530417
Number of vertices per chunk: 1078
csr in-out ready !Start Cost Model Initialization...
GPU 0, layer [0, 9)
GPU 1, layer [9, 17)
GPU 2, layer [17, 25)
GPU 3, layer [25, 33)
GPU 4, layer [33, 41)
GPU 5, layer [41, 49)
GPU 6, layer [49, 57)
GPU 7, layer [57, 65)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
34493, 530417, 530417
GPU 0, layer [0, 9)
GPU 1, layer [9, 17)
GPU 2, layer [17, 25)
GPU 3, layer [25, 33)
GPU 4, layer [33, 41)
GPU 5, layer [41, 49)
GPU 6, layer [49, 57)
GPU 7, layer [57, 65)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
Number of vertices per chunk: 1078
34493, 530417, 530417
Number of vertices per chunk: 1078
csr in-out ready !Start Cost Model Initialization...
GPU 0, layer [0, 9)
GPU 1, layer [9, 17)
GPU 2, layer [17, 25)
GPU 3, layer [25, 33)
GPU 4, layer [33, 41)
GPU 5, layer [41, 49)
GPU 6, layer [49, 57)
GPU 7, layer [57, 65)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
34493, 530417, 530417
Number of vertices per chunk: 1078
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
train nodes 100, valid nodes 500, test nodes 1000
GPU 0, layer [0, 9)
GPU 1, layer [9, 17)
GPU 2, layer [17, 25)
GPU 3, layer [25, 33)
GPU 4, layer [33, 41)
GPU 5, layer [41, 49)
GPU 6, layer [49, 57)
GPU 7, layer [57, 65)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
Chunks (number of global chunks: 32): 0-[0, 1025) 1-[1025, 2154) 2-[2154, 3262) 3-[3262, 4284) 4-[4284, 5334) 5-[5334, 6511) 6-[6511, 7597) 7-[7597, 8680) 8-[8680, 9764) ... 31-[33337, 34493)
34493, 530417, 530417
Number of vertices per chunk: 1078
csr in-out ready !Start Cost Model Initialization...
***** Start profiling the layer-level communication performance *******
The layer-level communication performance: 60.091 Gbps (per GPU), 480.726 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 59.799 Gbps (per GPU), 478.395 Gbps (aggregated)
The layer-level communication performance: 59.788 Gbps (per GPU), 478.306 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 59.547 Gbps (per GPU), 476.374 Gbps (aggregated)
The layer-level communication performance: 59.518 Gbps (per GPU), 476.144 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 59.295 Gbps (per GPU), 474.361 Gbps (aggregated)
The layer-level communication performance: 59.245 Gbps (per GPU), 473.957 Gbps (aggregated)
The layer-level communication performance: 59.211 Gbps (per GPU), 473.686 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The graph-level communication performance (supernode = 2): 158.147 Gbps (per GPU), 1265.178 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.123 Gbps (per GPU), 1264.988 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.147 Gbps (per GPU), 1265.178 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.120 Gbps (per GPU), 1264.964 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.147 Gbps (per GPU), 1265.178 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.123 Gbps (per GPU), 1264.988 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.147 Gbps (per GPU), 1265.178 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.115 Gbps (per GPU), 1264.918 Gbps (aggregated, cluster-wide)
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
The graph-level communication performance (supernode = 4): 103.630 Gbps (per GPU), 829.044 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 103.630 Gbps (per GPU), 829.037 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 103.630 Gbps (per GPU), 829.044 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 103.630 Gbps (per GPU), 829.042 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 103.595 Gbps (per GPU), 828.764 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 103.595 Gbps (per GPU), 828.757 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 103.527 Gbps (per GPU), 828.218 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 103.513 Gbps (per GPU), 828.102 Gbps (aggregated, cluster-wide)
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
The graph-level communication performance (supernode = 8): 37.151 Gbps (per GPU), 297.211 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 37.152 Gbps (per GPU), 297.218 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 37.152 Gbps (per GPU), 297.218 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 37.153 Gbps (per GPU), 297.226 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 37.152 Gbps (per GPU), 297.215 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 37.150 Gbps (per GPU), 297.198 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 37.142 Gbps (per GPU), 297.139 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 37.122 Gbps (per GPU), 296.977 Gbps (aggregated, cluster-wide)
 LType   LT0   LT1   LT2 Ratio  VSum  ESum
 chk_0  1.28ms  0.30ms  0.42ms  4.23  1.02K  0.02M
 chk_1  1.36ms  0.30ms  0.42ms  4.50  1.13K  0.01M
 chk_2  1.35ms  0.30ms  0.42ms  4.43  1.11K  0.01M
 chk_3  1.28ms  0.30ms  0.42ms  4.26  1.02K  0.02M
 chk_4  1.31ms  0.30ms  0.42ms  4.33  1.05K  0.02M
 chk_5  1.40ms  0.30ms  0.43ms  4.64  1.18K  0.01M
 chk_6  1.34ms  0.30ms  0.42ms  4.41  1.09K  0.02M
 chk_7  1.34ms  0.30ms  0.42ms  4.44  1.08K  0.02M
 chk_8  1.34ms  0.30ms  0.42ms  4.44  1.08K  0.01M
 chk_9  1.31ms  0.30ms  0.42ms  4.37  1.06K  0.02M
chk_10  1.30ms  0.30ms  0.42ms  4.35  1.04K  0.02M
chk_11  1.35ms  0.30ms  0.43ms  4.49  1.11K  0.01M
chk_12  1.35ms  0.30ms  0.42ms  4.48  1.11K  0.01M
chk_13  1.27ms  0.30ms  0.42ms  4.25  1.01K  0.02M
chk_14  1.34ms  0.30ms  0.42ms  4.45  1.09K  0.01M
chk_15  1.29ms  0.30ms  0.42ms  4.30  1.03K  0.02M
chk_16  1.24ms  0.30ms  0.42ms  4.13  0.98K  0.02M
chk_17  1.34ms  0.31ms  0.42ms  4.39  1.09K  0.01M
chk_18  1.30ms  0.30ms  0.42ms  4.32  1.04K  0.02M
chk_19  1.36ms  0.30ms  0.43ms  4.53  1.12K  0.01M
chk_20  1.36ms  0.30ms  0.48ms  4.53  1.13K  0.01M
chk_21  1.89ms  0.30ms  0.43ms  6.29  1.05K  0.02M
chk_22  1.35ms  0.30ms  0.43ms  4.48  1.11K  0.01M
chk_23  1.34ms  0.30ms  0.43ms  4.44  1.10K  0.01M
chk_24  1.28ms  0.30ms  0.42ms  4.29  1.02K  0.02M
chk_25  1.27ms  0.29ms  0.42ms  4.30  1.01K  0.02M
chk_26  1.36ms  0.30ms  0.43ms  4.49  1.12K  0.01M
chk_27  1.32ms  0.30ms  0.42ms  4.43  1.08K  0.02M
chk_28  1.32ms  0.30ms  0.43ms  4.34  1.07K  0.02M
chk_29  1.35ms  0.30ms  0.43ms  4.52  1.11K  0.01M
chk_30  1.34ms  0.30ms  0.42ms  4.44  1.10K  0.01M
chk_31  1.38ms  0.30ms  0.43ms  4.63  1.16K  0.01M
   Avg  1.34  0.30  0.43
   Max  1.89  0.31  0.48
   Min  1.24  0.29  0.42
 Ratio  1.52  1.04  1.16
   Var  0.01  0.00  0.00
Profiling takes 0.891 s
*** Node 0, starting model training...
Num Stages: 8 / 8
Node 0, Pipeline Input Tensor: NULL
Node 0, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 0 owns the model-level partition [0, 62)
*** Node 0, constructing the helper classes...
*** Node 1, starting model training...
Num Stages: 8 / 8
*** Node 2, starting model training...
Num Stages: 8 / 8
Node 2, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 2, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 2 owns the model-level partition [118, 174)
*** Node 2, constructing the helper classes...
Node 2, Local Vertex Begin: 0, Num Local Vertices: 34493
*** Node 3, starting model training...
Num Stages: 8 / 8
Node 3, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 3, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 3 owns the model-level partition [174, 230)
*** Node 3, constructing the helper classes...
Node 3, Local Vertex Begin: 0, Num Local Vertices: 34493
Node 0, Local Vertex Begin: 0, Num Local Vertices: 34493
Node 1, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 1, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 1 owns the model-level partition [62, 118)
*** Node 1, constructing the helper classes...
Node 1, Local Vertex Begin: 0, Num Local Vertices: 34493
*** Node 4, starting model training...
Num Stages: 8 / 8
*** Node 5, starting model training...
Num Stages: 8 / 8
Node 5, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 5, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 5 owns the model-level partition [286, 342)
*** Node 5, constructing the helper classes...
Node 5, Local Vertex Begin: 0, Num Local Vertices: 34493
*** Node 6, starting model training...
Num Stages: 8 / 8
Node 6, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 6, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 6 owns the model-level partition [342, 398)
*** Node 6, constructing the helper classes...
Node 6, Local Vertex Begin: 0, Num Local Vertices: 34493
*** Node 7, starting model training...
Num Stages: 8 / 8
Node 7, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 7, Pipeline Output Tensor: NULL
*** Node 7 owns the model-level partition [398, 457)
*** Node 7, constructing the helper classes...
Node 7, Local Vertex Begin: 0, Num Local Vertices: 34493
Node 4, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 4, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 4 owns the model-level partition [230, 286)
*** Node 4, constructing the helper classes...
Node 4, Local Vertex Begin: 0, Num Local Vertices: 34493
*** Node 0, setting up some other necessary information...
*** Node 1, setting up some other necessary information...
*** Node 7, setting up some other necessary information...
*** Node 3, setting up some other necessary information...
*** Node 2, setting up some other necessary information...
*** Node 5, setting up some other necessary information...
*** Node 6, setting up some other necessary information...
*** Node 4, setting up some other necessary information...
+++++++++ Node 1 initializing the weights for op[62, 118)...
+++++++++ Node 2 initializing the weights for op[118, 174)...
+++++++++ Node 7 initializing the weights for op[398, 457)...
+++++++++ Node 6 initializing the weights for op[342, 398)...
+++++++++ Node 4 initializing the weights for op[230, 286)...
+++++++++ Node 0 initializing the weights for op[0, 62)...
+++++++++ Node 5 initializing the weights for op[286, 342)...
+++++++++ Node 3 initializing the weights for op[174, 230)...
Node 1, discovering the vertices that will be sent across graph boundary...
Node 2, discovering the vertices that will be sent across graph boundary...
Node 3, discovering the vertices that will be sent across graph boundary...
Node 4, discovering the vertices that will be sent across graph boundary...
Node 6, discovering the vertices that will be sent across graph boundary...
Node 7, discovering the vertices that will be sent across graph boundary...
Node 5, discovering the vertices that will be sent across graph boundary...
Node 0, discovering the vertices that will be sent across graph boundary...
The number of mirror vertices: 0
Node 0, discovering the vertices that will be received across the graph boundary.
Node 1, discovering the vertices that will be received across the graph boundary.
Node 2, discovering the vertices that will be received across the graph boundary.
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
Node 3, discovering the vertices that will be received across the graph boundary.
Node 4, discovering the vertices that will be received across the graph boundary.
Node 5, discovering the vertices that will be received across the graph boundary.
****** Start Scheduling the Tasks in a Pipelined Fashion ******
Node 6, discovering the vertices that will be received across the graph boundary.
Node 7, discovering the vertices that will be received across the graph boundary.
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
*** Node 0, starting task scheduling...
*** Node 1, starting task scheduling...
*** Node 2, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 3, starting task scheduling...



The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
*** Node 4, starting task scheduling...
*** Node 5, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 6, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 7, starting task scheduling...
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
	Epoch 1:	Loss 1.9550	TrainAcc 0.3200	ValidAcc 0.2120	TestAcc 0.2310	BestValid 0.2120
	Epoch 50:	Loss 1.1615	TrainAcc 0.9500	ValidAcc 0.9340	TestAcc 0.9320	BestValid 0.9340
****** Epoch Time (Excluding Evaluation Cost): 0.164 s ******
****** Breakdown Analysis ******
Cluster-Wide Average, Bubble-Pipeline: 27.621 ms (Max: 30.467, Min: 23.078, Sum: 220.969)
Cluster-Wide Average, Compute: 92.720 ms (Max: 128.441, Min: 83.104, Sum: 741.760)
Cluster-Wide Average, Communication-Layer: 10.732 ms (Max: 12.128, Min: 8.505, Sum: 85.853)
Cluster-Wide Average, Bubble-Imbalance: 30.572 ms (Max: 40.780, Min: 1.291, Sum: 244.575)
Cluster-Wide Average, Communication-Graph: 1.202 ms (Max: 1.485, Min: 0.921, Sum: 9.613)
Cluster-Wide Average, Optimization: 0.222 ms (Max: 0.417, Min: 0.188, Sum: 1.779)
Cluster-Wide Average, Others: 0.993 ms (Max: 1.971, Min: 0.826, Sum: 7.944)
****** Breakdown Sum: 164.062 ms ******
Cluster-Wide Average, GPU Memory Consumption: 3.951 GB (Max: 6.251, Min: 3.608, Sum: 31.604)
Cluster-Wide Average, Graph-Level Communication Throughput: -nan Gbps (Max: -nan, Min: -nan, Sum: -nan)
Cluster-Wide Average, Layer-Level Communication Throughput: 35.419 Gbps (Max: 41.676, Min: 24.952, Sum: 283.356)
Layer-level communication (cluster-wide, per-epoch): 0.360 GB
Graph-level communication (cluster-wide, per-epoch): 0.000 GB
Weight-sync communication (cluster-wide, per-epoch): 0.000 GB
Total communication (cluster-wide, per-epoch): 0.360 GB
****** Accuracy Results ******
Highest valid_acc: 0.9340
Target test_acc: 0.9320
Epoch to reach the target acc: 49
[MPI Rank 0] Success 
[MPI Rank 1] Success 
[MPI Rank 4] Success 
[MPI Rank 2] Success 
[MPI Rank 5] Success 
[MPI Rank 3] Success 
[MPI Rank 6] Success 
[MPI Rank 7] Success 
