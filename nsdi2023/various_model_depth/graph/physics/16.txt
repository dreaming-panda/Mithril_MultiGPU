Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
DONE MPI INIT
Initialized node 7 on machine gnerv8
DONE MPI INITDONE MPI INIT
Initialized node 6 on machine gnerv8

Initialized node 4 on machine gnerv8
DONE MPI INIT
Initialized node 5 on machine gnerv8
DONE MPI INIT
DONE MPI INITDONE MPI INIT
Initialized node 3 on machine gnerv7
Initialized node 0 on machine gnerv7
DONE MPI INIT
Initialized node 1 on machine gnerv7

Initialized node 2 on machine gnerv7
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
        It takes 0.011 seconds.
Building the CSC structure...
        It takes 0.011 seconds.
Building the CSC structure...
        It takes 0.011 seconds.
Building the CSC structure...
        It takes 0.011 seconds.
Building the CSC structure...
        It takes 0.017 seconds.
Building the CSC structure...
        It takes 0.017 seconds.
Building the CSC structure...
        It takes 0.018 seconds.
Building the CSC structure...
        It takes 0.020 seconds.
Building the CSC structure...
        It takes 0.012 seconds.
        It takes 0.012 seconds.
        It takes 0.012 seconds.
        It takes 0.012 seconds.
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
        It takes 0.011 seconds.
Building the Feature Vector...
        It takes 0.012 seconds.
        It takes 0.013 seconds.
Building the Feature Vector...
        It takes 0.014 seconds.
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
        It takes 0.466 seconds.
Building the Label Vector...
        It takes 0.003 seconds.
        It takes 0.482 seconds.
Building the Label Vector...
        It takes 0.002 seconds.
        It takes 0.500 seconds.
Building the Label Vector...
        It takes 0.002 seconds.
        It takes 0.505 seconds.
Building the Label Vector...
        It takes 0.003 seconds.
        It takes 0.565 seconds.
Building the Label Vector...
        It takes 0.003 seconds.
        It takes 0.597 seconds.
Building the Label Vector...
        It takes 0.609 seconds.
Building the Label Vector...
        It takes 0.007 seconds.
        It takes 0.004 seconds.
The graph dataset locates at /shared_hdd_storage/jingjichen/gnn_datasets/graph_parallel_datasets/physics/8_parts
The number of GCNII layers: 16
The number of hidden units: 100
The number of training epoches: 50
Learning rate: 0.001000
The partition strategy: model
The dropout rate: 0.500
The checkpointed weight file: /tmp/saved_weights_pipe
The random seed: 1
GCN hyper-parameter alpha: 0.100000
GCN hyper-parameter lambda: 0.500000
Number of classes: 5
Number of feature dimensions: 8415
Number of vertices: 34493
Number of GPUs: 8
        It takes 0.607 seconds.
Building the Label Vector...
        It takes 0.003 seconds.
GPU 0, layer [0, 17)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
34493, 530417, 530417
Number of vertices per chunk: 4312
csr in-out ready !Start Cost Model Initialization...
GPU 0, layer [0, 17)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
34493, 530417, 530417
Number of vertices per chunk: 4312
csr in-out ready !Start Cost Model Initialization...
GPU 0, layer [0, 17)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
34493, 530417, 530417
Number of vertices per chunk: 4312
csr in-out ready !Start Cost Model Initialization...
GPU 0, layer [0, 17)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
34493, 530417, 530417
Number of vertices per chunk: 4312
csr in-out ready !Start Cost Model Initialization...
GPU 0, layer [0, 17)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
34493, 530417, 530417
Number of vertices per chunk: 4312
GPU 0, layer [0, 17)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 17)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
csr in-out ready !Start Cost Model Initialization...
34493, 530417, 530417
Number of vertices per chunk: 4312
34493, 530417, 530417
Number of vertices per chunk: 4312
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
train nodes 100, valid nodes 500, test nodes 1000
GPU 0, layer [0, 17)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
Chunks (number of global chunks: 8): 0-[0, 4311) 1-[4311, 8623) 2-[8623, 12935) 3-[12935, 17247) 4-[17247, 21558) 5-[21558, 25870) 6-[25870, 30181) 7-[30181, 34493)
34493, 530417, 530417
Number of vertices per chunk: 4312
csr in-out ready !Start Cost Model Initialization...
***** Start profiling the layer-level communication performance *******
The layer-level communication performance: 60.333 Gbps (per GPU), 482.667 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 60.024 Gbps (per GPU), 480.192 Gbps (aggregated)
The layer-level communication performance: 60.015 Gbps (per GPU), 480.123 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 59.770 Gbps (per GPU), 478.164 Gbps (aggregated)
The layer-level communication performance: 59.742 Gbps (per GPU), 477.934 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 59.517 Gbps (per GPU), 476.134 Gbps (aggregated)
The layer-level communication performance: 59.467 Gbps (per GPU), 475.735 Gbps (aggregated)
The layer-level communication performance: 59.434 Gbps (per GPU), 475.469 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The graph-level communication performance (supernode = 2): 159.155 Gbps (per GPU), 1273.244 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 159.174 Gbps (per GPU), 1273.389 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 159.159 Gbps (per GPU), 1273.268 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 159.174 Gbps (per GPU), 1273.388 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 159.165 Gbps (per GPU), 1273.316 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 159.177 Gbps (per GPU), 1273.413 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 159.165 Gbps (per GPU), 1273.316 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 159.174 Gbps (per GPU), 1273.393 Gbps (aggregated, cluster-wide)
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
The graph-level communication performance (supernode = 4): 104.606 Gbps (per GPU), 836.845 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 104.606 Gbps (per GPU), 836.845 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 104.606 Gbps (per GPU), 836.845 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 104.605 Gbps (per GPU), 836.838 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 104.604 Gbps (per GPU), 836.831 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 104.603 Gbps (per GPU), 836.825 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 104.559 Gbps (per GPU), 836.470 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 104.560 Gbps (per GPU), 836.477 Gbps (aggregated, cluster-wide)
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
The graph-level communication performance (supernode = 8): 37.866 Gbps (per GPU), 302.930 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 37.867 Gbps (per GPU), 302.939 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 37.865 Gbps (per GPU), 302.918 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 37.867 Gbps (per GPU), 302.933 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 37.867 Gbps (per GPU), 302.935 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 37.862 Gbps (per GPU), 302.893 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 37.860 Gbps (per GPU), 302.877 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 37.837 Gbps (per GPU), 302.699 Gbps (aggregated, cluster-wide)
 LType   LT0   LT1   LT2 Ratio  VSum  ESum
 chk_0  4.73ms  0.44ms  0.57ms 10.67  4.31K  0.10M
 chk_1  4.24ms  0.44ms  0.57ms  9.71  4.31K  0.10M
 chk_2  4.25ms  0.43ms  0.56ms  9.95  4.31K  0.06M
 chk_3  4.26ms  0.43ms  0.56ms  9.97  4.31K  0.06M
 chk_4  4.25ms  0.41ms  0.54ms 10.34  4.31K  0.04M
 chk_5  4.26ms  0.41ms  1.11ms 10.51  4.31K  0.04M
 chk_6  4.27ms  0.41ms  0.54ms 10.43  4.31K  0.04M
 chk_7  4.27ms  0.41ms  0.54ms 10.39  4.31K  0.06M
   Avg  4.32  0.42  0.62
   Max  4.73  0.44  1.11
   Min  4.24  0.41  0.54
 Ratio  1.12  1.09  2.05
   Var  0.02  0.00  0.03
Profiling takes 0.572 s
*** Node 0, starting model training...
*** Node 1, starting model training...
*** Node 4, starting model training...
*** Node 2, starting model training...
*** Node 5, starting model training...
*** Node 3, starting model training...
*** Node 6, starting model training...
*** Node 7, starting model training...
Num Stages: 1 / 1
Node 0, Pipeline Input Tensor: NULL
Node 0, Pipeline Output Tensor: NULL
*** Node 0 owns the model-level partition [0, 121)
*** Node 0, constructing the helper classes...
Node 0, Local Vertex Begin: 0, Num Local Vertices: 4311
Num Stages: 1 / 1
Node 5, Pipeline Input Tensor: NULL
Node 5, Pipeline Output Tensor: NULL
*** Node 5 owns the model-level partition [0, 121)
*** Node 5, constructing the helper classes...
Node 5, Local Vertex Begin: 21558, Num Local Vertices: 4312
Num Stages: 1 / 1
Node 3, Pipeline Input Tensor: NULL
Node 3, Pipeline Output Tensor: NULL
*** Node 3 owns the model-level partition [0, 121)
*** Node 3, constructing the helper classes...
Node 3, Local Vertex Begin: 12935, Num Local Vertices: 4312
Num Stages: 1 / 1
Node 1, Pipeline Input Tensor: NULL
Node 1, Pipeline Output Tensor: NULL
*** Node 1 owns the model-level partition [0, 121)
*** Node 1, constructing the helper classes...
Node 1, Local Vertex Begin: 4311, Num Local Vertices: 4312
Num Stages: 1 / 1
Node 4, Pipeline Input Tensor: NULL
Node 4, Pipeline Output Tensor: NULL
*** Node 4 owns the model-level partition [0, 121)
*** Node 4, constructing the helper classes...
Node 4, Local Vertex Begin: 17247, Num Local Vertices: 4311
Num Stages: 1 / 1
Node 6, Pipeline Input Tensor: NULL
Node 6, Pipeline Output Tensor: NULL
*** Node 6 owns the model-level partition [0, 121)
*** Node 6, constructing the helper classes...
Node 6, Local Vertex Begin: 25870, Num Local Vertices: 4311
Num Stages: 1 / 1
Node 7, Pipeline Input Tensor: NULL
Node 7, Pipeline Output Tensor: NULL
*** Node 7 owns the model-level partition [0, 121)
*** Node 7, constructing the helper classes...
Node 7, Local Vertex Begin: 30181, Num Local Vertices: 4312
Num Stages: 1 / 1
Node 2, Pipeline Input Tensor: NULL
Node 2, Pipeline Output Tensor: NULL
*** Node 2 owns the model-level partition [0, 121)
*** Node 2, constructing the helper classes...
Node 2, Local Vertex Begin: 8623, Num Local Vertices: 4312
*** Node 5, setting up some other necessary information...
*** Node 2, setting up some other necessary information...
*** Node 6, setting up some other necessary information...
*** Node 3, setting up some other necessary information...
*** Node 4, setting up some other necessary information...
*** Node 0, setting up some other necessary information...
*** Node 7, setting up some other necessary information...
*** Node 1, setting up some other necessary information...
+++++++++ Node 2 initializing the weights for op[0, 121)...
+++++++++ Node 5 initializing the weights for op[0, 121)...
+++++++++ Node 1 initializing the weights for op[0, 121)...
+++++++++ Node 0 initializing the weights for op[0, 121)...
+++++++++ Node 7 initializing the weights for op[0, 121)...
+++++++++ Node 3 initializing the weights for op[0, 121)...
+++++++++ Node 4 initializing the weights for op[0, 121)...
+++++++++ Node 6 initializing the weights for op[0, 121)...
Node 5, discovering the vertices that will be sent across graph boundary...
Node 2, discovering the vertices that will be sent across graph boundary...
Node 6, discovering the vertices that will be sent across graph boundary...
Node 3, discovering the vertices that will be sent across graph boundary...
Node 7, discovering the vertices that will be sent across graph boundary...
Node 0, discovering the vertices that will be sent across graph boundary...
Node 4, discovering the vertices that will be sent across graph boundary...
Node 1, discovering the vertices that will be sent across graph boundary...
Node 4, discovering the vertices that will be received across the graph boundary.
The number of mirror vertices: 34236
Node 0, discovering the vertices that will be received across the graph boundary.
Node 5, discovering the vertices that will be received across the graph boundary.
Node 1, discovering the vertices that will be received across the graph boundary.
Node 6, discovering the vertices that will be received across the graph boundary.
Node 2, discovering the vertices that will be received across the graph boundary.
Node 7, discovering the vertices that will be received across the graph boundary.
Node 3, discovering the vertices that will be received across the graph boundary.
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
*** Node 4, starting task scheduling...
*** Node 0, starting task scheduling...



*** Node 5, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 1, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 6, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 2, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 7, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 3, starting task scheduling...
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
	Epoch 1:	Loss 1.6086	TrainAcc 0.6400	ValidAcc 0.6780	TestAcc 0.7160	BestValid 0.6780
	Epoch 50:	Loss 0.1308	TrainAcc 0.9900	ValidAcc 0.9480	TestAcc 0.9480	BestValid 0.9480
****** Epoch Time (Excluding Evaluation Cost): 0.033 s ******
****** Breakdown Analysis ******
Cluster-Wide Average, Bubble-Pipeline: 0.094 ms (Max: 0.136, Min: 0.034, Sum: 0.755)
Cluster-Wide Average, Compute: 11.803 ms (Max: 12.194, Min: 11.382, Sum: 94.420)
Cluster-Wide Average, Communication-Layer: 0.009 ms (Max: 0.015, Min: 0.007, Sum: 0.071)
Cluster-Wide Average, Bubble-Imbalance: 0.016 ms (Max: 0.024, Min: 0.014, Sum: 0.131)
Cluster-Wide Average, Communication-Graph: 18.606 ms (Max: 19.025, Min: 18.256, Sum: 148.847)
Cluster-Wide Average, Optimization: 2.528 ms (Max: 2.540, Min: 2.514, Sum: 20.225)
Cluster-Wide Average, Others: 0.228 ms (Max: 0.250, Min: 0.202, Sum: 1.827)
****** Breakdown Sum: 33.285 ms ******
Cluster-Wide Average, GPU Memory Consumption: 3.279 GB (Max: 3.661, Min: 3.212, Sum: 26.235)
Cluster-Wide Average, Graph-Level Communication Throughput: 25.688 Gbps (Max: 40.199, Min: 8.254, Sum: 205.503)
Cluster-Wide Average, Layer-Level Communication Throughput: 0.000 Gbps (Max: 0.000, Min: 0.000, Sum: 0.000)
Layer-level communication (cluster-wide, per-epoch): 0.000 GB
Graph-level communication (cluster-wide, per-epoch): 0.408 GB
Weight-sync communication (cluster-wide, per-epoch): 0.052 GB
Total communication (cluster-wide, per-epoch): 0.460 GB
****** Accuracy Results ******
Highest valid_acc: 0.9480
Target test_acc: 0.9480
Epoch to reach the target acc: 49
[MPI Rank 0] Success 
[MPI Rank 4] Success 
[MPI Rank 5] Success 
[MPI Rank 6] Success 
[MPI Rank 7] Success 
[MPI Rank 1] Success 
[MPI Rank 2] Success 
[MPI Rank 3] Success 
