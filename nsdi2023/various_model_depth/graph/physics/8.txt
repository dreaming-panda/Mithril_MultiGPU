Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
DONE MPI INIT
Initialized node 0 on machine gnerv7
DONE MPI INIT
Initialized node 2 on machine gnerv7
DONE MPI INIT
Initialized node 3 on machine gnerv7
DONE MPI INIT
Initialized node 1 on machine gnerv7
DONE MPI INIT
DONE MPI INIT
Initialized node 5 on machine gnerv8
DONE MPI INITInitialized node 4 on machine gnerv8
DONE MPI INIT
Initialized node 7 on machine gnerv8

Initialized node 6 on machine gnerv8
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
        It takes 0.010 seconds.
Building the CSC structure...
        It takes 0.011 seconds.
Building the CSC structure...
        It takes 0.011 seconds.
Building the CSC structure...
        It takes 0.013 seconds.
Building the CSC structure...
        It takes 0.014 seconds.
Building the CSC structure...
        It takes 0.014 seconds.
Building the CSC structure...
        It takes 0.014 seconds.
Building the CSC structure...
        It takes 0.016 seconds.
Building the CSC structure...
        It takes 0.012 seconds.
        It takes 0.011 seconds.
        It takes 0.012 seconds.
Building the Feature Vector...
        It takes 0.015 seconds.
Building the Feature Vector...
        It takes 0.014 seconds.
        It takes 0.014 seconds.
        It takes 0.016 seconds.
Building the Feature Vector...
Building the Feature Vector...
        It takes 0.016 seconds.
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
        It takes 0.462 seconds.
Building the Label Vector...
        It takes 0.003 seconds.
        It takes 0.485 seconds.
Building the Label Vector...
        It takes 0.003 seconds.
        It takes 0.505 seconds.
Building the Label Vector...
        It takes 0.002 seconds.
        It takes 0.506 seconds.
Building the Label Vector...
        It takes 0.003 seconds.
        It takes 0.605 seconds.
Building the Label Vector...
        It takes 0.003 seconds.
The graph dataset locates at /shared_hdd_storage/jingjichen/gnn_datasets/graph_parallel_datasets/physics/8_parts
The number of GCNII layers: 8
The number of hidden units: 100
The number of training epoches: 50
Learning rate: 0.001000
The partition strategy: model
The dropout rate: 0.500
The checkpointed weight file: /tmp/saved_weights_pipe
The random seed: 1
GCN hyper-parameter alpha: 0.100000
GCN hyper-parameter lambda: 0.500000
Number of classes: 5
Number of feature dimensions: 8415
Number of vertices: 34493
Number of GPUs: 8
        It takes 0.607 seconds.
Building the Label Vector...
        It takes 0.614 seconds.
Building the Label Vector...
        It takes 0.003 seconds.
        It takes 0.618 seconds.
Building the Label Vector...
        It takes 0.006 seconds.
        It takes 0.003 seconds.
GPU 0, layer [0, 9)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
34493, 530417, 530417
Number of vertices per chunk: 4312
csr in-out ready !Start Cost Model Initialization...
GPU 0, layer [0, 9)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
34493, 530417, 530417
Number of vertices per chunk: 4312
GPU 0, layer [0, 9)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
34493, 530417, 530417
Number of vertices per chunk: 4312
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
GPU 0, layer [0, 9)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
34493, 530417, 530417
Number of vertices per chunk: 4312
csr in-out ready !Start Cost Model Initialization...
GPU 0, layer [0, 9)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
34493, 530417, 530417
Number of vertices per chunk: 4312
GPU 0, layer [0, 9)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
34493, 530417, 530417
csr in-out ready !Start Cost Model Initialization...
Number of vertices per chunk: 4312
csr in-out ready !Start Cost Model Initialization...
GPU 0, layer [0, 9)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
34493, 530417, 530417
Number of vertices per chunk: 4312
train nodes 100, valid nodes 500, test nodes 1000
GPU 0, layer [0, 9)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
Chunks (number of global chunks: 8): 0-[0, 4311) 1-[4311, 8623) 2-[8623, 12935) 3-[12935, 17247) 4-[17247, 21558) 5-[21558, 25870) 6-[25870, 30181) 7-[30181, 34493)
34493, 530417, 530417
Number of vertices per chunk: 4312
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
***** Start profiling the layer-level communication performance *******
The layer-level communication performance: 60.775 Gbps (per GPU), 486.200 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 60.468 Gbps (per GPU), 483.740 Gbps (aggregated)
The layer-level communication performance: 60.455 Gbps (per GPU), 483.643 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 60.203 Gbps (per GPU), 481.623 Gbps (aggregated)
The layer-level communication performance: 60.171 Gbps (per GPU), 481.366 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 59.959 Gbps (per GPU), 479.669 Gbps (aggregated)
The layer-level communication performance: 59.906 Gbps (per GPU), 479.246 Gbps (aggregated)
The layer-level communication performance: 59.873 Gbps (per GPU), 478.984 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The graph-level communication performance (supernode = 2): 158.578 Gbps (per GPU), 1268.623 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.578 Gbps (per GPU), 1268.623 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.578 Gbps (per GPU), 1268.620 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.566 Gbps (per GPU), 1268.527 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.574 Gbps (per GPU), 1268.596 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.551 Gbps (per GPU), 1268.407 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.566 Gbps (per GPU), 1268.527 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.560 Gbps (per GPU), 1268.479 Gbps (aggregated, cluster-wide)
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
The graph-level communication performance (supernode = 4): 104.403 Gbps (per GPU), 835.221 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 104.396 Gbps (per GPU), 835.165 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 104.401 Gbps (per GPU), 835.207 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 104.398 Gbps (per GPU), 835.186 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 104.403 Gbps (per GPU), 835.221 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 104.347 Gbps (per GPU), 834.778 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 104.401 Gbps (per GPU), 835.207 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 104.371 Gbps (per GPU), 834.971 Gbps (aggregated, cluster-wide)
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
The graph-level communication performance (supernode = 8): 35.134 Gbps (per GPU), 281.070 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 35.135 Gbps (per GPU), 281.079 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 35.135 Gbps (per GPU), 281.077 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 35.135 Gbps (per GPU), 281.080 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 35.133 Gbps (per GPU), 281.066 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 35.132 Gbps (per GPU), 281.058 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 35.133 Gbps (per GPU), 281.065 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 35.105 Gbps (per GPU), 280.843 Gbps (aggregated, cluster-wide)
 LType   LT0   LT1   LT2 Ratio  VSum  ESum
 chk_0  4.22ms  0.44ms  0.57ms  9.57  4.31K  0.10M
 chk_1  4.79ms  0.44ms  0.56ms 10.94  4.31K  0.10M
 chk_2  4.25ms  0.43ms  0.55ms  9.94  4.31K  0.06M
 chk_3  4.26ms  0.43ms  0.55ms 10.01  4.31K  0.06M
 chk_4  4.27ms  0.56ms  0.54ms  7.94  4.31K  0.04M
 chk_5  4.27ms  0.40ms  0.53ms 10.54  4.31K  0.04M
 chk_6  4.61ms  0.41ms  0.54ms 11.23  4.31K  0.04M
 chk_7  4.25ms  0.41ms  0.54ms 10.44  4.31K  0.06M
   Avg  4.37  0.44  0.55
   Max  4.79  0.56  0.57
   Min  4.22  0.40  0.53
 Ratio  1.14  1.38  1.07
   Var  0.04  0.00  0.00
Profiling takes 0.568 s
*** Node 0, starting model training...
*** Node 2, starting model training...
*** Node 3, starting model training...
*** Node 1, starting model training...
*** Node 4, starting model training...
*** Node 5, starting model training...
*** Node 6, starting model training...
*** Node 7, starting model training...
Num Stages: 1 / 1
Node 0, Pipeline Input Tensor: NULL
Node 0, Pipeline Output Tensor: NULL
*** Node 0 owns the model-level partition [0, 65)
*** Node 0, constructing the helper classes...
Node 0, Local Vertex Begin: 0, Num Local Vertices: 4311
Num Stages: 1 / 1
Node 6, Pipeline Input Tensor: NULL
Node 6, Pipeline Output Tensor: NULL
*** Node 6 owns the model-level partition [0, 65)
*** Node 6, constructing the helper classes...
Node 6, Local Vertex Begin: 25870, Num Local Vertices: 4311
Num Stages: 1 / 1
Node 5, Pipeline Input Tensor: NULL
Node 5, Pipeline Output Tensor: NULL
*** Node 5 owns the model-level partition [0, 65)
*** Node 5, constructing the helper classes...
Node 5, Local Vertex Begin: 21558, Num Local Vertices: 4312
Num Stages: 1 / 1
Node 7, Pipeline Input Tensor: NULL
Node 7, Pipeline Output Tensor: NULL
*** Node 7 owns the model-level partition [0, 65)
*** Node 7, constructing the helper classes...
Node 7, Local Vertex Begin: 30181, Num Local Vertices: 4312
Num Stages: 1 / 1
Node 2, Pipeline Input Tensor: NULL
Node 2, Pipeline Output Tensor: NULL
*** Node 2 owns the model-level partition [0, 65)
*** Node 2, constructing the helper classes...
Node 2, Local Vertex Begin: 8623, Num Local Vertices: 4312
Num Stages: 1 / 1
Node 3, Pipeline Input Tensor: NULL
Node 3, Pipeline Output Tensor: NULL
*** Node 3 owns the model-level partition [0, 65)
*** Node 3, constructing the helper classes...
Node 3, Local Vertex Begin: 12935, Num Local Vertices: 4312
Num Stages: 1 / 1
Node 1, Pipeline Input Tensor: NULL
Node 1, Pipeline Output Tensor: NULL
*** Node 1 owns the model-level partition [0, 65)
*** Node 1, constructing the helper classes...
Node 1, Local Vertex Begin: 4311, Num Local Vertices: 4312
Num Stages: 1 / 1
Node 4, Pipeline Input Tensor: NULL
Node 4, Pipeline Output Tensor: NULL
*** Node 4 owns the model-level partition [0, 65)
*** Node 4, constructing the helper classes...
Node 4, Local Vertex Begin: 17247, Num Local Vertices: 4311
*** Node 0, setting up some other necessary information...
*** Node 5, setting up some other necessary information...
*** Node 1, setting up some other necessary information...
*** Node 6, setting up some other necessary information...
*** Node 2, setting up some other necessary information...
*** Node 7, setting up some other necessary information...
*** Node 3, setting up some other necessary information...
*** Node 4, setting up some other necessary information...
+++++++++ Node 4 initializing the weights for op[0, 65)...
+++++++++ Node 1 initializing the weights for op[0, 65)...
+++++++++ Node 5 initializing the weights for op[0, 65)...
+++++++++ Node 0 initializing the weights for op[0, 65)...
+++++++++ Node 3 initializing the weights for op[0, 65)...
+++++++++ Node 2 initializing the weights for op[0, 65)...
+++++++++ Node 6 initializing the weights for op[0, 65)...
+++++++++ Node 7 initializing the weights for op[0, 65)...
Node 1, discovering the vertices that will be sent across graph boundary...
Node 6, discovering the vertices that will be sent across graph boundary...
Node 2, discovering the vertices that will be sent across graph boundary...
Node 7, discovering the vertices that will be sent across graph boundary...
Node 3, discovering the vertices that will be sent across graph boundary...
Node 5, discovering the vertices that will be sent across graph boundary...
Node 0, discovering the vertices that will be sent across graph boundary...
Node 4, discovering the vertices that will be sent across graph boundary...
The number of mirror vertices: 34236
Node 0, discovering the vertices that will be received across the graph boundary.
Node 4, discovering the vertices that will be received across the graph boundary.
Node 1, discovering the vertices that will be received across the graph boundary.
Node 5, discovering the vertices that will be received across the graph boundary.
Node 2, discovering the vertices that will be received across the graph boundary.
Node 6, discovering the vertices that will be received across the graph boundary.
Node 3, discovering the vertices that will be received across the graph boundary.
Node 7, discovering the vertices that will be received across the graph boundary.
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
*** Node 0, starting task scheduling...



*** Node 4, starting task scheduling...
*** Node 1, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 5, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 2, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 6, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 3, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 7, starting task scheduling...
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
	Epoch 1:	Loss 1.6033	TrainAcc 0.8300	ValidAcc 0.7900	TestAcc 0.7870	BestValid 0.7900
	Epoch 50:	Loss 0.0983	TrainAcc 0.9900	ValidAcc 0.9480	TestAcc 0.9380	BestValid 0.9480
****** Epoch Time (Excluding Evaluation Cost): 0.020 s ******
****** Breakdown Analysis ******
Cluster-Wide Average, Bubble-Pipeline: 0.170 ms (Max: 0.223, Min: 0.055, Sum: 1.359)
Cluster-Wide Average, Compute: 8.164 ms (Max: 8.271, Min: 8.026, Sum: 65.315)
Cluster-Wide Average, Communication-Layer: 0.008 ms (Max: 0.009, Min: 0.007, Sum: 0.064)
Cluster-Wide Average, Bubble-Imbalance: 0.015 ms (Max: 0.016, Min: 0.013, Sum: 0.118)
Cluster-Wide Average, Communication-Graph: 9.730 ms (Max: 9.832, Min: 9.637, Sum: 77.836)
Cluster-Wide Average, Optimization: 2.091 ms (Max: 2.107, Min: 2.084, Sum: 16.732)
Cluster-Wide Average, Others: 0.147 ms (Max: 0.159, Min: 0.133, Sum: 1.175)
****** Breakdown Sum: 20.325 ms ******
Cluster-Wide Average, GPU Memory Consumption: 3.021 GB (Max: 3.342, Min: 2.962, Sum: 24.167)
Cluster-Wide Average, Graph-Level Communication Throughput: 23.675 Gbps (Max: 37.720, Min: 7.755, Sum: 189.396)
Cluster-Wide Average, Layer-Level Communication Throughput: 0.000 Gbps (Max: 0.000, Min: 0.000, Sum: 0.000)
Layer-level communication (cluster-wide, per-epoch): 0.000 GB
Graph-level communication (cluster-wide, per-epoch): 0.204 GB
Weight-sync communication (cluster-wide, per-epoch): 0.048 GB
Total communication (cluster-wide, per-epoch): 0.252 GB
****** Accuracy Results ******
Highest valid_acc: 0.9480
Target test_acc: 0.9380
Epoch to reach the target acc: 49
[MPI Rank 0] Success 
[MPI Rank 4] Success 
[MPI Rank 1] Success 
[MPI Rank 5] Success 
[MPI Rank 2] Success 
[MPI Rank 6] Success 
[MPI Rank 3] Success 
[MPI Rank 7] Success 
