Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
DONE MPI INIT
DONE MPI INIT
Initialized node 1 on machine gnerv7
Initialized node 0 on machine gnerv7
DONE MPI INIT
Initialized node 2 on machine gnerv7
DONE MPI INIT
Initialized node 3 on machine gnerv7
DONE MPI INIT
DONE MPI INIT
Initialized node 5 on machine gnerv8
DONE MPI INIT
Initialized node 6 on machine gnerv8
DONE MPI INITInitialized node 4 on machine gnerv8

Initialized node 7 on machine gnerv8
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
        It takes 0.019 seconds.
Building the CSC structure...
        It takes 0.020 seconds.
Building the CSC structure...
        It takes 0.020 seconds.
Building the CSC structure...
        It takes 0.022 seconds.
Building the CSC structure...
        It takes 0.022 seconds.
Building the CSC structure...
        It takes 0.027 seconds.
Building the CSC structure...
        It takes 0.026 seconds.
Building the CSC structure...
        It takes 0.024 seconds.
Building the CSC structure...
        It takes 0.020 seconds.
        It takes 0.022 seconds.
        It takes 0.022 seconds.
        It takes 0.021 seconds.
        It takes 0.020 seconds.
        It takes 0.020 seconds.
        It takes 0.022 seconds.
        It takes 0.021 seconds.
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
        It takes 0.099 seconds.
Building the Label Vector...
        It takes 0.110 seconds.
        It takes 0.007 seconds.
        It takes 0.108 seconds.
Building the Label Vector...
Building the Label Vector...
        It takes 0.108 seconds.
Building the Label Vector...
        It takes 0.007 seconds.
        It takes 0.007 seconds.
        It takes 0.110 seconds.
Building the Label Vector...
        It takes 0.120 seconds.
Building the Label Vector...
        It takes 0.007 seconds.
        It takes 0.122 seconds.
Building the Label Vector...
        It takes 0.119 seconds.
        It takes 0.007 seconds.
Building the Label Vector...
        It takes 0.007 seconds.
The graph dataset locates at /shared_hdd_storage/jingjichen/gnn_datasets/graph_parallel_datasets/flickr/8_parts
The number of GCNII layers: 128
The number of hidden units: 100
The number of training epoches: 50
Learning rate: 0.001000
The partition strategy: model
The dropout rate: 0.500
The checkpointed weight file: /tmp/saved_weights_pipe
The random seed: 1
GCN hyper-parameter alpha: 0.100000
GCN hyper-parameter lambda: 0.500000
Number of classes: 7
Number of feature dimensions: 500
Number of vertices: 89250
Number of GPUs: 8
        It takes 0.007 seconds.
        It takes 0.008 seconds.
GPU 0, layer [0, 129)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
89250, 989006, 989006
Number of vertices per chunk: 11157
GPU 0, layer [0, 129)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
89250, 989006, 989006
Number of vertices per chunk: 11157
csr in-out ready !Start Cost Model Initialization...
GPU 0, layer [0, 129)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
csr in-out ready !Start Cost Model Initialization...
89250, 989006, 989006
Number of vertices per chunk: 11157
GPU 0, layer [0, 129)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 129)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
csr in-out ready !Start Cost Model Initialization...
GPU 0, layer [0, 129)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
89250, 989006, 989006
Number of vertices per chunk: 11157
89250, 989006, 989006
Number of vertices per chunk: 11157
89250, 989006, 989006
Number of vertices per chunk: 11157
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
GPU 0, layer [0, 129)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
89250, 989006, 989006
Number of vertices per chunk: 11157
train nodes 44625, valid nodes 22312, test nodes 22313
GPU 0, layer [0, 129)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
Chunks (number of global chunks: 8): 0-[0, 11156) 1-[11156, 22313) 2-[22313, 33469) 3-[33469, 44625) 4-[44625, 55781) 5-[55781, 66937) 6-[66937, 78093) 7-[78093, 89250)
89250, 989006, 989006
Number of vertices per chunk: 11157
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
***** Start profiling the layer-level communication performance *******
The layer-level communication performance: 60.813 Gbps (per GPU), 486.506 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 60.492 Gbps (per GPU), 483.935 Gbps (aggregated)
The layer-level communication performance: 60.490 Gbps (per GPU), 483.921 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 60.245 Gbps (per GPU), 481.961 Gbps (aggregated)
The layer-level communication performance: 60.216 Gbps (per GPU), 481.729 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 59.987 Gbps (per GPU), 479.899 Gbps (aggregated)
The layer-level communication performance: 59.937 Gbps (per GPU), 479.498 Gbps (aggregated)
The layer-level communication performance: 59.904 Gbps (per GPU), 479.233 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The graph-level communication performance (supernode = 2): 158.665 Gbps (per GPU), 1269.318 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.670 Gbps (per GPU), 1269.363 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.662 Gbps (per GPU), 1269.294 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.674 Gbps (per GPU), 1269.394 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.665 Gbps (per GPU), 1269.320 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.674 Gbps (per GPU), 1269.390 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.659 Gbps (per GPU), 1269.270 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.680 Gbps (per GPU), 1269.436 Gbps (aggregated, cluster-wide)
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
The graph-level communication performance (supernode = 4): 103.686 Gbps (per GPU), 829.488 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 103.683 Gbps (per GPU), 829.467 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 103.679 Gbps (per GPU), 829.433 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 103.688 Gbps (per GPU), 829.501 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 103.684 Gbps (per GPU), 829.474 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 103.683 Gbps (per GPU), 829.467 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 103.681 Gbps (per GPU), 829.447 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 103.683 Gbps (per GPU), 829.467 Gbps (aggregated, cluster-wide)
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
The graph-level communication performance (supernode = 8): 38.124 Gbps (per GPU), 304.996 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 38.125 Gbps (per GPU), 304.998 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 38.124 Gbps (per GPU), 304.996 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 38.119 Gbps (per GPU), 304.950 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 38.124 Gbps (per GPU), 304.994 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 38.123 Gbps (per GPU), 304.982 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 38.118 Gbps (per GPU), 304.944 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 38.110 Gbps (per GPU), 304.884 Gbps (aggregated, cluster-wide)
 LType   LT0   LT1   LT2 Ratio  VSum  ESum
 chk_0  0.99ms  0.82ms  0.98ms  1.21 11.16K  0.12M
 chk_1  0.99ms  0.82ms  0.98ms  1.20 11.16K  0.11M
 chk_2  0.98ms  0.79ms  0.95ms  1.25 11.16K  0.11M
 chk_3  0.99ms  0.75ms  0.91ms  1.31 11.16K  0.12M
 chk_4  0.98ms  0.82ms  0.98ms  1.20 11.16K  0.11M
 chk_5  1.06ms  0.81ms  0.97ms  1.31 11.16K  0.10M
 chk_6  0.98ms  0.81ms  0.97ms  1.21 11.16K  0.12M
 chk_7  0.98ms  0.82ms  0.98ms  1.20 11.16K  0.11M
   Avg  0.99  0.80  0.97
   Max  1.06  0.82  0.98
   Min  0.98  0.75  0.91
 Ratio  1.08  1.10  1.08
   Var  0.00  0.00  0.00
Profiling takes 0.344 s
*** Node 0, starting model training...
*** Node 2, starting model training...
*** Node 3, starting model training...
*** Node 1, starting model training...
*** Node 5, starting model training...
*** Node 6, starting model training...
*** Node 7, starting model training...
*** Node 4, starting model training...
Num Stages: 1 / 1
Node 1, Pipeline Input Tensor: NULL
Node 1, Pipeline Output Tensor: NULL
*** Node 1 owns the model-level partition [0, 905)
*** Node 1, constructing the helper classes...
Node 1, Local Vertex Begin: 11156, Num Local Vertices: 11157
Num Stages: 1 / 1
Node 0, Pipeline Input Tensor: NULL
Node 0, Pipeline Output Tensor: NULL
*** Node 0 owns the model-level partition [0, 905)
*** Node 0, constructing the helper classes...
Node 0, Local Vertex Begin: 0, Num Local Vertices: 11156
Num Stages: 1 / 1
Node 2, Pipeline Input Tensor: NULL
Node 2, Pipeline Output Tensor: NULL
*** Node 2 owns the model-level partition [0, 905)
*** Node 2, constructing the helper classes...
Node 2, Local Vertex Begin: 22313, Num Local Vertices: 11156
Num Stages: 1 / 1
Node 3, Pipeline Input Tensor: NULL
Node 3, Pipeline Output Tensor: NULL
*** Node 3 owns the model-level partition [0, 905)
*** Node 3, constructing the helper classes...
Node 3, Local Vertex Begin: 33469, Num Local Vertices: 11156
Num Stages: 1 / 1
Node 5, Pipeline Input Tensor: NULL
Node 5, Pipeline Output Tensor: NULL
*** Node 5 owns the model-level partition [0, 905)
*** Node 5, constructing the helper classes...
Node 5, Local Vertex Begin: 55781, Num Local Vertices: 11156
Num Stages: 1 / 1
Node 6, Pipeline Input Tensor: NULL
Node 6, Pipeline Output Tensor: NULL
*** Node 6 owns the model-level partition [0, 905)
*** Node 6, constructing the helper classes...
Node 6, Local Vertex Begin: 66937, Num Local Vertices: 11156
Num Stages: 1 / 1
Node 7, Pipeline Input Tensor: NULL
Node 7, Pipeline Output Tensor: NULL
*** Node 7 owns the model-level partition [0, 905)
*** Node 7, constructing the helper classes...
Node 7, Local Vertex Begin: 78093, Num Local Vertices: 11157
Num Stages: 1 / 1
Node 4, Pipeline Input Tensor: NULL
Node 4, Pipeline Output Tensor: NULL
*** Node 4 owns the model-level partition [0, 905)
*** Node 4, constructing the helper classes...
Node 4, Local Vertex Begin: 44625, Num Local Vertices: 11156
*** Node 1, setting up some other necessary information...
*** Node 3, setting up some other necessary information...
*** Node 5, setting up some other necessary information...
*** Node 2, setting up some other necessary information...
*** Node 4, setting up some other necessary information...
*** Node 6, setting up some other necessary information...
*** Node 7, setting up some other necessary information...
*** Node 0, setting up some other necessary information...
+++++++++ Node 5 initializing the weights for op[0, 905)...
+++++++++ Node 4 initializing the weights for op[0, 905)...
+++++++++ Node 0 initializing the weights for op[0, 905)...
+++++++++ Node 1 initializing the weights for op[0, 905)...
+++++++++ Node 7 initializing the weights for op[0, 905)...
+++++++++ Node 3 initializing the weights for op[0, 905)...
+++++++++ Node 6 initializing the weights for op[0, 905)...
+++++++++ Node 2 initializing the weights for op[0, 905)...
Node 4, discovering the vertices that will be sent across graph boundary...
Node 0, discovering the vertices that will be sent across graph boundary...
Node 5, discovering the vertices that will be sent across graph boundary...
Node 1, discovering the vertices that will be sent across graph boundary...
Node 6, discovering the vertices that will be sent across graph boundary...
Node 2, discovering the vertices that will be sent across graph boundary...
Node 7, discovering the vertices that will be sent across graph boundary...
Node 3, discovering the vertices that will be sent across graph boundary...
The number of mirror vertices: 192232
Node 0, discovering the vertices that will be received across the graph boundary.
Node 1, discovering the vertices that will be received across the graph boundary.
Node 2, discovering the vertices that will be received across the graph boundary.
Node 3, discovering the vertices that will be received across the graph boundary.
Node 4, discovering the vertices that will be received across the graph boundary.
Node 5, discovering the vertices that will be received across the graph boundary.
Node 6, discovering the vertices that will be received across the graph boundary.
Node 7, discovering the vertices that will be received across the graph boundary.
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
*** Node 4, starting task scheduling...
*** Node 0, starting task scheduling...
*** Node 5, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 1, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 6, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 2, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 7, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 3, starting task scheduling...
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000



The learning rate specified by the user: 0.001000000
	Epoch 1:	Loss 2.7592	TrainAcc 0.4217	ValidAcc 0.4264	TestAcc 0.4251	BestValid 0.4264
	Epoch 50:	Loss 1.6357	TrainAcc 0.4282	ValidAcc 0.4320	TestAcc 0.4310	BestValid 0.4320
****** Epoch Time (Excluding Evaluation Cost): 0.619 s ******
****** Breakdown Analysis ******
Cluster-Wide Average, Bubble-Pipeline: 0.149 ms (Max: 0.277, Min: 0.036, Sum: 1.196)
Cluster-Wide Average, Compute: 108.381 ms (Max: 110.785, Min: 103.502, Sum: 867.047)
Cluster-Wide Average, Communication-Layer: 0.008 ms (Max: 0.009, Min: 0.008, Sum: 0.065)
Cluster-Wide Average, Bubble-Imbalance: 0.015 ms (Max: 0.016, Min: 0.013, Sum: 0.117)
Cluster-Wide Average, Communication-Graph: 499.161 ms (Max: 503.925, Min: 496.588, Sum: 3993.291)
Cluster-Wide Average, Optimization: 10.237 ms (Max: 10.297, Min: 10.185, Sum: 81.899)
Cluster-Wide Average, Others: 1.406 ms (Max: 1.487, Min: 1.287, Sum: 11.244)
****** Breakdown Sum: 619.357 ms ******
Cluster-Wide Average, GPU Memory Consumption: 11.683 GB (Max: 13.034, Min: 11.477, Sum: 93.468)
Cluster-Wide Average, Graph-Level Communication Throughput: 42.222 Gbps (Max: 51.029, Min: 16.677, Sum: 337.780)
Cluster-Wide Average, Layer-Level Communication Throughput: 0.000 Gbps (Max: 0.000, Min: 0.000, Sum: 0.000)
Layer-level communication (cluster-wide, per-epoch): 0.000 GB
Graph-level communication (cluster-wide, per-epoch): 18.333 GB
Weight-sync communication (cluster-wide, per-epoch): 0.069 GB
Total communication (cluster-wide, per-epoch): 18.402 GB
****** Accuracy Results ******
Highest valid_acc: 0.4320
Target test_acc: 0.4310
Epoch to reach the target acc: 49
[MPI Rank 0] Success 
[MPI Rank 1] Success 
[MPI Rank 2] Success 
[MPI Rank 3] Success 
[MPI Rank 4] Success 
[MPI Rank 5] Success 
[MPI Rank 6] Success 
[MPI Rank 7] Success 
