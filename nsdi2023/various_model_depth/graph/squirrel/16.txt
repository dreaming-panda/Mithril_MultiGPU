Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
DONE MPI INIT
Initialized node 0 on machine gnerv2
DONE MPI INIT
Initialized node 1 on machine gnerv2
DONE MPI INITDONE MPI INIT
Initialized node 2 on machine gnerv2

Initialized node 3 on machine gnerv2
DONE MPI INIT
DONE MPI INIT
Initialized node 5 on machine gnerv4
DONE MPI INIT
Initialized node 6 on machine gnerv4
Initialized node 4 on machine gnerv4
DONE MPI INIT
Initialized node 7 on machine gnerv4
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
        It takes 0.008 seconds.
Building the CSC structure...
        It takes 0.008 seconds.
Building the CSC structure...
        It takes 0.008 seconds.
Building the CSC structure...
        It takes 0.007 seconds.
Building the CSC structure...
        It takes 0.008 seconds.
Building the CSC structure...
        It takes 0.009 seconds.
Building the CSC structure...
        It takes 0.012 seconds.
Building the CSC structure...
        It takes 0.008 seconds.
        It takes 0.008 seconds.
        It takes 0.013 seconds.
Building the CSC structure...
        It takes 0.007 seconds.
Building the Feature Vector...
Building the Feature Vector...
        It takes 0.008 seconds.
        It takes 0.008 seconds.
Building the Feature Vector...
        It takes 0.008 seconds.
Building the Feature Vector...
Building the Feature Vector...
        It takes 0.017 seconds.
Building the Feature Vector...
Building the Feature Vector...
        It takes 0.015 seconds.
Building the Feature Vector...
        It takes 0.024 seconds.
Building the Label Vector...
        It takes 0.000 seconds.
        It takes 0.026 seconds.
Building the Label Vector...
        It takes 0.000 seconds.
The graph dataset locates at /shared_hdd_storage/jingjichen/gnn_datasets/graph_parallel_datasets/squirrel/8_parts
The number of GCNII layers: 16
The number of hidden units: 1000
The number of training epoches: 50
Learning rate: 0.001000
The partition strategy: model
The dropout rate: 0.500
The checkpointed weight file: /tmp/saved_weights_pipe
The random seed: 1
GCN hyper-parameter alpha: 0.100000
GCN hyper-parameter lambda: 0.500000
Number of classes: 5
Number of feature dimensions: 2089
Number of vertices: 5201
Number of GPUs: 8
        It takes 0.026 seconds.
Building the Label Vector...
        It takes 0.000 seconds.
        It takes 0.024 seconds.
Building the Label Vector...
        It takes 0.000 seconds.
        It takes 0.025 seconds.
Building the Label Vector...
        It takes 0.000 seconds.
        It takes 0.025 seconds.
Building the Label Vector...
        It takes 0.000 seconds.
        It takes 0.027 seconds.
Building the Label Vector...
        It takes 0.000 seconds.
        It takes 0.025 seconds.
Building the Label Vector...
        It takes 0.000 seconds.
GPU 0, layer [0, 17)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
5201, 401907, 401907
Number of vertices per chunk: 651
csr in-out ready !Start Cost Model Initialization...
GPU 0, layer [0, 17)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 17)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
5201, 401907, 401907
Number of vertices per chunk: 651
5201, 401907, 401907
Number of vertices per chunk: 651
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
train nodes 2496, valid nodes 1664, test nodes 1041
GPU 0, layer [0, 17)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
Chunks (number of global chunks: 8): 0-[0, 651) 1-[651, 1301) 2-[1301, 1951) 3-[1951, 2601) 4-[2601, 3251) 5-[3251, 3901) 6-[3901, 4551) 7-[4551, 5201)
5201, 401907, 401907
Number of vertices per chunk: 651
GPU 0, layer [0, 17)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
csr in-out ready !Start Cost Model Initialization...
***** Start profiling the layer-level communication performance *******
GPU 0, layer [0, 17)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
5201, 401907, 401907
Number of vertices per chunk: 651
5201, 401907, 401907
Number of vertices per chunk: 651
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
GPU 0, layer [0, 17)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
5201, 401907, 401907
Number of vertices per chunk: 651
csr in-out ready !Start Cost Model Initialization...
GPU 0, layer [0, 17)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
5201, 401907, 401907
Number of vertices per chunk: 651
csr in-out ready !Start Cost Model Initialization...
The layer-level communication performance: 60.057 Gbps (per GPU), 480.454 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 59.758 Gbps (per GPU), 478.065 Gbps (aggregated)
The layer-level communication performance: 59.746 Gbps (per GPU), 477.967 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 59.484 Gbps (per GPU), 475.873 Gbps (aggregated)
The layer-level communication performance: 59.451 Gbps (per GPU), 475.612 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 59.211 Gbps (per GPU), 473.688 Gbps (aggregated)
The layer-level communication performance: 59.163 Gbps (per GPU), 473.308 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 59.126 Gbps (per GPU), 473.009 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The graph-level communication performance (supernode = 2): 156.495 Gbps (per GPU), 1251.961 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 156.478 Gbps (per GPU), 1251.821 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 156.489 Gbps (per GPU), 1251.914 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 156.481 Gbps (per GPU), 1251.844 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 156.358 Gbps (per GPU), 1250.865 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 156.463 Gbps (per GPU), 1251.704 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 156.262 Gbps (per GPU), 1250.095 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 156.478 Gbps (per GPU), 1251.821 Gbps (aggregated, cluster-wide)
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
The graph-level communication performance (supernode = 4): 101.426 Gbps (per GPU), 811.408 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 101.440 Gbps (per GPU), 811.519 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 101.437 Gbps (per GPU), 811.493 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 101.437 Gbps (per GPU), 811.500 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 101.434 Gbps (per GPU), 811.474 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 101.439 Gbps (per GPU), 811.513 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 101.436 Gbps (per GPU), 811.487 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 101.436 Gbps (per GPU), 811.487 Gbps (aggregated, cluster-wide)
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
The graph-level communication performance (supernode = 8): 30.910 Gbps (per GPU), 247.276 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 30.910 Gbps (per GPU), 247.282 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 30.907 Gbps (per GPU), 247.259 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 30.910 Gbps (per GPU), 247.281 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 30.905 Gbps (per GPU), 247.238 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 30.909 Gbps (per GPU), 247.275 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 30.904 Gbps (per GPU), 247.230 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 30.906 Gbps (per GPU), 247.245 Gbps (aggregated, cluster-wide)
 LType   LT0   LT1   LT2 Ratio  VSum  ESum
 chk_0  1.02ms  1.65ms  1.77ms  1.74  0.65K  0.22M
 chk_1  1.02ms  1.05ms  1.10ms  1.08  0.65K  0.05M
 chk_2  1.03ms  0.83ms  0.97ms  1.24  0.65K  0.02M
 chk_3  1.03ms  0.84ms  0.99ms  1.23  0.65K  0.02M
 chk_4  1.03ms  0.79ms  0.93ms  1.31  0.65K  0.01M
 chk_5  1.03ms  0.78ms  0.93ms  1.32  0.65K  0.01M
 chk_6  1.03ms  0.98ms  1.12ms  1.14  0.65K  0.06M
 chk_7  1.03ms  0.80ms  0.95ms  1.28  0.65K  0.01M
   Avg  1.03  0.96  1.10
   Max  1.03  1.65  1.77
   Min  1.02  0.78  0.93
 Ratio  1.01  2.10  1.91
   Var  0.00  0.07  0.07
Profiling takes 0.370 s
*** Node 0, starting model training...
*** Node 2, starting model training...
*** Node 5, starting model training...
*** Node 1, starting model training...
*** Node 4, starting model training...
*** Node 3, starting model training...
*** Node 6, starting model training...
*** Node 7, starting model training...
Num Stages: 1 / 1
Node 0, Pipeline Input Tensor: NULL
Node 0, Pipeline Output Tensor: NULL
*** Node 0 owns the model-level partition [0, 121)
*** Node 0, constructing the helper classes...
Node 0, Local Vertex Begin: 0, Num Local Vertices: 651
Num Stages: 1 / 1
Node 2, Pipeline Input Tensor: NULL
Node 2, Pipeline Output Tensor: NULL
*** Node 2 owns the model-level partition [0, 121)
*** Node 2, constructing the helper classes...
Node 2, Local Vertex Begin: 1301, Num Local Vertices: 650
Num Stages: 1 / 1
Node 1, Pipeline Input Tensor: NULL
Node 1, Pipeline Output Tensor: NULL
*** Node 1 owns the model-level partition [0, 121)
*** Node 1, constructing the helper classes...
Node 1, Local Vertex Begin: 651, Num Local Vertices: 650
Num Stages: 1 / 1
Node 4, Pipeline Input Tensor: NULL
Node 4, Pipeline Output Tensor: NULL
*** Node 4 owns the model-level partition [0, 121)
*** Node 4, constructing the helper classes...
Node 4, Local Vertex Begin: 2601, Num Local Vertices: 650
Num Stages: 1 / 1
Node 3, Pipeline Input Tensor: NULL
Node 3, Pipeline Output Tensor: NULL
*** Node 3 owns the model-level partition [0, 121)
*** Node 3, constructing the helper classes...
Node 3, Local Vertex Begin: 1951, Num Local Vertices: 650
Num Stages: 1 / 1
Node 5, Pipeline Input Tensor: NULL
Node 5, Pipeline Output Tensor: NULL
*** Node 5 owns the model-level partition [0, 121)
*** Node 5, constructing the helper classes...
Node 5, Local Vertex Begin: 3251, Num Local Vertices: 650
Num Stages: 1 / 1
Node 6, Pipeline Input Tensor: NULL
Node 6, Pipeline Output Tensor: NULL
*** Node 6 owns the model-level partition [0, 121)
*** Node 6, constructing the helper classes...
Node 6, Local Vertex Begin: 3901, Num Local Vertices: 650
Num Stages: 1 / 1
Node 7, Pipeline Input Tensor: NULL
Node 7, Pipeline Output Tensor: NULL
*** Node 7 owns the model-level partition [0, 121)
*** Node 7, constructing the helper classes...
Node 7, Local Vertex Begin: 4551, Num Local Vertices: 650
*** Node 1, setting up some other necessary information...
*** Node 4, setting up some other necessary information...
*** Node 0, setting up some other necessary information...
*** Node 5, setting up some other necessary information...
*** Node 2, setting up some other necessary information...
*** Node 6, setting up some other necessary information...
*** Node 3, setting up some other necessary information...
*** Node 7, setting up some other necessary information...
+++++++++ Node 4 initializing the weights for op[0, 121)...
+++++++++ Node 0 initializing the weights for op[0, 121)...
+++++++++ Node 3 initializing the weights for op[0, 121)...
+++++++++ Node 5 initializing the weights for op[0, 121)...
+++++++++ Node 1 initializing the weights for op[0, 121)...
+++++++++ Node 2 initializing the weights for op[0, 121)...
+++++++++ Node 7 initializing the weights for op[0, 121)...
+++++++++ Node 6 initializing the weights for op[0, 121)...
Node 0, discovering the vertices that will be sent across graph boundary...
Node 1, discovering the vertices that will be sent across graph boundary...
Node 3, discovering the vertices that will be sent across graph boundary...
Node 2, discovering the vertices that will be sent across graph boundary...
Node 5, discovering the vertices that will be sent across graph boundary...
Node 6, discovering the vertices that will be sent across graph boundary...
Node 7, discovering the vertices that will be sent across graph boundary...
Node 4, discovering the vertices that will be sent across graph boundary...
The number of mirror vertices: 11547
Node 0, discovering the vertices that will be received across the graph boundary.
Node 1, discovering the vertices that will be received across the graph boundary.
Node 4, discovering the vertices that will be received across the graph boundary.
Node 2, discovering the vertices that will be received across the graph boundary.
Node 5, discovering the vertices that will be received across the graph boundary.
Node 3, discovering the vertices that will be received across the graph boundary.
Node 6, discovering the vertices that will be received across the graph boundary.
Node 7, discovering the vertices that will be received across the graph boundary.
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
*** Node 0, starting task scheduling...



*** Node 1, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 4, starting task scheduling...
*** Node 2, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 5, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 3, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 6, starting task scheduling...
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
*** Node 7, starting task scheduling...
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
	Epoch 1:	Loss 1.6168	TrainAcc 0.2007	ValidAcc 0.2025	TestAcc 0.1969	BestValid 0.2025
	Epoch 50:	Loss 1.0895	TrainAcc 0.6554	ValidAcc 0.3323	TestAcc 0.3429	BestValid 0.3323
****** Epoch Time (Excluding Evaluation Cost): 0.098 s ******
****** Breakdown Analysis ******
Cluster-Wide Average, Bubble-Pipeline: 0.418 ms (Max: 0.724, Min: 0.038, Sum: 3.345)
Cluster-Wide Average, Compute: 15.349 ms (Max: 22.847, Min: 13.384, Sum: 122.790)
Cluster-Wide Average, Communication-Layer: 0.008 ms (Max: 0.008, Min: 0.007, Sum: 0.061)
Cluster-Wide Average, Bubble-Imbalance: 0.015 ms (Max: 0.017, Min: 0.014, Sum: 0.118)
Cluster-Wide Average, Communication-Graph: 56.663 ms (Max: 58.483, Min: 49.555, Sum: 453.305)
Cluster-Wide Average, Optimization: 25.243 ms (Max: 25.337, Min: 25.150, Sum: 201.947)
Cluster-Wide Average, Others: 0.541 ms (Max: 0.548, Min: 0.533, Sum: 4.327)
****** Breakdown Sum: 98.237 ms ******
Cluster-Wide Average, GPU Memory Consumption: 2.581 GB (Max: 2.901, Min: 2.522, Sum: 20.649)
Cluster-Wide Average, Graph-Level Communication Throughput: 27.719 Gbps (Max: 46.661, Min: 9.674, Sum: 221.751)
Cluster-Wide Average, Layer-Level Communication Throughput: 0.000 Gbps (Max: 0.000, Min: 0.000, Sum: 0.000)
Layer-level communication (cluster-wide, per-epoch): 0.000 GB
Graph-level communication (cluster-wide, per-epoch): 1.377 GB
Weight-sync communication (cluster-wide, per-epoch): 0.944 GB
Total communication (cluster-wide, per-epoch): 2.320 GB
****** Accuracy Results ******
Highest valid_acc: 0.3323
Target test_acc: 0.3429
Epoch to reach the target acc: 49
[MPI Rank 0] Success 
[MPI Rank 4] Success 
[MPI Rank 1] Success 
[MPI Rank 5] Success 
[MPI Rank 2] Success 
[MPI Rank 6] Success 
[MPI Rank 3] Success 
[MPI Rank 7] Success 
