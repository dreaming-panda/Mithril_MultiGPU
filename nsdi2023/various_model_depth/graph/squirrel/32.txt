Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
DONE MPI INIT
Initialized node 5 on machine gnerv8
DONE MPI INIT
DONE MPI INIT
Initialized node 7 on machine gnerv8
Initialized node 6 on machine gnerv8
DONE MPI INIT
DONE MPI INIT
Initialized node 1 on machine gnerv7
DONE MPI INITInitialized node 0 on machine gnerv7
DONE MPI INIT
Initialized node 2 on machine gnerv7

Initialized node 3 on machine gnerv7
DONE MPI INIT
Initialized node 4 on machine gnerv8
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
        It takes 0.008 seconds.
Building the CSC structure...
        It takes 0.009 seconds.
Building the CSC structure...
        It takes 0.009 seconds.
Building the CSC structure...
        It takes 0.008 seconds.
Building the CSC structure...
        It takes 0.009 seconds.
Building the CSC structure...
        It takes 0.009 seconds.
Building the CSC structure...
        It takes 0.009 seconds.
Building the CSC structure...
        It takes 0.013 seconds.
Building the CSC structure...
        It takes 0.008 seconds.
        It takes 0.008 seconds.
        It takes 0.008 seconds.
        It takes 0.008 seconds.
        It takes 0.008 seconds.
        It takes 0.009 seconds.
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
        It takes 0.016 seconds.
        It takes 0.022 seconds.
Building the Feature Vector...
Building the Feature Vector...
        It takes 0.026 seconds.
Building the Label Vector...
        It takes 0.000 seconds.
        It takes 0.029 seconds.
Building the Label Vector...
        It takes 0.000 seconds.
The graph dataset locates at /shared_hdd_storage/jingjichen/gnn_datasets/graph_parallel_datasets/squirrel/8_parts
The number of GCNII layers: 32
The number of hidden units: 1000
The number of training epoches: 50
Learning rate: 0.001000
The partition strategy: model
The dropout rate: 0.500
The checkpointed weight file: /tmp/saved_weights_pipe
The random seed: 1
GCN hyper-parameter alpha: 0.100000
GCN hyper-parameter lambda: 0.500000
Number of classes: 5
Number of feature dimensions: 2089
Number of vertices: 5201
Number of GPUs: 8
        It takes 0.029 seconds.
Building the Label Vector...
        It takes 0.030 seconds.
Building the Label Vector...
        It takes 0.000 seconds.
        It takes 0.000 seconds.
        It takes 0.035 seconds.
Building the Label Vector...
        It takes 0.000 seconds.
        It takes 0.035 seconds.
        It takes 0.027 seconds.
Building the Label Vector...
Building the Label Vector...
        It takes 0.000 seconds.
        It takes 0.000 seconds.
        It takes 0.028 seconds.
Building the Label Vector...
        It takes 0.000 seconds.
GPU 0, layer [0, 33)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
5201, 401907, 401907
Number of vertices per chunk: 651
GPU 0, layer [0, 33)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
5201, 401907, 401907
Number of vertices per chunk: 651
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
GPU 0, layer [0, 33)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
5201, 401907, 401907
Number of vertices per chunk: 651
csr in-out ready !Start Cost Model Initialization...
GPU 0, layer [0, 33)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 33)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
5201, 401907, 401907
Number of vertices per chunk: 651
5201, 401907, 401907
GPU 0, layer [0, 33)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
Number of vertices per chunk: 651
csr in-out ready !Start Cost Model Initialization...
5201, 401907, 401907
Number of vertices per chunk: 651
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
train nodes 2496, valid nodes 1664, test nodes 1041
GPU 0, layer [0, 33)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
Chunks (number of global chunks: 8): 0-[0, 651) 1-[651, 1301) 2-[1301, 1951) 3-[1951, 2601) 4-[2601, 3251) 5-[3251, 3901) 6-[3901, 4551) 7-[4551, 5201)
5201, 401907, 401907
Number of vertices per chunk: 651
GPU 0, layer [0, 33)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
csr in-out ready !Start Cost Model Initialization...
***** Start profiling the layer-level communication performance *******
5201, 401907, 401907
Number of vertices per chunk: 651
csr in-out ready !Start Cost Model Initialization...
The layer-level communication performance: 60.225 Gbps (per GPU), 481.803 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 59.928 Gbps (per GPU), 479.428 Gbps (aggregated)
The layer-level communication performance: 59.928 Gbps (per GPU), 479.425 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 59.676 Gbps (per GPU), 477.406 Gbps (aggregated)
The layer-level communication performance: 59.645 Gbps (per GPU), 477.157 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 59.436 Gbps (per GPU), 475.490 Gbps (aggregated)
The layer-level communication performance: 59.387 Gbps (per GPU), 475.099 Gbps (aggregated)
The layer-level communication performance: 59.365 Gbps (per GPU), 474.921 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The graph-level communication performance (supernode = 2): 159.795 Gbps (per GPU), 1278.361 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 159.783 Gbps (per GPU), 1278.264 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 159.789 Gbps (per GPU), 1278.313 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 159.777 Gbps (per GPU), 1278.217 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 159.795 Gbps (per GPU), 1278.361 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 159.771 Gbps (per GPU), 1278.166 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 159.798 Gbps (per GPU), 1278.384 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 159.780 Gbps (per GPU), 1278.240 Gbps (aggregated, cluster-wide)
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
The graph-level communication performance (supernode = 4): 101.107 Gbps (per GPU), 808.859 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 101.102 Gbps (per GPU), 808.813 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 101.110 Gbps (per GPU), 808.878 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 101.103 Gbps (per GPU), 808.826 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 101.105 Gbps (per GPU), 808.839 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 101.107 Gbps (per GPU), 808.859 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 101.110 Gbps (per GPU), 808.878 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 101.103 Gbps (per GPU), 808.827 Gbps (aggregated, cluster-wide)
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
The graph-level communication performance (supernode = 8): 35.212 Gbps (per GPU), 281.697 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 35.212 Gbps (per GPU), 281.693 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 35.208 Gbps (per GPU), 281.663 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 35.208 Gbps (per GPU), 281.665 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 35.209 Gbps (per GPU), 281.669 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 35.209 Gbps (per GPU), 281.674 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 35.207 Gbps (per GPU), 281.655 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 35.205 Gbps (per GPU), 281.643 Gbps (aggregated, cluster-wide)
 LType   LT0   LT1   LT2 Ratio  VSum  ESum
 chk_0  1.02ms  1.64ms  1.77ms  1.74  0.65K  0.22M
 chk_1  1.02ms  0.95ms  1.10ms  1.15  0.65K  0.05M
 chk_2  1.02ms  0.83ms  0.96ms  1.24  0.65K  0.02M
 chk_3  1.02ms  0.84ms  0.97ms  1.22  0.65K  0.02M
 chk_4  1.03ms  0.78ms  0.92ms  1.32  0.65K  0.01M
 chk_5  1.03ms  0.78ms  0.92ms  1.33  0.65K  0.01M
 chk_6  1.03ms  0.97ms  1.59ms  1.63  0.65K  0.06M
 chk_7  1.03ms  0.80ms  0.93ms  1.30  0.65K  0.01M
   Avg  1.03  0.95  1.14
   Max  1.03  1.64  1.77
   Min  1.02  0.78  0.92
 Ratio  1.01  2.11  1.94
   Var  0.00  0.07  0.10
Profiling takes 0.370 s
*** Node 0, starting model training...
*** Node 1, starting model training...
*** Node 2, starting model training...
*** Node 3, starting model training...
*** Node 4, starting model training...
Num Stages: 1 / 1
Node 0, Pipeline Input Tensor: NULL
Node 0, Pipeline Output Tensor: NULL
*** Node 0 owns the model-level partition [0, 233)
*** Node 0, constructing the helper classes...
Node 0, Local Vertex Begin: 0, Num Local Vertices: 651
*** Node 5, starting model training...
*** Node 6, starting model training...
*** Node 7, starting model training...
Num Stages: 1 / 1
Node 1, Pipeline Input Tensor: NULL
Node 1, Pipeline Output Tensor: NULL
*** Node 1 owns the model-level partition [0, 233)
*** Node 1, constructing the helper classes...
Node 1, Local Vertex Begin: 651, Num Local Vertices: 650
Num Stages: 1 / 1
Node 2, Pipeline Input Tensor: NULL
Node 2, Pipeline Output Tensor: NULL
*** Node 2 owns the model-level partition [0, 233)
*** Node 2, constructing the helper classes...
Node 2, Local Vertex Begin: 1301, Num Local Vertices: 650
Num Stages: 1 / 1
Node 4, Pipeline Input Tensor: NULL
Node 4, Pipeline Output Tensor: NULL
*** Node 4 owns the model-level partition [0, 233)
*** Node 4, constructing the helper classes...
Node 4, Local Vertex Begin: 2601, Num Local Vertices: 650
Num Stages: 1 / 1
Node 5, Pipeline Input Tensor: NULL
Node 5, Pipeline Output Tensor: NULL
*** Node 5 owns the model-level partition [0, 233)
*** Node 5, constructing the helper classes...
Node 5, Local Vertex Begin: 3251, Num Local Vertices: 650
Num Stages: 1 / 1
Node 6, Pipeline Input Tensor: NULL
Node 6, Pipeline Output Tensor: NULL
*** Node 6 owns the model-level partition [0, 233)
*** Node 6, constructing the helper classes...
Node 6, Local Vertex Begin: 3901, Num Local Vertices: 650
Num Stages: 1 / 1
Node 7, Pipeline Input Tensor: NULL
Node 7, Pipeline Output Tensor: NULL
*** Node 7 owns the model-level partition [0, 233)
*** Node 7, constructing the helper classes...
Node 7, Local Vertex Begin: 4551, Num Local Vertices: 650
Num Stages: 1 / 1
Node 3, Pipeline Input Tensor: NULL
Node 3, Pipeline Output Tensor: NULL
*** Node 3 owns the model-level partition [0, 233)
*** Node 3, constructing the helper classes...
Node 3, Local Vertex Begin: 1951, Num Local Vertices: 650
*** Node 5, setting up some other necessary information...
*** Node 6, setting up some other necessary information...
*** Node 4, setting up some other necessary information...
*** Node 7, setting up some other necessary information...
*** Node 1, setting up some other necessary information...
*** Node 2, setting up some other necessary information...
*** Node 0, setting up some other necessary information...
*** Node 3, setting up some other necessary information...
+++++++++ Node 1 initializing the weights for op[0, 233)...
+++++++++ Node 2 initializing the weights for op[0, 233)...
+++++++++ Node 4 initializing the weights for op[0, 233)...
+++++++++ Node 5 initializing the weights for op[0, 233)...
+++++++++ Node 6 initializing the weights for op[0, 233)...
+++++++++ Node 7 initializing the weights for op[0, 233)...
+++++++++ Node 0 initializing the weights for op[0, 233)...
+++++++++ Node 3 initializing the weights for op[0, 233)...
Node 1, discovering the vertices that will be sent across graph boundary...
Node 2, discovering the vertices that will be sent across graph boundary...
Node 3, discovering the vertices that will be sent across graph boundary...
Node 0, discovering the vertices that will be sent across graph boundary...
Node 4, discovering the vertices that will be sent across graph boundary...
Node 5, discovering the vertices that will be sent across graph boundary...
Node 6, discovering the vertices that will be sent across graph boundary...
Node 7, discovering the vertices that will be sent across graph boundary...
The number of mirror vertices: 11547
Node 0, discovering the vertices that will be received across the graph boundary.
Node 1, discovering the vertices that will be received across the graph boundary.
Node 2, discovering the vertices that will be received across the graph boundary.
Node 4, discovering the vertices that will be received across the graph boundary.
Node 3, discovering the vertices that will be received across the graph boundary.
Node 5, discovering the vertices that will be received across the graph boundary.
Node 6, discovering the vertices that will be received across the graph boundary.
Node 7, discovering the vertices that will be received across the graph boundary.
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
*** Node 0, starting task scheduling...
*** Node 1, starting task scheduling...
*** Node 2, starting task scheduling...
*** Node 3, starting task scheduling...



The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
*** Node 4, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 5, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 6, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 7, starting task scheduling...
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
	Epoch 1:	Loss 1.6070	TrainAcc 0.2003	ValidAcc 0.2007	TestAcc 0.1988	BestValid 0.2007
	Epoch 50:	Loss 1.1579	TrainAcc 0.5954	ValidAcc 0.3227	TestAcc 0.3180	BestValid 0.3227
****** Epoch Time (Excluding Evaluation Cost): 0.194 s ******
****** Breakdown Analysis ******
Cluster-Wide Average, Bubble-Pipeline: 0.413 ms (Max: 0.715, Min: 0.033, Sum: 3.308)
Cluster-Wide Average, Compute: 29.685 ms (Max: 44.754, Min: 26.223, Sum: 237.483)
Cluster-Wide Average, Communication-Layer: 0.009 ms (Max: 0.012, Min: 0.007, Sum: 0.070)
Cluster-Wide Average, Bubble-Imbalance: 0.016 ms (Max: 0.024, Min: 0.011, Sum: 0.127)
Cluster-Wide Average, Communication-Graph: 115.048 ms (Max: 118.276, Min: 100.310, Sum: 920.388)
Cluster-Wide Average, Optimization: 47.220 ms (Max: 47.318, Min: 47.151, Sum: 377.759)
Cluster-Wide Average, Others: 0.965 ms (Max: 0.975, Min: 0.949, Sum: 7.717)
****** Breakdown Sum: 193.356 ms ******
Cluster-Wide Average, GPU Memory Consumption: 3.911 GB (Max: 4.354, Min: 3.835, Sum: 31.290)
Cluster-Wide Average, Graph-Level Communication Throughput: 27.462 Gbps (Max: 46.834, Min: 9.623, Sum: 219.695)
Cluster-Wide Average, Layer-Level Communication Throughput: 0.000 Gbps (Max: 0.000, Min: 0.000, Sum: 0.000)
Layer-level communication (cluster-wide, per-epoch): 0.000 GB
Graph-level communication (cluster-wide, per-epoch): 2.753 GB
Weight-sync communication (cluster-wide, per-epoch): 1.778 GB
Total communication (cluster-wide, per-epoch): 4.531 GB
****** Accuracy Results ******
Highest valid_acc: 0.3227
Target test_acc: 0.3180
Epoch to reach the target acc: 49
[MPI Rank 0] Success 
[MPI Rank 1] Success 
[MPI Rank 2] Success 
[MPI Rank 3] Success 
[MPI Rank 4] Success 
[MPI Rank 5] Success 
[MPI Rank 6] Success 
[MPI Rank 7] Success 
