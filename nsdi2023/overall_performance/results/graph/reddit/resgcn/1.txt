Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
DONE MPI INITDONE MPI INIT
Initialized node 7 on machine gnerv8

DONE MPI INIT
DONE MPI INIT
Initialized node 5 on machine gnerv8
Initialized node 4 on machine gnerv8
Initialized node 6 on machine gnerv8
DONE MPI INIT
DONE MPI INIT
DONE MPI INIT
DONE MPI INIT
Initialized node 0 on machine gnerv7
Initialized node 1 on machine gnerv7
Initialized node 2 on machine gnerv7
Initialized node 3 on machine gnerv7
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
        It takes 2.468 seconds.
Building the CSC structure...
        It takes 2.515 seconds.
Building the CSC structure...
        It takes 2.631 seconds.
Building the CSC structure...
        It takes 2.701 seconds.
Building the CSC structure...
        It takes 2.927 seconds.
Building the CSC structure...
        It takes 2.927 seconds.
Building the CSC structure...
        It takes 2.927 seconds.
Building the CSC structure...
        It takes 2.927 seconds.
Building the CSC structure...
        It takes 2.371 seconds.
        It takes 2.375 seconds.
        It takes 2.357 seconds.
        It takes 2.387 seconds.
        It takes 2.866 seconds.
        It takes 2.866 seconds.
        It takes 2.867 seconds.
        It takes 2.869 seconds.
Building the Feature Vector...
Building the Feature Vector...
        It takes 0.305 seconds.
Building the Label Vector...
        It takes 0.034 seconds.
        It takes 0.283 seconds.
Building the Label Vector...
        It takes 0.032 seconds.
Building the Feature Vector...
Building the Feature Vector...
        It takes 0.290 seconds.
Building the Label Vector...
        It takes 0.032 seconds.
        It takes 0.276 seconds.
Building the Label Vector...
        It takes 0.030 seconds.
Building the Feature Vector...
GPU 0, layer [0, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
Building the Feature Vector...
Building the Feature Vector...
GPU 0, layer [0, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
Building the Feature Vector...
232965, 114848857, 114848857
Number of vertices per chunk: 29121
232965, 114848857, 114848857
Number of vertices per chunk: 29121
GPU 0, layer [0, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
        It takes 0.859 seconds.
        It takes 0.693 seconds.
        It takes 0.933 seconds.
        It takes 0.835 seconds.
Building the Label Vector...
Building the Label Vector...
Building the Label Vector...
Building the Label Vector...
        It takes 0.071 seconds.
        It takes 0.071 seconds.
        It takes 0.071 seconds.
        It takes 0.071 seconds.
The graph dataset locates at /shared_hdd_storage/jingjichen/gnn_datasets/graph_parallel_datasets/reddit/8_parts
The number of GCNII layers: 32
The number of hidden units: 100
The number of training epoches: 5000
Learning rate: 0.001000
The partition strategy: model
The dropout rate: 0.500
The checkpointed weight file: /tmp/saved_weights
The random seed: 1
Number of classes: 41
Number of feature dimensions: 602
Number of vertices: 232965
Number of GPUs: 8
232965, 114848857, 114848857
Number of vertices per chunk: 29121
232965, 114848857, 114848857
Number of vertices per chunk: 29121
GPU 0, layer [0, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
train nodes 153431, valid nodes 23831, test nodes 55703
GPU 0, layer [0, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
Chunks (number of global chunks: 8): 0-[0, 29120) 1-[29120, 58241) 2-[58241, 87362) 3-[87362, 116483) 4-[116483, 145604) 5-[145604, 174724) 6-[174724, 203845) 7-[203845, 232965)
GPU 0, layer [0, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
232965, 114848857, 114848857
Number of vertices per chunk: 29121
232965, 114848857, 114848857
Number of vertices per chunk: 29121
232965, 114848857, 114848857
Number of vertices per chunk: 29121
232965, 114848857, 114848857
Number of vertices per chunk: 29121
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
***** Start profiling the layer-level communication performance *******
The layer-level communication performance: 59.651 Gbps (per GPU), 477.211 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 59.366 Gbps (per GPU), 474.929 Gbps (aggregated)
The layer-level communication performance: 59.373 Gbps (per GPU), 474.982 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 59.135 Gbps (per GPU), 473.077 Gbps (aggregated)
The layer-level communication performance: 59.104 Gbps (per GPU), 472.831 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 58.904 Gbps (per GPU), 471.233 Gbps (aggregated)
The layer-level communication performance: 58.851 Gbps (per GPU), 470.811 Gbps (aggregated)
The layer-level communication performance: 58.823 Gbps (per GPU), 470.584 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The graph-level communication performance (supernode = 2): 157.740 Gbps (per GPU), 1261.919 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 157.740 Gbps (per GPU), 1261.921 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 157.737 Gbps (per GPU), 1261.895 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 157.746 Gbps (per GPU), 1261.967 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 157.731 Gbps (per GPU), 1261.852 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 157.746 Gbps (per GPU), 1261.967 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 157.740 Gbps (per GPU), 1261.919 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 157.740 Gbps (per GPU), 1261.919 Gbps (aggregated, cluster-wide)
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
The graph-level communication performance (supernode = 4): 103.936 Gbps (per GPU), 831.487 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 103.936 Gbps (per GPU), 831.488 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 103.937 Gbps (per GPU), 831.495 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 103.936 Gbps (per GPU), 831.488 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 103.937 Gbps (per GPU), 831.495 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 103.937 Gbps (per GPU), 831.495 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 103.937 Gbps (per GPU), 831.495 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 103.935 Gbps (per GPU), 831.481 Gbps (aggregated, cluster-wide)
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
The graph-level communication performance (supernode = 8): 40.169 Gbps (per GPU), 321.351 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 40.168 Gbps (per GPU), 321.347 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 40.169 Gbps (per GPU), 321.349 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 40.169 Gbps (per GPU), 321.355 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 40.168 Gbps (per GPU), 321.347 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 40.168 Gbps (per GPU), 321.340 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 40.168 Gbps (per GPU), 321.342 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 40.168 Gbps (per GPU), 321.342 Gbps (aggregated, cluster-wide)
 LType   LT0   LT1   LT2 Ratio  VSum  ESum
 chk_0 10.23ms 11.28ms 13.74ms  1.34 29.12K 14.23M
 chk_1  5.84ms  7.04ms  9.41ms  1.61 29.12K  6.56M
 chk_2 17.16ms 18.38ms 20.74ms  1.21 29.12K 24.68M
 chk_3 17.24ms 18.77ms 20.92ms  1.21 29.12K 22.95M
 chk_4  5.58ms  6.86ms  9.23ms  1.66 29.12K  6.33M
 chk_5  9.55ms 10.80ms 13.31ms  1.39 29.12K 12.05M
 chk_6 10.66ms 12.09ms 14.29ms  1.34 29.12K 14.60M
 chk_7 10.02ms 11.12ms 13.30ms  1.33 29.12K 13.21M
   Avg 10.78 12.04 14.37
   Max 17.24 18.77 20.92
   Min  5.58  6.86  9.23
 Ratio  3.09  2.74  2.27
   Var 17.03 17.54 17.14
Profiling takes 3.459 s
*** Node 0, starting model training...
*** Node 1, starting model training...
*** Node 4, starting model training...
*** Node 2, starting model training...
*** Node 5, starting model training...
Num Stages: 1 / 1
Node 0, Pipeline Input Tensor: NULL
Node 0, Pipeline Output Tensor: NULL
*** Node 0 owns the model-level partition [0, 421)
*** Node 0, constructing the helper classes...
Node 0, Local Vertex Begin: 0, Num Local Vertices: 29120
*** Node 6, starting model training...
*** Node 3, starting model training...
*** Node 7, starting model training...
Num Stages: 1 / 1
Node 5, Pipeline Input Tensor: NULL
Node 5, Pipeline Output Tensor: NULL
*** Node 5 owns the model-level partition [0, 421)
*** Node 5, constructing the helper classes...
Node 5, Local Vertex Begin: 145604, Num Local Vertices: 29120
Num Stages: 1 / 1
Node 4, Pipeline Input Tensor: NULL
Node 4, Pipeline Output Tensor: NULL
*** Node 4 owns the model-level partition [0, 421)
*** Node 4, constructing the helper classes...
Node 4, Local Vertex Begin: 116483, Num Local Vertices: 29121
Num Stages: 1 / 1
Node 6, Pipeline Input Tensor: NULL
Node 6, Pipeline Output Tensor: NULL
*** Node 6 owns the model-level partition [0, 421)
*** Node 6, constructing the helper classes...
Node 6, Local Vertex Begin: 174724, Num Local Vertices: 29121
Num Stages: 1 / 1
Node 7, Pipeline Input Tensor: NULL
Node 7, Pipeline Output Tensor: NULL
*** Node 7 owns the model-level partition [0, 421)
*** Node 7, constructing the helper classes...
Node 7, Local Vertex Begin: 203845, Num Local Vertices: 29120
Num Stages: 1 / 1
Node 1, Pipeline Input Tensor: NULL
Node 1, Pipeline Output Tensor: NULL
*** Node 1 owns the model-level partition [0, 421)
*** Node 1, constructing the helper classes...
Node 1, Local Vertex Begin: 29120, Num Local Vertices: 29121
Num Stages: 1 / 1
Node 2, Pipeline Input Tensor: NULL
Node 2, Pipeline Output Tensor: NULL
*** Node 2 owns the model-level partition [0, 421)
*** Node 2, constructing the helper classes...
Node 2, Local Vertex Begin: 58241, Num Local Vertices: 29121
Num Stages: 1 / 1
Node 3, Pipeline Input Tensor: NULL
Node 3, Pipeline Output Tensor: NULL
*** Node 3 owns the model-level partition [0, 421)
*** Node 3, constructing the helper classes...
Node 3, Local Vertex Begin: 87362, Num Local Vertices: 29121
*** Node 0, setting up some other necessary information...
*** Node 3, setting up some other necessary information...
*** Node 1, setting up some other necessary information...
*** Node 2, setting up some other necessary information...
*** Node 7, setting up some other necessary information...
*** Node 5, setting up some other necessary information...
*** Node 6, setting up some other necessary information...
*** Node 4, setting up some other necessary information...
+++++++++ Node 3 initializing the weights for op[0, 421)...
+++++++++ Node 1 initializing the weights for op[0, 421)...
+++++++++ Node 0 initializing the weights for op[0, 421)...
+++++++++ Node 5 initializing the weights for op[0, 421)...
+++++++++ Node 2 initializing the weights for op[0, 421)...
+++++++++ Node 6 initializing the weights for op[0, 421)...
+++++++++ Node 7 initializing the weights for op[0, 421)...
+++++++++ Node 4 initializing the weights for op[0, 421)...
Node 0, discovering the vertices that will be sent across graph boundary...
Node 4, discovering the vertices that will be sent across graph boundary...
Node 1, discovering the vertices that will be sent across graph boundary...
Node 5, discovering the vertices that will be sent across graph boundary...
Node 2, discovering the vertices that will be sent across graph boundary...
Node 6, discovering the vertices that will be sent across graph boundary...
Node 3, discovering the vertices that will be sent across graph boundary...
Node 7, discovering the vertices that will be sent across graph boundary...
The number of mirror vertices: 607420
Node 0, discovering the vertices that will be received across the graph boundary.
Node 4, discovering the vertices that will be received across the graph boundary.
Node 1, discovering the vertices that will be received across the graph boundary.
Node 5, discovering the vertices that will be received across the graph boundary.
Node 2, discovering the vertices that will be received across the graph boundary.
Node 6, discovering the vertices that will be received across the graph boundary.
Node 3, discovering the vertices that will be received across the graph boundary.
Node 7, discovering the vertices that will be received across the graph boundary.
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
*** Node 4, starting task scheduling...
*** Node 5, starting task scheduling...
*** Node 0, starting task scheduling...
*** Node 6, starting task scheduling...
*** Node 1, starting task scheduling...
*** Node 7, starting task scheduling...
*** Node 2, starting task scheduling...
The learning rate specified by the user: 0.001000000



The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
*** Node 3, starting task scheduling...
The learning rate specified by the user: 0.001000000
	Epoch 1:	Loss 4.1798	TrainAcc 0.1560	ValidAcc 0.1467	TestAcc 0.1451	BestValid 0.1467
	Epoch 50:	Loss 0.7044	TrainAcc 0.9068	ValidAcc 0.9187	TestAcc 0.9161	BestValid 0.9187
	Epoch 100:	Loss 0.3864	TrainAcc 0.9425	ValidAcc 0.9471	TestAcc 0.9466	BestValid 0.9471
