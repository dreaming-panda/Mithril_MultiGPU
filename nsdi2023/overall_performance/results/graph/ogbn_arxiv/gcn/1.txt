Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
DONE MPI INIT
Initialized node 6 on machine gnerv8
DONE MPI INIT
Initialized node 4 on machine gnerv8
DONE MPI INITDONE MPI INIT

Initialized node 7 on machine gnerv8
Initialized node 5 on machine gnerv8
DONE MPI INIT
DONE MPI INITDONE MPI INIT
Initialized node 3 on machine gnerv7
DONE MPI INIT
Initialized node 0 on machine gnerv7
Initialized node 1 on machine gnerv7

Initialized node 2 on machine gnerv7
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
        It takes 0.061 seconds.
Building the CSC structure...
        It takes 0.060 seconds.
Building the CSC structure...
        It takes 0.060 seconds.
Building the CSC structure...
        It takes 0.066 seconds.
Building the CSC structure...
        It takes 0.071 seconds.
Building the CSC structure...
        It takes 0.070 seconds.
Building the CSC structure...
        It takes 0.070 seconds.
Building the CSC structure...
        It takes 0.077 seconds.
Building the CSC structure...
        It takes 0.055 seconds.
        It takes 0.055 seconds.
        It takes 0.056 seconds.
        It takes 0.055 seconds.
        It takes 0.058 seconds.
        It takes 0.058 seconds.
        It takes 0.058 seconds.
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
        It takes 0.064 seconds.
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
        It takes 0.149 seconds.
        It takes 0.149 seconds.
        It takes 0.145 seconds.
        It takes 0.149 seconds.
Building the Label Vector...
Building the Label Vector...
Building the Label Vector...
Building the Label Vector...
        It takes 0.148 seconds.
        It takes 0.148 seconds.
        It takes 0.130 seconds.
        It takes 0.148 seconds.
Building the Label Vector...
Building the Label Vector...
Building the Label Vector...
Building the Label Vector...
        It takes 0.058 seconds.
        It takes 0.058 seconds.
        It takes 0.058 seconds.
        It takes 0.058 seconds.
        It takes 0.049 seconds.
        It takes 0.049 seconds.
        It takes 0.049 seconds.
        It takes 0.049 seconds.
The graph dataset locates at /shared_hdd_storage/jingjichen/gnn_datasets/graph_parallel_datasets/ogbn_arxiv/8_parts
The number of GCN layers: 32
The number of hidden units: 100
The number of training epoches: 5000
Learning rate: 0.001000
The partition strategy: model
The dropout rate: 0.500
The checkpointed weight file: /tmp/saved_weights
The random seed: 1
Number of classes: 40
Number of feature dimensions: 128
Number of vertices: 169343
Number of GPUs: 8
GPU 0, layer [0, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
169343, 2484941, 2484941
Number of vertices per chunk: 21168
GPU 0, layer [0, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
169343, 2484941, 2484941
Number of vertices per chunk: 21168
csr in-out ready !Start Cost Model Initialization...
GPU 0, layer [0, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
169343, 2484941, 2484941
Number of vertices per chunk: 21168
169343, 2484941, 2484941
Number of vertices per chunk: 21168
csr in-out ready !Start Cost Model Initialization...
169343, 2484941, 2484941
Number of vertices per chunk: 21168
train nodes 90941, valid nodes 29799, test nodes 48603
GPU 0, layer [0, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
Chunks (number of global chunks: 8): 0-[0, 21167) 1-[21167, 42335) 2-[42335, 63503) 3-[63503, 84671) 4-[84671, 105839) 5-[105839, 127007) 6-[127007, 148175) 7-[148175, 169343)
GPU 0, layer [0, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
169343, 2484941, 2484941
Number of vertices per chunk: 21168
169343, 2484941, 2484941
Number of vertices per chunk: 21168
169343, 2484941, 2484941
Number of vertices per chunk: 21168
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
***** Start profiling the layer-level communication performance *******
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
The layer-level communication performance: 42.319 Gbps (per GPU), 338.555 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 42.161 Gbps (per GPU), 337.287 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 42.042 Gbps (per GPU), 336.337 Gbps (aggregated)
The layer-level communication performance: 42.029 Gbps (per GPU), 336.232 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 41.925 Gbps (per GPU), 335.402 Gbps (aggregated)
The layer-level communication performance: 41.905 Gbps (per GPU), 335.239 Gbps (aggregated)
The layer-level communication performance: 41.882 Gbps (per GPU), 335.057 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 42.167 Gbps (per GPU), 337.333 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The graph-level communication performance (supernode = 2): 159.546 Gbps (per GPU), 1276.368 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 159.591 Gbps (per GPU), 1276.732 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 159.543 Gbps (per GPU), 1276.343 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 159.555 Gbps (per GPU), 1276.440 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 159.564 Gbps (per GPU), 1276.513 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 159.576 Gbps (per GPU), 1276.608 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 159.570 Gbps (per GPU), 1276.562 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 159.552 Gbps (per GPU), 1276.416 Gbps (aggregated, cluster-wide)
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
The graph-level communication performance (supernode = 4): 97.132 Gbps (per GPU), 777.053 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 97.134 Gbps (per GPU), 777.071 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 97.135 Gbps (per GPU), 777.076 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 97.135 Gbps (per GPU), 777.077 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 97.102 Gbps (per GPU), 776.813 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 97.084 Gbps (per GPU), 776.675 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 97.082 Gbps (per GPU), 776.658 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 97.057 Gbps (per GPU), 776.459 Gbps (aggregated, cluster-wide)
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
The graph-level communication performance (supernode = 8): 36.827 Gbps (per GPU), 294.617 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 36.828 Gbps (per GPU), 294.621 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 36.827 Gbps (per GPU), 294.618 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 36.827 Gbps (per GPU), 294.613 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 36.823 Gbps (per GPU), 294.587 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 36.825 Gbps (per GPU), 294.603 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 36.825 Gbps (per GPU), 294.598 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 36.824 Gbps (per GPU), 294.592 Gbps (aggregated, cluster-wide)
 LType   LT0   LT1   LT2 Ratio  VSum  ESum
 chk_0  0.81ms  0.86ms  0.59ms  1.47 21.17K  0.46M
 chk_1  0.88ms  0.93ms  0.66ms  1.41 21.17K  0.55M
 chk_2  0.77ms  0.83ms  0.55ms  1.50 21.17K  0.39M
 chk_3  0.72ms  0.78ms  0.51ms  1.54 21.17K  0.24M
 chk_4  0.68ms  0.99ms  0.46ms  2.17 21.17K  0.17M
 chk_5  0.68ms  0.74ms  0.46ms  1.60 21.17K  0.22M
 chk_6  0.69ms  0.74ms  0.47ms  1.58 21.17K  0.16M
 chk_7  0.67ms  0.72ms  0.45ms  1.61 21.17K  0.12M
   Avg  0.74  0.83  0.52
   Max  0.88  0.99  0.66
   Min  0.67  0.72  0.45
 Ratio  1.31  1.37  1.46
   Var  0.01  0.01  0.01
Profiling takes 0.276 s
*** Node 0, starting model training...
*** Node 2, starting model training...
*** Node 1, starting model training...
*** Node 4, starting model training...
*** Node 6, starting model training...
*** Node 7, starting model training...
*** Node 5, starting model training...
*** Node 3, starting model training...
Num Stages: 1 / 1
Node 0, Pipeline Input Tensor: NULL
Node 0, Pipeline Output Tensor: NULL
*** Node 0 owns the model-level partition [0, 160)
*** Node 0, constructing the helper classes...
Node 0, Local Vertex Begin: 0, Num Local Vertices: 21167
Num Stages: 1 / 1
Node 2, Pipeline Input Tensor: NULL
Node 2, Pipeline Output Tensor: NULL
*** Node 2 owns the model-level partition [0, 160)
*** Node 2, constructing the helper classes...
Node 2, Local Vertex Begin: 42335, Num Local Vertices: 21168
Num Stages: 1 / 1
Node 4, Pipeline Input Tensor: NULL
Node 4, Pipeline Output Tensor: NULL
*** Node 4 owns the model-level partition [0, 160)
*** Node 4, constructing the helper classes...
Node 4, Local Vertex Begin: 84671, Num Local Vertices: 21168
Num Stages: 1 / 1
Node 6, Pipeline Input Tensor: NULL
Node 6, Pipeline Output Tensor: NULL
*** Node 6 owns the model-level partition [0, 160)
*** Node 6, constructing the helper classes...
Node 6, Local Vertex Begin: 127007, Num Local Vertices: 21168
Num Stages: 1 / 1
Node 7, Pipeline Input Tensor: NULL
Node 7, Pipeline Output Tensor: NULL
*** Node 7 owns the model-level partition [0, 160)
*** Node 7, constructing the helper classes...
Node 7, Local Vertex Begin: 148175, Num Local Vertices: 21168
Num Stages: 1 / 1
Node 5, Pipeline Input Tensor: NULL
Node 5, Pipeline Output Tensor: NULL
*** Node 5 owns the model-level partition [0, 160)
*** Node 5, constructing the helper classes...
Node 5, Local Vertex Begin: 105839, Num Local Vertices: 21168
Num Stages: 1 / 1
Node 3, Pipeline Input Tensor: NULL
Node 3, Pipeline Output Tensor: NULL
*** Node 3 owns the model-level partition [0, 160)
*** Node 3, constructing the helper classes...
Node 3, Local Vertex Begin: 63503, Num Local Vertices: 21168
Num Stages: 1 / 1
Node 1, Pipeline Input Tensor: NULL
Node 1, Pipeline Output Tensor: NULL
*** Node 1 owns the model-level partition [0, 160)
*** Node 1, constructing the helper classes...
Node 1, Local Vertex Begin: 21167, Num Local Vertices: 21168
*** Node 1, setting up some other necessary information...
*** Node 4, setting up some other necessary information...
*** Node 2, setting up some other necessary information...
*** Node 5, setting up some other necessary information...
*** Node 3, setting up some other necessary information...
*** Node 6, setting up some other necessary information...
*** Node 7, setting up some other necessary information...
*** Node 0, setting up some other necessary information...
+++++++++ Node 3 initializing the weights for op[0, 160)...
+++++++++ Node 1 initializing the weights for op[0, 160)...
+++++++++ Node 0 initializing the weights for op[0, 160)...
+++++++++ Node 6 initializing the weights for op[0, 160)...
+++++++++ Node 2 initializing the weights for op[0, 160)...
+++++++++ Node 7 initializing the weights for op[0, 160)...
+++++++++ Node 5 initializing the weights for op[0, 160)...
+++++++++ Node 4 initializing the weights for op[0, 160)...
Node 0, discovering the vertices that will be sent across graph boundary...
Node 1, discovering the vertices that will be sent across graph boundary...
Node 2, discovering the vertices that will be sent across graph boundary...
Node 3, discovering the vertices that will be sent across graph boundary...
Node 4, discovering the vertices that will be sent across graph boundary...
Node 5, discovering the vertices that will be sent across graph boundary...
Node 6, discovering the vertices that will be sent across graph boundary...
Node 7, discovering the vertices that will be sent across graph boundary...
The number of mirror vertices: 114305
Node 0, discovering the vertices that will be received across the graph boundary.
Node 1, discovering the vertices that will be received across the graph boundary.
Node 2, discovering the vertices that will be received across the graph boundary.
Node 3, discovering the vertices that will be received across the graph boundary.
Node 4, discovering the vertices that will be received across the graph boundary.
Node 5, discovering the vertices that will be received across the graph boundary.
Node 6, discovering the vertices that will be received across the graph boundary.
Node 7, discovering the vertices that will be received across the graph boundary.
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
*** Node 4, starting task scheduling...
*** Node 0, starting task scheduling...



*** Node 6, starting task scheduling...
*** Node 1, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 5, starting task scheduling...
*** Node 2, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 7, starting task scheduling...
*** Node 3, starting task scheduling...
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
	Epoch 1:	Loss 3.6889	TrainAcc 0.0229	ValidAcc 0.0122	TestAcc 0.0109	BestValid 0.0122
	Epoch 50:	Loss 2.9655	TrainAcc 0.1791	ValidAcc 0.0763	TestAcc 0.0586	BestValid 0.0763
	Epoch 100:	Loss 2.7735	TrainAcc 0.1099	ValidAcc 0.2297	TestAcc 0.2156	BestValid 0.2297
	Epoch 150:	Loss 2.7106	TrainAcc 0.1099	ValidAcc 0.2297	TestAcc 0.2156	BestValid 0.2297
	Epoch 200:	Loss 2.5347	TrainAcc 0.1099	ValidAcc 0.2297	TestAcc 0.2156	BestValid 0.2297
