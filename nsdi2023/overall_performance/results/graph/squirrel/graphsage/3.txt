Initialized node 5 on machine gnerv3
Initialized node 6 on machine gnerv3
Initialized node 7 on machine gnerv3
Initialized node 4 on machine gnerv3
Initialized node 0 on machine gnerv2
Initialized node 1 on machine gnerv2
Initialized node 3 on machine gnerv2
Initialized node 2 on machine gnerv2
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
        It takes 0.007 seconds.
Building the CSC structure...
        It takes 0.007 seconds.
Building the CSC structure...
        It takes 0.008 seconds.
Building the CSC structure...
        It takes 0.008 seconds.
Building the CSC structure...
        It takes 0.009 seconds.
Building the CSC structure...
        It takes 0.008 seconds.
Building the CSC structure...
        It takes 0.009 seconds.
Building the CSC structure...
        It takes 0.012 seconds.
Building the CSC structure...
        It takes 0.006 seconds.
        It takes 0.006 seconds.
        It takes 0.008 seconds.
        It takes 0.008 seconds.
        It takes 0.007 seconds.
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
        It takes 0.011 seconds.
        It takes 0.012 seconds.
        It takes 0.009 seconds.
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
        It takes 0.023 seconds.
Building the Label Vector...
        It takes 0.000 seconds.
        It takes 0.022 seconds.
Building the Label Vector...
        It takes 0.000 seconds.
The graph dataset locates at /shared_hdd_storage/jingjichen/gnn_datasets/graph_parallel_datasets/squirrel/8_parts
The number of GCNII layers: 32
The number of hidden units: 1000
The number of training epoches: 5000
Learning rate: 0.001000
The partition strategy: model
The dropout rate: 0.500
The checkpointed weight file: /tmp/saved_weights
The random seed: 3
Number of classes: 5
Number of feature dimensions: 2089
Number of vertices: 5201
Number of GPUs: 8
        It takes 0.027 seconds.
Building the Label Vector...
        It takes 0.000 seconds.
        It takes 0.023 seconds.
Building the Label Vector...
        It takes 0.000 seconds.
        It takes 0.031 seconds.
Building the Label Vector...
        It takes 0.000 seconds.
        It takes 0.025 seconds.
        It takes 0.026 seconds.
Building the Label Vector...
Building the Label Vector...
        It takes 0.000 seconds.
        It takes 0.001 seconds.
        It takes 0.029 seconds.
Building the Label Vector...
        It takes 0.000 seconds.
GPU 0, layer [0, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
5201, 401907, 401907
Number of vertices per chunk: 651
GPU 0, layer [0, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
5201, 401907, 401907
Number of vertices per chunk: 651
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
GPU 0, layer [0, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
5201, 401907, 401907
Number of vertices per chunk: 651
csr in-out ready !Start Cost Model Initialization...
train nodes 2496, valid nodes 1664, test nodes 1041
GPU 0, layer [0, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
Chunks (number of global chunks: 8): 0-[0, 651) 1-[651, 1301) 2-[1301, 1951) 3-[1951, 2601) 4-[2601, 3251) 5-[3251, 3901) 6-[3901, 4551) 7-[4551, 5201)
GPU 0, layer [0, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
5201, 401907, 401907
Number of vertices per chunk: 651
5201, 401907, 401907
Number of vertices per chunk: 651
csr in-out ready !Start Cost Model Initialization...
***** Start profiling the layer-level communication performance *******
GPU 0, layer [0, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
csr in-out ready !Start Cost Model Initialization...
5201, 401907, 401907
Number of vertices per chunk: 651
GPU 0, layer [0, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
5201, 401907, 401907
csr in-out ready !Start Cost Model Initialization...
Number of vertices per chunk: 651
GPU 0, layer [0, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
csr in-out ready !Start Cost Model Initialization...
5201, 401907, 401907
Number of vertices per chunk: 651
csr in-out ready !Start Cost Model Initialization...
The layer-level communication performance: 59.862 Gbps (per GPU), 478.895 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 59.569 Gbps (per GPU), 476.549 Gbps (aggregated)
The layer-level communication performance: 59.565 Gbps (per GPU), 476.522 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 59.319 Gbps (per GPU), 474.552 Gbps (aggregated)
The layer-level communication performance: 59.280 Gbps (per GPU), 474.241 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 59.062 Gbps (per GPU), 472.496 Gbps (aggregated)
The layer-level communication performance: 59.018 Gbps (per GPU), 472.142 Gbps (aggregated)
The layer-level communication performance: 58.985 Gbps (per GPU), 471.880 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The graph-level communication performance (supernode = 2): 157.586 Gbps (per GPU), 1260.689 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 157.580 Gbps (per GPU), 1260.639 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 157.583 Gbps (per GPU), 1260.663 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 157.624 Gbps (per GPU), 1260.994 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 157.586 Gbps (per GPU), 1260.686 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 157.562 Gbps (per GPU), 1260.497 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 157.592 Gbps (per GPU), 1260.734 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 157.613 Gbps (per GPU), 1260.902 Gbps (aggregated, cluster-wide)
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
The graph-level communication performance (supernode = 4): 100.967 Gbps (per GPU), 807.736 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 100.969 Gbps (per GPU), 807.755 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 100.966 Gbps (per GPU), 807.730 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 100.970 Gbps (per GPU), 807.762 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 100.968 Gbps (per GPU), 807.743 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 100.972 Gbps (per GPU), 807.775 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 100.966 Gbps (per GPU), 807.730 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 100.973 Gbps (per GPU), 807.781 Gbps (aggregated, cluster-wide)
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
The graph-level communication performance (supernode = 8): 33.768 Gbps (per GPU), 270.147 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 33.767 Gbps (per GPU), 270.137 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 33.761 Gbps (per GPU), 270.086 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 33.768 Gbps (per GPU), 270.140 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 33.761 Gbps (per GPU), 270.088 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 33.765 Gbps (per GPU), 270.118 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 33.757 Gbps (per GPU), 270.060 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 33.765 Gbps (per GPU), 270.123 Gbps (aggregated, cluster-wide)
 LType   LT0   LT1   LT2 Ratio  VSum  ESum
 chk_0  2.62ms  2.04ms  1.23ms  2.12  0.65K  0.22M
 chk_1  2.05ms  1.31ms  0.51ms  4.01  0.65K  0.05M
 chk_2  1.89ms  1.18ms  0.37ms  5.04  0.65K  0.02M
 chk_3  1.91ms  1.20ms  0.39ms  4.90  0.65K  0.02M
 chk_4  1.85ms  1.14ms  0.33ms  5.65  0.65K  0.01M
 chk_5  1.84ms  1.12ms  0.32ms  5.73  0.65K  0.01M
 chk_6  2.05ms  1.33ms  0.53ms  3.89  0.65K  0.06M
 chk_7  1.86ms  1.15ms  0.35ms  5.31  0.65K  0.01M
   Avg  2.01  1.31  0.50
   Max  2.62  2.04  1.23
   Min  1.84  1.12  0.32
 Ratio  1.42  1.82  3.83
   Var  0.06  0.08  0.08
Profiling takes 0.417 s
Evaluating the performance of the pure model-parallel execution plan.
The bottleneck stage in the optimal plan: 45.929 ms
Partition 0 [0, 3) has cost: 37.002 ms
Partition 1 [3, 7) has cost: 41.898 ms
Partition 2 [7, 11) has cost: 41.898 ms
Partition 3 [11, 15) has cost: 41.898 ms
Partition 4 [15, 19) has cost: 41.898 ms
Partition 5 [19, 23) has cost: 41.898 ms
Partition 6 [23, 27) has cost: 41.898 ms
Partition 7 [27, 32) has cost: 45.929 ms
The optimal partitioning:
[0, 3)
[3, 7)
[7, 11)
[11, 15)
[15, 19)
[19, 23)
[23, 27)
[27, 32)
****** Estimating the Forwarding Pipeline Cost ******
Simulation Results: Total Runtime: 36.898 ms
GPU 0, Compute+Comm Time: 14.026 ms, Bubble Time: 13.759 ms, Imbalance Overhead: 9.113 ms
GPU 1, Compute+Comm Time: 15.302 ms, Bubble Time: 14.126 ms, Imbalance Overhead: 7.469 ms
GPU 2, Compute+Comm Time: 15.302 ms, Bubble Time: 15.087 ms, Imbalance Overhead: 6.509 ms
GPU 3, Compute+Comm Time: 15.302 ms, Bubble Time: 16.047 ms, Imbalance Overhead: 5.549 ms
GPU 4, Compute+Comm Time: 15.302 ms, Bubble Time: 17.007 ms, Imbalance Overhead: 4.589 ms
GPU 5, Compute+Comm Time: 15.302 ms, Bubble Time: 17.967 ms, Imbalance Overhead: 3.629 ms
GPU 6, Compute+Comm Time: 15.302 ms, Bubble Time: 18.754 ms, Imbalance Overhead: 2.842 ms
GPU 7, Compute+Comm Time: 16.634 ms, Bubble Time: 19.829 ms, Imbalance Overhead: 0.435 ms
****** Estimating the Backwarding Pipeline Cost *******
Simulation Results: Total Runtime: 76.465 ms
GPU 0, Compute+Comm Time: 34.856 ms, Bubble Time: 40.734 ms, Imbalance Overhead: 0.875 ms
GPU 1, Compute+Comm Time: 32.157 ms, Bubble Time: 38.601 ms, Imbalance Overhead: 5.707 ms
GPU 2, Compute+Comm Time: 32.157 ms, Bubble Time: 37.069 ms, Imbalance Overhead: 7.239 ms
GPU 3, Compute+Comm Time: 32.157 ms, Bubble Time: 35.183 ms, Imbalance Overhead: 9.125 ms
GPU 4, Compute+Comm Time: 32.157 ms, Bubble Time: 33.297 ms, Imbalance Overhead: 11.011 ms
GPU 5, Compute+Comm Time: 32.157 ms, Bubble Time: 31.412 ms, Imbalance Overhead: 12.896 ms
GPU 6, Compute+Comm Time: 32.157 ms, Bubble Time: 29.526 ms, Imbalance Overhead: 14.782 ms
GPU 7, Compute+Comm Time: 28.537 ms, Bubble Time: 28.948 ms, Imbalance Overhead: 18.981 ms
The estimated cost of the whole pipeline: 119.031 ms

Evaluating the hybrid-parallelism execution plan with 2 DP ways.
The bottleneck stage in the optimal plan: 87.827 ms
Partition 0 [0, 7) has cost: 78.900 ms
Partition 1 [7, 15) has cost: 83.796 ms
Partition 2 [15, 23) has cost: 83.796 ms
Partition 3 [23, 32) has cost: 87.827 ms
****** Estimating the Forwarding Pipeline Cost ******
Simulation Results: Total Runtime: 38.737 ms
GPU 0, Compute+Comm Time: 18.003 ms, Bubble Time: 13.485 ms, Imbalance Overhead: 7.249 ms
GPU 1, Compute+Comm Time: 19.137 ms, Bubble Time: 14.707 ms, Imbalance Overhead: 4.893 ms
GPU 2, Compute+Comm Time: 19.137 ms, Bubble Time: 16.389 ms, Imbalance Overhead: 3.212 ms
GPU 3, Compute+Comm Time: 20.286 ms, Bubble Time: 18.451 ms, Imbalance Overhead: 0.000 ms
****** Estimating the Backwarding Pipeline Cost *******
Simulation Results: Total Runtime: 76.014 ms
GPU 0, Compute+Comm Time: 39.726 ms, Bubble Time: 36.288 ms, Imbalance Overhead: 0.000 ms
GPU 1, Compute+Comm Time: 37.689 ms, Bubble Time: 32.121 ms, Imbalance Overhead: 6.205 ms
GPU 2, Compute+Comm Time: 37.689 ms, Bubble Time: 28.769 ms, Imbalance Overhead: 9.557 ms
GPU 3, Compute+Comm Time: 35.156 ms, Bubble Time: 26.384 ms, Imbalance Overhead: 14.474 ms
    The estimated cost with 2 DP ways is 120.489 ms

Evaluating the hybrid-parallelism execution plan with 4 DP ways.
The bottleneck stage in the optimal plan: 171.623 ms
Partition 0 [0, 15) has cost: 162.696 ms
Partition 1 [15, 32) has cost: 171.623 ms
****** Estimating the Forwarding Pipeline Cost ******
Simulation Results: Total Runtime: 46.104 ms
GPU 0, Compute+Comm Time: 27.915 ms, Bubble Time: 13.065 ms, Imbalance Overhead: 5.124 ms
GPU 1, Compute+Comm Time: 30.325 ms, Bubble Time: 15.779 ms, Imbalance Overhead: 0.000 ms
****** Estimating the Backwarding Pipeline Cost *******
Simulation Results: Total Runtime: 79.119 ms
GPU 0, Compute+Comm Time: 51.638 ms, Bubble Time: 27.481 ms, Imbalance Overhead: 0.000 ms
GPU 1, Compute+Comm Time: 47.794 ms, Bubble Time: 21.702 ms, Imbalance Overhead: 9.624 ms
    The estimated cost with 4 DP ways is 131.484 ms

Evaluating the hybrid-parallelism execution plan with 8 DP ways.
The bottleneck stage in the optimal plan: 334.319 ms
Partition 0 [0, 32) has cost: 334.319 ms
****** Estimating the Forwarding Pipeline Cost ******
Simulation Results: Total Runtime: 89.456 ms
GPU 0, Compute+Comm Time: 89.456 ms, Bubble Time: 0.000 ms, Imbalance Overhead: 0.000 ms
****** Estimating the Backwarding Pipeline Cost *******
Simulation Results: Total Runtime: 113.834 ms
GPU 0, Compute+Comm Time: 113.834 ms, Bubble Time: 0.000 ms, Imbalance Overhead: 0.000 ms
    The estimated cost with 8 DP ways is 213.455 ms

*** Node 4, starting model training...
Num Stages: 1 / 1
Node 4, Pipeline Input Tensor: NULL
Node 4, Pipeline Output Tensor: NULL
*** Node 4 owns the model-level partition [0, 257)
*** Node 4, constructing the helper classes...
Node 4, Local Vertex Begin: 2601, Num Local Vertices: 650
*** Node 0, starting model training...
Num Stages: 1 / 1
Node 0, Pipeline Input Tensor: NULL
Node 0, Pipeline Output Tensor: NULL
*** Node 0 owns the model-level partition [0, 257)
*** Node 0, constructing the helper classes...
Node 0, Local Vertex Begin: 0, Num Local Vertices: 651
*** Node 5, starting model training...
Num Stages: 1 / 1
Node 5, Pipeline Input Tensor: NULL
Node 5, Pipeline Output Tensor: NULL
*** Node 5 owns the model-level partition [0, 257)
*** Node 5, constructing the helper classes...
Node 5, Local Vertex Begin: 3251, Num Local Vertices: 650
*** Node 1, starting model training...
Num Stages: 1 / 1
Node 1, Pipeline Input Tensor: NULL
Node 1, Pipeline Output Tensor: NULL
*** Node 1 owns the model-level partition [0, 257)
*** Node 1, constructing the helper classes...
Node 1, Local Vertex Begin: 651, Num Local Vertices: 650
*** Node 6, starting model training...
Num Stages: 1 / 1
Node 6, Pipeline Input Tensor: NULL
Node 6, Pipeline Output Tensor: NULL
*** Node 6 owns the model-level partition [0, 257)
*** Node 6, constructing the helper classes...
Node 6, Local Vertex Begin: 3901, Num Local Vertices: 650
*** Node 3, starting model training...
Num Stages: 1 / 1
Node 3, Pipeline Input Tensor: NULL
Node 3, Pipeline Output Tensor: NULL
*** Node 3 owns the model-level partition [0, 257)
*** Node 3, constructing the helper classes...
Node 3, Local Vertex Begin: 1951, Num Local Vertices: 650
*** Node 7, starting model training...
Num Stages: 1 / 1
Node 7, Pipeline Input Tensor: NULL
Node 7, Pipeline Output Tensor: NULL
*** Node 7 owns the model-level partition [0, 257)
*** Node 7, constructing the helper classes...
Node 7, Local Vertex Begin: 4551, Num Local Vertices: 650
*** Node 2, starting model training...
Num Stages: 1 / 1
Node 2, Pipeline Input Tensor: NULL
Node 2, Pipeline Output Tensor: NULL
*** Node 2 owns the model-level partition [0, 257)
*** Node 2, constructing the helper classes...
Node 2, Local Vertex Begin: 1301, Num Local Vertices: 650
*** Node 4, setting up some other necessary information...
*** Node 5, setting up some other necessary information...
*** Node 6, setting up some other necessary information...
*** Node 7, setting up some other necessary information...
*** Node 1, setting up some other necessary information...
*** Node 2, setting up some other necessary information...
*** Node 3, setting up some other necessary information...
*** Node 0, setting up some other necessary information...
+++++++++ Node 4 initializing the weights for op[0, 257)...
+++++++++ Node 5 initializing the weights for op[0, 257)...
+++++++++ Node 1 initializing the weights for op[0, 257)...
+++++++++ Node 3 initializing the weights for op[0, 257)...
+++++++++ Node 6 initializing the weights for op[0, 257)...
+++++++++ Node 7 initializing the weights for op[0, 257)...
+++++++++ Node 2 initializing the weights for op[0, 257)...
+++++++++ Node 0 initializing the weights for op[0, 257)...
Node 5, discovering the vertices that will be sent across graph boundary...
Node 0, discovering the vertices that will be sent across graph boundary...
Node 6, discovering the vertices that will be sent across graph boundary...
Node 1, discovering the vertices that will be sent across graph boundary...
Node 7, discovering the vertices that will be sent across graph boundary...
Node 2, discovering the vertices that will be sent across graph boundary...
Node 4, discovering the vertices that will be sent across graph boundary...
Node 3, discovering the vertices that will be sent across graph boundary...
Node 4, discovering the vertices that will be received across the graph boundary.
The number of mirror vertices: 11547
Node 0, discovering the vertices that will be received across the graph boundary.
Node 5, discovering the vertices that will be received across the graph boundary.
Node 1, discovering the vertices that will be received across the graph boundary.
Node 6, discovering the vertices that will be received across the graph boundary.
Node 2, discovering the vertices that will be received across the graph boundary.
Node 7, discovering the vertices that will be received across the graph boundary.
Node 3, discovering the vertices that will be received across the graph boundary.
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
*** Node 4, starting task scheduling...
*** Node 0, starting task scheduling...
*** Node 5, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 1, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 6, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 2, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 7, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 3, starting task scheduling...
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000



The learning rate specified by the user: 0.001000000
	Epoch 50:	Loss 1.6094	TrainAcc 0.1951	ValidAcc 0.2055	TestAcc 0.2046	BestValid 0.2055
	Epoch 100:	Loss 1.6094	TrainAcc 0.1951	ValidAcc 0.2055	TestAcc 0.2046	BestValid 0.2055
	Epoch 150:	Loss 1.6094	TrainAcc 0.1951	ValidAcc 0.2055	TestAcc 0.2046	BestValid 0.2055
	Epoch 200:	Loss 1.6094	TrainAcc 0.1951	ValidAcc 0.2055	TestAcc 0.2046	BestValid 0.2055
	Epoch 250:	Loss 1.6094	TrainAcc 0.1951	ValidAcc 0.2055	TestAcc 0.2046	BestValid 0.2055
	Epoch 300:	Loss 1.6094	TrainAcc 0.1951	ValidAcc 0.2055	TestAcc 0.2046	BestValid 0.2055
	Epoch 350:	Loss 1.6094	TrainAcc 0.1951	ValidAcc 0.2055	TestAcc 0.2046	BestValid 0.2055
	Epoch 400:	Loss 1.6094	TrainAcc 0.1951	ValidAcc 0.2055	TestAcc 0.2046	BestValid 0.2055
	Epoch 450:	Loss 1.6094	TrainAcc 0.1951	ValidAcc 0.2055	TestAcc 0.2046	BestValid 0.2055
	Epoch 500:	Loss 1.6094	TrainAcc 0.1951	ValidAcc 0.2055	TestAcc 0.2046	BestValid 0.2055
	Epoch 550:	Loss 1.6094	TrainAcc 0.1951	ValidAcc 0.2055	TestAcc 0.2046	BestValid 0.2055
	Epoch 600:	Loss 1.6094	TrainAcc 0.1951	ValidAcc 0.2055	TestAcc 0.2046	BestValid 0.2055
	Epoch 650:	Loss 1.6094	TrainAcc 0.1951	ValidAcc 0.2055	TestAcc 0.2046	BestValid 0.2055
	Epoch 700:	Loss 1.6094	TrainAcc 0.1951	ValidAcc 0.2055	TestAcc 0.2046	BestValid 0.2055
	Epoch 750:	Loss 1.6094	TrainAcc 0.1951	ValidAcc 0.2055	TestAcc 0.2046	BestValid 0.2055
	Epoch 800:	Loss 1.6094	TrainAcc 0.1951	ValidAcc 0.2055	TestAcc 0.2046	BestValid 0.2055
	Epoch 850:	Loss 1.6094	TrainAcc 0.1947	ValidAcc 0.2055	TestAcc 0.2017	BestValid 0.2055
	Epoch 900:	Loss 1.6094	TrainAcc 0.1959	ValidAcc 0.1923	TestAcc 0.2046	BestValid 0.2055
	Epoch 950:	Loss 1.6094	TrainAcc 0.1951	ValidAcc 0.2055	TestAcc 0.2046	BestValid 0.2055
	Epoch 1000:	Loss 1.6094	TrainAcc 0.1951	ValidAcc 0.2055	TestAcc 0.2046	BestValid 0.2055
	Epoch 1050:	Loss 1.6094	TrainAcc 0.1951	ValidAcc 0.2055	TestAcc 0.2046	BestValid 0.2055
	Epoch 1100:	Loss 1.6094	TrainAcc 0.1951	ValidAcc 0.2055	TestAcc 0.2046	BestValid 0.2055
	Epoch 1150:	Loss 1.6094	TrainAcc 0.1951	ValidAcc 0.2055	TestAcc 0.2046	BestValid 0.2055
	Epoch 1200:	Loss 1.6094	TrainAcc 0.1951	ValidAcc 0.2055	TestAcc 0.2046	BestValid 0.2055
	Epoch 1250:	Loss 1.6094	TrainAcc 0.1951	ValidAcc 0.2055	TestAcc 0.2046	BestValid 0.2055
	Epoch 1300:	Loss 1.6094	TrainAcc 0.1951	ValidAcc 0.2055	TestAcc 0.2046	BestValid 0.2055
	Epoch 1350:	Loss 1.6094	TrainAcc 0.1951	ValidAcc 0.2055	TestAcc 0.2046	BestValid 0.2055
	Epoch 1400:	Loss 1.6094	TrainAcc 0.1951	ValidAcc 0.2055	TestAcc 0.2046	BestValid 0.2055
	Epoch 1450:	Loss 1.6094	TrainAcc 0.1951	ValidAcc 0.2055	TestAcc 0.2046	BestValid 0.2055
	Epoch 1500:	Loss 1.6094	TrainAcc 0.1951	ValidAcc 0.2055	TestAcc 0.2046	BestValid 0.2055
	Epoch 1550:	Loss 1.6094	TrainAcc 0.1951	ValidAcc 0.2055	TestAcc 0.2046	BestValid 0.2055
	Epoch 1600:	Loss 1.6094	TrainAcc 0.1951	ValidAcc 0.2055	TestAcc 0.2046	BestValid 0.2055
	Epoch 1650:	Loss 1.6094	TrainAcc 0.1951	ValidAcc 0.2055	TestAcc 0.2046	BestValid 0.2055
	Epoch 1700:	Loss 1.6094	TrainAcc 0.1951	ValidAcc 0.2055	TestAcc 0.2046	BestValid 0.2055
	Epoch 1750:	Loss 1.6094	TrainAcc 0.1951	ValidAcc 0.2055	TestAcc 0.2046	BestValid 0.2055
	Epoch 1800:	Loss 1.6094	TrainAcc 0.1951	ValidAcc 0.2055	TestAcc 0.2046	BestValid 0.2055
	Epoch 1850:	Loss 1.6094	TrainAcc 0.1951	ValidAcc 0.2055	TestAcc 0.2046	BestValid 0.2055
	Epoch 1900:	Loss 1.6094	TrainAcc 0.1951	ValidAcc 0.2055	TestAcc 0.2046	BestValid 0.2055
	Epoch 1950:	Loss 1.6094	TrainAcc 0.1951	ValidAcc 0.2055	TestAcc 0.2046	BestValid 0.2055
	Epoch 2000:	Loss 1.6094	TrainAcc 0.1951	ValidAcc 0.2055	TestAcc 0.2046	BestValid 0.2055
	Epoch 2050:	Loss 1.6094	TrainAcc 0.1951	ValidAcc 0.2055	TestAcc 0.2046	BestValid 0.2055
	Epoch 2100:	Loss 1.6094	TrainAcc 0.1951	ValidAcc 0.2055	TestAcc 0.2046	BestValid 0.2055
	Epoch 2150:	Loss 1.6094	TrainAcc 0.2003	ValidAcc 0.2007	TestAcc 0.1979	BestValid 0.2055
	Epoch 2200:	Loss 1.6094	TrainAcc 0.1951	ValidAcc 0.2055	TestAcc 0.2046	BestValid 0.2055
	Epoch 2250:	Loss 1.6094	TrainAcc 0.1951	ValidAcc 0.2055	TestAcc 0.2046	BestValid 0.2055
	Epoch 2300:	Loss 1.6094	TrainAcc 0.1951	ValidAcc 0.2055	TestAcc 0.2046	BestValid 0.2055
	Epoch 2350:	Loss 1.6094	TrainAcc 0.1951	ValidAcc 0.2055	TestAcc 0.2046	BestValid 0.2055
	Epoch 2400:	Loss 1.6094	TrainAcc 0.1951	ValidAcc 0.2055	TestAcc 0.2046	BestValid 0.2055
	Epoch 2450:	Loss 1.6094	TrainAcc 0.1951	ValidAcc 0.2055	TestAcc 0.2046	BestValid 0.2055
	Epoch 2500:	Loss 1.6094	TrainAcc 0.1951	ValidAcc 0.2055	TestAcc 0.2046	BestValid 0.2055
	Epoch 2550:	Loss 1.6094	TrainAcc 0.1951	ValidAcc 0.2055	TestAcc 0.2046	BestValid 0.2055
	Epoch 2600:	Loss 1.6094	TrainAcc 0.1951	ValidAcc 0.2055	TestAcc 0.2046	BestValid 0.2055
	Epoch 2650:	Loss 1.6094	TrainAcc 0.1951	ValidAcc 0.2055	TestAcc 0.2046	BestValid 0.2055
	Epoch 2700:	Loss 1.6094	TrainAcc 0.1951	ValidAcc 0.2055	TestAcc 0.2046	BestValid 0.2055
	Epoch 2750:	Loss 1.6094	TrainAcc 0.1951	ValidAcc 0.2055	TestAcc 0.2046	BestValid 0.2055
	Epoch 2800:	Loss 1.6094	TrainAcc 0.1951	ValidAcc 0.2055	TestAcc 0.2046	BestValid 0.2055
	Epoch 2850:	Loss 1.6094	TrainAcc 0.1951	ValidAcc 0.2055	TestAcc 0.2046	BestValid 0.2055
	Epoch 2900:	Loss 1.6094	TrainAcc 0.1951	ValidAcc 0.2055	TestAcc 0.2046	BestValid 0.2055
	Epoch 2950:	Loss 1.6094	TrainAcc 0.1951	ValidAcc 0.2055	TestAcc 0.2046	BestValid 0.2055
[mpiexec@gnerv1] Sending Ctrl-C to processes as requested
[mpiexec@gnerv1] Press Ctrl-C again to force abort

===================================================================================
=   BAD TERMINATION OF ONE OF YOUR APPLICATION PROCESSES
=   PID 784550 RUNNING AT gnerv3
=   EXIT CODE: 2
=   CLEANING UP REMAINING PROCESSES
=   YOU CAN IGNORE THE BELOW CLEANUP MESSAGES
===================================================================================
YOUR APPLICATION TERMINATED WITH THE EXIT STRING: Interrupt (signal 2)
This typically refers to a problem with your application.
Please see the FAQ page for debugging suggestions
