Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
DONE MPI INIT
DONE MPI INITInitialized node 4 on machine gnerv3
DONE MPI INIT
Initialized node 6 on machine gnerv3
DONE MPI INIT
Initialized node 7 on machine gnerv3

Initialized node 5 on machine gnerv3
DONE MPI INIT
DONE MPI INITDONE MPI INIT
Initialized node 3 on machine gnerv2
Initialized node 0 on machine gnerv2
DONE MPI INIT

Initialized node 1 on machine gnerv2
Initialized node 2 on machine gnerv2
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
        It takes 0.011 seconds.
Building the CSC structure...
        It takes 0.012 seconds.
Building the CSC structure...
        It takes 0.014 seconds.
Building the CSC structure...
        It takes 0.014 seconds.
Building the CSC structure...
        It takes 0.011 seconds.
Building the CSC structure...
        It takes 0.012 seconds.
Building the CSC structure...
        It takes 0.015 seconds.
Building the CSC structure...
        It takes 0.017 seconds.
Building the CSC structure...
        It takes 0.014 seconds.
        It takes 0.009 seconds.
        It takes 0.013 seconds.
        It takes 0.017 seconds.
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
        It takes 0.017 seconds.
        It takes 0.021 seconds.
        It takes 0.019 seconds.
Building the Feature Vector...
        It takes 0.026 seconds.
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
        It takes 0.082 seconds.
        It takes 0.088 seconds.
        It takes 0.082 seconds.
        It takes 0.088 seconds.
Building the Label Vector...
Building the Label Vector...
Building the Label Vector...
Building the Label Vector...
        It takes 0.000 seconds.
        It takes 0.001 seconds.
        It takes 0.001 seconds.
        It takes 0.001 seconds.
        It takes 0.112 seconds.
        It takes 0.118 seconds.
        It takes 0.116 seconds.
        It takes 0.117 seconds.
Building the Label Vector...
Building the Label Vector...
Building the Label Vector...
Building the Label Vector...
        It takes 0.002 seconds.
        It takes 0.002 seconds.
The graph dataset locates at /shared_hdd_storage/jingjichen/gnn_datasets/graph_parallel_datasets/squirrel/8_parts
The number of GCNII layers: 32
The number of hidden units: 1000
The number of training epoches: 5000
Learning rate: 0.001000
The partition strategy: model
The dropout rate: 0.500
The checkpointed weight file: /tmp/saved_weights
The random seed: 1
Number of classes: 5
Number of feature dimensions: 2089
Number of vertices: 5201
Number of GPUs: 8
        It takes 0.002 seconds.
        It takes 0.003 seconds.
GPU 0, layer [0, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
5201, 401907, 401907
Number of vertices per chunk: 651
csr in-out ready !Start Cost Model Initialization...
GPU 0, layer [0, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
5201, 401907, 401907
Number of vertices per chunk: 651
5201, 401907, 401907
Number of vertices per chunk: 651
csr in-out ready !Start Cost Model Initialization...
GPU 0, layer [0, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
csr in-out ready !Start Cost Model Initialization...
GPU 0, layer [0, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
5201, 401907, 401907
Number of vertices per chunk: 651
5201, 401907, 401907
Number of vertices per chunk: 651
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
train nodes 2496, valid nodes 1664, test nodes 1041
GPU 0, layer [0, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
Chunks (number of global chunks: 8): 0-[0, 651) 1-[651, 1301) 2-[1301, 1951) 3-[1951, 2601) 4-[2601, 3251) 5-[3251, 3901) 6-[3901, 4551) 7-[4551, 5201)
5201, 401907, 401907
Number of vertices per chunk: 651
GPU 0, layer [0, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
csr in-out ready !Start Cost Model Initialization...
***** Start profiling the layer-level communication performance *******
5201, 401907, 401907
Number of vertices per chunk: 651
GPU 0, layer [0, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
5201, 401907, 401907
Number of vertices per chunk: 651
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
The layer-level communication performance: 56.773 Gbps (per GPU), 454.181 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 56.493 Gbps (per GPU), 451.944 Gbps (aggregated)
The layer-level communication performance: 56.512 Gbps (per GPU), 452.094 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 56.263 Gbps (per GPU), 450.104 Gbps (aggregated)
The layer-level communication performance: 56.254 Gbps (per GPU), 450.035 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 56.036 Gbps (per GPU), 448.290 Gbps (aggregated)
The layer-level communication performance: 55.994 Gbps (per GPU), 447.956 Gbps (aggregated)
The layer-level communication performance: 55.969 Gbps (per GPU), 447.751 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The graph-level communication performance (supernode = 2): 156.195 Gbps (per GPU), 1249.560 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 156.183 Gbps (per GPU), 1249.467 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 156.122 Gbps (per GPU), 1248.979 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 156.180 Gbps (per GPU), 1249.444 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 156.207 Gbps (per GPU), 1249.653 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 156.186 Gbps (per GPU), 1249.490 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 156.122 Gbps (per GPU), 1248.978 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 156.193 Gbps (per GPU), 1249.542 Gbps (aggregated, cluster-wide)
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
The graph-level communication performance (supernode = 4): 100.321 Gbps (per GPU), 802.565 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 100.325 Gbps (per GPU), 802.597 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 100.289 Gbps (per GPU), 802.309 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 100.325 Gbps (per GPU), 802.596 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 100.290 Gbps (per GPU), 802.322 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 100.327 Gbps (per GPU), 802.616 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 100.289 Gbps (per GPU), 802.316 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 100.208 Gbps (per GPU), 801.664 Gbps (aggregated, cluster-wide)
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
The graph-level communication performance (supernode = 8): 34.042 Gbps (per GPU), 272.333 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 34.043 Gbps (per GPU), 272.342 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 34.042 Gbps (per GPU), 272.337 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 34.042 Gbps (per GPU), 272.334 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 34.039 Gbps (per GPU), 272.313 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 34.040 Gbps (per GPU), 272.323 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 34.038 Gbps (per GPU), 272.308 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 34.035 Gbps (per GPU), 272.283 Gbps (aggregated, cluster-wide)
 LType   LT0   LT1   LT2 Ratio  VSum  ESum
 chk_0  2.44ms  2.61ms  3.37ms  1.38  0.65K  0.22M
 chk_1  1.79ms  1.90ms  2.69ms  1.51  0.65K  0.05M
 chk_2  1.67ms  1.79ms  2.57ms  1.54  0.65K  0.02M
 chk_3  1.68ms  1.79ms  2.58ms  1.53  0.65K  0.02M
 chk_4  1.63ms  1.73ms  2.53ms  1.56  0.65K  0.01M
 chk_5  1.62ms  1.73ms  2.53ms  1.56  0.65K  0.01M
 chk_6  1.83ms  1.92ms  2.73ms  1.49  0.65K  0.06M
 chk_7  1.74ms  1.75ms  2.55ms  1.47  0.65K  0.01M
   Avg  1.80  1.90  2.70
   Max  2.44  2.61  3.37
   Min  1.62  1.73  2.53
 Ratio  1.50  1.51  1.33
   Var  0.06  0.08  0.07
Profiling takes 0.686 s
*** Node 0, starting model training...
*** Node 4, starting model training...
*** Node 5, starting model training...
Num Stages: 1 / 1
Node 0, Pipeline Input Tensor: NULL
Node 0, Pipeline Output Tensor: NULL
*** Node 0 owns the model-level partition [0, 421)
*** Node 0, constructing the helper classes...
Node 0, Local Vertex Begin: 0, Num Local Vertices: 651
*** Node 6, starting model training...
*** Node 1, starting model training...
*** Node 7, starting model training...
*** Node 2, starting model training...
*** Node 3, starting model training...
Num Stages: 1 / 1
Node 4, Pipeline Input Tensor: NULL
Node 4, Pipeline Output Tensor: NULL
*** Node 4 owns the model-level partition [0, 421)
*** Node 4, constructing the helper classes...
Node 4, Local Vertex Begin: 2601, Num Local Vertices: 650
Num Stages: 1 / 1
Node 5, Pipeline Input Tensor: NULL
Node 5, Pipeline Output Tensor: NULL
*** Node 5 owns the model-level partition [0, 421)
*** Node 5, constructing the helper classes...
Node 5, Local Vertex Begin: 3251, Num Local Vertices: 650
Num Stages: 1 / 1
Node 6, Pipeline Input Tensor: NULL
Node 6, Pipeline Output Tensor: NULL
*** Node 6 owns the model-level partition [0, 421)
*** Node 6, constructing the helper classes...
Node 6, Local Vertex Begin: 3901, Num Local Vertices: 650
Num Stages: 1 / 1
Node 3, Pipeline Input Tensor: NULL
Node 3, Pipeline Output Tensor: NULL
*** Node 3 owns the model-level partition [0, 421)
*** Node 3, constructing the helper classes...
Node 3, Local Vertex Begin: 1951, Num Local Vertices: 650
Num Stages: 1 / 1
Node 7, Pipeline Input Tensor: NULL
Node 7, Pipeline Output Tensor: NULL
*** Node 7 owns the model-level partition [0, 421)
*** Node 7, constructing the helper classes...
Node 7, Local Vertex Begin: 4551, Num Local Vertices: 650
Num Stages: 1 / 1
Node 1, Pipeline Input Tensor: NULL
Node 1, Pipeline Output Tensor: NULL
*** Node 1 owns the model-level partition [0, 421)
*** Node 1, constructing the helper classes...
Node 1, Local Vertex Begin: 651, Num Local Vertices: 650
Num Stages: 1 / 1
Node 2, Pipeline Input Tensor: NULL
Node 2, Pipeline Output Tensor: NULL
*** Node 2 owns the model-level partition [0, 421)
*** Node 2, constructing the helper classes...
Node 2, Local Vertex Begin: 1301, Num Local Vertices: 650
*** Node 4, setting up some other necessary information...
*** Node 7, setting up some other necessary information...
*** Node 5, setting up some other necessary information...
*** Node 6, setting up some other necessary information...
*** Node 1, setting up some other necessary information...
*** Node 2, setting up some other necessary information...
*** Node 3, setting up some other necessary information...
*** Node 0, setting up some other necessary information...
+++++++++ Node 1 initializing the weights for op[0, 421)...
+++++++++ Node 2 initializing the weights for op[0, 421)...
+++++++++ Node 4 initializing the weights for op[0, 421)...
+++++++++ Node 7 initializing the weights for op[0, 421)...
+++++++++ Node 6 initializing the weights for op[0, 421)...
+++++++++ Node 5 initializing the weights for op[0, 421)...
+++++++++ Node 0 initializing the weights for op[0, 421)...
+++++++++ Node 3 initializing the weights for op[0, 421)...
Node 1, discovering the vertices that will be sent across graph boundary...
Node 2, discovering the vertices that will be sent across graph boundary...
Node 4, discovering the vertices that will be sent across graph boundary...
Node 3, discovering the vertices that will be sent across graph boundary...
Node 5, discovering the vertices that will be sent across graph boundary...
Node 6, discovering the vertices that will be sent across graph boundary...
Node 7, discovering the vertices that will be sent across graph boundary...
Node 0, discovering the vertices that will be sent across graph boundary...
The number of mirror vertices: 11547
Node 0, discovering the vertices that will be received across the graph boundary.
Node 4, discovering the vertices that will be received across the graph boundary.
Node 1, discovering the vertices that will be received across the graph boundary.
Node 5, discovering the vertices that will be received across the graph boundary.
Node 2, discovering the vertices that will be received across the graph boundary.
Node 6, discovering the vertices that will be received across the graph boundary.
Node 3, discovering the vertices that will be received across the graph boundary.
Node 7, discovering the vertices that will be received across the graph boundary.
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
*** Node 0, starting task scheduling...
*** Node 1, starting task scheduling...
*** Node 3, starting task scheduling...
*** Node 2, starting task scheduling...



*** Node 4, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 5, starting task scheduling...
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
*** Node 6, starting task scheduling...
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
*** Node 7, starting task scheduling...
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
	Epoch 1:	Loss 2.2188	TrainAcc 0.2059	ValidAcc 0.1953	TestAcc 0.1931	BestValid 0.1953
	Epoch 50:	Loss 1.7103	TrainAcc 0.3333	ValidAcc 0.3347	TestAcc 0.3295	BestValid 0.3347
	Epoch 100:	Loss 1.4134	TrainAcc 0.4295	ValidAcc 0.3648	TestAcc 0.3525	BestValid 0.3648
	Epoch 150:	Loss 0.9017	TrainAcc 0.7396	ValidAcc 0.3516	TestAcc 0.3535	BestValid 0.3648
	Epoch 200:	Loss 0.4117	TrainAcc 0.9111	ValidAcc 0.3444	TestAcc 0.3535	BestValid 0.3648
	Epoch 250:	Loss 0.1725	TrainAcc 0.9860	ValidAcc 0.3660	TestAcc 0.3631	BestValid 0.3660
