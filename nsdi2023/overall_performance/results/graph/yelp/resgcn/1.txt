Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
DONE MPI INIT
DONE MPI INIT
Initialized node 1 on machine gnerv2
DONE MPI INIT
Initialized node 2 on machine gnerv2
Initialized node 0 on machine gnerv2
DONE MPI INIT
Initialized node 3 on machine gnerv2
DONE MPI INIT
Initialized node 5 on machine gnerv3
DONE MPI INIT
Initialized node 6 on machine gnerv3
DONE MPI INIT
Initialized node 7 on machine gnerv3
DONE MPI INIT
Initialized node 4 on machine gnerv3
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...Building the CSR structure...
Building the CSR structure...

Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
        It takes 0.265 seconds.
Building the CSC structure...
        It takes 0.279 seconds.
Building the CSC structure...
        It takes 0.287 seconds.
Building the CSC structure...
        It takes 0.292 seconds.
Building the CSC structure...
        It takes 0.294 seconds.
Building the CSC structure...
        It takes 0.310 seconds.
Building the CSC structure...
        It takes 0.317 seconds.
Building the CSC structure...
        It takes 0.322 seconds.
Building the CSC structure...
        It takes 0.263 seconds.
        It takes 0.284 seconds.
        It takes 0.280 seconds.
        It takes 0.282 seconds.
        It takes 0.288 seconds.
        It takes 0.310 seconds.
        It takes 0.306 seconds.
        It takes 0.311 seconds.
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
        It takes 0.469 seconds.
Building the Label Vector...
        It takes 0.489 seconds.
Building the Label Vector...
        It takes 0.499 seconds.
Building the Label Vector...
        It takes 0.497 seconds.
Building the Label Vector...
        It takes 0.508 seconds.
Building the Label Vector...
        It takes 0.502 seconds.
Building the Label Vector...
        It takes 0.507 seconds.
Building the Label Vector...
        It takes 0.509 seconds.
Building the Label Vector...
        It takes 0.183 seconds.
        It takes 0.190 seconds.
        It takes 0.192 seconds.
        It takes 0.196 seconds.
        It takes 0.199 seconds.
The graph dataset locates at /shared_hdd_storage/jingjichen/gnn_datasets/graph_parallel_datasets/yelp/8_parts
The number of GCNII layers: 32
The number of hidden units: 100
The number of training epoches: 5000
Learning rate: 0.001000
The partition strategy: model
The dropout rate: 0.500
The checkpointed weight file: /tmp/saved_weights
The random seed: 1
Number of classes: 100
Number of feature dimensions: 300
Number of vertices: 716847
Number of GPUs: 8
        It takes 0.191 seconds.
        It takes 0.189 seconds.
        It takes 0.197 seconds.
GPU 0, layer [0, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
716847, 13954819, 13954819
Number of vertices per chunk: 89606
GPU 0, layer [0, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
train nodes 537635, valid nodes 107527, test nodes 71685
GPU 0, layer [0, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
Chunks (number of global chunks: 8): 0-[0, 89605) 1-[89605, 179211) 2-[179211, 268818) 3-[268818, 358423) 4-[358423, 448029) 5-[448029, 537635) 6-[537635, 627242) 7-[627242, 716847)
716847, 13954819, 13954819
Number of vertices per chunk: 89606
GPU 0, layer [0, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
716847, 13954819, 13954819
Number of vertices per chunk: 89606
GPU 0, layer [0, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
716847, 13954819, 13954819
Number of vertices per chunk: 89606
GPU 0, layer [0, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
716847, 13954819, 13954819
Number of vertices per chunk: 89606
716847, 13954819, 13954819
Number of vertices per chunk: 89606
716847, 13954819, 13954819
Number of vertices per chunk: 89606
716847, 13954819, 13954819
Number of vertices per chunk: 89606
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
***** Start profiling the layer-level communication performance *******
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
The layer-level communication performance: 58.410 Gbps (per GPU), 467.276 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 58.145 Gbps (per GPU), 465.158 Gbps (aggregated)
The layer-level communication performance: 58.130 Gbps (per GPU), 465.038 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 57.901 Gbps (per GPU), 463.206 Gbps (aggregated)
The layer-level communication performance: 57.863 Gbps (per GPU), 462.904 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 57.675 Gbps (per GPU), 461.396 Gbps (aggregated)
The layer-level communication performance: 57.629 Gbps (per GPU), 461.033 Gbps (aggregated)
The layer-level communication performance: 57.600 Gbps (per GPU), 460.803 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The graph-level communication performance (supernode = 2): 156.378 Gbps (per GPU), 1251.027 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 156.291 Gbps (per GPU), 1250.327 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 156.381 Gbps (per GPU), 1251.051 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 156.364 Gbps (per GPU), 1250.911 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 156.291 Gbps (per GPU), 1250.327 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 156.364 Gbps (per GPU), 1250.911 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 156.361 Gbps (per GPU), 1250.890 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 156.366 Gbps (per GPU), 1250.932 Gbps (aggregated, cluster-wide)
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
The graph-level communication performance (supernode = 4): 101.358 Gbps (per GPU), 810.866 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 101.359 Gbps (per GPU), 810.872 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 101.351 Gbps (per GPU), 810.806 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 101.357 Gbps (per GPU), 810.859 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 101.358 Gbps (per GPU), 810.865 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 101.360 Gbps (per GPU), 810.879 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 101.356 Gbps (per GPU), 810.852 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 101.358 Gbps (per GPU), 810.865 Gbps (aggregated, cluster-wide)
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
The graph-level communication performance (supernode = 8): 35.776 Gbps (per GPU), 286.206 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 35.776 Gbps (per GPU), 286.208 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 35.776 Gbps (per GPU), 286.206 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 35.775 Gbps (per GPU), 286.198 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 35.775 Gbps (per GPU), 286.199 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 35.776 Gbps (per GPU), 286.207 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 35.775 Gbps (per GPU), 286.201 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 35.774 Gbps (per GPU), 286.194 Gbps (aggregated, cluster-wide)
 LType   LT0   LT1   LT2 Ratio  VSum  ESum
 chk_0  3.70ms  7.52ms 12.67ms  3.43 89.61K  0.73M
 chk_1  3.65ms  7.46ms 12.62ms  3.46 89.61K  0.74M
 chk_2  6.33ms 10.19ms 15.34ms  2.42 89.61K  3.52M
 chk_3  5.74ms  9.59ms 14.75ms  2.57 89.61K  2.76M
 chk_4  4.94ms  8.74ms 13.88ms  2.81 89.61K  1.50M
 chk_5  4.22ms  8.03ms 13.17ms  3.12 89.61K  1.19M
 chk_6  5.86ms  9.66ms 14.80ms  2.53 89.61K  2.34M
 chk_7  3.46ms  7.24ms 12.42ms  3.59 89.61K  0.47M
   Avg  4.74  8.55 13.71
   Max  6.33 10.19 15.34
   Min  3.46  7.24 12.42
 Ratio  1.83  1.41  1.24
   Var  1.13  1.16  1.15
Profiling takes 2.536 s
*** Node 0, starting model training...
*** Node 1, starting model training...
*** Node 2, starting model training...
*** Node 3, starting model training...
*** Node 4, starting model training...
*** Node 5, starting model training...
*** Node 6, starting model training...
*** Node 7, starting model training...
Num Stages: 1 / 1
Node 6, Pipeline Input Tensor: NULL
Node 6, Pipeline Output Tensor: NULL
*** Node 6 owns the model-level partition [0, 228)
*** Node 6, constructing the helper classes...
Node 6, Local Vertex Begin: 537635, Num Local Vertices: 89607
Num Stages: 1 / 1
Node 4, Pipeline Input Tensor: NULL
Node 4, Pipeline Output Tensor: NULL
*** Node 4 owns the model-level partition [0, 228)
*** Node 4, constructing the helper classes...
Node 4, Local Vertex Begin: 358423, Num Local Vertices: 89606
Num Stages: 1 / 1
Node 5, Pipeline Input Tensor: NULL
Node 5, Pipeline Output Tensor: NULL
*** Node 5 owns the model-level partition [0, 228)
*** Node 5, constructing the helper classes...
Node 5, Local Vertex Begin: 448029, Num Local Vertices: 89606
Num Stages: 1 / 1
Node 7, Pipeline Input Tensor: NULL
Node 7, Pipeline Output Tensor: NULL
*** Node 7 owns the model-level partition [0, 228)
*** Node 7, constructing the helper classes...
Node 7, Local Vertex Begin: 627242, Num Local Vertices: 89605
Num Stages: 1 / 1
Node 0, Pipeline Input Tensor: NULL
Node 0, Pipeline Output Tensor: NULL
*** Node 0 owns the model-level partition [0, 228)
*** Node 0, constructing the helper classes...
Node 0, Local Vertex Begin: 0, Num Local Vertices: 89605
Num Stages: 1 / 1
Node 1, Pipeline Input Tensor: NULL
Node 1, Pipeline Output Tensor: NULL
*** Node 1 owns the model-level partition [0, 228)
*** Node 1, constructing the helper classes...
Node 1, Local Vertex Begin: 89605, Num Local Vertices: 89606
Num Stages: 1 / 1
Node 2, Pipeline Input Tensor: NULL
Node 2, Pipeline Output Tensor: NULL
*** Node 2 owns the model-level partition [0, 228)
*** Node 2, constructing the helper classes...
Node 2, Local Vertex Begin: 179211, Num Local Vertices: 89607
Num Stages: 1 / 1
Node 3, Pipeline Input Tensor: NULL
Node 3, Pipeline Output Tensor: NULL
*** Node 3 owns the model-level partition [0, 228)
*** Node 3, constructing the helper classes...
Node 3, Local Vertex Begin: 268818, Num Local Vertices: 89605
*** Node 0, setting up some other necessary information...
*** Node 3, setting up some other necessary information...
*** Node 1, setting up some other necessary information...
*** Node 2, setting up some other necessary information...
*** Node 5, setting up some other necessary information...
*** Node 7, setting up some other necessary information...
*** Node 4, setting up some other necessary information...
*** Node 6, setting up some other necessary information...
+++++++++ Node 7 initializing the weights for op[0, 228)...
+++++++++ Node 5 initializing the weights for op[0, 228)...
+++++++++ Node 1 initializing the weights for op[0, 228)...
+++++++++ Node 0 initializing the weights for op[0, 228)...
+++++++++ Node 2 initializing the weights for op[0, 228)...
+++++++++ Node 3 initializing the weights for op[0, 228)...
+++++++++ Node 6 initializing the weights for op[0, 228)...
+++++++++ Node 4 initializing the weights for op[0, 228)...
Node 0, discovering the vertices that will be sent across graph boundary...
Node 4, discovering the vertices that will be sent across graph boundary...
Node 1, discovering the vertices that will be sent across graph boundary...
Node 5, discovering the vertices that will be sent across graph boundary...
Node 2, discovering the vertices that will be sent across graph boundary...
Node 6, discovering the vertices that will be sent across graph boundary...
Node 3, discovering the vertices that will be sent across graph boundary...
Node 7, discovering the vertices that will be sent across graph boundary...
The number of mirror vertices: 898218
Node 0, discovering the vertices that will be received across the graph boundary.
Node 1, discovering the vertices that will be received across the graph boundary.
Node 4, discovering the vertices that will be received across the graph boundary.
Node 2, discovering the vertices that will be received across the graph boundary.
Node 5, discovering the vertices that will be received across the graph boundary.
Node 3, discovering the vertices that will be received across the graph boundary.
Node 6, discovering the vertices that will be received across the graph boundary.
Node 7, discovering the vertices that will be received across the graph boundary.
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
*** Node 0, starting task scheduling...



*** Node 4, starting task scheduling...
*** Node 1, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 5, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 2, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 6, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 3, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 7, starting task scheduling...
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
	Epoch 1:	Loss 0.7463	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 50:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 100:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 150:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 200:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 250:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 300:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 350:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 400:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 450:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 500:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 550:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 600:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 650:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 700:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 750:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 800:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 850:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 900:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 950:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 1000:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 1050:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 1100:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 1150:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 1200:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 1250:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 1300:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 1350:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 1400:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 1450:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 1500:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 1550:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 1600:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 1650:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 1700:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 1750:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 1800:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 1850:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 1900:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 1950:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 2000:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 2050:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 2100:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 2150:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 2200:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 2250:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 2300:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 2350:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 2400:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 2450:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 2500:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 2550:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 2600:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 2650:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 2700:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 2750:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 2800:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 2850:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 2900:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 2950:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 3000:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 3050:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 3100:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 3150:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 3200:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 3250:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 3300:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 3350:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 3400:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 3450:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 3500:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 3550:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 3600:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 3650:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 3700:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 3750:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 3800:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 3850:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 3900:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 3950:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 4000:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 4050:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 4100:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 4150:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 4200:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 4250:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 4300:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 4350:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 4400:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 4450:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 4500:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 4550:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 4600:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 4650:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 4700:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 4750:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 4800:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 4850:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 4900:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 4950:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 5000:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
****** Epoch Time (Excluding Evaluation Cost): 0.879 s ******
****** Breakdown Analysis ******
Cluster-Wide Average, Bubble-Pipeline: 1.380 ms (Max: 2.242, Min: 0.034, Sum: 11.040)
Cluster-Wide Average, Compute: 242.428 ms (Max: 276.841, Min: 214.615, Sum: 1939.426)
Cluster-Wide Average, Communication-Layer: 0.008 ms (Max: 0.009, Min: 0.007, Sum: 0.066)
Cluster-Wide Average, Bubble-Imbalance: 0.016 ms (Max: 0.017, Min: 0.014, Sum: 0.124)
Cluster-Wide Average, Communication-Graph: 631.176 ms (Max: 658.310, Min: 598.098, Sum: 5049.412)
Cluster-Wide Average, Optimization: 3.239 ms (Max: 3.254, Min: 3.225, Sum: 25.912)
Cluster-Wide Average, Others: 0.793 ms (Max: 0.815, Min: 0.760, Sum: 6.342)
****** Breakdown Sum: 879.040 ms ******
Cluster-Wide Average, GPU Memory Consumption: 17.716 GB (Max: 18.915, Min: 17.530, Sum: 141.728)
Cluster-Wide Average, Graph-Level Communication Throughput: 38.451 Gbps (Max: 51.794, Min: 24.652, Sum: 307.605)
Cluster-Wide Average, Layer-Level Communication Throughput: 0.000 Gbps (Max: 0.000, Min: 0.000, Sum: 0.000)
Layer-level communication (cluster-wide, per-epoch): 0.000 GB
Graph-level communication (cluster-wide, per-epoch): 21.415 GB
Weight-sync communication (cluster-wide, per-epoch): 0.019 GB
Total communication (cluster-wide, per-epoch): 21.434 GB
****** Accuracy Results ******
Highest valid_acc: 0.0000
Target test_acc: 0.1718
Epoch to reach the target acc: 0
[MPI Rank 0] Success 
[MPI Rank 1] Success 
[MPI Rank 4] Success 
[MPI Rank 2] Success 
[MPI Rank 5] Success 
[MPI Rank 3] Success 
[MPI Rank 6] Success 
[MPI Rank 7] Success 
