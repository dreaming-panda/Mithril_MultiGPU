Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
DONE MPI INIT
DONE MPI INIT
Initialized node 2 on machine gnerv7
DONE MPI INITInitialized node 0 on machine gnerv7

Initialized node 3 on machine gnerv7
DONE MPI INIT
Initialized node 1 on machine gnerv7
DONE MPI INITDONE MPI INIT
Initialized node 7 on machine gnerv8
DONE MPI INIT
Initialized node 4 on machine gnerv8

Initialized node 6 on machine gnerv8
DONE MPI INIT
Initialized node 5 on machine gnerv8
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
        It takes 0.010 seconds.
Building the CSC structure...
        It takes 0.011 seconds.
Building the CSC structure...
        It takes 0.011 seconds.
Building the CSC structure...
        It takes 0.012 seconds.
Building the CSC structure...
        It takes 0.011 seconds.
Building the CSC structure...
        It takes 0.010 seconds.
Building the CSC structure...
        It takes 0.011 seconds.
Building the CSC structure...
        It takes 0.015 seconds.
Building the CSC structure...
        It takes 0.011 seconds.
        It takes 0.015 seconds.
        It takes 0.012 seconds.
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
        It takes 0.019 seconds.
        It takes 0.019 seconds.
        It takes 0.013 seconds.
        It takes 0.018 seconds.
        It takes 0.019 seconds.
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
        It takes 0.471 seconds.
Building the Label Vector...
        It takes 0.002 seconds.
        It takes 0.470 seconds.
Building the Label Vector...
        It takes 0.002 seconds.
        It takes 0.514 seconds.
Building the Label Vector...
        It takes 0.511 seconds.
Building the Label Vector...
        It takes 0.002 seconds.
        It takes 0.009 seconds.
        It takes 0.591 seconds.
Building the Label Vector...
        It takes 0.003 seconds.
        It takes 0.598 seconds.
Building the Label Vector...
        It takes 0.003 seconds.
        It takes 0.614 seconds.
Building the Label Vector...
        It takes 0.003 seconds.
The graph dataset locates at /shared_hdd_storage/jingjichen/gnn_datasets/graph_parallel_datasets/physics/8_parts
The number of GCNII layers: 32
The number of hidden units: 100
The number of training epoches: 300
Learning rate: 0.001000
The partition strategy: model
The dropout rate: 0.500
The checkpointed weight file: /tmp/saved_weights
The random seed: 3
GCN hyper-parameter alpha: 0.100000
GCN hyper-parameter lambda: 0.500000
Number of classes: 5
Number of feature dimensions: 8415
Number of vertices: 34493
Number of GPUs: 8
        It takes 0.612 seconds.
Building the Label Vector...
        It takes 0.003 seconds.
GPU 0, layer [0, 33)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
34493, 530417, 530417
Number of vertices per chunk: 4312
csr in-out ready !Start Cost Model Initialization...
GPU 0, layer [0, 33)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
34493, 530417, 530417
Number of vertices per chunk: 4312
GPU 0, layer [0, 33)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
csr in-out ready !Start Cost Model Initialization...
34493, 530417, 530417
Number of vertices per chunk: 4312
csr in-out ready !Start Cost Model Initialization...
GPU 0, layer [0, 33)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
34493, 530417, 530417
Number of vertices per chunk: 4312
csr in-out ready !Start Cost Model Initialization...
GPU 0, layer [0, 33)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
34493, 530417, 530417
Number of vertices per chunk: 4312
csr in-out ready !Start Cost Model Initialization...
GPU 0, layer [0, 33)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
34493, 530417, 530417
Number of vertices per chunk: 4312
GPU 0, layer [0, 33)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
34493, 530417, 530417
Number of vertices per chunk: 4312
csr in-out ready !Start Cost Model Initialization...
train nodes 100, valid nodes 500, test nodes 1000
GPU 0, layer [0, 33)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
Chunks (number of global chunks: 8): 0-[0, 4311) 1-[4311, 8623) 2-[8623, 12935) 3-[12935, 17247) 4-[17247, 21558) 5-[21558, 25870) 6-[25870, 30181) 7-[30181, 34493)
csr in-out ready !Start Cost Model Initialization...
34493, 530417, 530417
Number of vertices per chunk: 4312
csr in-out ready !Start Cost Model Initialization...
***** Start profiling the layer-level communication performance *******
The layer-level communication performance: 60.918 Gbps (per GPU), 487.343 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 60.613 Gbps (per GPU), 484.908 Gbps (aggregated)
The layer-level communication performance: 60.608 Gbps (per GPU), 484.863 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 60.341 Gbps (per GPU), 482.731 Gbps (aggregated)
The layer-level communication performance: 60.312 Gbps (per GPU), 482.496 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 60.075 Gbps (per GPU), 480.602 Gbps (aggregated)
The layer-level communication performance: 60.022 Gbps (per GPU), 480.180 Gbps (aggregated)
The layer-level communication performance: 59.992 Gbps (per GPU), 479.934 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The graph-level communication performance (supernode = 2): 160.091 Gbps (per GPU), 1280.726 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 160.091 Gbps (per GPU), 1280.728 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 160.094 Gbps (per GPU), 1280.752 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 160.092 Gbps (per GPU), 1280.734 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 159.886 Gbps (per GPU), 1279.091 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 159.896 Gbps (per GPU), 1279.166 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 159.585 Gbps (per GPU), 1276.683 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 159.480 Gbps (per GPU), 1275.838 Gbps (aggregated, cluster-wide)
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
The graph-level communication performance (supernode = 4): 105.328 Gbps (per GPU), 842.625 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 105.327 Gbps (per GPU), 842.617 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 105.328 Gbps (per GPU), 842.623 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 105.326 Gbps (per GPU), 842.610 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 105.326 Gbps (per GPU), 842.610 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 105.322 Gbps (per GPU), 842.575 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 105.325 Gbps (per GPU), 842.603 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 105.323 Gbps (per GPU), 842.583 Gbps (aggregated, cluster-wide)
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
The graph-level communication performance (supernode = 8): 38.128 Gbps (per GPU), 305.023 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 38.130 Gbps (per GPU), 305.039 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 38.128 Gbps (per GPU), 305.024 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 38.130 Gbps (per GPU), 305.038 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 38.130 Gbps (per GPU), 305.037 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 38.127 Gbps (per GPU), 305.018 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 38.128 Gbps (per GPU), 305.020 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 38.120 Gbps (per GPU), 304.959 Gbps (aggregated, cluster-wide)
 LType   LT0   LT1   LT2 Ratio  VSum  ESum
 chk_0  4.24ms  0.47ms  0.57ms  9.09  4.31K  0.10M
 chk_1  4.24ms  0.44ms  0.59ms  9.65  4.31K  0.10M
 chk_2  4.82ms  0.43ms  0.56ms 11.24  4.31K  0.06M
 chk_3  4.24ms  0.45ms  0.56ms  9.47  4.31K  0.06M
 chk_4  4.25ms  0.41ms  0.54ms 10.39  4.31K  0.04M
 chk_5  4.26ms  0.40ms  0.53ms 10.56  4.31K  0.04M
 chk_6  4.26ms  0.41ms  0.54ms 10.45  4.31K  0.04M
 chk_7  4.26ms  0.41ms  0.54ms 10.38  4.31K  0.06M
   Avg  4.32  0.43  0.55
   Max  4.82  0.47  0.59
   Min  4.24  0.40  0.53
 Ratio  1.14  1.16  1.10
   Var  0.04  0.00  0.00
Profiling takes 0.570 s
*** Node 0, starting model training...
*** Node 2, starting model training...
*** Node 3, starting model training...
*** Node 1, starting model training...
Num Stages: 1 / 1
Node 0, Pipeline Input Tensor: NULL
Node 0, Pipeline Output Tensor: NULL
*** Node 0 owns the model-level partition [0, 233)
*** Node 0, constructing the helper classes...
Node 0, Local Vertex Begin: 0, Num Local Vertices: 4311
*** Node 4, starting model training...
*** Node 5, starting model training...
*** Node 6, starting model training...
*** Node 7, starting model training...
Num Stages: 1 / 1
Node 4, Pipeline Input Tensor: NULL
Node 4, Pipeline Output Tensor: NULL
*** Node 4 owns the model-level partition [0, 233)
*** Node 4, constructing the helper classes...
Node 4, Local Vertex Begin: 17247, Num Local Vertices: 4311
Num Stages: 1 / 1
Node 5, Pipeline Input Tensor: NULL
Node 5, Pipeline Output Tensor: NULL
*** Node 5 owns the model-level partition [0, 233)
*** Node 5, constructing the helper classes...
Node 5, Local Vertex Begin: 21558, Num Local Vertices: 4312
Num Stages: 1 / 1
Node 3, Pipeline Input Tensor: NULL
Node 3, Pipeline Output Tensor: NULL
*** Node 3 owns the model-level partition [0, 233)
*** Node 3, constructing the helper classes...
Node 3, Local Vertex Begin: 12935, Num Local Vertices: 4312
Num Stages: 1 / 1
Node 2, Pipeline Input Tensor: NULL
Node 2, Pipeline Output Tensor: NULL
*** Node 2 owns the model-level partition [0, 233)
*** Node 2, constructing the helper classes...
Node 2, Local Vertex Begin: 8623, Num Local Vertices: 4312
Num Stages: 1 / 1
Node 7, Pipeline Input Tensor: NULL
Node 7, Pipeline Output Tensor: NULL
*** Node 7 owns the model-level partition [0, 233)
*** Node 7, constructing the helper classes...
Node 7, Local Vertex Begin: 30181, Num Local Vertices: 4312
Num Stages: 1 / 1
Node 6, Pipeline Input Tensor: NULL
Node 6, Pipeline Output Tensor: NULL
*** Node 6 owns the model-level partition [0, 233)
*** Node 6, constructing the helper classes...
Node 6, Local Vertex Begin: 25870, Num Local Vertices: 4311
Num Stages: 1 / 1
Node 1, Pipeline Input Tensor: NULL
Node 1, Pipeline Output Tensor: NULL
*** Node 1 owns the model-level partition [0, 233)
*** Node 1, constructing the helper classes...
Node 1, Local Vertex Begin: 4311, Num Local Vertices: 4312
*** Node 0, setting up some other necessary information...
*** Node 7, setting up some other necessary information...
*** Node 1, setting up some other necessary information...
*** Node 4, setting up some other necessary information...
*** Node 2, setting up some other necessary information...
*** Node 5, setting up some other necessary information...
*** Node 3, setting up some other necessary information...
*** Node 6, setting up some other necessary information...
+++++++++ Node 3 initializing the weights for op[0, 233)...
+++++++++ Node 0 initializing the weights for op[0, 233)...
+++++++++ Node 4 initializing the weights for op[0, 233)...
+++++++++ Node 1 initializing the weights for op[0, 233)...
+++++++++ Node 7 initializing the weights for op[0, 233)...
+++++++++ Node 2 initializing the weights for op[0, 233)...
+++++++++ Node 5 initializing the weights for op[0, 233)...
+++++++++ Node 6 initializing the weights for op[0, 233)...
Node 1, discovering the vertices that will be sent across graph boundary...
Node 2, discovering the vertices that will be sent across graph boundary...
Node 3, discovering the vertices that will be sent across graph boundary...
Node 0, discovering the vertices that will be sent across graph boundary...
Node 5, discovering the vertices that will be sent across graph boundary...
Node 4, discovering the vertices that will be sent across graph boundary...
Node 6, discovering the vertices that will be sent across graph boundary...
Node 7, discovering the vertices that will be sent across graph boundary...
The number of mirror vertices: 34236
Node 0, discovering the vertices that will be received across the graph boundary.
Node 1, discovering the vertices that will be received across the graph boundary.
Node 2, discovering the vertices that will be received across the graph boundary.
Node 4, discovering the vertices that will be received across the graph boundary.
Node 3, discovering the vertices that will be received across the graph boundary.
Node 5, discovering the vertices that will be received across the graph boundary.
Node 6, discovering the vertices that will be received across the graph boundary.
Node 7, discovering the vertices that will be received across the graph boundary.
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
*** Node 0, starting task scheduling...



*** Node 4, starting task scheduling...
*** Node 1, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 5, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 2, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 6, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 3, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 7, starting task scheduling...
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
	Epoch 1:	Loss 1.6087	TrainAcc 0.7800	ValidAcc 0.7440	TestAcc 0.7740	BestValid 0.7440
	Epoch 10:	Loss 0.9450	TrainAcc 0.8900	ValidAcc 0.9100	TestAcc 0.9060	BestValid 0.9100
	Epoch 20:	Loss 0.4184	TrainAcc 0.9400	ValidAcc 0.9200	TestAcc 0.9340	BestValid 0.9200
	Epoch 30:	Loss 0.2868	TrainAcc 0.9700	ValidAcc 0.9440	TestAcc 0.9440	BestValid 0.9440
	Epoch 40:	Loss 0.1684	TrainAcc 0.9900	ValidAcc 0.9520	TestAcc 0.9470	BestValid 0.9520
	Epoch 50:	Loss 0.1947	TrainAcc 0.9900	ValidAcc 0.9440	TestAcc 0.9430	BestValid 0.9520
	Epoch 60:	Loss 0.1537	TrainAcc 0.9900	ValidAcc 0.9500	TestAcc 0.9460	BestValid 0.9520
	Epoch 70:	Loss 0.0748	TrainAcc 0.9900	ValidAcc 0.9500	TestAcc 0.9470	BestValid 0.9520
	Epoch 80:	Loss 0.1006	TrainAcc 1.0000	ValidAcc 0.9480	TestAcc 0.9440	BestValid 0.9520
	Epoch 90:	Loss 0.0708	TrainAcc 1.0000	ValidAcc 0.9480	TestAcc 0.9440	BestValid 0.9520
	Epoch 100:	Loss 0.0589	TrainAcc 1.0000	ValidAcc 0.9500	TestAcc 0.9430	BestValid 0.9520
	Epoch 110:	Loss 0.0600	TrainAcc 1.0000	ValidAcc 0.9460	TestAcc 0.9450	BestValid 0.9520
	Epoch 120:	Loss 0.0461	TrainAcc 1.0000	ValidAcc 0.9440	TestAcc 0.9430	BestValid 0.9520
	Epoch 130:	Loss 0.0428	TrainAcc 1.0000	ValidAcc 0.9480	TestAcc 0.9420	BestValid 0.9520
	Epoch 140:	Loss 0.0405	TrainAcc 1.0000	ValidAcc 0.9460	TestAcc 0.9440	BestValid 0.9520
	Epoch 150:	Loss 0.0374	TrainAcc 1.0000	ValidAcc 0.9480	TestAcc 0.9410	BestValid 0.9520
	Epoch 160:	Loss 0.0261	TrainAcc 1.0000	ValidAcc 0.9460	TestAcc 0.9390	BestValid 0.9520
	Epoch 170:	Loss 0.0291	TrainAcc 1.0000	ValidAcc 0.9480	TestAcc 0.9410	BestValid 0.9520
	Epoch 180:	Loss 0.0346	TrainAcc 1.0000	ValidAcc 0.9480	TestAcc 0.9410	BestValid 0.9520
	Epoch 190:	Loss 0.0195	TrainAcc 1.0000	ValidAcc 0.9480	TestAcc 0.9420	BestValid 0.9520
	Epoch 200:	Loss 0.0198	TrainAcc 1.0000	ValidAcc 0.9420	TestAcc 0.9420	BestValid 0.9520
	Epoch 210:	Loss 0.0286	TrainAcc 1.0000	ValidAcc 0.9460	TestAcc 0.9410	BestValid 0.9520
	Epoch 220:	Loss 0.0417	TrainAcc 1.0000	ValidAcc 0.9480	TestAcc 0.9390	BestValid 0.9520
	Epoch 230:	Loss 0.0215	TrainAcc 1.0000	ValidAcc 0.9520	TestAcc 0.9410	BestValid 0.9520
	Epoch 240:	Loss 0.0322	TrainAcc 1.0000	ValidAcc 0.9500	TestAcc 0.9420	BestValid 0.9520
	Epoch 250:	Loss 0.0179	TrainAcc 1.0000	ValidAcc 0.9500	TestAcc 0.9420	BestValid 0.9520
	Epoch 260:	Loss 0.0207	TrainAcc 1.0000	ValidAcc 0.9500	TestAcc 0.9390	BestValid 0.9520
	Epoch 270:	Loss 0.0162	TrainAcc 1.0000	ValidAcc 0.9480	TestAcc 0.9390	BestValid 0.9520
	Epoch 280:	Loss 0.0182	TrainAcc 1.0000	ValidAcc 0.9520	TestAcc 0.9400	BestValid 0.9520
	Epoch 290:	Loss 0.0120	TrainAcc 1.0000	ValidAcc 0.9500	TestAcc 0.9420	BestValid 0.9520
	Epoch 300:	Loss 0.0176	TrainAcc 1.0000	ValidAcc 0.9500	TestAcc 0.9420	BestValid 0.9520
****** Epoch Time (Excluding Evaluation Cost): 0.060 s ******
****** Breakdown Analysis ******
Cluster-Wide Average, Bubble-Pipeline: 0.101 ms (Max: 0.162, Min: 0.049, Sum: 0.809)
Cluster-Wide Average, Compute: 19.190 ms (Max: 19.765, Min: 18.603, Sum: 153.518)
Cluster-Wide Average, Communication-Layer: 0.008 ms (Max: 0.010, Min: 0.007, Sum: 0.067)
Cluster-Wide Average, Bubble-Imbalance: 0.015 ms (Max: 0.017, Min: 0.013, Sum: 0.118)
Cluster-Wide Average, Communication-Graph: 36.745 ms (Max: 37.308, Min: 36.206, Sum: 293.964)
Cluster-Wide Average, Optimization: 3.805 ms (Max: 3.824, Min: 3.785, Sum: 30.443)
Cluster-Wide Average, Others: 0.397 ms (Max: 0.445, Min: 0.353, Sum: 3.179)
****** Breakdown Sum: 60.262 ms ******
Cluster-Wide Average, GPU Memory Consumption: 3.796 GB (Max: 4.296, Min: 3.712, Sum: 30.370)
Cluster-Wide Average, Graph-Level Communication Throughput: 26.625 Gbps (Max: 41.116, Min: 8.765, Sum: 213.002)
Cluster-Wide Average, Layer-Level Communication Throughput: 0.000 Gbps (Max: 0.000, Min: 0.000, Sum: 0.000)
Layer-level communication (cluster-wide, per-epoch): 0.000 GB
Graph-level communication (cluster-wide, per-epoch): 0.816 GB
Weight-sync communication (cluster-wide, per-epoch): 0.061 GB
Total communication (cluster-wide, per-epoch): 0.877 GB
****** Accuracy Results ******
Highest valid_acc: 0.9520
Target test_acc: 0.9470
Epoch to reach the target acc: 39
[MPI Rank 0] Success 
[MPI Rank 1] Success 
[MPI Rank 4] Success 
[MPI Rank 2] Success 
[MPI Rank 5] Success 
[MPI Rank 3] Success 
[MPI Rank 6] Success 
[MPI Rank 7] Success 
