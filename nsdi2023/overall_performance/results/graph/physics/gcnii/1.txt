Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
DONE MPI INIT
Initialized node 1 on machine gnerv7
DONE MPI INIT
Initialized node 2 on machine gnerv7
DONE MPI INIT
Initialized node 3 on machine gnerv7
DONE MPI INIT
Initialized node 0 on machine gnerv7
DONE MPI INIT
DONE MPI INIT
Initialized node 5 on machine gnerv8
DONE MPI INIT
Initialized node 7 on machine gnerv8
Initialized node 4 on machine gnerv8
DONE MPI INIT
Initialized node 6 on machine gnerv8
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
        It takes 0.011 seconds.
Building the CSC structure...
        It takes 0.011 seconds.
Building the CSC structure...
        It takes 0.016 seconds.
Building the CSC structure...
        It takes 0.017 seconds.
Building the CSC structure...
        It takes 0.011 seconds.
Building the CSC structure...
        It takes 0.011 seconds.
Building the CSC structure...
        It takes 0.011 seconds.
Building the CSC structure...
        It takes 0.014 seconds.
Building the CSC structure...
        It takes 0.010 seconds.
Building the Feature Vector...
        It takes 0.016 seconds.
        It takes 0.013 seconds.
        It takes 0.012 seconds.
        It takes 0.011 seconds.
Building the Feature Vector...
        It takes 0.014 seconds.
Building the Feature Vector...
Building the Feature Vector...
        It takes 0.017 seconds.
Building the Feature Vector...
        It takes 0.018 seconds.
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
        It takes 0.470 seconds.
Building the Label Vector...
        It takes 0.465 seconds.
Building the Label Vector...
        It takes 0.002 seconds.
        It takes 0.002 seconds.
        It takes 0.507 seconds.
Building the Label Vector...
        It takes 0.002 seconds.
        It takes 0.514 seconds.
Building the Label Vector...
        It takes 0.003 seconds.
        It takes 0.605 seconds.
Building the Label Vector...
        It takes 0.003 seconds.
The graph dataset locates at /shared_hdd_storage/jingjichen/gnn_datasets/graph_parallel_datasets/physics/8_parts
The number of GCNII layers: 32
The number of hidden units: 100
The number of training epoches: 300
Learning rate: 0.001000
The partition strategy: model
The dropout rate: 0.500
The checkpointed weight file: /tmp/saved_weights
The random seed: 1
GCN hyper-parameter alpha: 0.100000
GCN hyper-parameter lambda: 0.500000
Number of classes: 5
Number of feature dimensions: 8415
Number of vertices: 34493
Number of GPUs: 8
        It takes 0.614 seconds.
Building the Label Vector...
        It takes 0.003 seconds.
        It takes 0.618 seconds.
Building the Label Vector...
        It takes 0.627 seconds.
        It takes 0.003 seconds.
Building the Label Vector...
        It takes 0.003 seconds.
GPU 0, layer [0, 33)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
34493, 530417, 530417
Number of vertices per chunk: 4312
csr in-out ready !Start Cost Model Initialization...
GPU 0, layer [0, 33)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
34493, 530417, 530417
GPU 0, layer [0, 33)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
Number of vertices per chunk: 4312
34493, 530417, 530417
Number of vertices per chunk: 4312
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
GPU 0, layer [0, 33)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
34493, 530417, 530417
Number of vertices per chunk: 4312
csr in-out ready !Start Cost Model Initialization...
GPU 0, layer [0, 33)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
34493, 530417, 530417
Number of vertices per chunk: 4312
csr in-out ready !Start Cost Model Initialization...
GPU 0, layer [0, 33)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
34493, 530417, 530417
Number of vertices per chunk: 4312
csr in-out ready !Start Cost Model Initialization...
train nodes 100, valid nodes 500, test nodes 1000
GPU 0, layer [0, 33)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
Chunks (number of global chunks: 8): 0-[0, 4311) 1-[4311, 8623) 2-[8623, 12935) 3-[12935, 17247) 4-[17247, 21558) 5-[21558, 25870) 6-[25870, 30181) 7-[30181, 34493)
34493, 530417, 530417
Number of vertices per chunk: 4312
csr in-out ready !Start Cost Model Initialization...
***** Start profiling the layer-level communication performance *******
GPU 0, layer [0, 33)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
34493, 530417, 530417
Number of vertices per chunk: 4312
csr in-out ready !Start Cost Model Initialization...
The layer-level communication performance: 60.638 Gbps (per GPU), 485.105 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 60.315 Gbps (per GPU), 482.522 Gbps (aggregated)
The layer-level communication performance: 60.315 Gbps (per GPU), 482.519 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 60.029 Gbps (per GPU), 480.230 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 60.005 Gbps (per GPU), 480.043 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 59.767 Gbps (per GPU), 478.139 Gbps (aggregated)
The layer-level communication performance: 59.716 Gbps (per GPU), 477.732 Gbps (aggregated)
The layer-level communication performance: 59.683 Gbps (per GPU), 477.468 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The graph-level communication performance (supernode = 2): 160.216 Gbps (per GPU), 1281.731 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 160.222 Gbps (per GPU), 1281.780 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 160.216 Gbps (per GPU), 1281.731 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 160.204 Gbps (per GPU), 1281.633 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 160.146 Gbps (per GPU), 1281.168 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 160.201 Gbps (per GPU), 1281.608 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 160.140 Gbps (per GPU), 1281.119 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 159.981 Gbps (per GPU), 1279.849 Gbps (aggregated, cluster-wide)
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
The graph-level communication performance (supernode = 4): 105.070 Gbps (per GPU), 840.563 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 105.073 Gbps (per GPU), 840.584 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 105.072 Gbps (per GPU), 840.577 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 105.065 Gbps (per GPU), 840.521 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 105.072 Gbps (per GPU), 840.577 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 105.070 Gbps (per GPU), 840.563 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 105.070 Gbps (per GPU), 840.563 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 105.070 Gbps (per GPU), 840.563 Gbps (aggregated, cluster-wide)
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
The graph-level communication performance (supernode = 8): 39.120 Gbps (per GPU), 312.956 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 39.121 Gbps (per GPU), 312.965 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 39.118 Gbps (per GPU), 312.948 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 39.119 Gbps (per GPU), 312.952 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 39.114 Gbps (per GPU), 312.915 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 39.120 Gbps (per GPU), 312.963 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 39.113 Gbps (per GPU), 312.908 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 39.110 Gbps (per GPU), 312.877 Gbps (aggregated, cluster-wide)
 LType   LT0   LT1   LT2 Ratio  VSum  ESum
 chk_0  4.72ms  0.45ms  0.57ms 10.61  4.31K  0.10M
 chk_1  4.21ms  0.44ms  0.56ms  9.63  4.31K  0.10M
 chk_2  4.23ms  0.42ms  0.55ms 10.01  4.31K  0.06M
 chk_3  4.23ms  0.42ms  0.55ms 10.02  4.31K  0.06M
 chk_4  4.24ms  0.41ms  0.94ms 10.44  4.31K  0.04M
 chk_5  4.23ms  0.40ms  0.53ms 10.56  4.31K  0.04M
 chk_6  4.23ms  0.40ms  0.54ms 10.46  4.31K  0.04M
 chk_7  4.24ms  0.41ms  0.54ms 10.45  4.31K  0.06M
   Avg  4.29  0.42  0.60
   Max  4.72  0.45  0.94
   Min  4.21  0.40  0.53
 Ratio  1.12  1.11  1.78
   Var  0.03  0.00  0.02
Profiling takes 0.570 s
*** Node 0, starting model training...
*** Node 2, starting model training...
*** Node 1, starting model training...
*** Node 3, starting model training...
Num Stages: 1 / 1
Node 0, Pipeline Input Tensor: NULL
Node 0, Pipeline Output Tensor: NULL
*** Node 0 owns the model-level partition [0, 233)
*** Node 0, constructing the helper classes...
Node 0, Local Vertex Begin: 0, Num Local Vertices: 4311
*** Node 4, starting model training...
*** Node 5, starting model training...
*** Node 6, starting model training...
*** Node 7, starting model training...
Num Stages: 1 / 1
Node 5, Pipeline Input Tensor: NULL
Node 5, Pipeline Output Tensor: NULL
*** Node 5 owns the model-level partition [0, 233)
*** Node 5, constructing the helper classes...
Node 5, Local Vertex Begin: 21558, Num Local Vertices: 4312
Num Stages: 1 / 1
Node 7, Pipeline Input Tensor: NULL
Node 7, Pipeline Output Tensor: NULL
*** Node 7 owns the model-level partition [0, 233)
*** Node 7, constructing the helper classes...
Node 7, Local Vertex Begin: 30181, Num Local Vertices: 4312
Num Stages: 1 / 1
Node 2, Pipeline Input Tensor: NULL
Node 2, Pipeline Output Tensor: NULL
*** Node 2 owns the model-level partition [0, 233)
*** Node 2, constructing the helper classes...
Node 2, Local Vertex Begin: 8623, Num Local Vertices: 4312
Num Stages: 1 / 1
Node 3, Pipeline Input Tensor: NULL
Node 3, Pipeline Output Tensor: NULL
*** Node 3 owns the model-level partition [0, 233)
*** Node 3, constructing the helper classes...
Node 3, Local Vertex Begin: 12935, Num Local Vertices: 4312
Num Stages: 1 / 1
Node 1, Pipeline Input Tensor: NULL
Node 1, Pipeline Output Tensor: NULL
*** Node 1 owns the model-level partition [0, 233)
*** Node 1, constructing the helper classes...
Node 1, Local Vertex Begin: 4311, Num Local Vertices: 4312
Num Stages: 1 / 1
Node 4, Pipeline Input Tensor: NULL
Node 4, Pipeline Output Tensor: NULL
*** Node 4 owns the model-level partition [0, 233)
*** Node 4, constructing the helper classes...
Node 4, Local Vertex Begin: 17247, Num Local Vertices: 4311
Num Stages: 1 / 1
Node 6, Pipeline Input Tensor: NULL
Node 6, Pipeline Output Tensor: NULL
*** Node 6 owns the model-level partition [0, 233)
*** Node 6, constructing the helper classes...
Node 6, Local Vertex Begin: 25870, Num Local Vertices: 4311
*** Node 2, setting up some other necessary information...
*** Node 0, setting up some other necessary information...
*** Node 7, setting up some other necessary information...
*** Node 1, setting up some other necessary information...
*** Node 5, setting up some other necessary information...
*** Node 6, setting up some other necessary information...
*** Node 3, setting up some other necessary information...
*** Node 4, setting up some other necessary information...
+++++++++ Node 4 initializing the weights for op[0, 233)...
+++++++++ Node 0 initializing the weights for op[0, 233)...
+++++++++ Node 3 initializing the weights for op[0, 233)...
+++++++++ Node 7 initializing the weights for op[0, 233)...
+++++++++ Node 2 initializing the weights for op[0, 233)...
+++++++++ Node 1 initializing the weights for op[0, 233)...
+++++++++ Node 6 initializing the weights for op[0, 233)...
+++++++++ Node 5 initializing the weights for op[0, 233)...
Node 1, discovering the vertices that will be sent across graph boundary...
Node 3, discovering the vertices that will be sent across graph boundary...
Node 2, discovering the vertices that will be sent across graph boundary...
Node 0, discovering the vertices that will be sent across graph boundary...
Node 5, discovering the vertices that will be sent across graph boundary...
Node 6, discovering the vertices that will be sent across graph boundary...
Node 7, discovering the vertices that will be sent across graph boundary...
Node 4, discovering the vertices that will be sent across graph boundary...
The number of mirror vertices: 34236
Node 0, discovering the vertices that will be received across the graph boundary.
Node 1, discovering the vertices that will be received across the graph boundary.
Node 2, discovering the vertices that will be received across the graph boundary.
Node 4, discovering the vertices that will be received across the graph boundary.
Node 3, discovering the vertices that will be received across the graph boundary.
Node 5, discovering the vertices that will be received across the graph boundary.
Node 6, discovering the vertices that will be received across the graph boundary.
Node 7, discovering the vertices that will be received across the graph boundary.
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
*** Node 0, starting task scheduling...
*** Node 1, starting task scheduling...
*** Node 2, starting task scheduling...
*** Node 3, starting task scheduling...



The learning rate specified by the user: 0.001000000
*** Node 6, starting task scheduling...
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
*** Node 4, starting task scheduling...
*** Node 5, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 7, starting task scheduling...
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
	Epoch 1:	Loss 1.5971	TrainAcc 0.8400	ValidAcc 0.7880	TestAcc 0.8010	BestValid 0.7880
	Epoch 10:	Loss 0.9203	TrainAcc 0.9100	ValidAcc 0.9140	TestAcc 0.9160	BestValid 0.9140
	Epoch 20:	Loss 0.4001	TrainAcc 0.9500	ValidAcc 0.9300	TestAcc 0.9400	BestValid 0.9300
	Epoch 30:	Loss 0.2533	TrainAcc 0.9800	ValidAcc 0.9400	TestAcc 0.9460	BestValid 0.9400
	Epoch 40:	Loss 0.1859	TrainAcc 0.9900	ValidAcc 0.9420	TestAcc 0.9470	BestValid 0.9420
	Epoch 50:	Loss 0.1246	TrainAcc 0.9900	ValidAcc 0.9480	TestAcc 0.9420	BestValid 0.9480
	Epoch 60:	Loss 0.1041	TrainAcc 0.9900	ValidAcc 0.9480	TestAcc 0.9470	BestValid 0.9480
	Epoch 70:	Loss 0.0961	TrainAcc 1.0000	ValidAcc 0.9460	TestAcc 0.9430	BestValid 0.9480
	Epoch 80:	Loss 0.0845	TrainAcc 1.0000	ValidAcc 0.9460	TestAcc 0.9440	BestValid 0.9480
	Epoch 90:	Loss 0.0737	TrainAcc 1.0000	ValidAcc 0.9400	TestAcc 0.9440	BestValid 0.9480
	Epoch 100:	Loss 0.0486	TrainAcc 1.0000	ValidAcc 0.9420	TestAcc 0.9430	BestValid 0.9480
	Epoch 110:	Loss 0.0509	TrainAcc 1.0000	ValidAcc 0.9440	TestAcc 0.9430	BestValid 0.9480
	Epoch 120:	Loss 0.0481	TrainAcc 1.0000	ValidAcc 0.9420	TestAcc 0.9430	BestValid 0.9480
	Epoch 130:	Loss 0.0377	TrainAcc 1.0000	ValidAcc 0.9440	TestAcc 0.9420	BestValid 0.9480
	Epoch 140:	Loss 0.0468	TrainAcc 1.0000	ValidAcc 0.9440	TestAcc 0.9400	BestValid 0.9480
	Epoch 150:	Loss 0.0293	TrainAcc 1.0000	ValidAcc 0.9440	TestAcc 0.9420	BestValid 0.9480
	Epoch 160:	Loss 0.0225	TrainAcc 1.0000	ValidAcc 0.9420	TestAcc 0.9410	BestValid 0.9480
	Epoch 170:	Loss 0.0273	TrainAcc 1.0000	ValidAcc 0.9400	TestAcc 0.9390	BestValid 0.9480
	Epoch 180:	Loss 0.0346	TrainAcc 1.0000	ValidAcc 0.9440	TestAcc 0.9410	BestValid 0.9480
	Epoch 190:	Loss 0.0308	TrainAcc 1.0000	ValidAcc 0.9380	TestAcc 0.9410	BestValid 0.9480
	Epoch 200:	Loss 0.0396	TrainAcc 1.0000	ValidAcc 0.9420	TestAcc 0.9420	BestValid 0.9480
	Epoch 210:	Loss 0.0197	TrainAcc 1.0000	ValidAcc 0.9440	TestAcc 0.9400	BestValid 0.9480
	Epoch 220:	Loss 0.0300	TrainAcc 1.0000	ValidAcc 0.9440	TestAcc 0.9380	BestValid 0.9480
	Epoch 230:	Loss 0.0169	TrainAcc 1.0000	ValidAcc 0.9440	TestAcc 0.9400	BestValid 0.9480
	Epoch 240:	Loss 0.0187	TrainAcc 1.0000	ValidAcc 0.9480	TestAcc 0.9420	BestValid 0.9480
	Epoch 250:	Loss 0.0157	TrainAcc 1.0000	ValidAcc 0.9500	TestAcc 0.9390	BestValid 0.9500
	Epoch 260:	Loss 0.0137	TrainAcc 1.0000	ValidAcc 0.9460	TestAcc 0.9370	BestValid 0.9500
	Epoch 270:	Loss 0.0116	TrainAcc 1.0000	ValidAcc 0.9440	TestAcc 0.9400	BestValid 0.9500
	Epoch 280:	Loss 0.0095	TrainAcc 1.0000	ValidAcc 0.9420	TestAcc 0.9390	BestValid 0.9500
	Epoch 290:	Loss 0.0171	TrainAcc 1.0000	ValidAcc 0.9440	TestAcc 0.9390	BestValid 0.9500
	Epoch 300:	Loss 0.0173	TrainAcc 1.0000	ValidAcc 0.9440	TestAcc 0.9390	BestValid 0.9500
****** Epoch Time (Excluding Evaluation Cost): 0.060 s ******
****** Breakdown Analysis ******
Cluster-Wide Average, Bubble-Pipeline: 0.099 ms (Max: 0.146, Min: 0.044, Sum: 0.793)
Cluster-Wide Average, Compute: 19.175 ms (Max: 19.754, Min: 18.900, Sum: 153.404)
Cluster-Wide Average, Communication-Layer: 0.008 ms (Max: 0.009, Min: 0.007, Sum: 0.067)
Cluster-Wide Average, Bubble-Imbalance: 0.015 ms (Max: 0.017, Min: 0.013, Sum: 0.118)
Cluster-Wide Average, Communication-Graph: 36.525 ms (Max: 36.815, Min: 35.953, Sum: 292.196)
Cluster-Wide Average, Optimization: 3.791 ms (Max: 3.806, Min: 3.767, Sum: 30.327)
Cluster-Wide Average, Others: 0.393 ms (Max: 0.421, Min: 0.354, Sum: 3.146)
****** Breakdown Sum: 60.006 ms ******
Cluster-Wide Average, GPU Memory Consumption: 3.796 GB (Max: 4.296, Min: 3.712, Sum: 30.370)
Cluster-Wide Average, Graph-Level Communication Throughput: 26.812 Gbps (Max: 41.463, Min: 8.804, Sum: 214.492)
Cluster-Wide Average, Layer-Level Communication Throughput: 0.000 Gbps (Max: 0.000, Min: 0.000, Sum: 0.000)
Layer-level communication (cluster-wide, per-epoch): 0.000 GB
Graph-level communication (cluster-wide, per-epoch): 0.816 GB
Weight-sync communication (cluster-wide, per-epoch): 0.061 GB
Total communication (cluster-wide, per-epoch): 0.877 GB
****** Accuracy Results ******
Highest valid_acc: 0.9500
Target test_acc: 0.9390
Epoch to reach the target acc: 249
[MPI Rank 0] Success 
[MPI Rank 1] Success 
[MPI Rank 4] Success 
[MPI Rank 2] Success 
[MPI Rank 5] Success 
[MPI Rank 3] Success 
[MPI Rank 6] Success 
[MPI Rank 7] Success 
