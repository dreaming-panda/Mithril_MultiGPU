Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
DONE MPI INITDONE MPI INIT
Initialized node 3 on machine gnerv4
DONE MPI INIT
Initialized node 0 on machine gnerv4

Initialized node 2 on machine gnerv4
DONE MPI INIT
Initialized node 1 on machine gnerv4
DONE MPI INIT
DONE MPI INITDONE MPI INIT
Initialized node 4 on machine gnerv8
DONE MPI INIT
Initialized node 5 on machine gnerv8
Initialized node 6 on machine gnerv8

Initialized node 7 on machine gnerv8
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
        It takes 2.017 seconds.
Building the CSC structure...
        It takes 2.401 seconds.
Building the CSC structure...
        It takes 2.399 seconds.
Building the CSC structure...
        It takes 2.420 seconds.
Building the CSC structure...
        It takes 2.436 seconds.
Building the CSC structure...
        It takes 2.436 seconds.
Building the CSC structure...
        It takes 2.597 seconds.
Building the CSC structure...
        It takes 2.629 seconds.
Building the CSC structure...
        It takes 1.881 seconds.
        It takes 2.286 seconds.
        It takes 2.349 seconds.
        It takes 2.360 seconds.
        It takes 2.351 seconds.
        It takes 2.368 seconds.
        It takes 2.347 seconds.
        It takes 2.462 seconds.
Building the Feature Vector...
        It takes 0.267 seconds.
Building the Label Vector...
        It takes 0.039 seconds.
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
        It takes 0.304 seconds.
Building the Label Vector...
        It takes 0.277 seconds.
Building the Label Vector...
        It takes 0.280 seconds.
Building the Label Vector...
        It takes 0.034 seconds.
        It takes 0.286 seconds.
Building the Label Vector...
        It takes 0.038 seconds.
        It takes 0.040 seconds.
        It takes 0.031 seconds.
Building the Feature Vector...
Building the Feature Vector...
GPU 0, layer [0, 4)
GPU 1, layer [4, 8)
GPU 2, layer [8, 12)
GPU 3, layer [12, 16)
GPU 4, layer [16, 20)
GPU 5, layer [20, 24)
GPU 6, layer [24, 28)
GPU 7, layer [28, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
Building the Feature Vector...
        It takes 0.286 seconds.
Building the Label Vector...
        It takes 0.032 seconds.
        It takes 0.272 seconds.
Building the Label Vector...
        It takes 0.295 seconds.
Building the Label Vector...
        It takes 0.037 seconds.
The graph dataset locates at /shared_hdd_storage/jingjichen/gnn_datasets/pipeline_parallel_datasets/reddit/32_parts
The number of GCNII layers: 32
The number of hidden units: 100
The number of training epoches: 5000
Learning rate: 0.001000
The partition strategy: model
The dropout rate: 0.500
The checkpointed weight file: /tmp/saved_weights
The random seed: 3
Number of classes: 41
Number of feature dimensions: 602
Number of vertices: 232965
Number of GPUs: 8
        It takes 0.032 seconds.
GPU 0, layer [0, 4)
GPU 1, layer [4, 8)
GPU 2, layer [8, 12)
GPU 3, layer [12, 16)
GPU 4, layer [16, 20)
GPU 5, layer [20, 24)
GPU 6, layer [24, 28)
GPU 7, layer [28, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 4)
GPU 1, layer [4, 8)
GPU 2, layer [8, 12)
GPU 3, layer [12, 16)
GPU 4, layer [16, 20)
GPU 5, layer [20, 24)
GPU 6, layer [24, 28)
GPU 7, layer [28, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 4)
GPU 1, layer [4, 8)
GPU 2, layer [8, 12)
GPU 3, layer [12, 16)
GPU 4, layer [16, 20)
GPU 5, layer [20, 24)
GPU 6, layer [24, 28)
GPU 7, layer [28, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 4)
GPU 1, layer [4, 8)
GPU 2, layer [8, 12)
GPU 3, layer [12, 16)
GPU 4, layer [16, 20)
GPU 5, layer [20, 24)
GPU 6, layer [24, 28)
GPU 7, layer [28, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
232965, 114848857, 114848857
Number of vertices per chunk: 7281
232965, 114848857, 114848857
Number of vertices per chunk: 7281
232965, 114848857, 114848857
Number of vertices per chunk: 7281
232965, 114848857, 114848857
Number of vertices per chunk: 7281
232965, 114848857, 114848857
Number of vertices per chunk: 7281
GPU 0, layer [0, 4)
GPU 1, layer [4, 8)
GPU 2, layer [8, 12)
GPU 3, layer [12, 16)
GPU 4, layer [16, 20)
GPU 5, layer [20, 24)
GPU 6, layer [24, 28)
GPU 7, layer [28, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
train nodes 153431, valid nodes 23831, test nodes 55703
GPU 0, layer [0, 4)
GPU 1, layer [4, 8)
GPU 2, layer [8, 12)
GPU 3, layer [12, 16)
GPU 4, layer [16, 20)
GPU 5, layer [20, 24)
GPU 6, layer [24, 28)
GPU 7, layer [28, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
Chunks (number of global chunks: 32): 0-[0, 8381) 1-[8381, 15124) 2-[15124, 22398) 3-[22398, 30320) 4-[30320, 35655) 5-[35655, 45721) 6-[45721, 55131) 7-[55131, 63248) 8-[63248, 69343) ... 31-[226638, 232965)
GPU 0, layer [0, 4)
GPU 1, layer [4, 8)
GPU 2, layer [8, 12)
GPU 3, layer [12, 16)
GPU 4, layer [16, 20)
GPU 5, layer [20, 24)
GPU 6, layer [24, 28)
GPU 7, layer [28, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
232965, 114848857, 114848857
Number of vertices per chunk: 7281
232965, 114848857, 114848857
Number of vertices per chunk: 7281
232965, 114848857, 114848857
Number of vertices per chunk: 7281
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
***** Start profiling the layer-level communication performance *******
The layer-level communication performance: 58.764 Gbps (per GPU), 470.114 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 58.501 Gbps (per GPU), 468.009 Gbps (aggregated)
The layer-level communication performance: 58.500 Gbps (per GPU), 468.001 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 58.242 Gbps (per GPU), 465.936 Gbps (aggregated)
The layer-level communication performance: 58.206 Gbps (per GPU), 465.645 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 58.006 Gbps (per GPU), 464.049 Gbps (aggregated)
The layer-level communication performance: 57.960 Gbps (per GPU), 463.678 Gbps (aggregated)
The layer-level communication performance: 57.927 Gbps (per GPU), 463.419 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The graph-level communication performance (supernode = 2): 158.776 Gbps (per GPU), 1270.207 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.767 Gbps (per GPU), 1270.135 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.791 Gbps (per GPU), 1270.328 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.764 Gbps (per GPU), 1270.111 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.791 Gbps (per GPU), 1270.328 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.767 Gbps (per GPU), 1270.134 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.794 Gbps (per GPU), 1270.352 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.764 Gbps (per GPU), 1270.108 Gbps (aggregated, cluster-wide)
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
The graph-level communication performance (supernode = 4): 104.397 Gbps (per GPU), 835.179 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 104.396 Gbps (per GPU), 835.165 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 104.385 Gbps (per GPU), 835.081 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 104.397 Gbps (per GPU), 835.172 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 104.398 Gbps (per GPU), 835.186 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 104.397 Gbps (per GPU), 835.172 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 104.354 Gbps (per GPU), 834.832 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 104.396 Gbps (per GPU), 835.172 Gbps (aggregated, cluster-wide)
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
The graph-level communication performance (supernode = 8): 39.391 Gbps (per GPU), 315.127 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 39.391 Gbps (per GPU), 315.128 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 39.391 Gbps (per GPU), 315.125 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 39.391 Gbps (per GPU), 315.132 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 39.390 Gbps (per GPU), 315.122 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 39.389 Gbps (per GPU), 315.108 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 39.389 Gbps (per GPU), 315.112 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 39.390 Gbps (per GPU), 315.117 Gbps (aggregated, cluster-wide)
 LType   LT0   LT1   LT2 Ratio  VSum  ESum
 chk_0  2.51ms  2.93ms  3.89ms  1.55  8.38K  3.53M
 chk_1  2.84ms  3.17ms  3.92ms  1.38  6.74K  3.60M
 chk_2  2.75ms  3.07ms  3.84ms  1.40  7.27K  3.53M
 chk_3  2.76ms  3.13ms  3.92ms  1.42  7.92K  3.61M
 chk_4  2.67ms  2.98ms  3.61ms  1.35  5.33K  3.68M
 chk_5  2.65ms  3.09ms  4.03ms  1.52 10.07K  3.45M
 chk_6  2.85ms  3.24ms  4.15ms  1.46  9.41K  3.48M
 chk_7  2.69ms  3.05ms  3.85ms  1.43  8.12K  3.60M
 chk_8  2.80ms  3.11ms  3.79ms  1.36  6.09K  3.64M
 chk_9  2.60ms  3.04ms  4.03ms  1.55 11.10K  3.38M
chk_10  2.83ms  3.12ms  3.80ms  1.34  5.67K  3.63M
chk_11  2.68ms  3.09ms  3.90ms  1.45  8.16K  3.54M
chk_12  2.89ms  3.25ms  4.01ms  1.39  7.24K  3.55M
chk_13  2.72ms  3.03ms  3.67ms  1.35  5.41K  3.68M
chk_14  2.95ms  3.32ms  4.08ms  1.38  7.14K  3.53M
chk_15  2.81ms  3.22ms  4.11ms  1.46  9.25K  3.49M
chk_16  2.64ms  2.91ms  3.54ms  1.34  4.78K  3.77M
chk_17  2.78ms  3.11ms  3.84ms  1.38  6.85K  3.60M
chk_18  2.61ms  2.94ms  3.72ms  1.43  7.47K  3.57M
chk_19  2.66ms  3.28ms  3.57ms  1.35  4.88K  3.75M
chk_20  2.67ms  2.97ms  3.72ms  1.39  7.00K  3.63M
chk_21  2.65ms  2.93ms  3.61ms  1.36  5.41K  3.68M
chk_22  2.83ms  3.30ms  4.28ms  1.51 11.07K  3.39M
chk_23  2.76ms  3.09ms  3.85ms  1.40  7.23K  3.64M
chk_24  2.79ms  3.21ms  4.14ms  1.48 10.13K  3.43M
chk_25  2.63ms  3.59ms  3.62ms  1.38  6.40K  3.57M
chk_26  2.81ms  3.07ms  3.78ms  1.35  5.78K  3.55M
chk_27  2.70ms  3.09ms  3.98ms  1.48  9.34K  3.48M
chk_28  3.07ms  3.30ms  4.01ms  1.31  6.37K  3.57M
chk_29  2.85ms  3.08ms  3.71ms  1.30  5.16K  3.78M
chk_30  2.72ms  2.98ms  3.64ms  1.34  5.44K  3.67M
chk_31  2.86ms  3.16ms  3.85ms  1.35  6.33K  3.63M
   Avg  2.75  3.12  3.86
   Max  3.07  3.59  4.28
   Min  2.51  2.91  3.54
 Ratio  1.22  1.23  1.21
   Var  0.01  0.02  0.03
Profiling takes 3.596 s
*** Node 0, starting model training...
Num Stages: 8 / 8
Node 0, Pipeline Input Tensor: NULL
Node 0, Pipeline Output Tensor: OPERATOR_ADD
*** Node 0 owns the model-level partition [0, 27)
*** Node 0, constructing the helper classes...
Node 0, Local Vertex Begin: 0, Num Local Vertices: 232965
*** Node 1, starting model training...
Num Stages: 8 / 8
Node 1, Pipeline Input Tensor: OPERATOR_ADD
Node 1, Pipeline Output Tensor: OPERATOR_ADD
*** Node 1 owns the model-level partition [27, 55)
*** Node 1, constructing the helper classes...
Node 1, Local Vertex Begin: 0, Num Local Vertices: 232965
*** Node 4, starting model training...
Num Stages: 8 / 8
Node 4, Pipeline Input Tensor: OPERATOR_ADD
Node 4, Pipeline Output Tensor: OPERATOR_ADD
*** Node 4 owns the model-level partition [111, 139)
*** Node 4, constructing the helper classes...
Node 4, Local Vertex Begin: 0, Num Local Vertices: 232965
*** Node 2, starting model training...
Num Stages: 8 / 8
Node 2, Pipeline Input Tensor: OPERATOR_ADD
Node 2, Pipeline Output Tensor: OPERATOR_ADD
*** Node 2 owns the model-level partition [55, 83)
*** Node 2, constructing the helper classes...
Node 2, Local Vertex Begin: 0, Num Local Vertices: 232965
*** Node 5, starting model training...
Num Stages: 8 / 8
Node 5, Pipeline Input Tensor: OPERATOR_ADD
Node 5, Pipeline Output Tensor: OPERATOR_ADD
*** Node 5 owns the model-level partition [139, 167)
*** Node 5, constructing the helper classes...
Node 5, Local Vertex Begin: 0, Num Local Vertices: 232965
*** Node 3, starting model training...
Num Stages: 8 / 8
Node 3, Pipeline Input Tensor: OPERATOR_ADD
Node 3, Pipeline Output Tensor: OPERATOR_ADD
*** Node 3 owns the model-level partition [83, 111)
*** Node 3, constructing the helper classes...
Node 3, Local Vertex Begin: 0, Num Local Vertices: 232965
*** Node 6, starting model training...
Num Stages: 8 / 8
Node 6, Pipeline Input Tensor: OPERATOR_ADD
Node 6, Pipeline Output Tensor: OPERATOR_ADD
*** Node 6 owns the model-level partition [167, 195)
*** Node 6, constructing the helper classes...
Node 6, Local Vertex Begin: 0, Num Local Vertices: 232965
*** Node 7, starting model training...
Num Stages: 8 / 8
Node 7, Pipeline Input Tensor: OPERATOR_ADD
Node 7, Pipeline Output Tensor: NULL
*** Node 7 owns the model-level partition [195, 229)
*** Node 7, constructing the helper classes...
Node 7, Local Vertex Begin: 0, Num Local Vertices: 232965
*** Node 0, setting up some other necessary information...
*** Node 7, setting up some other necessary information...
*** Node 6, setting up some other necessary information...
*** Node 2, setting up some other necessary information...
*** Node 1, setting up some other necessary information...
*** Node 3, setting up some other necessary information...
*** Node 4, setting up some other necessary information...
*** Node 5, setting up some other necessary information...
+++++++++ Node 1 initializing the weights for op[27, 55)...
+++++++++ Node 4 initializing the weights for op[111, 139)...
+++++++++ Node 2 initializing the weights for op[55, 83)...
+++++++++ Node 5 initializing the weights for op[139, 167)...
+++++++++ Node 3 initializing the weights for op[83, 111)...
+++++++++ Node 6 initializing the weights for op[167, 195)...
+++++++++ Node 0 initializing the weights for op[0, 27)...
+++++++++ Node 7 initializing the weights for op[195, 229)...
Node 0, discovering the vertices that will be sent across graph boundary...
Node 6, discovering the vertices that will be sent across graph boundary...
Node 1, discovering the vertices that will be sent across graph boundary...
Node 1, discovering the vertices that will be received across the graph boundary.
Node 7, discovering the vertices that will be sent across graph boundary...
Node 2, discovering the vertices that will be sent across graph boundary...
Node 2, discovering the vertices that will be received across the graph boundary.
Node 4, discovering the vertices that will be sent across graph boundary...
Node 4, discovering the vertices that will be received across the graph boundary.
Node 3, discovering the vertices that will be sent across graph boundary...
Node 3, discovering the vertices that will be received across the graph boundary.
Node 5, discovering the vertices that will be sent across graph boundary...
Node 5, discovering the vertices that will be received across the graph boundary.
The number of mirror vertices: 0
Node 0, discovering the vertices that will be received across the graph boundary.
Node 6, discovering the vertices that will be received across the graph boundary.
Node 7, discovering the vertices that will be received across the graph boundary.
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
*** Node 0, starting task scheduling...



*** Node 4, starting task scheduling...
*** Node 1, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 5, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 2, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 6, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 3, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 7, starting task scheduling...
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
	Epoch 1:	Loss 4.3230	TrainAcc 0.0764	ValidAcc 0.0770	TestAcc 0.0765	BestValid 0.0770
	Epoch 50:	Loss 0.6001	TrainAcc 0.9118	ValidAcc 0.9211	TestAcc 0.9218	BestValid 0.9211
	Epoch 100:	Loss 0.4226	TrainAcc 0.9330	ValidAcc 0.9378	TestAcc 0.9389	BestValid 0.9378
	Epoch 150:	Loss 0.3757	TrainAcc 0.9386	ValidAcc 0.9427	TestAcc 0.9438	BestValid 0.9427
	Epoch 200:	Loss 0.3487	TrainAcc 0.9415	ValidAcc 0.9444	TestAcc 0.9457	BestValid 0.9444
	Epoch 250:	Loss 0.3325	TrainAcc 0.9437	ValidAcc 0.9460	TestAcc 0.9468	BestValid 0.9460
	Epoch 300:	Loss 0.3222	TrainAcc 0.9449	ValidAcc 0.9472	TestAcc 0.9477	BestValid 0.9472
	Epoch 350:	Loss 0.3121	TrainAcc 0.9462	ValidAcc 0.9484	TestAcc 0.9484	BestValid 0.9484
	Epoch 400:	Loss 0.3030	TrainAcc 0.9470	ValidAcc 0.9491	TestAcc 0.9493	BestValid 0.9491
	Epoch 450:	Loss 0.2957	TrainAcc 0.9478	ValidAcc 0.9494	TestAcc 0.9496	BestValid 0.9494
	Epoch 500:	Loss 0.2881	TrainAcc 0.9486	ValidAcc 0.9502	TestAcc 0.9499	BestValid 0.9502
	Epoch 550:	Loss 0.2841	TrainAcc 0.9491	ValidAcc 0.9502	TestAcc 0.9501	BestValid 0.9502
	Epoch 600:	Loss 0.2783	TrainAcc 0.9502	ValidAcc 0.9508	TestAcc 0.9506	BestValid 0.9508
	Epoch 650:	Loss 0.2739	TrainAcc 0.9506	ValidAcc 0.9512	TestAcc 0.9509	BestValid 0.9512
	Epoch 700:	Loss 0.2697	TrainAcc 0.9513	ValidAcc 0.9516	TestAcc 0.9512	BestValid 0.9516
	Epoch 750:	Loss 0.2680	TrainAcc 0.9516	ValidAcc 0.9514	TestAcc 0.9511	BestValid 0.9516
	Epoch 800:	Loss 0.2639	TrainAcc 0.9521	ValidAcc 0.9514	TestAcc 0.9510	BestValid 0.9516
srun: Job step aborted: Waiting up to 32 seconds for job step to finish.
slurmstepd-gnerv4: error: *** STEP 3736.27 ON gnerv4 CANCELLED AT 2023-09-19T13:12:55 ***
