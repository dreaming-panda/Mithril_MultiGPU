Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
DONE MPI INIT
Initialized node 0 on machine gnerv7
DONE MPI INITDONE MPI INIT

Initialized node 2 on machine gnerv7
Initialized node 1 on machine gnerv7
DONE MPI INIT
Initialized node 3 on machine gnerv7
DONE MPI INIT
DONE MPI INITDONE MPI INIT
Initialized node 4 on machine gnerv8
Initialized node 5 on machine gnerv8
DONE MPI INIT
Initialized node 6 on machine gnerv8

Initialized node 7 on machine gnerv8
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
        It takes 0.011 seconds.
Building the CSC structure...
        It takes 0.011 seconds.
Building the CSC structure...
        It takes 0.013 seconds.
Building the CSC structure...
        It takes 0.011 seconds.
Building the CSC structure...
        It takes 0.011 seconds.
Building the CSC structure...
        It takes 0.014 seconds.
Building the CSC structure...
        It takes 0.014 seconds.
Building the CSC structure...
        It takes 0.014 seconds.
Building the CSC structure...
        It takes 0.012 seconds.
        It takes 0.012 seconds.
        It takes 0.014 seconds.
        It takes 0.012 seconds.
Building the Feature Vector...
        It takes 0.012 seconds.
        It takes 0.014 seconds.
        It takes 0.015 seconds.
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
        It takes 0.018 seconds.
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
        It takes 0.467 seconds.
        It takes 0.463 seconds.
Building the Label Vector...
Building the Label Vector...
        It takes 0.002 seconds.
        It takes 0.003 seconds.
        It takes 0.516 seconds.
Building the Label Vector...
        It takes 0.519 seconds.
Building the Label Vector...
        It takes 0.003 seconds.
        It takes 0.003 seconds.
        It takes 0.615 seconds.
Building the Label Vector...
        It takes 0.616 seconds.
Building the Label Vector...
        It takes 0.004 seconds.
The graph dataset locates at /shared_hdd_storage/jingjichen/gnn_datasets/pipeline_parallel_datasets/physics/32_parts
The number of GCN layers: 32
The number of hidden units: 100
The number of training epoches: 300
Learning rate: 0.001000
The partition strategy: model
The dropout rate: 0.500
The checkpointed weight file: /tmp/saved_weights
The random seed: 2
Number of classes: 5
Number of feature dimensions: 8415
Number of vertices: 34493
Number of GPUs: 8
        It takes 0.613 seconds.
Building the Label Vector...
        It takes 0.003 seconds.
        It takes 0.007 seconds.
        It takes 0.625 seconds.
Building the Label Vector...
        It takes 0.008 seconds.
GPU 0, layer [0, 4)
GPU 1, layer [4, 8)
GPU 2, layer [8, 12)
GPU 3, layer [12, 16)
GPU 4, layer [16, 20)
GPU 5, layer [20, 24)
GPU 6, layer [24, 28)
GPU 7, layer [28, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
34493, 530417, 530417
Number of vertices per chunk: 1078
csr in-out ready !Start Cost Model Initialization...
GPU 0, layer [0, 4)
GPU 1, layer [4, 8)
GPU 2, layer [8, 12)
GPU 3, layer [12, 16)
GPU 4, layer [16, 20)
GPU 5, layer [20, 24)
GPU 6, layer [24, 28)
GPU 7, layer [28, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 4)
GPU 1, layer [4, 8)
GPU 2, layer [8, 12)
GPU 3, layer [12, 16)
GPU 4, layer [16, 20)
GPU 5, layer [20, 24)
GPU 6, layer [24, 28)
GPU 7, layer [28, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
34493, 530417, 530417
Number of vertices per chunk: 1078
34493, 530417, 530417
Number of vertices per chunk: 1078
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
GPU 0, layer [0, 4)
GPU 1, layer [4, 8)
GPU 2, layer [8, 12)
GPU 3, layer [12, 16)
GPU 4, layer [16, 20)
GPU 5, layer [20, 24)
GPU 6, layer [24, 28)
GPU 7, layer [28, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
34493, 530417, 530417
Number of vertices per chunk: 1078
csr in-out ready !Start Cost Model Initialization...
GPU 0, layer [0, 4)
GPU 1, layer [4, 8)
GPU 2, layer [8, 12)
GPU 3, layer [12, 16)
GPU 4, layer [16, 20)
GPU 5, layer [20, 24)
GPU 6, layer [24, 28)
GPU 7, layer [28, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
34493, 530417, 530417
Number of vertices per chunk: 1078
csr in-out ready !Start Cost Model Initialization...
GPU 0, layer [0, 4)
GPU 1, layer [4, 8)
GPU 2, layer [8, 12)
GPU 3, layer [12, 16)
GPU 4, layer [16, 20)
GPU 5, layer [20, 24)
GPU 6, layer [24, 28)
GPU 7, layer [28, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
34493, 530417, 530417
Number of vertices per chunk: 1078
csr in-out ready !Start Cost Model Initialization...
train nodes 100, valid nodes 500, test nodes 1000
GPU 0, layer [0, 4)
GPU 1, layer [4, 8)
GPU 2, layer [8, 12)
GPU 3, layer [12, 16)
GPU 4, layer [16, 20)
GPU 5, layer [20, 24)
GPU 6, layer [24, 28)
GPU 7, layer [28, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
Chunks (number of global chunks: 32): 0-[0, 1025) 1-[1025, 2154) 2-[2154, 3262) 3-[3262, 4284) 4-[4284, 5334) 5-[5334, 6511) 6-[6511, 7597) 7-[7597, 8680) 8-[8680, 9764) ... 31-[33337, 34493)
34493, 530417, 530417
GPU 0, layer [0, 4)
GPU 1, layer [4, 8)
GPU 2, layer [8, 12)
GPU 3, layer [12, 16)
GPU 4, layer [16, 20)
GPU 5, layer [20, 24)
GPU 6, layer [24, 28)
GPU 7, layer [28, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
Number of vertices per chunk: 1078
34493, 530417, 530417
Number of vertices per chunk: 1078
csr in-out ready !Start Cost Model Initialization...
***** Start profiling the layer-level communication performance *******
csr in-out ready !Start Cost Model Initialization...
The layer-level communication performance: 60.529 Gbps (per GPU), 484.233 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 60.243 Gbps (per GPU), 481.944 Gbps (aggregated)
The layer-level communication performance: 60.247 Gbps (per GPU), 481.974 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 59.977 Gbps (per GPU), 479.816 Gbps (aggregated)
The layer-level communication performance: 59.949 Gbps (per GPU), 479.592 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 59.723 Gbps (per GPU), 477.784 Gbps (aggregated)
The layer-level communication performance: 59.671 Gbps (per GPU), 477.369 Gbps (aggregated)
The layer-level communication performance: 59.642 Gbps (per GPU), 477.132 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The graph-level communication performance (supernode = 2): 156.782 Gbps (per GPU), 1254.254 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 156.755 Gbps (per GPU), 1254.043 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 156.717 Gbps (per GPU), 1253.739 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 156.752 Gbps (per GPU), 1254.020 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 156.779 Gbps (per GPU), 1254.231 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 156.717 Gbps (per GPU), 1253.739 Gbps (aggregated, cluster-wide)
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
The graph-level communication performance (supernode = 2): 153.798 Gbps (per GPU), 1230.385 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 153.807 Gbps (per GPU), 1230.452 Gbps (aggregated, cluster-wide)
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
The graph-level communication performance (supernode = 4): 104.041 Gbps (per GPU), 832.327 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 104.038 Gbps (per GPU), 832.306 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 104.016 Gbps (per GPU), 832.127 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 104.042 Gbps (per GPU), 832.339 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 104.013 Gbps (per GPU), 832.107 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 104.040 Gbps (per GPU), 832.320 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 103.961 Gbps (per GPU), 831.687 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 103.926 Gbps (per GPU), 831.406 Gbps (aggregated, cluster-wide)
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
The graph-level communication performance (supernode = 8): 36.969 Gbps (per GPU), 295.754 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 36.967 Gbps (per GPU), 295.735 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 36.968 Gbps (per GPU), 295.743 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 36.970 Gbps (per GPU), 295.760 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 36.969 Gbps (per GPU), 295.754 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 36.966 Gbps (per GPU), 295.728 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 36.966 Gbps (per GPU), 295.728 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 36.967 Gbps (per GPU), 295.735 Gbps (aggregated, cluster-wide)
 LType   LT0   LT1   LT2 Ratio  VSum  ESum
 chk_0  0.64ms  0.23ms  0.15ms  4.23  1.02K  0.02M
 chk_1  0.67ms  0.22ms  0.15ms  4.41  1.13K  0.01M
 chk_2  0.66ms  0.23ms  0.15ms  4.38  1.11K  0.01M
 chk_3  0.64ms  0.22ms  0.15ms  4.24  1.02K  0.02M
 chk_4  0.65ms  0.24ms  0.15ms  4.32  1.05K  0.02M
 chk_5  0.68ms  0.22ms  0.15ms  4.57  1.18K  0.01M
 chk_6  0.67ms  0.82ms  0.15ms  5.45  1.09K  0.02M
 chk_7  0.67ms  0.22ms  0.15ms  4.46  1.08K  0.02M
 chk_8  0.67ms  0.22ms  0.15ms  4.41  1.08K  0.01M
 chk_9  0.66ms  0.24ms  0.15ms  4.42  1.06K  0.02M
chk_10  0.66ms  0.22ms  0.15ms  4.40  1.04K  0.02M
chk_11  0.67ms  0.22ms  0.15ms  4.45  1.11K  0.01M
chk_12  0.67ms  0.22ms  0.15ms  4.43  1.11K  0.01M
chk_13  0.64ms  0.22ms  0.15ms  4.23  1.01K  0.02M
chk_14  0.67ms  0.22ms  0.15ms  4.39  1.09K  0.01M
chk_15  0.65ms  0.24ms  0.15ms  4.29  1.03K  0.02M
chk_16  0.63ms  0.22ms  0.15ms  4.14  0.98K  0.02M
chk_17  0.67ms  0.22ms  0.15ms  4.46  1.09K  0.01M
chk_18  0.65ms  0.22ms  0.15ms  4.29  1.04K  0.02M
chk_19  0.67ms  0.22ms  0.15ms  4.47  1.12K  0.01M
chk_20  0.67ms  0.22ms  0.15ms  4.48  1.13K  0.01M
chk_21  0.65ms  0.22ms  0.15ms  4.35  1.05K  0.02M
chk_22  0.67ms  0.22ms  0.15ms  4.52  1.11K  0.01M
chk_23  0.67ms  0.22ms  0.15ms  4.52  1.10K  0.01M
chk_24  0.65ms  0.22ms  0.15ms  4.27  1.02K  0.02M
chk_25  0.64ms  0.22ms  0.15ms  4.22  1.01K  0.02M
chk_26  0.67ms  0.22ms  0.15ms  4.47  1.12K  0.01M
chk_27  0.66ms  0.22ms  0.15ms  4.35  1.08K  0.02M
chk_28  0.66ms  0.22ms  0.15ms  4.32  1.07K  0.02M
chk_29  0.67ms  0.22ms  0.15ms  4.50  1.11K  0.01M
chk_30  0.67ms  0.22ms  0.15ms  4.40  1.10K  0.01M
chk_31  0.68ms  0.22ms  0.15ms  4.58  1.16K  0.01M
   Avg  0.66  0.24  0.15
   Max  0.68  0.82  0.15
   Min  0.63  0.22  0.15
 Ratio  1.09  3.78  1.03
   Var  0.00  0.01  0.00
Profiling takes 0.484 s
*** Node 0, starting model training...
Num Stages: 8 / 8
Node 0, Pipeline Input Tensor: NULL
*** Node 4, starting model training...
Num Stages: 8 / 8
*** Node 2, starting model training...
Num Stages: 8 / 8
Node 2, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 2, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 2 owns the model-level partition [41, 61)
*** Node 2, constructing the helper classes...
Node 2, Local Vertex Begin: 0, Num Local Vertices: 34493
*** Node 5, starting model training...
Num Stages: 8 / 8
Node 5, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 5, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 5 owns the model-level partition [101, 121)
*** Node 5, constructing the helper classes...
Node 5, Local Vertex Begin: 0, Num Local Vertices: 34493
Node 0, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 0 owns the model-level partition [0, 21)
*** Node 0, constructing the helper classes...
Node 0, Local Vertex Begin: 0, Num Local Vertices: 34493
*** Node 6, starting model training...
Num Stages: 8 / 8
Node 6, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 6, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 6 owns the model-level partition [121, 141)
*** Node 6, constructing the helper classes...
Node 6, Local Vertex Begin: 0, Num Local Vertices: 34493
*** Node 1, starting model training...
Num Stages: 8 / 8
Node 1, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 1, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 1 owns the model-level partition [21, 41)
*** Node 1, constructing the helper classes...
Node 1, Local Vertex Begin: 0, Num Local Vertices: 34493
*** Node 7, starting model training...
Num Stages: 8 / 8
Node 7, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 7, Pipeline Output Tensor: NULL
*** Node 7 owns the model-level partition [141, 160)
*** Node 7, constructing the helper classes...
Node 7, Local Vertex Begin: 0, Num Local Vertices: 34493
*** Node 3, starting model training...
Num Stages: 8 / 8
Node 3, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 3, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 3 owns the model-level partition [61, 81)
*** Node 3, constructing the helper classes...
Node 3, Local Vertex Begin: 0, Num Local Vertices: 34493
Node 4, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 4, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 4 owns the model-level partition [81, 101)
*** Node 4, constructing the helper classes...
Node 4, Local Vertex Begin: 0, Num Local Vertices: 34493
*** Node 7, setting up some other necessary information...
*** Node 5, setting up some other necessary information...
*** Node 6, setting up some other necessary information...
*** Node 4, setting up some other necessary information...
*** Node 3, setting up some other necessary information...
*** Node 0, setting up some other necessary information...
*** Node 1, setting up some other necessary information...
*** Node 2, setting up some other necessary information...
+++++++++ Node 0 initializing the weights for op[0, 21)...
+++++++++ Node 1 initializing the weights for op[21, 41)...
+++++++++ Node 5 initializing the weights for op[101, 121)...
+++++++++ Node 3 initializing the weights for op[61, 81)...
+++++++++ Node 2 initializing the weights for op[41, 61)...
+++++++++ Node 7 initializing the weights for op[141, 160)...
+++++++++ Node 6 initializing the weights for op[121, 141)...
+++++++++ Node 4 initializing the weights for op[81, 101)...
Node 2, discovering the vertices that will be sent across graph boundary...
Node 0, discovering the vertices that will be sent across graph boundary...
Node 1, discovering the vertices that will be sent across graph boundary...
Node 7, discovering the vertices that will be sent across graph boundary...
Node 3, discovering the vertices that will be sent across graph boundary...
Node 4, discovering the vertices that will be sent across graph boundary...
The number of mirror vertices: 0
Node 0, discovering the vertices that will be received across the graph boundary.
Node 5, discovering the vertices that will be sent across graph boundary...
Node 1, discovering the vertices that will be received across the graph boundary.
Node 2, discovering the vertices that will be received across the graph boundary.
Node 6, discovering the vertices that will be sent across graph boundary...
Node 3, discovering the vertices that will be received across the graph boundary.
Node 4, discovering the vertices that will be received across the graph boundary.
Node 5, discovering the vertices that will be received across the graph boundary.
Node 6, discovering the vertices that will be received across the graph boundary.
****** Start Scheduling the Tasks in a Pipelined Fashion ******
Node 7, discovering the vertices that will be received across the graph boundary.
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ************ Start Scheduling the Tasks in a Pipelined Fashion ******

****** Start Scheduling the Tasks in a Pipelined Fashion ******
*** Node 0, starting task scheduling...
*** Node 1, starting task scheduling...
*** Node 4, starting task scheduling...
*** Node 2, starting task scheduling...
*** Node 5, starting task scheduling...
*** Node 3, starting task scheduling...
*** Node 6, starting task scheduling...



*** Node 7, starting task scheduling...
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
	Epoch 1:	Loss 1.6094	TrainAcc 0.1800	ValidAcc 0.1640	TestAcc 0.1570	BestValid 0.1640
	Epoch 10:	Loss 1.6094	TrainAcc 0.2000	ValidAcc 0.0840	TestAcc 0.0920	BestValid 0.1640
	Epoch 20:	Loss 1.5853	TrainAcc 0.2000	ValidAcc 0.0840	TestAcc 0.0920	BestValid 0.1640
	Epoch 30:	Loss 1.5241	TrainAcc 0.2000	ValidAcc 0.0840	TestAcc 0.0920	BestValid 0.1640
	Epoch 40:	Loss 1.4640	TrainAcc 0.2000	ValidAcc 0.0840	TestAcc 0.0920	BestValid 0.1640
	Epoch 50:	Loss 1.5090	TrainAcc 0.2000	ValidAcc 0.0840	TestAcc 0.0920	BestValid 0.1640
	Epoch 60:	Loss 1.5029	TrainAcc 0.2000	ValidAcc 0.0840	TestAcc 0.0920	BestValid 0.1640
	Epoch 70:	Loss 1.5051	TrainAcc 0.2000	ValidAcc 0.0840	TestAcc 0.0920	BestValid 0.1640
	Epoch 80:	Loss 1.4636	TrainAcc 0.2000	ValidAcc 0.0840	TestAcc 0.0920	BestValid 0.1640
	Epoch 90:	Loss 1.4381	TrainAcc 0.2000	ValidAcc 0.0840	TestAcc 0.0920	BestValid 0.1640
	Epoch 100:	Loss 1.4388	TrainAcc 0.2000	ValidAcc 0.0840	TestAcc 0.0920	BestValid 0.1640
	Epoch 110:	Loss 1.4206	TrainAcc 0.2000	ValidAcc 0.0840	TestAcc 0.0920	BestValid 0.1640
	Epoch 120:	Loss 1.4091	TrainAcc 0.2000	ValidAcc 0.0840	TestAcc 0.0920	BestValid 0.1640
	Epoch 130:	Loss 1.4113	TrainAcc 0.2000	ValidAcc 0.0840	TestAcc 0.0920	BestValid 0.1640
	Epoch 140:	Loss 1.4050	TrainAcc 0.2000	ValidAcc 0.0840	TestAcc 0.0920	BestValid 0.1640
	Epoch 150:	Loss 1.3889	TrainAcc 0.2000	ValidAcc 0.0840	TestAcc 0.0920	BestValid 0.1640
	Epoch 160:	Loss 1.3915	TrainAcc 0.2000	ValidAcc 0.0840	TestAcc 0.0920	BestValid 0.1640
	Epoch 170:	Loss 1.3787	TrainAcc 0.2000	ValidAcc 0.0840	TestAcc 0.0920	BestValid 0.1640
	Epoch 180:	Loss 1.3804	TrainAcc 0.2000	ValidAcc 0.0840	TestAcc 0.0920	BestValid 0.1640
	Epoch 190:	Loss 1.3650	TrainAcc 0.2000	ValidAcc 0.0840	TestAcc 0.0920	BestValid 0.1640
	Epoch 200:	Loss 1.3600	TrainAcc 0.2000	ValidAcc 0.0840	TestAcc 0.0920	BestValid 0.1640
	Epoch 210:	Loss 1.3412	TrainAcc 0.2000	ValidAcc 0.0840	TestAcc 0.0920	BestValid 0.1640
	Epoch 220:	Loss 1.3531	TrainAcc 0.2000	ValidAcc 0.0840	TestAcc 0.0920	BestValid 0.1640
	Epoch 230:	Loss 1.3378	TrainAcc 0.2000	ValidAcc 0.0840	TestAcc 0.0920	BestValid 0.1640
	Epoch 240:	Loss 1.3428	TrainAcc 0.2000	ValidAcc 0.0840	TestAcc 0.0920	BestValid 0.1640
	Epoch 250:	Loss 1.3327	TrainAcc 0.2000	ValidAcc 0.0840	TestAcc 0.0920	BestValid 0.1640
	Epoch 260:	Loss 1.3449	TrainAcc 0.2000	ValidAcc 0.0840	TestAcc 0.0920	BestValid 0.1640
	Epoch 270:	Loss 1.3229	TrainAcc 0.2000	ValidAcc 0.4960	TestAcc 0.4990	BestValid 0.4960
	Epoch 280:	Loss 1.3315	TrainAcc 0.2000	ValidAcc 0.0840	TestAcc 0.0920	BestValid 0.4960
	Epoch 290:	Loss 1.3242	TrainAcc 0.2000	ValidAcc 0.0860	TestAcc 0.0920	BestValid 0.4960
	Epoch 300:	Loss 1.3248	TrainAcc 0.2000	ValidAcc 0.0860	TestAcc 0.0920	BestValid 0.4960
****** Epoch Time (Excluding Evaluation Cost): 0.066 s ******
****** Breakdown Analysis ******
Cluster-Wide Average, Bubble-Pipeline: 10.898 ms (Max: 12.263, Min: 8.989, Sum: 87.180)
Cluster-Wide Average, Compute: 35.429 ms (Max: 50.463, Min: 30.215, Sum: 283.432)
Cluster-Wide Average, Communication-Layer: 5.424 ms (Max: 5.986, Min: 4.218, Sum: 43.391)
Cluster-Wide Average, Bubble-Imbalance: 13.412 ms (Max: 17.868, Min: 1.428, Sum: 107.293)
Cluster-Wide Average, Communication-Graph: 0.530 ms (Max: 0.577, Min: 0.467, Sum: 4.238)
Cluster-Wide Average, Optimization: 0.120 ms (Max: 0.284, Min: 0.091, Sum: 0.962)
Cluster-Wide Average, Others: 0.631 ms (Max: 1.514, Min: 0.438, Sum: 5.045)
****** Breakdown Sum: 66.443 ms ******
Cluster-Wide Average, GPU Memory Consumption: 2.433 GB (Max: 3.665, Min: 2.016, Sum: 19.466)
Cluster-Wide Average, Graph-Level Communication Throughput: -nan Gbps (Max: -nan, Min: -nan, Sum: -nan)
Cluster-Wide Average, Layer-Level Communication Throughput: 34.976 Gbps (Max: 39.169, Min: 25.941, Sum: 279.811)
Layer-level communication (cluster-wide, per-epoch): 0.180 GB
Graph-level communication (cluster-wide, per-epoch): 0.000 GB
Weight-sync communication (cluster-wide, per-epoch): 0.000 GB
Total communication (cluster-wide, per-epoch): 0.180 GB
****** Accuracy Results ******
Highest valid_acc: 0.4960
Target test_acc: 0.4990
Epoch to reach the target acc: 269
[MPI Rank 0] Success 
[MPI Rank 1] Success 
[MPI Rank 2] Success 
[MPI Rank 4] Success 
[MPI Rank 3] Success 
[MPI Rank 5] Success 
[MPI Rank 6] Success 
[MPI Rank 7] Success 
