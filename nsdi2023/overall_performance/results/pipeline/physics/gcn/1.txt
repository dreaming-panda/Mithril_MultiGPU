Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
DONE MPI INIT
DONE MPI INIT
Initialized node 2 on machine gnerv7
DONE MPI INITInitialized node 0 on machine gnerv7

Initialized node 3 on machine gnerv7
DONE MPI INIT
Initialized node 1 on machine gnerv7
DONE MPI INIT
Initialized node 4 on machine gnerv8
DONE MPI INIT
Initialized node 5 on machine gnerv8
DONE MPI INIT
Initialized node 6 on machine gnerv8
DONE MPI INIT
Initialized node 7 on machine gnerv8
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...Building the CSR structure...

Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
        It takes 0.010 seconds.
Building the CSC structure...
        It takes 0.011 seconds.
Building the CSC structure...
        It takes 0.011 seconds.
Building the CSC structure...
        It takes 0.012 seconds.
Building the CSC structure...
        It takes 0.011 seconds.
Building the CSC structure...
        It takes 0.013 seconds.
Building the CSC structure...
        It takes 0.019 seconds.
Building the CSC structure...
        It takes 0.010 seconds.
        It takes 0.018 seconds.
Building the CSC structure...
        It takes 0.011 seconds.
        It takes 0.011 seconds.
        It takes 0.011 seconds.
        It takes 0.012 seconds.
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
        It takes 0.015 seconds.
        It takes 0.011 seconds.
        It takes 0.013 seconds.
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
        It takes 0.455 seconds.
        It takes 0.451 seconds.
Building the Label Vector...
Building the Label Vector...
        It takes 0.002 seconds.
        It takes 0.003 seconds.
        It takes 0.512 seconds.
Building the Label Vector...
        It takes 0.002 seconds.
        It takes 0.520 seconds.
Building the Label Vector...
        It takes 0.007 seconds.
        It takes 0.621 seconds.
Building the Label Vector...
        It takes 0.003 seconds.
        It takes 0.625 seconds.
The graph dataset locates at /shared_hdd_storage/jingjichen/gnn_datasets/pipeline_parallel_datasets/physics/32_parts
The number of GCN layers: 32
The number of hidden units: 100
The number of training epoches: 300
Learning rate: 0.001000
The partition strategy: model
The dropout rate: 0.500
The checkpointed weight file: /tmp/saved_weights
The random seed: 1
Number of classes: 5
Number of feature dimensions: 8415
Number of vertices: 34493
Number of GPUs: 8
Building the Label Vector...
        It takes 0.006 seconds.
        It takes 0.627 seconds.
Building the Label Vector...
        It takes 0.626 seconds.
Building the Label Vector...
        It takes 0.003 seconds.
        It takes 0.007 seconds.
GPU 0, layer [0, 4)
GPU 1, layer [4, 8)
GPU 2, layer [8, 12)
GPU 3, layer [12, 16)
GPU 4, layer [16, 20)
GPU 5, layer [20, 24)
GPU 6, layer [24, 28)
GPU 7, layer [28, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
34493, 530417, 530417
Number of vertices per chunk: 1078
csr in-out ready !Start Cost Model Initialization...
GPU 0, layer [0, 4)
GPU 1, layer [4, 8)
GPU 2, layer [8, 12)
GPU 3, layer [12, 16)
GPU 4, layer [16, 20)
GPU 5, layer [20, 24)
GPU 6, layer [24, 28)
GPU 7, layer [28, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
34493, 530417, 530417
Number of vertices per chunk: 1078
csr in-out ready !Start Cost Model Initialization...
GPU 0, layer [0, 4)
GPU 1, layer [4, 8)
GPU 2, layer [8, 12)
GPU 3, layer [12, 16)
GPU 4, layer [16, 20)
GPU 5, layer [20, 24)
GPU 6, layer [24, 28)
GPU 7, layer [28, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
34493, 530417, 530417
Number of vertices per chunk: 1078
csr in-out ready !Start Cost Model Initialization...
GPU 0, layer [0, 4)
GPU 1, layer [4, 8)
GPU 2, layer [8, 12)
GPU 3, layer [12, 16)
GPU 4, layer [16, 20)
GPU 5, layer [20, 24)
GPU 6, layer [24, 28)
GPU 7, layer [28, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
34493, 530417, 530417
Number of vertices per chunk: 1078
csr in-out ready !Start Cost Model Initialization...
GPU 0, layer [0, 4)
GPU 1, layer [4, 8)
GPU 2, layer [8, 12)
GPU 3, layer [12, 16)
GPU 4, layer [16, 20)
GPU 5, layer [20, 24)
GPU 6, layer [24, 28)
GPU 7, layer [28, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
34493, 530417, 530417
Number of vertices per chunk: 1078
csr in-out ready !Start Cost Model Initialization...
GPU 0, layer [0, 4)
GPU 1, layer [4, 8)
GPU 2, layer [8, 12)
GPU 3, layer [12, 16)
GPU 4, layer [16, 20)
GPU 5, layer [20, 24)
GPU 6, layer [24, 28)
GPU 7, layer [28, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
34493, 530417, 530417
Number of vertices per chunk: 1078
csr in-out ready !Start Cost Model Initialization...
train nodes 100, valid nodes 500, test nodes 1000
GPU 0, layer [0, 4)
GPU 1, layer [4, 8)
GPU 2, layer [8, 12)
GPU 3, layer [12, 16)
GPU 4, layer [16, 20)
GPU 5, layer [20, 24)
GPU 6, layer [24, 28)
GPU 7, layer [28, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
Chunks (number of global chunks: 32): 0-[0, 1025) 1-[1025, 2154) 2-[2154, 3262) 3-[3262, 4284) 4-[4284, 5334) 5-[5334, 6511) 6-[6511, 7597) 7-[7597, 8680) 8-[8680, 9764) ... 31-[33337, 34493)
34493, 530417, 530417
Number of vertices per chunk: 1078
GPU 0, layer [0, 4)
GPU 1, layer [4, 8)
GPU 2, layer [8, 12)
GPU 3, layer [12, 16)
GPU 4, layer [16, 20)
GPU 5, layer [20, 24)
GPU 6, layer [24, 28)
GPU 7, layer [28, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
csr in-out ready !Start Cost Model Initialization...
***** Start profiling the layer-level communication performance *******
34493, 530417, 530417
Number of vertices per chunk: 1078
csr in-out ready !Start Cost Model Initialization...
The layer-level communication performance: 59.659 Gbps (per GPU), 477.270 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 59.358 Gbps (per GPU), 474.865 Gbps (aggregated)
The layer-level communication performance: 59.350 Gbps (per GPU), 474.803 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 59.095 Gbps (per GPU), 472.762 Gbps (aggregated)
The layer-level communication performance: 59.073 Gbps (per GPU), 472.587 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 58.835 Gbps (per GPU), 470.681 Gbps (aggregated)
The layer-level communication performance: 58.783 Gbps (per GPU), 470.262 Gbps (aggregated)
The layer-level communication performance: 58.754 Gbps (per GPU), 470.029 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The graph-level communication performance (supernode = 2): 158.159 Gbps (per GPU), 1265.274 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.150 Gbps (per GPU), 1265.202 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.151 Gbps (per GPU), 1265.205 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.141 Gbps (per GPU), 1265.131 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.082 Gbps (per GPU), 1264.653 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.144 Gbps (per GPU), 1265.155 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.141 Gbps (per GPU), 1265.131 Gbps (aggregated, cluster-wide)
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
The graph-level communication performance (supernode = 2): 155.523 Gbps (per GPU), 1244.185 Gbps (aggregated, cluster-wide)
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
The graph-level communication performance (supernode = 4): 104.914 Gbps (per GPU), 839.308 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 104.915 Gbps (per GPU), 839.322 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 104.914 Gbps (per GPU), 839.315 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 104.867 Gbps (per GPU), 838.938 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 104.917 Gbps (per GPU), 839.335 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 104.916 Gbps (per GPU), 839.329 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 104.838 Gbps (per GPU), 838.707 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 104.762 Gbps (per GPU), 838.100 Gbps (aggregated, cluster-wide)
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
The graph-level communication performance (supernode = 8): 37.373 Gbps (per GPU), 298.984 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 37.375 Gbps (per GPU), 298.998 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 37.373 Gbps (per GPU), 298.985 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 37.374 Gbps (per GPU), 298.991 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 37.373 Gbps (per GPU), 298.987 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 37.372 Gbps (per GPU), 298.978 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 37.374 Gbps (per GPU), 298.991 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 37.358 Gbps (per GPU), 298.866 Gbps (aggregated, cluster-wide)
 LType   LT0   LT1   LT2 Ratio  VSum  ESum
 chk_0  0.64ms  0.22ms  0.15ms  4.26  1.02K  0.02M
 chk_1  0.67ms  0.22ms  0.15ms  4.46  1.13K  0.01M
 chk_2  0.67ms  0.22ms  0.15ms  4.41  1.11K  0.01M
 chk_3  0.64ms  0.22ms  0.15ms  4.28  1.02K  0.02M
 chk_4  0.68ms  0.22ms  0.15ms  4.54  1.05K  0.02M
 chk_5  0.69ms  0.22ms  0.15ms  4.57  1.18K  0.01M
 chk_6  0.67ms  0.22ms  0.15ms  4.50  1.09K  0.02M
 chk_7  0.68ms  0.22ms  0.15ms  4.51  1.08K  0.02M
 chk_8  0.67ms  0.22ms  0.15ms  4.47  1.08K  0.01M
 chk_9  0.66ms  0.22ms  0.15ms  4.43  1.06K  0.02M
chk_10  0.66ms  0.22ms  0.15ms  4.42  1.04K  0.02M
chk_11  0.67ms  0.22ms  0.15ms  4.48  1.11K  0.01M
chk_12  0.67ms  0.22ms  0.15ms  4.45  1.11K  0.01M
chk_13  0.65ms  0.21ms  0.15ms  4.26  1.01K  0.02M
chk_14  0.67ms  0.22ms  0.15ms  4.41  1.09K  0.01M
chk_15  0.65ms  0.22ms  0.15ms  4.32  1.03K  0.02M
chk_16  0.62ms  0.21ms  0.15ms  4.13  0.98K  0.02M
chk_17  0.67ms  0.22ms  0.15ms  4.46  1.09K  0.01M
chk_18  0.66ms  0.22ms  0.15ms  4.36  1.04K  0.02M
chk_19  0.67ms  0.22ms  0.15ms  4.45  1.12K  0.01M
chk_20  0.67ms  0.22ms  0.15ms  4.52  1.13K  0.01M
chk_21  0.65ms  0.22ms  0.15ms  4.36  1.05K  0.02M
chk_22  0.67ms  0.22ms  0.15ms  4.52  1.11K  0.01M
chk_23  0.67ms  0.22ms  0.15ms  4.52  1.10K  0.01M
chk_24  0.65ms  0.22ms  0.15ms  4.27  1.02K  0.02M
chk_25  0.64ms  0.22ms  0.15ms  4.23  1.01K  0.02M
chk_26  0.67ms  0.22ms  0.15ms  4.45  1.12K  0.01M
chk_27  0.66ms  0.22ms  0.15ms  4.37  1.08K  0.02M
chk_28  0.66ms  0.22ms  0.15ms  4.28  1.07K  0.02M
chk_29  0.67ms  0.22ms  0.15ms  4.53  1.11K  0.01M
chk_30  0.67ms  0.22ms  0.15ms  4.41  1.10K  0.01M
chk_31  0.68ms  0.22ms  0.15ms  4.57  1.16K  0.01M
   Avg  0.66  0.22  0.15
   Max  0.69  0.22  0.15
   Min  0.62  0.21  0.15
 Ratio  1.10  1.04  1.03
   Var  0.00  0.00  0.00
Profiling takes 0.480 s
*** Node 0, starting model training...
Num Stages: 8 / 8
Node 0, Pipeline Input Tensor: NULL
Node 0, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 0 owns the model-level partition [0, 21)
*** Node 0, constructing the helper classes...
Node 0, Local Vertex Begin: 0, Num Local Vertices: 34493
*** Node 2, starting model training...
Num Stages: 8 / 8
Node 2, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 2, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 2 owns the model-level partition [41, 61)
*** Node 2, constructing the helper classes...
Node 2, Local Vertex Begin: 0, Num Local Vertices: 34493
*** Node 3, starting model training...
Num Stages: 8 / 8
Node 3, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 3, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 3 owns the model-level partition [61, 81)
*** Node 3, constructing the helper classes...
Node 3, Local Vertex Begin: 0, Num Local Vertices: 34493
*** Node 1, starting model training...
Num Stages: 8 / 8
Node 1, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 1, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 1 owns the model-level partition [21, 41)
*** Node 1, constructing the helper classes...
Node 1, Local Vertex Begin: 0, Num Local Vertices: 34493
*** Node 4, starting model training...
Num Stages: 8 / 8
*** Node 5, starting model training...
Num Stages: 8 / 8
Node 5, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 5, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 5 owns the model-level partition [101, 121)
*** Node 5, constructing the helper classes...
Node 5, Local Vertex Begin: 0, Num Local Vertices: 34493
*** Node 6, starting model training...
Num Stages: 8 / 8
Node 6, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 6, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 6 owns the model-level partition [121, 141)
*** Node 6, constructing the helper classes...
Node 6, Local Vertex Begin: 0, Num Local Vertices: 34493
*** Node 7, starting model training...
Node 4, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 4, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 4 owns the model-level partition [81, 101)
*** Node 4, constructing the helper classes...
Node 4, Local Vertex Begin: 0, Num Local Vertices: 34493
Num Stages: 8 / 8
Node 7, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 7, Pipeline Output Tensor: NULL
*** Node 7 owns the model-level partition [141, 160)
*** Node 7, constructing the helper classes...
Node 7, Local Vertex Begin: 0, Num Local Vertices: 34493
*** Node 7, setting up some other necessary information...
*** Node 5, setting up some other necessary information...
*** Node 4, setting up some other necessary information...
*** Node 6, setting up some other necessary information...
*** Node 3, setting up some other necessary information...
*** Node 0, setting up some other necessary information...
*** Node 1, setting up some other necessary information...
*** Node 2, setting up some other necessary information...
+++++++++ Node 0 initializing the weights for op[0, 21)...
+++++++++ Node 2 initializing the weights for op[41, 61)...
+++++++++ Node 6 initializing the weights for op[121, 141)...
+++++++++ Node 1 initializing the weights for op[21, 41)...
+++++++++ Node 3 initializing the weights for op[61, 81)...
+++++++++ Node 5 initializing the weights for op[101, 121)...
+++++++++ Node 4 initializing the weights for op[81, 101)...
+++++++++ Node 7 initializing the weights for op[141, 160)...
Node 4, discovering the vertices that will be sent across graph boundary...
Node 6, discovering the vertices that will be sent across graph boundary...
Node 5, discovering the vertices that will be sent across graph boundary...
Node 7, discovering the vertices that will be sent across graph boundary...
Node 0, discovering the vertices that will be sent across graph boundary...
Node 1, discovering the vertices that will be sent across graph boundary...
Node 3, discovering the vertices that will be sent across graph boundary...
Node 2, discovering the vertices that will be sent across graph boundary...
The number of mirror vertices: 0
Node 0, discovering the vertices that will be received across the graph boundary.
Node 1, discovering the vertices that will be received across the graph boundary.
Node 2, discovering the vertices that will be received across the graph boundary.
Node 3, discovering the vertices that will be received across the graph boundary.
****** Start Scheduling the Tasks in a Pipelined Fashion ******
Node 4, discovering the vertices that will be received across the graph boundary.
****** Start Scheduling the Tasks in a Pipelined Fashion ******
Node 5, discovering the vertices that will be received across the graph boundary.
****** Start Scheduling the Tasks in a Pipelined Fashion ******
Node 6, discovering the vertices that will be received across the graph boundary.
****** Start Scheduling the Tasks in a Pipelined Fashion ******
Node 7, discovering the vertices that will be received across the graph boundary.
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
*** Node 0, starting task scheduling...
*** Node 1, starting task scheduling...
*** Node 2, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 3, starting task scheduling...
The learning rate specified by the user: 0.001000000



The learning rate specified by the user: 0.001000000
*** Node 4, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 5, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 6, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 7, starting task scheduling...
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
	Epoch 1:	Loss 1.6094	TrainAcc 0.2400	ValidAcc 0.4120	TestAcc 0.3840	BestValid 0.4120
	Epoch 10:	Loss 1.6094	TrainAcc 0.2000	ValidAcc 0.1860	TestAcc 0.1750	BestValid 0.4120
	Epoch 20:	Loss 1.6094	TrainAcc 0.2000	ValidAcc 0.1860	TestAcc 0.1750	BestValid 0.4120
	Epoch 30:	Loss 1.6094	TrainAcc 0.2000	ValidAcc 0.1860	TestAcc 0.1750	BestValid 0.4120
	Epoch 40:	Loss 1.6093	TrainAcc 0.2000	ValidAcc 0.1860	TestAcc 0.1750	BestValid 0.4120
	Epoch 50:	Loss 1.4993	TrainAcc 0.2000	ValidAcc 0.1860	TestAcc 0.1750	BestValid 0.4120
	Epoch 60:	Loss 1.4816	TrainAcc 0.2000	ValidAcc 0.1860	TestAcc 0.1750	BestValid 0.4120
	Epoch 70:	Loss 1.5450	TrainAcc 0.2000	ValidAcc 0.1860	TestAcc 0.1750	BestValid 0.4120
	Epoch 80:	Loss 1.5044	TrainAcc 0.2000	ValidAcc 0.1860	TestAcc 0.1750	BestValid 0.4120
	Epoch 90:	Loss 1.5033	TrainAcc 0.2000	ValidAcc 0.1860	TestAcc 0.1750	BestValid 0.4120
	Epoch 100:	Loss 1.5139	TrainAcc 0.2000	ValidAcc 0.1860	TestAcc 0.1750	BestValid 0.4120
	Epoch 110:	Loss 1.4778	TrainAcc 0.2000	ValidAcc 0.1860	TestAcc 0.1750	BestValid 0.4120
	Epoch 120:	Loss 1.4406	TrainAcc 0.2000	ValidAcc 0.1860	TestAcc 0.1750	BestValid 0.4120
	Epoch 130:	Loss 1.4578	TrainAcc 0.2000	ValidAcc 0.1860	TestAcc 0.1750	BestValid 0.4120
	Epoch 140:	Loss 1.5878	TrainAcc 0.2000	ValidAcc 0.1860	TestAcc 0.1750	BestValid 0.4120
	Epoch 150:	Loss 1.4630	TrainAcc 0.2000	ValidAcc 0.1860	TestAcc 0.1750	BestValid 0.4120
	Epoch 160:	Loss 1.4652	TrainAcc 0.2000	ValidAcc 0.1860	TestAcc 0.1750	BestValid 0.4120
	Epoch 170:	Loss 1.4496	TrainAcc 0.2000	ValidAcc 0.1860	TestAcc 0.1750	BestValid 0.4120
	Epoch 180:	Loss 1.4190	TrainAcc 0.2000	ValidAcc 0.1860	TestAcc 0.1750	BestValid 0.4120
	Epoch 190:	Loss 1.4483	TrainAcc 0.2000	ValidAcc 0.1860	TestAcc 0.1750	BestValid 0.4120
	Epoch 200:	Loss 1.4360	TrainAcc 0.2000	ValidAcc 0.1860	TestAcc 0.1750	BestValid 0.4120
	Epoch 210:	Loss 1.4536	TrainAcc 0.2000	ValidAcc 0.1860	TestAcc 0.1750	BestValid 0.4120
	Epoch 220:	Loss 1.4334	TrainAcc 0.2000	ValidAcc 0.1860	TestAcc 0.1750	BestValid 0.4120
	Epoch 230:	Loss 1.4289	TrainAcc 0.2000	ValidAcc 0.1860	TestAcc 0.1750	BestValid 0.4120
	Epoch 240:	Loss 1.3964	TrainAcc 0.2000	ValidAcc 0.1860	TestAcc 0.1750	BestValid 0.4120
	Epoch 250:	Loss 1.3850	TrainAcc 0.2000	ValidAcc 0.1860	TestAcc 0.1750	BestValid 0.4120
	Epoch 260:	Loss 1.4123	TrainAcc 0.2000	ValidAcc 0.1860	TestAcc 0.1750	BestValid 0.4120
	Epoch 270:	Loss 1.4283	TrainAcc 0.2000	ValidAcc 0.1860	TestAcc 0.1750	BestValid 0.4120
	Epoch 280:	Loss 1.4389	TrainAcc 0.2000	ValidAcc 0.1860	TestAcc 0.1750	BestValid 0.4120
	Epoch 290:	Loss 1.4171	TrainAcc 0.2000	ValidAcc 0.1860	TestAcc 0.1750	BestValid 0.4120
	Epoch 300:	Loss 1.4081	TrainAcc 0.2000	ValidAcc 0.1860	TestAcc 0.1750	BestValid 0.4120
****** Epoch Time (Excluding Evaluation Cost): 0.066 s ******
****** Breakdown Analysis ******
Cluster-Wide Average, Bubble-Pipeline: 10.948 ms (Max: 12.333, Min: 9.035, Sum: 87.583)
Cluster-Wide Average, Compute: 35.458 ms (Max: 50.421, Min: 31.979, Sum: 283.662)
Cluster-Wide Average, Communication-Layer: 5.432 ms (Max: 6.005, Min: 4.244, Sum: 43.458)
Cluster-Wide Average, Bubble-Imbalance: 13.352 ms (Max: 16.321, Min: 1.439, Sum: 106.813)
Cluster-Wide Average, Communication-Graph: 0.531 ms (Max: 0.596, Min: 0.463, Sum: 4.245)
Cluster-Wide Average, Optimization: 0.120 ms (Max: 0.287, Min: 0.091, Sum: 0.962)
Cluster-Wide Average, Others: 0.652 ms (Max: 1.579, Min: 0.447, Sum: 5.218)
****** Breakdown Sum: 66.492 ms ******
Cluster-Wide Average, GPU Memory Consumption: 2.433 GB (Max: 3.665, Min: 2.016, Sum: 19.466)
Cluster-Wide Average, Graph-Level Communication Throughput: -nan Gbps (Max: -nan, Min: -nan, Sum: -nan)
Cluster-Wide Average, Layer-Level Communication Throughput: 34.930 Gbps (Max: 39.647, Min: 25.675, Sum: 279.442)
Layer-level communication (cluster-wide, per-epoch): 0.180 GB
Graph-level communication (cluster-wide, per-epoch): 0.000 GB
Weight-sync communication (cluster-wide, per-epoch): 0.000 GB
Total communication (cluster-wide, per-epoch): 0.180 GB
****** Accuracy Results ******
Highest valid_acc: 0.4120
Target test_acc: 0.3840
Epoch to reach the target acc: 0
[MPI Rank 0] Success 
[MPI Rank 4] Success 
[MPI Rank 5] Success 
[MPI Rank 1] Success 
[MPI Rank 6] Success 
[MPI Rank 7] Success 
[MPI Rank 2] Success 
[MPI Rank 3] Success 
