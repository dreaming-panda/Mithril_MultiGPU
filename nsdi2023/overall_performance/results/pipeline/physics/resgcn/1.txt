Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
DONE MPI INIT
Initialized node 5 on machine gnerv8
DONE MPI INIT
Initialized node 4 on machine gnerv8
DONE MPI INIT
Initialized node 7 on machine gnerv8
DONE MPI INIT
Initialized node 6 on machine gnerv8
DONE MPI INITDONE MPI INIT
Initialized node 2 on machine gnerv7
DONE MPI INIT
Initialized node 3 on machine gnerv7
DONE MPI INIT

Initialized node 1 on machine gnerv7
Initialized node 0 on machine gnerv7
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
        It takes 0.010 seconds.
Building the CSC structure...
        It takes 0.011 seconds.
Building the CSC structure...
        It takes 0.011 seconds.
Building the CSC structure...
        It takes 0.011 seconds.
Building the CSC structure...
        It takes 0.011 seconds.
Building the CSC structure...
        It takes 0.014 seconds.
Building the CSC structure...
        It takes 0.016 seconds.
Building the CSC structure...
        It takes 0.016 seconds.
Building the CSC structure...
        It takes 0.011 seconds.
        It takes 0.011 seconds.
        It takes 0.012 seconds.
        It takes 0.013 seconds.
Building the Feature Vector...
Building the Feature Vector...
        It takes 0.012 seconds.
Building the Feature Vector...
        It takes 0.019 seconds.
        It takes 0.018 seconds.
        It takes 0.016 seconds.
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
        It takes 0.487 seconds.
Building the Label Vector...
        It takes 0.002 seconds.
        It takes 0.508 seconds.
Building the Label Vector...
        It takes 0.003 seconds.
        It takes 0.507 seconds.
Building the Label Vector...
        It takes 0.512 seconds.
Building the Label Vector...
        It takes 0.003 seconds.
        It takes 0.003 seconds.
        It takes 0.608 seconds.
Building the Label Vector...
        It takes 0.004 seconds.
        It takes 0.612 seconds.
Building the Label Vector...
The graph dataset locates at /shared_hdd_storage/jingjichen/gnn_datasets/pipeline_parallel_datasets/physics/32_parts
The number of GCNII layers: 32
The number of hidden units: 100
The number of training epoches: 300
Learning rate: 0.001000
The partition strategy: model
The dropout rate: 0.500
The checkpointed weight file: /tmp/saved_weights
The random seed: 1
Number of classes: 5
Number of feature dimensions: 8415
Number of vertices: 34493
Number of GPUs: 8
        It takes 0.003 seconds.
        It takes 0.615 seconds.
Building the Label Vector...
        It takes 0.615 seconds.
Building the Label Vector...
        It takes 0.003 seconds.
        It takes 0.007 seconds.
GPU 0, layer [0, 4)
GPU 1, layer [4, 8)
GPU 2, layer [8, 12)
GPU 3, layer [12, 16)
GPU 4, layer [16, 20)
GPU 5, layer [20, 24)
GPU 6, layer [24, 28)
GPU 7, layer [28, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
34493, 530417, 530417
Number of vertices per chunk: 1078
csr in-out ready !Start Cost Model Initialization...
GPU 0, layer [0, 4)
GPU 1, layer [4, 8)
GPU 2, layer [8, 12)
GPU 3, layer [12, 16)
GPU 4, layer [16, 20)
GPU 5, layer [20, 24)
GPU 6, layer [24, 28)
GPU 7, layer [28, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
34493, 530417, 530417
Number of vertices per chunk: 1078
GPU 0, layer [0, 4)
GPU 1, layer [4, 8)
GPU 2, layer [8, 12)
GPU 3, layer [12, 16)
GPU 4, layer [16, 20)
GPU 5, layer [20, 24)
GPU 6, layer [24, 28)
GPU 7, layer [28, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
csr in-out ready !Start Cost Model Initialization...
34493, 530417, 530417
GPU 0, layer [0, 4)
GPU 1, layer [4, 8)
GPU 2, layer [8, 12)
GPU 3, layer [12, 16)
GPU 4, layer [16, 20)
GPU 5, layer [20, 24)
GPU 6, layer [24, 28)
GPU 7, layer [28, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
Number of vertices per chunk: 1078
34493, 530417, 530417
Number of vertices per chunk: 1078
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
GPU 0, layer [0, 4)
GPU 1, layer [4, 8)
GPU 2, layer [8, 12)
GPU 3, layer [12, 16)
GPU 4, layer [16, 20)
GPU 5, layer [20, 24)
GPU 6, layer [24, 28)
GPU 7, layer [28, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
34493, 530417, 530417
Number of vertices per chunk: 1078
csr in-out ready !Start Cost Model Initialization...
train nodes 100, valid nodes 500, test nodes 1000
GPU 0, layer [0, 4)
GPU 1, layer [4, 8)
GPU 2, layer [8, 12)
GPU 3, layer [12, 16)
GPU 4, layer [16, 20)
GPU 5, layer [20, 24)
GPU 6, layer [24, 28)
GPU 7, layer [28, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
Chunks (number of global chunks: 32): 0-[0, 1025) 1-[1025, 2154) 2-[2154, 3262) 3-[3262, 4284) 4-[4284, 5334) 5-[5334, 6511) 6-[6511, 7597) 7-[7597, 8680) 8-[8680, 9764) ... 31-[33337, 34493)
34493, 530417, 530417
Number of vertices per chunk: 1078
GPU 0, layer [0, 4)
GPU 1, layer [4, 8)
GPU 2, layer [8, 12)
GPU 3, layer [12, 16)
GPU 4, layer [16, 20)
GPU 5, layer [20, 24)
GPU 6, layer [24, 28)
GPU 7, layer [28, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
34493, 530417, 530417
Number of vertices per chunk: 1078
csr in-out ready !Start Cost Model Initialization...
***** Start profiling the layer-level communication performance *******
GPU 0, layer [0, 4)
GPU 1, layer [4, 8)
GPU 2, layer [8, 12)
GPU 3, layer [12, 16)
GPU 4, layer [16, 20)
GPU 5, layer [20, 24)
GPU 6, layer [24, 28)
GPU 7, layer [28, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
34493, 530417, 530417
Number of vertices per chunk: 1078
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
The layer-level communication performance: 49.305 Gbps (per GPU), 394.439 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 49.114 Gbps (per GPU), 392.911 Gbps (aggregated)
The layer-level communication performance: 49.105 Gbps (per GPU), 392.838 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 48.935 Gbps (per GPU), 391.483 Gbps (aggregated)
The layer-level communication performance: 48.915 Gbps (per GPU), 391.321 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 48.765 Gbps (per GPU), 390.118 Gbps (aggregated)
The layer-level communication performance: 48.734 Gbps (per GPU), 389.870 Gbps (aggregated)
The layer-level communication performance: 48.713 Gbps (per GPU), 389.704 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The graph-level communication performance (supernode = 2): 158.557 Gbps (per GPU), 1268.455 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.554 Gbps (per GPU), 1268.431 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.461 Gbps (per GPU), 1267.688 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.548 Gbps (per GPU), 1268.383 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.485 Gbps (per GPU), 1267.880 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.551 Gbps (per GPU), 1268.411 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.488 Gbps (per GPU), 1267.904 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.300 Gbps (per GPU), 1266.396 Gbps (aggregated, cluster-wide)
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
The graph-level communication performance (supernode = 4): 100.964 Gbps (per GPU), 807.710 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 100.963 Gbps (per GPU), 807.704 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 100.963 Gbps (per GPU), 807.704 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 100.957 Gbps (per GPU), 807.658 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 100.965 Gbps (per GPU), 807.717 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 100.938 Gbps (per GPU), 807.503 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 100.965 Gbps (per GPU), 807.717 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 100.742 Gbps (per GPU), 805.938 Gbps (aggregated, cluster-wide)
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
The graph-level communication performance (supernode = 8): 39.224 Gbps (per GPU), 313.790 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 39.224 Gbps (per GPU), 313.795 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 39.225 Gbps (per GPU), 313.796 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 39.225 Gbps (per GPU), 313.798 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 39.224 Gbps (per GPU), 313.790 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 39.226 Gbps (per GPU), 313.807 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 39.217 Gbps (per GPU), 313.737 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 39.227 Gbps (per GPU), 313.817 Gbps (aggregated, cluster-wide)
 LType   LT0   LT1   LT2 Ratio  VSum  ESum
 chk_0  0.76ms  0.74ms  1.33ms  1.79  1.02K  0.02M
 chk_1  0.77ms  0.74ms  1.33ms  1.80  1.13K  0.01M
 chk_2  0.78ms  0.74ms  1.34ms  1.83  1.11K  0.01M
 chk_3  0.74ms  0.72ms  1.30ms  1.80  1.02K  0.02M
 chk_4  0.75ms  1.34ms  1.32ms  1.78  1.05K  0.02M
 chk_5  0.80ms  0.74ms  1.32ms  1.80  1.18K  0.01M
 chk_6  0.78ms  0.74ms  1.32ms  1.79  1.09K  0.02M
 chk_7  0.78ms  0.74ms  1.32ms  1.79  1.08K  0.02M
 chk_8  0.78ms  0.74ms  1.40ms  1.90  1.08K  0.01M
 chk_9  0.77ms  0.73ms  1.32ms  1.80  1.06K  0.02M
chk_10  0.77ms  0.73ms  1.32ms  1.80  1.04K  0.02M
chk_11  0.78ms  0.74ms  1.33ms  1.80  1.11K  0.01M
chk_12  0.78ms  0.74ms  1.37ms  1.86  1.11K  0.01M
chk_13  0.74ms  0.72ms  1.40ms  1.95  1.01K  0.02M
chk_14  0.78ms  0.73ms  1.46ms  1.98  1.09K  0.01M
chk_15  0.76ms  0.73ms  1.40ms  1.90  1.03K  0.02M
chk_16  0.72ms  0.72ms  1.33ms  1.86  0.98K  0.02M
chk_17  0.78ms  0.73ms  1.40ms  1.91  1.09K  0.01M
chk_18  0.76ms  0.74ms  1.36ms  1.85  1.04K  0.02M
chk_19  0.78ms  0.74ms  1.36ms  1.84  1.12K  0.01M
chk_20  0.78ms  0.74ms  1.37ms  1.86  1.13K  0.01M
chk_21  0.76ms  0.73ms  1.36ms  1.85  1.05K  0.02M
chk_22  0.78ms  0.74ms  1.37ms  1.84  1.11K  0.01M
chk_23  0.78ms  0.74ms  1.37ms  1.86  1.10K  0.01M
chk_24  0.74ms  0.72ms  1.33ms  1.85  1.02K  0.02M
chk_25  0.74ms  0.72ms  1.35ms  1.88  1.01K  0.02M
chk_26  0.78ms  0.74ms  1.41ms  1.91  1.12K  0.01M
chk_27  0.77ms  0.73ms  1.34ms  1.83  1.08K  0.02M
chk_28  0.77ms  0.74ms  1.40ms  1.90  1.07K  0.02M
chk_29  0.78ms  0.74ms  1.37ms  1.86  1.11K  0.01M
chk_30  0.77ms  0.73ms  1.37ms  1.87  1.10K  0.01M
chk_31  0.79ms  0.74ms  1.37ms  1.84  1.16K  0.01M
   Avg  0.77  0.75  1.36
   Max  0.80  1.34  1.46
   Min  0.72  0.72  1.30
 Ratio  1.10  1.87  1.12
   Var  0.00  0.01  0.00
Profiling takes 1.150 s
*** Node 0, starting model training...
Num Stages: 8 / 8
Node 0, Pipeline Input Tensor: NULL
Node 0, Pipeline Output Tensor: OPERATOR_ADD
*** Node 0 owns the model-level partition [0, 48)
*** Node 0, constructing the helper classes...
*** Node 2, starting model training...
Num Stages: 8 / 8
Node 2, Pipeline Input Tensor: OPERATOR_ADD
Node 2, Pipeline Output Tensor: OPERATOR_ADD
*** Node 2 owns the model-level partition [100, 152)
*** Node 2, constructing the helper classes...
Node 2, Local Vertex Begin: 0, Num Local Vertices: 34493
Node 0, Local Vertex Begin: 0, Num Local Vertices: 34493
*** Node 4, starting model training...
Num Stages: 8 / 8
Node 4, Pipeline Input Tensor: OPERATOR_ADD
Node 4, Pipeline Output Tensor: OPERATOR_ADD
*** Node 4 owns the model-level partition [204, 256)
*** Node 4, constructing the helper classes...
Node 4, Local Vertex Begin: 0, Num Local Vertices: 34493
*** Node 3, starting model training...
Num Stages: 8 / 8
Node 3, Pipeline Input Tensor: OPERATOR_ADD
Node 3, Pipeline Output Tensor: OPERATOR_ADD
*** Node 3 owns the model-level partition [152, 204)
*** Node 3, constructing the helper classes...
Node 3, Local Vertex Begin: 0, Num Local Vertices: 34493
*** Node 5, starting model training...
Num Stages: 8 / 8
Node 5, Pipeline Input Tensor: OPERATOR_ADD
Node 5, Pipeline Output Tensor: OPERATOR_ADD
*** Node 5 owns the model-level partition [256, 308)
*** Node 5, constructing the helper classes...
*** Node 6, starting model training...
Num Stages: 8 / 8
Node 6, Pipeline Input Tensor: OPERATOR_ADD
Node 6, Pipeline Output Tensor: OPERATOR_ADD
*** Node 6 owns the model-level partition [308, 360)
*** Node 6, constructing the helper classes...
Node 6, Local Vertex Begin: 0, Num Local Vertices: 34493
*** Node 7, starting model training...
Num Stages: 8 / 8
Node 7, Pipeline Input Tensor: OPERATOR_ADD
Node 7, Pipeline Output Tensor: NULL
*** Node 7 owns the model-level partition [360, 421)
*** Node 7, constructing the helper classes...
Node 7, Local Vertex Begin: 0, Num Local Vertices: 34493
Node 5, Local Vertex Begin: 0, Num Local Vertices: 34493
*** Node 1, starting model training...
Num Stages: 8 / 8
Node 1, Pipeline Input Tensor: OPERATOR_ADD
Node 1, Pipeline Output Tensor: OPERATOR_ADD
*** Node 1 owns the model-level partition [48, 100)
*** Node 1, constructing the helper classes...
Node 1, Local Vertex Begin: 0, Num Local Vertices: 34493
*** Node 7, setting up some other necessary information...
*** Node 2, setting up some other necessary information...
*** Node 6, setting up some other necessary information...
*** Node 4, setting up some other necessary information...
*** Node 5, setting up some other necessary information...
*** Node 1, setting up some other necessary information...
*** Node 3, setting up some other necessary information...
*** Node 0, setting up some other necessary information...
+++++++++ Node 0 initializing the weights for op[0, 48)...
+++++++++ Node 1 initializing the weights for op[48, 100)...
+++++++++ Node 2 initializing the weights for op[100, 152)...
+++++++++ Node 5 initializing the weights for op[256, 308)...
+++++++++ Node 3 initializing the weights for op[152, 204)...
+++++++++ Node 4 initializing the weights for op[204, 256)...
+++++++++ Node 6 initializing the weights for op[308, 360)...
+++++++++ Node 7 initializing the weights for op[360, 421)...
Node 1, discovering the vertices that will be sent across graph boundary...
Node 3, discovering the vertices that will be sent across graph boundary...
Node 0, discovering the vertices that will be sent across graph boundary...
Node 2, discovering the vertices that will be sent across graph boundary...
Node 7, discovering the vertices that will be sent across graph boundary...
Node 4, discovering the vertices that will be sent across graph boundary...
Node 6, discovering the vertices that will be sent across graph boundary...
The number of mirror vertices: 0
Node 0, discovering the vertices that will be received across the graph boundary.
Node 1, discovering the vertices that will be received across the graph boundary.
Node 2, discovering the vertices that will be received across the graph boundary.
****** Start Scheduling the Tasks in a Pipelined Fashion ******
Node 5, discovering the vertices that will be sent across graph boundary...
Node 3, discovering the vertices that will be received across the graph boundary.
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
Node 4, discovering the vertices that will be received across the graph boundary.
Node 5, discovering the vertices that will be received across the graph boundary.
Node 6, discovering the vertices that will be received across the graph boundary.
****** Start Scheduling the Tasks in a Pipelined Fashion ******
Node 7, discovering the vertices that will be received across the graph boundary.
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
*** Node 0, starting task scheduling...



*** Node 4, starting task scheduling...
*** Node 1, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 5, starting task scheduling...
*** Node 2, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 6, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 3, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 7, starting task scheduling...
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
	Epoch 1:	Loss 2.1163	TrainAcc 0.2900	ValidAcc 0.1680	TestAcc 0.1620	BestValid 0.1680
	Epoch 10:	Loss 1.3022	TrainAcc 0.8400	ValidAcc 0.8440	TestAcc 0.8350	BestValid 0.8440
	Epoch 20:	Loss 0.4308	TrainAcc 0.9400	ValidAcc 0.9300	TestAcc 0.9180	BestValid 0.9300
	Epoch 30:	Loss 0.0974	TrainAcc 1.0000	ValidAcc 0.9300	TestAcc 0.9230	BestValid 0.9300
	Epoch 40:	Loss 0.0391	TrainAcc 1.0000	ValidAcc 0.9140	TestAcc 0.9130	BestValid 0.9300
	Epoch 50:	Loss 0.0321	TrainAcc 1.0000	ValidAcc 0.9260	TestAcc 0.9190	BestValid 0.9300
	Epoch 60:	Loss 0.0157	TrainAcc 1.0000	ValidAcc 0.9260	TestAcc 0.9200	BestValid 0.9300
	Epoch 70:	Loss 0.0183	TrainAcc 1.0000	ValidAcc 0.9240	TestAcc 0.9120	BestValid 0.9300
	Epoch 80:	Loss 0.0173	TrainAcc 1.0000	ValidAcc 0.9180	TestAcc 0.9100	BestValid 0.9300
	Epoch 90:	Loss 0.0098	TrainAcc 1.0000	ValidAcc 0.9100	TestAcc 0.9080	BestValid 0.9300
	Epoch 100:	Loss 0.0116	TrainAcc 1.0000	ValidAcc 0.9100	TestAcc 0.9080	BestValid 0.9300
	Epoch 110:	Loss 0.0087	TrainAcc 1.0000	ValidAcc 0.9160	TestAcc 0.9130	BestValid 0.9300
	Epoch 120:	Loss 0.0102	TrainAcc 1.0000	ValidAcc 0.9200	TestAcc 0.9110	BestValid 0.9300
	Epoch 130:	Loss 0.0073	TrainAcc 1.0000	ValidAcc 0.9200	TestAcc 0.9140	BestValid 0.9300
	Epoch 140:	Loss 0.0048	TrainAcc 1.0000	ValidAcc 0.9180	TestAcc 0.9160	BestValid 0.9300
	Epoch 150:	Loss 0.0068	TrainAcc 1.0000	ValidAcc 0.9180	TestAcc 0.9160	BestValid 0.9300
	Epoch 160:	Loss 0.0068	TrainAcc 1.0000	ValidAcc 0.9180	TestAcc 0.9140	BestValid 0.9300
	Epoch 170:	Loss 0.0056	TrainAcc 1.0000	ValidAcc 0.9180	TestAcc 0.9140	BestValid 0.9300
	Epoch 180:	Loss 0.0065	TrainAcc 1.0000	ValidAcc 0.9180	TestAcc 0.9130	BestValid 0.9300
	Epoch 190:	Loss 0.0038	TrainAcc 1.0000	ValidAcc 0.9200	TestAcc 0.9140	BestValid 0.9300
	Epoch 200:	Loss 0.0058	TrainAcc 1.0000	ValidAcc 0.9180	TestAcc 0.9120	BestValid 0.9300
	Epoch 210:	Loss 0.0043	TrainAcc 1.0000	ValidAcc 0.9220	TestAcc 0.9140	BestValid 0.9300
	Epoch 220:	Loss 0.0038	TrainAcc 1.0000	ValidAcc 0.9200	TestAcc 0.9150	BestValid 0.9300
	Epoch 230:	Loss 0.0040	TrainAcc 1.0000	ValidAcc 0.9200	TestAcc 0.9130	BestValid 0.9300
	Epoch 240:	Loss 0.0035	TrainAcc 1.0000	ValidAcc 0.9200	TestAcc 0.9110	BestValid 0.9300
	Epoch 250:	Loss 0.0059	TrainAcc 1.0000	ValidAcc 0.9140	TestAcc 0.9100	BestValid 0.9300
	Epoch 260:	Loss 0.0030	TrainAcc 1.0000	ValidAcc 0.9180	TestAcc 0.9060	BestValid 0.9300
	Epoch 270:	Loss 0.0033	TrainAcc 1.0000	ValidAcc 0.9140	TestAcc 0.9060	BestValid 0.9300
	Epoch 280:	Loss 0.0041	TrainAcc 1.0000	ValidAcc 0.9200	TestAcc 0.9090	BestValid 0.9300
	Epoch 290:	Loss 0.0030	TrainAcc 1.0000	ValidAcc 0.9160	TestAcc 0.9090	BestValid 0.9300
	Epoch 300:	Loss 0.0050	TrainAcc 1.0000	ValidAcc 0.9200	TestAcc 0.9110	BestValid 0.9300
****** Epoch Time (Excluding Evaluation Cost): 0.137 s ******
****** Breakdown Analysis ******
Cluster-Wide Average, Bubble-Pipeline: 24.083 ms (Max: 24.740, Min: 22.545, Sum: 192.667)
Cluster-Wide Average, Compute: 95.364 ms (Max: 106.020, Min: 90.863, Sum: 762.914)
Cluster-Wide Average, Communication-Layer: 5.580 ms (Max: 6.247, Min: 4.288, Sum: 44.641)
Cluster-Wide Average, Bubble-Imbalance: 10.224 ms (Max: 14.570, Min: 1.584, Sum: 81.792)
Cluster-Wide Average, Communication-Graph: 0.569 ms (Max: 0.633, Min: 0.517, Sum: 4.550)
Cluster-Wide Average, Optimization: 0.292 ms (Max: 0.452, Min: 0.262, Sum: 2.337)
Cluster-Wide Average, Others: 1.060 ms (Max: 1.826, Min: 0.834, Sum: 8.478)
****** Breakdown Sum: 137.172 ms ******
Cluster-Wide Average, GPU Memory Consumption: 2.728 GB (Max: 4.122, Min: 2.475, Sum: 21.825)
Cluster-Wide Average, Graph-Level Communication Throughput: -nan Gbps (Max: -nan, Min: -nan, Sum: -nan)
Cluster-Wide Average, Layer-Level Communication Throughput: 33.998 Gbps (Max: 37.726, Min: 25.256, Sum: 271.981)
Layer-level communication (cluster-wide, per-epoch): 0.180 GB
Graph-level communication (cluster-wide, per-epoch): 0.000 GB
Weight-sync communication (cluster-wide, per-epoch): 0.000 GB
Total communication (cluster-wide, per-epoch): 0.180 GB
****** Accuracy Results ******
Highest valid_acc: 0.9300
Target test_acc: 0.9180
Epoch to reach the target acc: 19
[MPI Rank 0] Success 
[MPI Rank 4] Success 
[MPI Rank 1] Success 
[MPI Rank 5] Success 
[MPI Rank 2] Success 
[MPI Rank 6] Success 
[MPI Rank 3] Success 
[MPI Rank 7] Success 
