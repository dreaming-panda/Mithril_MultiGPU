Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
DONE MPI INIT
Initialized node 0 on machine gnerv7
DONE MPI INIT
Initialized node 3 on machine gnerv7
DONE MPI INIT
Initialized node 1 on machine gnerv7
DONE MPI INIT
Initialized node 2 on machine gnerv7
DONE MPI INIT
DONE MPI INIT
Initialized node 6 on machine gnerv8
DONE MPI INIT
Initialized node 7 on machine gnerv8
Initialized node 4 on machine gnerv8
DONE MPI INIT
Initialized node 5 on machine gnerv8
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
        It takes 0.011 seconds.
Building the CSC structure...
        It takes 0.011 seconds.
Building the CSC structure...
        It takes 0.012 seconds.
Building the CSC structure...
        It takes 0.012 seconds.
Building the CSC structure...
        It takes 0.012 seconds.
Building the CSC structure...
        It takes 0.011 seconds.
Building the CSC structure...
        It takes 0.014 seconds.
Building the CSC structure...
        It takes 0.017 seconds.
Building the CSC structure...
        It takes 0.012 seconds.
        It takes 0.012 seconds.
Building the Feature Vector...
        It takes 0.019 seconds.
Building the Feature Vector...
        It takes 0.019 seconds.
        It takes 0.019 seconds.
        It takes 0.019 seconds.
        It takes 0.014 seconds.
Building the Feature Vector...
        It takes 0.019 seconds.
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
        It takes 0.461 seconds.
        It takes 0.452 seconds.
Building the Label Vector...
Building the Label Vector...
        It takes 0.002 seconds.
        It takes 0.003 seconds.
        It takes 0.515 seconds.
Building the Label Vector...
        It takes 0.515 seconds.
Building the Label Vector...
        It takes 0.002 seconds.
        It takes 0.002 seconds.
        It takes 0.589 seconds.
Building the Label Vector...
        It takes 0.003 seconds.
        It takes 0.620 seconds.
        It takes 0.628 seconds.
Building the Label Vector...
Building the Label Vector...
        It takes 0.623 seconds.
        It takes 0.003 seconds.
The graph dataset locates at /shared_hdd_storage/jingjichen/gnn_datasets/pipeline_parallel_datasets/physics/32_parts
The number of GCNII layers: 32
The number of hidden units: 100
The number of training epoches: 300
Learning rate: 0.001000
The partition strategy: model
The dropout rate: 0.500
The checkpointed weight file: /tmp/saved_weights
The random seed: 2
Number of classes: 5
Number of feature dimensions: 8415
Number of vertices: 34493
Number of GPUs: 8
Building the Label Vector...
        It takes 0.003 seconds.
        It takes 0.007 seconds.
GPU 0, layer [0, 4)
GPU 1, layer [4, 8)
GPU 2, layer [8, 12)
GPU 3, layer [12, 16)
GPU 4, layer [16, 20)
GPU 5, layer [20, 24)
GPU 6, layer [24, 28)
GPU 7, layer [28, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
34493, 530417, 530417
Number of vertices per chunk: 1078
csr in-out ready !Start Cost Model Initialization...
GPU 0, layer [0, 4)
GPU 1, layer [4, 8)
GPU 2, layer [8, 12)
GPU 3, layer [12, 16)
GPU 4, layer [16, 20)
GPU 5, layer [20, 24)
GPU 6, layer [24, 28)
GPU 7, layer [28, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
34493, 530417, 530417
Number of vertices per chunk: 1078
csr in-out ready !Start Cost Model Initialization...
GPU 0, layer [0, 4)
GPU 1, layer [4, 8)
GPU 2, layer [8, 12)
GPU 3, layer [12, 16)
GPU 4, layer [16, 20)
GPU 5, layer [20, 24)
GPU 6, layer [24, 28)
GPU 7, layer [28, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
34493, 530417, 530417
Number of vertices per chunk: 1078
csr in-out ready !Start Cost Model Initialization...
GPU 0, layer [0, 4)
GPU 1, layer [4, 8)
GPU 2, layer [8, 12)
GPU 3, layer [12, 16)
GPU 4, layer [16, 20)
GPU 5, layer [20, 24)
GPU 6, layer [24, 28)
GPU 7, layer [28, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
34493, 530417, 530417
Number of vertices per chunk: 1078
csr in-out ready !Start Cost Model Initialization...
GPU 0, layer [0, 4)
GPU 1, layer [4, 8)
GPU 2, layer [8, 12)
GPU 3, layer [12, 16)
GPU 4, layer [16, 20)
GPU 5, layer [20, 24)
GPU 6, layer [24, 28)
GPU 7, layer [28, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
34493, 530417, 530417
Number of vertices per chunk: 1078
csr in-out ready !Start Cost Model Initialization...
GPU 0, layer [0, 4)
GPU 1, layer [4, 8)
GPU 2, layer [8, 12)
GPU 3, layer [12, 16)
GPU 4, layer [16, 20)
GPU 5, layer [20, 24)
GPU 6, layer [24, 28)
GPU 7, layer [28, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
34493, 530417, 530417
Number of vertices per chunk: 1078
csr in-out ready !Start Cost Model Initialization...
GPU 0, layer [0, 4)
GPU 1, layer [4, 8)
GPU 2, layer [8, 12)
GPU 3, layer [12, 16)
GPU 4, layer [16, 20)
GPU 5, layer [20, 24)
GPU 6, layer [24, 28)
GPU 7, layer [28, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
34493, 530417, 530417
Number of vertices per chunk: 1078
train nodes 100, valid nodes 500, test nodes 1000
GPU 0, layer [0, 4)
GPU 1, layer [4, 8)
GPU 2, layer [8, 12)
GPU 3, layer [12, 16)
GPU 4, layer [16, 20)
GPU 5, layer [20, 24)
GPU 6, layer [24, 28)
GPU 7, layer [28, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
Chunks (number of global chunks: 32): 0-[0, 1025) 1-[1025, 2154) 2-[2154, 3262) 3-[3262, 4284) 4-[4284, 5334) 5-[5334, 6511) 6-[6511, 7597) 7-[7597, 8680) 8-[8680, 9764) ... 31-[33337, 34493)
34493, 530417, 530417
Number of vertices per chunk: 1078
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
***** Start profiling the layer-level communication performance *******
The layer-level communication performance: 61.004 Gbps (per GPU), 488.029 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 60.711 Gbps (per GPU), 485.691 Gbps (aggregated)
The layer-level communication performance: 60.711 Gbps (per GPU), 485.686 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 60.444 Gbps (per GPU), 483.549 Gbps (aggregated)
The layer-level communication performance: 60.415 Gbps (per GPU), 483.320 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 60.183 Gbps (per GPU), 481.462 Gbps (aggregated)
The layer-level communication performance: 60.131 Gbps (per GPU), 481.045 Gbps (aggregated)
The layer-level communication performance: 60.102 Gbps (per GPU), 480.820 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The graph-level communication performance (supernode = 2): 159.192 Gbps (per GPU), 1273.535 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 159.201 Gbps (per GPU), 1273.606 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 159.189 Gbps (per GPU), 1273.510 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 159.210 Gbps (per GPU), 1273.679 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 159.204 Gbps (per GPU), 1273.630 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 159.201 Gbps (per GPU), 1273.610 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 159.186 Gbps (per GPU), 1273.485 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 159.204 Gbps (per GPU), 1273.630 Gbps (aggregated, cluster-wide)
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
The graph-level communication performance (supernode = 4): 103.983 Gbps (per GPU), 831.866 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 103.982 Gbps (per GPU), 831.852 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 103.982 Gbps (per GPU), 831.859 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 103.982 Gbps (per GPU), 831.859 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 103.982 Gbps (per GPU), 831.852 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 103.985 Gbps (per GPU), 831.880 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 103.982 Gbps (per GPU), 831.859 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 103.983 Gbps (per GPU), 831.865 Gbps (aggregated, cluster-wide)
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
The graph-level communication performance (supernode = 8): 37.941 Gbps (per GPU), 303.529 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 37.939 Gbps (per GPU), 303.511 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 37.940 Gbps (per GPU), 303.519 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 37.939 Gbps (per GPU), 303.516 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 37.942 Gbps (per GPU), 303.535 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 37.939 Gbps (per GPU), 303.509 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 37.941 Gbps (per GPU), 303.531 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 37.937 Gbps (per GPU), 303.493 Gbps (aggregated, cluster-wide)
 LType   LT0   LT1   LT2 Ratio  VSum  ESum
 chk_0  0.73ms  0.74ms  1.32ms  1.79  1.02K  0.02M
 chk_1  0.77ms  0.74ms  1.32ms  1.78  1.13K  0.01M
 chk_2  0.77ms  0.74ms  1.32ms  1.78  1.11K  0.01M
 chk_3  0.74ms  0.72ms  1.30ms  1.80  1.02K  0.02M
 chk_4  0.76ms  0.73ms  1.32ms  1.80  1.05K  0.02M
 chk_5  0.79ms  0.74ms  1.33ms  1.80  1.18K  0.01M
 chk_6  1.31ms  0.74ms  1.32ms  1.79  1.09K  0.02M
 chk_7  0.78ms  0.74ms  1.33ms  1.80  1.08K  0.02M
 chk_8  0.78ms  0.73ms  1.51ms  2.06  1.08K  0.01M
 chk_9  0.76ms  0.73ms  1.41ms  1.91  1.06K  0.02M
chk_10  0.76ms  0.73ms  1.36ms  1.85  1.04K  0.02M
chk_11  0.77ms  0.74ms  1.37ms  1.86  1.11K  0.01M
chk_12  0.78ms  0.73ms  1.37ms  1.86  1.11K  0.01M
chk_13  0.73ms  0.71ms  1.36ms  1.90  1.01K  0.02M
chk_14  0.77ms  0.73ms  1.37ms  1.87  1.09K  0.01M
chk_15  0.75ms  0.73ms  1.35ms  1.85  1.03K  0.02M
chk_16  0.72ms  0.71ms  1.33ms  1.85  0.98K  0.02M
chk_17  0.78ms  0.73ms  1.36ms  1.85  1.09K  0.01M
chk_18  0.76ms  0.73ms  1.35ms  1.85  1.04K  0.02M
chk_19  0.78ms  0.74ms  1.39ms  1.88  1.12K  0.01M
chk_20  0.78ms  0.74ms  1.36ms  1.85  1.13K  0.01M
chk_21  0.76ms  0.73ms  1.37ms  1.87  1.05K  0.02M
chk_22  0.78ms  0.74ms  1.36ms  1.84  1.11K  0.01M
chk_23  0.77ms  0.74ms  1.39ms  1.88  1.10K  0.01M
chk_24  0.74ms  0.72ms  1.33ms  1.85  1.02K  0.02M
chk_25  0.73ms  0.72ms  1.35ms  1.87  1.01K  0.02M
chk_26  0.78ms  0.74ms  1.37ms  1.85  1.12K  0.01M
chk_27  0.76ms  0.73ms  1.37ms  1.87  1.08K  0.02M
chk_28  0.77ms  0.74ms  1.35ms  1.84  1.07K  0.02M
chk_29  0.78ms  0.74ms  1.39ms  1.88  1.11K  0.01M
chk_30  0.77ms  0.73ms  1.36ms  1.85  1.10K  0.01M
chk_31  0.79ms  0.74ms  1.37ms  1.86  1.16K  0.01M
   Avg  0.78  0.73  1.36
   Max  1.31  0.74  1.51
   Min  0.72  0.71  1.30
 Ratio  1.82  1.04  1.16
   Var  0.01  0.00  0.00
Profiling takes 1.154 s
*** Node 0, starting model training...
Num Stages: 8 / 8
Node 0, Pipeline Input Tensor: NULL
Node 0, Pipeline Output Tensor: OPERATOR_ADD
*** Node 0 owns the model-level partition [0, 48)
*** Node 0, constructing the helper classes...
Node 0, Local Vertex Begin: 0, Num Local Vertices: 34493
*** Node 2, starting model training...
Num Stages: 8 / 8
Node 2, Pipeline Input Tensor: OPERATOR_ADD
Node 2, Pipeline Output Tensor: OPERATOR_ADD
*** Node 2 owns the model-level partition [100, 152)
*** Node 2, constructing the helper classes...
Node 2, Local Vertex Begin: 0, Num Local Vertices: 34493
*** Node 3, starting model training...
Num Stages: 8 / 8
Node 3, Pipeline Input Tensor: OPERATOR_ADD
Node 3, Pipeline Output Tensor: OPERATOR_ADD
*** Node 3 owns the model-level partition [152, 204)
*** Node 3, constructing the helper classes...
Node 3, Local Vertex Begin: 0, Num Local Vertices: 34493
*** Node 1, starting model training...
Num Stages: 8 / 8
Node 1, Pipeline Input Tensor: OPERATOR_ADD
Node 1, Pipeline Output Tensor: OPERATOR_ADD
*** Node 1 owns the model-level partition [48, 100)
*** Node 1, constructing the helper classes...
Node 1, Local Vertex Begin: 0, Num Local Vertices: 34493
*** Node 4, starting model training...
Num Stages: 8 / 8
Node 4, Pipeline Input Tensor: OPERATOR_ADD
Node 4, Pipeline Output Tensor: OPERATOR_ADD
*** Node 4 owns the model-level partition [204, 256)
*** Node 4, constructing the helper classes...
Node 4, Local Vertex Begin: 0, Num Local Vertices: 34493
*** Node 5, starting model training...
Num Stages: 8 / 8
Node 5, Pipeline Input Tensor: OPERATOR_ADD
Node 5, Pipeline Output Tensor: OPERATOR_ADD
*** Node 5 owns the model-level partition [256, 308)
*** Node 5, constructing the helper classes...
Node 5, Local Vertex Begin: 0, Num Local Vertices: 34493
*** Node 7, starting model training...
Num Stages: 8 / 8
Node 7, Pipeline Input Tensor: OPERATOR_ADD
Node 7, Pipeline Output Tensor: NULL
*** Node 7 owns the model-level partition [360, 421)
*** Node 7, constructing the helper classes...
Node 7, Local Vertex Begin: 0, Num Local Vertices: 34493
*** Node 6, starting model training...
Num Stages: 8 / 8
Node 6, Pipeline Input Tensor: OPERATOR_ADD
Node 6, Pipeline Output Tensor: OPERATOR_ADD
*** Node 6 owns the model-level partition [308, 360)
*** Node 6, constructing the helper classes...
Node 6, Local Vertex Begin: 0, Num Local Vertices: 34493
*** Node 3, setting up some other necessary information...
*** Node 2, setting up some other necessary information...
*** Node 4, setting up some other necessary information...
*** Node 7, setting up some other necessary information...
*** Node 1, setting up some other necessary information...
*** Node 0, setting up some other necessary information...
*** Node 5, setting up some other necessary information...
*** Node 6, setting up some other necessary information...
+++++++++ Node 1 initializing the weights for op[48, 100)...
+++++++++ Node 4 initializing the weights for op[204, 256)...
+++++++++ Node 5 initializing the weights for op[256, 308)...
+++++++++ Node 6 initializing the weights for op[308, 360)...
+++++++++ Node 3 initializing the weights for op[152, 204)...
+++++++++ Node 0 initializing the weights for op[0, 48)...
+++++++++ Node 2 initializing the weights for op[100, 152)...
+++++++++ Node 7 initializing the weights for op[360, 421)...
Node 1, discovering the vertices that will be sent across graph boundary...
Node 3, discovering the vertices that will be sent across graph boundary...
Node 2, discovering the vertices that will be sent across graph boundary...
Node 7, discovering the vertices that will be sent across graph boundary...
Node 5, discovering the vertices that will be sent across graph boundary...
Node 4, discovering the vertices that will be sent across graph boundary...
Node 6, discovering the vertices that will be sent across graph boundary...
Node 0, discovering the vertices that will be sent across graph boundary...
The number of mirror vertices: 0
Node 0, discovering the vertices that will be received across the graph boundary.
Node 1, discovering the vertices that will be received across the graph boundary.
Node 2, discovering the vertices that will be received across the graph boundary.
Node 3, discovering the vertices that will be received across the graph boundary.
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
Node 4, discovering the vertices that will be received across the graph boundary.
Node 5, discovering the vertices that will be received across the graph boundary.
****** Start Scheduling the Tasks in a Pipelined Fashion ******
Node 6, discovering the vertices that will be received across the graph boundary.
Node 7, discovering the vertices that will be received across the graph boundary.
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
*** Node 0, starting task scheduling...
*** Node 1, starting task scheduling...
*** Node 2, starting task scheduling...
*** Node 3, starting task scheduling...



The learning rate specified by the user: 0.001000000
*** Node 4, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 5, starting task scheduling...
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
*** Node 6, starting task scheduling...
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
*** Node 7, starting task scheduling...
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
	Epoch 1:	Loss 1.9938	TrainAcc 0.4400	ValidAcc 0.3640	TestAcc 0.3330	BestValid 0.3640
	Epoch 10:	Loss 0.9009	TrainAcc 0.8400	ValidAcc 0.8880	TestAcc 0.8860	BestValid 0.8880
	Epoch 20:	Loss 0.3163	TrainAcc 0.9600	ValidAcc 0.9340	TestAcc 0.9310	BestValid 0.9340
	Epoch 30:	Loss 0.1169	TrainAcc 0.9900	ValidAcc 0.9440	TestAcc 0.9350	BestValid 0.9440
	Epoch 40:	Loss 0.0580	TrainAcc 1.0000	ValidAcc 0.9400	TestAcc 0.9290	BestValid 0.9440
	Epoch 50:	Loss 0.0361	TrainAcc 1.0000	ValidAcc 0.9320	TestAcc 0.9160	BestValid 0.9440
	Epoch 60:	Loss 0.0189	TrainAcc 1.0000	ValidAcc 0.9340	TestAcc 0.9240	BestValid 0.9440
	Epoch 70:	Loss 0.0143	TrainAcc 1.0000	ValidAcc 0.9320	TestAcc 0.9250	BestValid 0.9440
	Epoch 80:	Loss 0.0131	TrainAcc 1.0000	ValidAcc 0.9320	TestAcc 0.9250	BestValid 0.9440
	Epoch 90:	Loss 0.0107	TrainAcc 1.0000	ValidAcc 0.9320	TestAcc 0.9250	BestValid 0.9440
	Epoch 100:	Loss 0.0097	TrainAcc 1.0000	ValidAcc 0.9340	TestAcc 0.9200	BestValid 0.9440
	Epoch 110:	Loss 0.0085	TrainAcc 1.0000	ValidAcc 0.9360	TestAcc 0.9210	BestValid 0.9440
	Epoch 120:	Loss 0.0121	TrainAcc 1.0000	ValidAcc 0.9380	TestAcc 0.9230	BestValid 0.9440
	Epoch 130:	Loss 0.0075	TrainAcc 1.0000	ValidAcc 0.9360	TestAcc 0.9250	BestValid 0.9440
	Epoch 140:	Loss 0.0062	TrainAcc 1.0000	ValidAcc 0.9360	TestAcc 0.9260	BestValid 0.9440
	Epoch 150:	Loss 0.0096	TrainAcc 1.0000	ValidAcc 0.9360	TestAcc 0.9240	BestValid 0.9440
	Epoch 160:	Loss 0.0077	TrainAcc 1.0000	ValidAcc 0.9360	TestAcc 0.9240	BestValid 0.9440
	Epoch 170:	Loss 0.0089	TrainAcc 1.0000	ValidAcc 0.9360	TestAcc 0.9240	BestValid 0.9440
	Epoch 180:	Loss 0.0052	TrainAcc 1.0000	ValidAcc 0.9360	TestAcc 0.9230	BestValid 0.9440
	Epoch 190:	Loss 0.0057	TrainAcc 1.0000	ValidAcc 0.9380	TestAcc 0.9230	BestValid 0.9440
	Epoch 200:	Loss 0.0063	TrainAcc 1.0000	ValidAcc 0.9380	TestAcc 0.9230	BestValid 0.9440
	Epoch 210:	Loss 0.0105	TrainAcc 1.0000	ValidAcc 0.9380	TestAcc 0.9240	BestValid 0.9440
	Epoch 220:	Loss 0.0054	TrainAcc 1.0000	ValidAcc 0.9360	TestAcc 0.9240	BestValid 0.9440
	Epoch 230:	Loss 0.0039	TrainAcc 1.0000	ValidAcc 0.9360	TestAcc 0.9240	BestValid 0.9440
	Epoch 240:	Loss 0.0037	TrainAcc 1.0000	ValidAcc 0.9360	TestAcc 0.9240	BestValid 0.9440
	Epoch 250:	Loss 0.0031	TrainAcc 1.0000	ValidAcc 0.9380	TestAcc 0.9250	BestValid 0.9440
	Epoch 260:	Loss 0.0029	TrainAcc 1.0000	ValidAcc 0.9380	TestAcc 0.9260	BestValid 0.9440
	Epoch 270:	Loss 0.0050	TrainAcc 1.0000	ValidAcc 0.9380	TestAcc 0.9250	BestValid 0.9440
	Epoch 280:	Loss 0.0036	TrainAcc 1.0000	ValidAcc 0.9380	TestAcc 0.9230	BestValid 0.9440
	Epoch 290:	Loss 0.0031	TrainAcc 1.0000	ValidAcc 0.9360	TestAcc 0.9190	BestValid 0.9440
	Epoch 300:	Loss 0.0020	TrainAcc 1.0000	ValidAcc 0.9360	TestAcc 0.9190	BestValid 0.9440
****** Epoch Time (Excluding Evaluation Cost): 0.144 s ******
****** Breakdown Analysis ******
Cluster-Wide Average, Bubble-Pipeline: 24.918 ms (Max: 26.031, Min: 22.731, Sum: 199.344)
Cluster-Wide Average, Compute: 97.449 ms (Max: 112.121, Min: 92.358, Sum: 779.593)
Cluster-Wide Average, Communication-Layer: 5.610 ms (Max: 6.151, Min: 4.372, Sum: 44.882)
Cluster-Wide Average, Bubble-Imbalance: 13.794 ms (Max: 18.482, Min: 1.643, Sum: 110.348)
Cluster-Wide Average, Communication-Graph: 0.601 ms (Max: 0.694, Min: 0.536, Sum: 4.807)
Cluster-Wide Average, Optimization: 0.297 ms (Max: 0.452, Min: 0.268, Sum: 2.379)
Cluster-Wide Average, Others: 1.106 ms (Max: 2.059, Min: 0.846, Sum: 8.844)
****** Breakdown Sum: 143.775 ms ******
Cluster-Wide Average, GPU Memory Consumption: 2.728 GB (Max: 4.120, Min: 2.475, Sum: 21.823)
Cluster-Wide Average, Graph-Level Communication Throughput: -nan Gbps (Max: -nan, Min: -nan, Sum: -nan)
Cluster-Wide Average, Layer-Level Communication Throughput: 33.811 Gbps (Max: 37.444, Min: 25.098, Sum: 270.491)
Layer-level communication (cluster-wide, per-epoch): 0.180 GB
Graph-level communication (cluster-wide, per-epoch): 0.000 GB
Weight-sync communication (cluster-wide, per-epoch): 0.000 GB
Total communication (cluster-wide, per-epoch): 0.180 GB
****** Accuracy Results ******
Highest valid_acc: 0.9440
Target test_acc: 0.9350
Epoch to reach the target acc: 29
[MPI Rank 0] Success 
[MPI Rank 1] Success 
[MPI Rank 2] Success 
[MPI Rank 3] Success 
[MPI Rank 4] Success 
[MPI Rank 5] Success 
[MPI Rank 6] Success 
[MPI Rank 7] Success 
