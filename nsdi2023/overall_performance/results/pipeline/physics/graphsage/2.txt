Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
DONE MPI INIT
DONE MPI INIT
Initialized node 3 on machine gnerv7
DONE MPI INIT
Initialized node 4 on machine gnerv8
Initialized node 0 on machine gnerv7
DONE MPI INIT
Initialized node 6 on machine gnerv8
DONE MPI INIT
Initialized node 1 on machine gnerv7
DONE MPI INIT
Initialized node 7 on machine gnerv8
DONE MPI INIT
Initialized node 2 on machine gnerv7
DONE MPI INIT
Initialized node 5 on machine gnerv8
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
        It takes 0.010 seconds.
Building the CSC structure...
        It takes 0.011 seconds.
Building the CSC structure...
        It takes 0.010 seconds.
Building the CSC structure...
        It takes 0.013 seconds.
Building the CSC structure...
        It takes 0.010 seconds.
Building the CSC structure...
        It takes 0.011 seconds.
Building the CSC structure...
        It takes 0.010 seconds.
        It takes 0.018 seconds.
Building the CSC structure...
        It takes 0.011 seconds.
        It takes 0.018 seconds.
Building the CSC structure...
        It takes 0.011 seconds.
        It takes 0.012 seconds.
Building the Feature Vector...
Building the Feature Vector...
        It takes 0.013 seconds.
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
        It takes 0.011 seconds.
        It takes 0.015 seconds.
        It takes 0.013 seconds.
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
        It takes 0.444 seconds.
Building the Label Vector...
        It takes 0.002 seconds.
        It takes 0.459 seconds.
Building the Label Vector...
        It takes 0.002 seconds.
        It takes 0.511 seconds.
Building the Label Vector...
        It takes 0.002 seconds.
        It takes 0.511 seconds.
Building the Label Vector...
        It takes 0.002 seconds.
        It takes 0.609 seconds.
Building the Label Vector...
        It takes 0.003 seconds.
The graph dataset locates at /shared_hdd_storage/jingjichen/gnn_datasets/pipeline_parallel_datasets/physics/32_parts
The number of GCNII layers: 32
The number of hidden units: 100
The number of training epoches: 300
Learning rate: 0.001000
The partition strategy: model
The dropout rate: 0.500
The checkpointed weight file: /tmp/saved_weights
The random seed: 2
Number of classes: 5
Number of feature dimensions: 8415
Number of vertices: 34493
Number of GPUs: 8
        It takes 0.604 seconds.
Building the Label Vector...
        It takes 0.003 seconds.
        It takes 0.616 seconds.
Building the Label Vector...
        It takes 0.618 seconds.
Building the Label Vector...
        It takes 0.003 seconds.
        It takes 0.007 seconds.
GPU 0, layer [0, 4)
GPU 1, layer [4, 8)
GPU 2, layer [8, 12)
GPU 3, layer [12, 16)
GPU 4, layer [16, 20)
GPU 5, layer [20, 24)
GPU 6, layer [24, 28)
GPU 7, layer [28, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
34493, 530417, 530417
Number of vertices per chunk: 1078
csr in-out ready !Start Cost Model Initialization...
GPU 0, layer [0, 4)
GPU 1, layer [4, 8)
GPU 2, layer [8, 12)
GPU 3, layer [12, 16)
GPU 4, layer [16, 20)
GPU 5, layer [20, 24)
GPU 6, layer [24, 28)
GPU 7, layer [28, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 4)
GPU 1, layer [4, 8)
GPU 2, layer [8, 12)
GPU 3, layer [12, 16)
GPU 4, layer [16, 20)
GPU 5, layer [20, 24)
GPU 6, layer [24, 28)
GPU 7, layer [28, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
34493, 530417, 530417
Number of vertices per chunk: 1078
34493, 530417, 530417
Number of vertices per chunk: 1078
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
GPU 0, layer [0, 4)
GPU 1, layer [4, 8)
GPU 2, layer [8, 12)
GPU 3, layer [12, 16)
GPU 4, layer [16, 20)
GPU 5, layer [20, 24)
GPU 6, layer [24, 28)
GPU 7, layer [28, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
34493, 530417, 530417
Number of vertices per chunk: 1078
csr in-out ready !Start Cost Model Initialization...
GPU 0, layer [0, 4)
GPU 1, layer [4, 8)
GPU 2, layer [8, 12)
GPU 3, layer [12, 16)
GPU 4, layer [16, 20)
GPU 5, layer [20, 24)
GPU 6, layer [24, 28)
GPU 7, layer [28, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
34493, 530417, 530417
Number of vertices per chunk: 1078
csr in-out ready !Start Cost Model Initialization...
GPU 0, layer [0, 4)
GPU 1, layer [4, 8)
GPU 2, layer [8, 12)
GPU 3, layer [12, 16)
GPU 4, layer [16, 20)
GPU 5, layer [20, 24)
GPU 6, layer [24, 28)
GPU 7, layer [28, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
34493, 530417, 530417
Number of vertices per chunk: 1078
csr in-out ready !Start Cost Model Initialization...
train nodes 100, valid nodes 500, test nodes 1000
GPU 0, layer [0, 4)
GPU 1, layer [4, 8)
GPU 2, layer [8, 12)
GPU 3, layer [12, 16)
GPU 4, layer [16, 20)
GPU 5, layer [20, 24)
GPU 6, layer [24, 28)
GPU 7, layer [28, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
Chunks (number of global chunks: 32): 0-[0, 1025) 1-[1025, 2154) 2-[2154, 3262) 3-[3262, 4284) 4-[4284, 5334) 5-[5334, 6511) 6-[6511, 7597) 7-[7597, 8680) 8-[8680, 9764) ... 31-[33337, 34493)
34493, 530417, 530417
Number of vertices per chunk: 1078
GPU 0, layer [0, 4)
GPU 1, layer [4, 8)
GPU 2, layer [8, 12)
GPU 3, layer [12, 16)
GPU 4, layer [16, 20)
GPU 5, layer [20, 24)
GPU 6, layer [24, 28)
GPU 7, layer [28, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
csr in-out ready !Start Cost Model Initialization...
***** Start profiling the layer-level communication performance *******
34493, 530417, 530417
Number of vertices per chunk: 1078
csr in-out ready !Start Cost Model Initialization...
The layer-level communication performance: 60.747 Gbps (per GPU), 485.976 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 60.454 Gbps (per GPU), 483.632 Gbps (aggregated)
The layer-level communication performance: 60.450 Gbps (per GPU), 483.600 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 60.202 Gbps (per GPU), 481.612 Gbps (aggregated)
The layer-level communication performance: 60.178 Gbps (per GPU), 481.428 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 59.969 Gbps (per GPU), 479.755 Gbps (aggregated)
The layer-level communication performance: 59.914 Gbps (per GPU), 479.314 Gbps (aggregated)
The layer-level communication performance: 59.884 Gbps (per GPU), 479.069 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The graph-level communication performance (supernode = 2): 160.305 Gbps (per GPU), 1282.441 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 160.308 Gbps (per GPU), 1282.466 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 160.296 Gbps (per GPU), 1282.368 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 160.305 Gbps (per GPU), 1282.441 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 160.293 Gbps (per GPU), 1282.343 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 160.198 Gbps (per GPU), 1281.584 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 160.299 Gbps (per GPU), 1282.392 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 160.097 Gbps (per GPU), 1280.777 Gbps (aggregated, cluster-wide)
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
The graph-level communication performance (supernode = 4): 97.877 Gbps (per GPU), 783.019 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 97.874 Gbps (per GPU), 782.994 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 97.871 Gbps (per GPU), 782.970 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 97.868 Gbps (per GPU), 782.945 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 97.848 Gbps (per GPU), 782.787 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 97.846 Gbps (per GPU), 782.769 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 97.777 Gbps (per GPU), 782.215 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 97.764 Gbps (per GPU), 782.112 Gbps (aggregated, cluster-wide)
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
The graph-level communication performance (supernode = 8): 37.461 Gbps (per GPU), 299.691 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 37.460 Gbps (per GPU), 299.683 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 37.461 Gbps (per GPU), 299.684 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 37.461 Gbps (per GPU), 299.684 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 37.460 Gbps (per GPU), 299.677 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 37.459 Gbps (per GPU), 299.672 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 37.458 Gbps (per GPU), 299.661 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 37.451 Gbps (per GPU), 299.608 Gbps (aggregated, cluster-wide)
 LType   LT0   LT1   LT2 Ratio  VSum  ESum
 chk_0  1.89ms  0.32ms  0.23ms  8.12  1.02K  0.02M
 chk_1  1.99ms  0.33ms  0.23ms  8.49  1.13K  0.01M
 chk_2  1.98ms  0.32ms  0.23ms  8.55  1.11K  0.01M
 chk_3  1.89ms  0.31ms  0.23ms  8.09  1.02K  0.02M
 chk_4  1.92ms  0.32ms  0.23ms  8.25  1.05K  0.02M
 chk_5  3.01ms  0.32ms  0.23ms 12.87  1.18K  0.01M
 chk_6  1.96ms  0.32ms  0.23ms  8.46  1.09K  0.02M
 chk_7  1.97ms  0.32ms  0.23ms  8.41  1.08K  0.02M
 chk_8  1.98ms  0.32ms  0.23ms  8.43  1.08K  0.01M
 chk_9  1.93ms  0.32ms  0.23ms  8.33  1.06K  0.02M
chk_10  1.93ms  0.32ms  0.23ms  8.29  1.04K  0.02M
chk_11  1.99ms  0.32ms  0.23ms  8.53  1.11K  0.01M
chk_12  2.00ms  0.32ms  0.24ms  8.47  1.11K  0.01M
chk_13  1.88ms  0.31ms  0.23ms  8.05  1.01K  0.02M
chk_14  1.98ms  0.32ms  0.24ms  8.39  1.09K  0.01M
chk_15  1.90ms  0.32ms  0.23ms  8.12  1.03K  0.02M
chk_16  1.83ms  0.31ms  0.23ms  7.81  0.98K  0.02M
chk_17  1.98ms  0.32ms  0.23ms  8.47  1.09K  0.01M
chk_18  1.93ms  0.32ms  0.24ms  8.10  1.04K  0.02M
chk_19  2.00ms  0.32ms  0.23ms  8.58  1.12K  0.01M
chk_20  2.01ms  0.32ms  0.23ms  8.60  1.13K  0.01M
chk_21  1.93ms  0.32ms  0.23ms  8.30  1.05K  0.02M
chk_22  2.00ms  0.32ms  0.23ms  8.68  1.11K  0.01M
chk_23  1.99ms  0.32ms  0.23ms  8.62  1.10K  0.01M
chk_24  1.89ms  0.31ms  0.23ms  8.17  1.02K  0.02M
chk_25  2.02ms  0.31ms  0.23ms  8.65  1.01K  0.02M
chk_26  1.98ms  0.32ms  0.23ms  8.46  1.12K  0.01M
chk_27  1.93ms  0.32ms  0.23ms  8.22  1.08K  0.02M
chk_28  1.92ms  0.32ms  0.24ms  8.12  1.07K  0.02M
chk_29  1.97ms  0.32ms  0.23ms  8.43  1.11K  0.01M
chk_30  1.97ms  0.32ms  0.23ms  8.37  1.10K  0.01M
chk_31  2.02ms  0.32ms  0.23ms  8.71  1.16K  0.01M
   Avg  1.99  0.32  0.23
   Max  3.01  0.33  0.24
   Min  1.83  0.31  0.23
 Ratio  1.65  1.06  1.03
   Var  0.04  0.00  0.00
Profiling takes 1.034 s
*** Node 0, starting model training...
Num Stages: 8 / 8
Node 0, Pipeline Input Tensor: NULL
Node 0, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 0 owns the model-level partition [0, 34)
*** Node 0, constructing the helper classes...
Node 0, Local Vertex Begin: 0, Num Local Vertices: 34493
*** Node 3, starting model training...
Num Stages: 8 / 8
Node 3, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 3, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 3 owns the model-level partition [98, 130)
*** Node 3, constructing the helper classes...
Node 3, Local Vertex Begin: 0, Num Local Vertices: 34493
*** Node 1, starting model training...
Num Stages: 8 / 8
Node 1, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 1, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 1 owns the model-level partition [34, 66)
*** Node 1, constructing the helper classes...
Node 1, Local Vertex Begin: 0, Num Local Vertices: 34493
*** Node 2, starting model training...
Num Stages: 8 / 8
Node 2, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 2, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 2 owns the model-level partition [66, 98)
*** Node 2, constructing the helper classes...
Node 2, Local Vertex Begin: 0, Num Local Vertices: 34493
*** Node 4, starting model training...
Num Stages: 8 / 8
Node 4, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 4, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 4 owns the model-level partition [130, 162)
*** Node 4, constructing the helper classes...
Node 4, Local Vertex Begin: 0, Num Local Vertices: 34493
*** Node 6, starting model training...
Num Stages: 8 / 8
Node 6, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 6, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 6 owns the model-level partition [194, 226)
*** Node 6, constructing the helper classes...
Node 6, Local Vertex Begin: 0, Num Local Vertices: 34493
*** Node 7, starting model training...
Num Stages: 8 / 8
Node 7, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 7, Pipeline Output Tensor: NULL
*** Node 7 owns the model-level partition [226, 257)
*** Node 7, constructing the helper classes...
Node 7, Local Vertex Begin: 0, Num Local Vertices: 34493
*** Node 5, starting model training...
Num Stages: 8 / 8
Node 5, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 5, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 5 owns the model-level partition [162, 194)
*** Node 5, constructing the helper classes...
Node 5, Local Vertex Begin: 0, Num Local Vertices: 34493
*** Node 7, setting up some other necessary information...
*** Node 3, setting up some other necessary information...
*** Node 5, setting up some other necessary information...
*** Node 4, setting up some other necessary information...
*** Node 6, setting up some other necessary information...
*** Node 2, setting up some other necessary information...
*** Node 0, setting up some other necessary information...
*** Node 1, setting up some other necessary information...
+++++++++ Node 1 initializing the weights for op[34, 66)...
+++++++++ Node 5 initializing the weights for op[162, 194)...
+++++++++ Node 7 initializing the weights for op[226, 257)...
+++++++++ Node 2 initializing the weights for op[66, 98)...
+++++++++ Node 0 initializing the weights for op[0, 34)...
+++++++++ Node 6 initializing the weights for op[194, 226)...
+++++++++ Node 4 initializing the weights for op[130, 162)...
+++++++++ Node 3 initializing the weights for op[98, 130)...
Node 5, discovering the vertices that will be sent across graph boundary...
Node 0, discovering the vertices that will be sent across graph boundary...
Node 6, discovering the vertices that will be sent across graph boundary...
Node 6, discovering the vertices that will be received across the graph boundary.
Node 1, discovering the vertices that will be sent across graph boundary...
Node 1, discovering the vertices that will be received across the graph boundary.
****** Start Scheduling the Tasks in a Pipelined Fashion ******
Node 7, discovering the vertices that will be sent across graph boundary...
Node 7, discovering the vertices that will be received across the graph boundary.
Node 2, discovering the vertices that will be sent across graph boundary...
Node 2, discovering the vertices that will be received across the graph boundary.
****** Start Scheduling the Tasks in a Pipelined Fashion ******
Node 4, discovering the vertices that will be sent across graph boundary...
Node 4, discovering the vertices that will be received across the graph boundary.
Node 3, discovering the vertices that will be sent across graph boundary...
Node 3, discovering the vertices that will be received across the graph boundary.
****** Start Scheduling the Tasks in a Pipelined Fashion ******
Node 5, discovering the vertices that will be received across the graph boundary.
****** Start Scheduling the Tasks in a Pipelined Fashion ******
The number of mirror vertices: 0
Node 0, discovering the vertices that will be received across the graph boundary.
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
*** Node 4, starting task scheduling...
*** Node 0, starting task scheduling...
*** Node 5, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 1, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 6, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 2, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 7, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 3, starting task scheduling...
The learning rate specified by the user: 0.001000000



The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
	Epoch 1:	Loss 1.7966	TrainAcc 0.2000	ValidAcc 0.0840	TestAcc 0.0910	BestValid 0.0840
	Epoch 10:	Loss 1.5583	TrainAcc 0.2000	ValidAcc 0.0840	TestAcc 0.0920	BestValid 0.0840
	Epoch 20:	Loss 1.4264	TrainAcc 0.2000	ValidAcc 0.0840	TestAcc 0.0920	BestValid 0.0840
	Epoch 30:	Loss 1.4034	TrainAcc 0.2000	ValidAcc 0.0840	TestAcc 0.0920	BestValid 0.0840
	Epoch 40:	Loss 1.3819	TrainAcc 0.2000	ValidAcc 0.0840	TestAcc 0.0920	BestValid 0.0840
	Epoch 50:	Loss 1.3592	TrainAcc 0.2000	ValidAcc 0.0840	TestAcc 0.0920	BestValid 0.0840
	Epoch 60:	Loss 1.3543	TrainAcc 0.2000	ValidAcc 0.0840	TestAcc 0.0920	BestValid 0.0840
	Epoch 70:	Loss 1.3293	TrainAcc 0.2000	ValidAcc 0.0840	TestAcc 0.0920	BestValid 0.0840
	Epoch 80:	Loss 1.3297	TrainAcc 0.2000	ValidAcc 0.0840	TestAcc 0.0920	BestValid 0.0840
	Epoch 90:	Loss 1.3272	TrainAcc 0.2000	ValidAcc 0.0840	TestAcc 0.0920	BestValid 0.0840
	Epoch 100:	Loss 1.3245	TrainAcc 0.2000	ValidAcc 0.0840	TestAcc 0.0920	BestValid 0.0840
	Epoch 110:	Loss 1.3208	TrainAcc 0.2000	ValidAcc 0.0840	TestAcc 0.0920	BestValid 0.0840
	Epoch 120:	Loss 1.3054	TrainAcc 0.2000	ValidAcc 0.0840	TestAcc 0.0920	BestValid 0.0840
	Epoch 130:	Loss 1.3081	TrainAcc 0.2000	ValidAcc 0.0840	TestAcc 0.0920	BestValid 0.0840
	Epoch 140:	Loss 1.2926	TrainAcc 0.2000	ValidAcc 0.0840	TestAcc 0.0920	BestValid 0.0840
	Epoch 150:	Loss 1.2871	TrainAcc 0.2000	ValidAcc 0.0840	TestAcc 0.0920	BestValid 0.0840
	Epoch 160:	Loss 1.2894	TrainAcc 0.2000	ValidAcc 0.0840	TestAcc 0.0920	BestValid 0.0840
	Epoch 170:	Loss 1.2935	TrainAcc 0.2000	ValidAcc 0.0840	TestAcc 0.0920	BestValid 0.0840
	Epoch 180:	Loss 1.2740	TrainAcc 0.2000	ValidAcc 0.0840	TestAcc 0.0920	BestValid 0.0840
	Epoch 190:	Loss 1.2676	TrainAcc 0.2000	ValidAcc 0.0840	TestAcc 0.0920	BestValid 0.0840
	Epoch 200:	Loss 1.2781	TrainAcc 0.2000	ValidAcc 0.0840	TestAcc 0.0920	BestValid 0.0840
	Epoch 210:	Loss 1.2798	TrainAcc 0.2000	ValidAcc 0.0840	TestAcc 0.0920	BestValid 0.0840
	Epoch 220:	Loss 1.2574	TrainAcc 0.2000	ValidAcc 0.0840	TestAcc 0.0920	BestValid 0.0840
	Epoch 230:	Loss 1.2479	TrainAcc 0.2000	ValidAcc 0.0840	TestAcc 0.0920	BestValid 0.0840
	Epoch 240:	Loss 1.2391	TrainAcc 0.2000	ValidAcc 0.0840	TestAcc 0.0920	BestValid 0.0840
	Epoch 250:	Loss 1.2398	TrainAcc 0.2000	ValidAcc 0.0840	TestAcc 0.0920	BestValid 0.0840
	Epoch 260:	Loss 1.2364	TrainAcc 0.2000	ValidAcc 0.0840	TestAcc 0.0920	BestValid 0.0840
	Epoch 270:	Loss 1.2379	TrainAcc 0.2100	ValidAcc 0.1060	TestAcc 0.0990	BestValid 0.1060
	Epoch 280:	Loss 1.2239	TrainAcc 0.2100	ValidAcc 0.1040	TestAcc 0.1020	BestValid 0.1060
	Epoch 290:	Loss 1.2277	TrainAcc 0.2100	ValidAcc 0.0980	TestAcc 0.1000	BestValid 0.1060
	Epoch 300:	Loss 1.2133	TrainAcc 0.2000	ValidAcc 0.0840	TestAcc 0.0920	BestValid 0.1060
****** Epoch Time (Excluding Evaluation Cost): 0.129 s ******
****** Breakdown Analysis ******
Cluster-Wide Average, Bubble-Pipeline: 20.240 ms (Max: 25.538, Min: 13.548, Sum: 161.921)
Cluster-Wide Average, Compute: 60.378 ms (Max: 108.297, Min: 49.673, Sum: 483.021)
Cluster-Wide Average, Communication-Layer: 5.516 ms (Max: 6.058, Min: 4.237, Sum: 44.127)
Cluster-Wide Average, Bubble-Imbalance: 41.214 ms (Max: 51.923, Min: 1.263, Sum: 329.713)
Cluster-Wide Average, Communication-Graph: 0.542 ms (Max: 0.670, Min: 0.482, Sum: 4.333)
Cluster-Wide Average, Optimization: 0.242 ms (Max: 0.623, Min: 0.172, Sum: 1.936)
Cluster-Wide Average, Others: 0.933 ms (Max: 1.793, Min: 0.549, Sum: 7.461)
****** Breakdown Sum: 129.064 ms ******
Cluster-Wide Average, GPU Memory Consumption: 2.463 GB (Max: 4.104, Min: 1.999, Sum: 19.700)
Cluster-Wide Average, Graph-Level Communication Throughput: -nan Gbps (Max: -nan, Min: -nan, Sum: -nan)
Cluster-Wide Average, Layer-Level Communication Throughput: 34.380 Gbps (Max: 37.714, Min: 25.910, Sum: 275.043)
Layer-level communication (cluster-wide, per-epoch): 0.180 GB
Graph-level communication (cluster-wide, per-epoch): 0.000 GB
Weight-sync communication (cluster-wide, per-epoch): 0.000 GB
Total communication (cluster-wide, per-epoch): 0.180 GB
****** Accuracy Results ******
Highest valid_acc: 0.1060
Target test_acc: 0.0990
Epoch to reach the target acc: 269
[MPI Rank 0] Success 
[MPI Rank 4] Success 
[MPI Rank 5] Success 
[MPI Rank 6] Success 
[MPI Rank 7] Success 
[MPI Rank 1] Success 
[MPI Rank 2] Success 
[MPI Rank 3] Success 
