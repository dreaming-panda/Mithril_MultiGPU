Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
DONE MPI INITDONE MPI INIT
Initialized node 1 on machine gnerv7
DONE MPI INIT
Initialized node 3 on machine gnerv7
DONE MPI INIT
Initialized node 2 on machine gnerv7

Initialized node 0 on machine gnerv7
DONE MPI INITDONE MPI INIT
Initialized node 5 on machine gnerv8
DONE MPI INIT
Initialized node 7 on machine gnerv8
DONE MPI INIT
Initialized node 4 on machine gnerv8

Initialized node 6 on machine gnerv8
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
        It takes 0.011 seconds.
Building the CSC structure...
        It takes 0.011 seconds.
Building the CSC structure...
        It takes 0.011 seconds.
Building the CSC structure...
        It takes 0.013 seconds.
Building the CSC structure...
        It takes 0.013 seconds.
Building the CSC structure...
        It takes 0.014 seconds.
Building the CSC structure...
        It takes 0.014 seconds.
Building the CSC structure...
        It takes 0.016 seconds.
Building the CSC structure...
        It takes 0.011 seconds.
        It takes 0.011 seconds.
        It takes 0.012 seconds.
        It takes 0.011 seconds.
        It takes 0.011 seconds.
Building the Feature Vector...
Building the Feature Vector...
        It takes 0.014 seconds.
Building the Feature Vector...
Building the Feature Vector...
        It takes 0.014 seconds.
Building the Feature Vector...
        It takes 0.015 seconds.
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
        It takes 0.461 seconds.
        It takes 0.458 seconds.
Building the Label Vector...
Building the Label Vector...
        It takes 0.002 seconds.
        It takes 0.003 seconds.
        It takes 0.516 seconds.
Building the Label Vector...
        It takes 0.002 seconds.
        It takes 0.514 seconds.
Building the Label Vector...
        It takes 0.002 seconds.
        It takes 0.561 seconds.
Building the Label Vector...
        It takes 0.003 seconds.
        It takes 0.614 seconds.
Building the Label Vector...
        It takes 0.621 seconds.
Building the Label Vector...
        It takes 0.003 seconds.
        It takes 0.615 seconds.
        It takes 0.004 seconds.
The graph dataset locates at /shared_hdd_storage/jingjichen/gnn_datasets/pipeline_parallel_datasets/physics/32_parts
The number of GCNII layers: 32
The number of hidden units: 100
The number of training epoches: 300
Learning rate: 0.001000
The partition strategy: model
The dropout rate: 0.500
The checkpointed weight file: /tmp/saved_weights
The random seed: 3
Number of classes: 5
Number of feature dimensions: 8415
Number of vertices: 34493
Number of GPUs: 8
Building the Label Vector...
        It takes 0.007 seconds.
GPU 0, layer [0, 4)
GPU 1, layer [4, 8)
GPU 2, layer [8, 12)
GPU 3, layer [12, 16)
GPU 4, layer [16, 20)
GPU 5, layer [20, 24)
GPU 6, layer [24, 28)
GPU 7, layer [28, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
34493, 530417, 530417
Number of vertices per chunk: 1078
csr in-out ready !Start Cost Model Initialization...
GPU 0, layer [0, 4)
GPU 1, layer [4, 8)
GPU 2, layer [8, 12)
GPU 3, layer [12, 16)
GPU 4, layer [16, 20)
GPU 5, layer [20, 24)
GPU 6, layer [24, 28)
GPU 7, layer [28, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 4)
GPU 1, layer [4, 8)
GPU 2, layer [8, 12)
GPU 3, layer [12, 16)
GPU 4, layer [16, 20)
GPU 5, layer [20, 24)
GPU 6, layer [24, 28)
GPU 7, layer [28, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
34493, 530417, 530417
Number of vertices per chunk: 1078
34493, 530417, 530417
Number of vertices per chunk: 1078
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
GPU 0, layer [0, 4)
GPU 1, layer [4, 8)
GPU 2, layer [8, 12)
GPU 3, layer [12, 16)
GPU 4, layer [16, 20)
GPU 5, layer [20, 24)
GPU 6, layer [24, 28)
GPU 7, layer [28, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
34493, 530417, 530417
Number of vertices per chunk: 1078
csr in-out ready !Start Cost Model Initialization...
GPU 0, layer [0, 4)
GPU 1, layer [4, 8)
GPU 2, layer [8, 12)
GPU 3, layer [12, 16)
GPU 4, layer [16, 20)
GPU 5, layer [20, 24)
GPU 6, layer [24, 28)
GPU 7, layer [28, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 4)
GPU 1, layer [4, 8)
GPU 2, layer [8, 12)
GPU 3, layer [12, 16)
GPU 4, layer [16, 20)
GPU 5, layer [20, 24)
GPU 6, layer [24, 28)
GPU 7, layer [28, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
34493, 530417, 530417
Number of vertices per chunk: 1078
34493, 530417, 530417
Number of vertices per chunk: 1078
GPU 0, layer [0, 4)
GPU 1, layer [4, 8)
GPU 2, layer [8, 12)
GPU 3, layer [12, 16)
GPU 4, layer [16, 20)
GPU 5, layer [20, 24)
GPU 6, layer [24, 28)
GPU 7, layer [28, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
34493, 530417, 530417
Number of vertices per chunk: 1078
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
train nodes 100, valid nodes 500, test nodes 1000
GPU 0, layer [0, 4)
GPU 1, layer [4, 8)
GPU 2, layer [8, 12)
GPU 3, layer [12, 16)
GPU 4, layer [16, 20)
GPU 5, layer [20, 24)
GPU 6, layer [24, 28)
GPU 7, layer [28, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
Chunks (number of global chunks: 32): 0-[0, 1025) 1-[1025, 2154) 2-[2154, 3262) 3-[3262, 4284) 4-[4284, 5334) 5-[5334, 6511) 6-[6511, 7597) 7-[7597, 8680) 8-[8680, 9764) ... 31-[33337, 34493)
34493, 530417, 530417
Number of vertices per chunk: 1078
csr in-out ready !Start Cost Model Initialization...
***** Start profiling the layer-level communication performance *******
The layer-level communication performance: 60.372 Gbps (per GPU), 482.976 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 60.050 Gbps (per GPU), 480.404 Gbps (aggregated)
The layer-level communication performance: 60.054 Gbps (per GPU), 480.433 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 59.790 Gbps (per GPU), 478.317 Gbps (aggregated)
The layer-level communication performance: 59.762 Gbps (per GPU), 478.096 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 59.541 Gbps (per GPU), 476.324 Gbps (aggregated)
The layer-level communication performance: 59.487 Gbps (per GPU), 475.897 Gbps (aggregated)
The layer-level communication performance: 59.460 Gbps (per GPU), 475.683 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The graph-level communication performance (supernode = 2): 158.926 Gbps (per GPU), 1271.411 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.911 Gbps (per GPU), 1271.292 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.938 Gbps (per GPU), 1271.507 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.908 Gbps (per GPU), 1271.268 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.927 Gbps (per GPU), 1271.414 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.920 Gbps (per GPU), 1271.362 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.932 Gbps (per GPU), 1271.459 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.923 Gbps (per GPU), 1271.387 Gbps (aggregated, cluster-wide)
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
The graph-level communication performance (supernode = 4): 104.449 Gbps (per GPU), 835.588 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 104.448 Gbps (per GPU), 835.581 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 104.451 Gbps (per GPU), 835.609 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 104.449 Gbps (per GPU), 835.588 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 104.450 Gbps (per GPU), 835.602 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 104.447 Gbps (per GPU), 835.574 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 104.449 Gbps (per GPU), 835.594 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 104.447 Gbps (per GPU), 835.574 Gbps (aggregated, cluster-wide)
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
The graph-level communication performance (supernode = 8): 35.991 Gbps (per GPU), 287.928 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 35.993 Gbps (per GPU), 287.941 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 35.992 Gbps (per GPU), 287.934 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 35.991 Gbps (per GPU), 287.926 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 35.990 Gbps (per GPU), 287.920 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 35.991 Gbps (per GPU), 287.929 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 35.986 Gbps (per GPU), 287.885 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 35.984 Gbps (per GPU), 287.871 Gbps (aggregated, cluster-wide)
 LType   LT0   LT1   LT2 Ratio  VSum  ESum
 chk_0  2.40ms  0.34ms  0.25ms  9.69  1.02K  0.02M
 chk_1  1.99ms  0.34ms  0.25ms  7.98  1.13K  0.01M
 chk_2  1.98ms  0.34ms  0.25ms  7.99  1.11K  0.01M
 chk_3  1.89ms  0.33ms  0.25ms  7.63  1.02K  0.02M
 chk_4  1.92ms  0.33ms  0.25ms  7.78  1.05K  0.02M
 chk_5  2.05ms  0.34ms  0.25ms  8.28  1.18K  0.01M
 chk_6  1.98ms  0.33ms  0.25ms  8.04  1.09K  0.02M
 chk_7  1.98ms  0.33ms  0.25ms  7.97  1.08K  0.02M
 chk_8  1.98ms  0.33ms  0.25ms  7.97  1.08K  0.01M
 chk_9  1.94ms  0.33ms  0.25ms  7.85  1.06K  0.02M
chk_10  2.46ms  0.33ms  0.25ms  9.94  1.04K  0.02M
chk_11  1.99ms  0.34ms  0.25ms  8.00  1.11K  0.01M
chk_12  1.99ms  0.34ms  0.25ms  7.98  1.11K  0.01M
chk_13  1.87ms  0.32ms  0.25ms  7.51  1.01K  0.02M
chk_14  1.97ms  0.33ms  0.25ms  7.93  1.09K  0.01M
chk_15  1.91ms  0.33ms  0.25ms  7.67  1.03K  0.02M
chk_16  1.83ms  0.33ms  0.25ms  7.41  0.98K  0.02M
chk_17  1.97ms  0.33ms  0.25ms  7.97  1.09K  0.01M
chk_18  1.93ms  0.33ms  0.25ms  7.71  1.04K  0.02M
chk_19  2.00ms  0.34ms  0.25ms  8.06  1.12K  0.01M
chk_20  2.59ms  0.34ms  0.25ms 10.51  1.13K  0.01M
chk_21  1.92ms  0.33ms  0.25ms  7.75  1.05K  0.02M
chk_22  1.98ms  0.34ms  0.27ms  7.46  1.11K  0.01M
chk_23  1.99ms  0.34ms  0.25ms  7.81  1.10K  0.01M
chk_24  1.89ms  0.33ms  0.28ms  6.78  1.02K  0.02M
chk_25  1.87ms  0.33ms  0.25ms  7.54  1.01K  0.02M
chk_26  2.00ms  0.33ms  0.25ms  8.00  1.12K  0.01M
chk_27  1.95ms  0.34ms  0.25ms  7.79  1.08K  0.02M
chk_28  1.94ms  0.34ms  0.25ms  7.79  1.07K  0.02M
chk_29  1.99ms  0.34ms  0.25ms  8.13  1.11K  0.01M
chk_30  2.10ms  0.33ms  0.25ms  8.47  1.10K  0.01M
chk_31  2.07ms  0.34ms  0.24ms  8.46  1.16K  0.01M
   Avg  2.01  0.33  0.25
   Max  2.59  0.34  0.28
   Min  1.83  0.32  0.24
 Ratio  1.42  1.06  1.14
   Var  0.03  0.00  0.00
Profiling takes 1.043 s
*** Node 0, starting model training...
Num Stages: 8 / 8
Node 0, Pipeline Input Tensor: NULL
Node 0, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 0 owns the model-level partition [0, 34)
*** Node 0, constructing the helper classes...
Node 0, Local Vertex Begin: 0, Num Local Vertices: 34493
*** Node 4, starting model training...
Num Stages: 8 / 8
*** Node 1, starting model training...
Num Stages: 8 / 8
Node 1, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 1, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 1 owns the model-level partition [34, 66)
*** Node 6, starting model training...
Num Stages: 8 / 8
Node 6, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 6, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 6 owns the model-level partition [194, 226)
*** Node 6, constructing the helper classes...
Node 6, Local Vertex Begin: 0, Num Local Vertices: 34493
*** Node 1, constructing the helper classes...
Node 1, Local Vertex Begin: 0, Num Local Vertices: 34493
Node 4, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 4, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 4 owns the model-level partition [130, 162)
*** Node 4, constructing the helper classes...
Node 4, Local Vertex Begin: 0, Num Local Vertices: 34493
*** Node 3, starting model training...
Num Stages: 8 / 8
*** Node 2, starting model training...
Num Stages: 8 / 8
Node 3, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 3, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 3 owns the model-level partition [98, 130)
*** Node 3, constructing the helper classes...
Node 3, Local Vertex Begin: 0, Num Local Vertices: 34493
Node 2, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 2, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 2 owns the model-level partition [66, 98)
*** Node 2, constructing the helper classes...
Node 2, Local Vertex Begin: 0, Num Local Vertices: 34493
*** Node 7, starting model training...
Num Stages: 8 / 8
Node 7, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 7, Pipeline Output Tensor: NULL
*** Node 7 owns the model-level partition [226, 257)
*** Node 7, constructing the helper classes...
Node 7, Local Vertex Begin: 0, Num Local Vertices: 34493
*** Node 5, starting model training...
Num Stages: 8 / 8
Node 5, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 5, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 5 owns the model-level partition [162, 194)
*** Node 5, constructing the helper classes...
Node 5, Local Vertex Begin: 0, Num Local Vertices: 34493
*** Node 1, setting up some other necessary information...
*** Node 5, setting up some other necessary information...
*** Node 4, setting up some other necessary information...
*** Node 7, setting up some other necessary information...
*** Node 6, setting up some other necessary information...
*** Node 2, setting up some other necessary information...
*** Node 3, setting up some other necessary information...
*** Node 0, setting up some other necessary information...
+++++++++ Node 1 initializing the weights for op[34, 66)...
+++++++++ Node 5 initializing the weights for op[162, 194)...
+++++++++ Node 2 initializing the weights for op[66, 98)...
+++++++++ Node 7 initializing the weights for op[226, 257)...
+++++++++ Node 0 initializing the weights for op[0, 34)...
+++++++++ Node 4 initializing the weights for op[130, 162)...
+++++++++ Node 3 initializing the weights for op[98, 130)...
+++++++++ Node 6 initializing the weights for op[194, 226)...
Node 1, discovering the vertices that will be sent across graph boundary...
Node 7, discovering the vertices that will be sent across graph boundary...
Node 2, discovering the vertices that will be sent across graph boundary...
Node 4, discovering the vertices that will be sent across graph boundary...
Node 3, discovering the vertices that will be sent across graph boundary...
Node 5, discovering the vertices that will be sent across graph boundary...
Node 6, discovering the vertices that will be sent across graph boundary...
Node 0, discovering the vertices that will be sent across graph boundary...
The number of mirror vertices: 0
Node 0, discovering the vertices that will be received across the graph boundary.
Node 4, discovering the vertices that will be received across the graph boundary.
Node 1, discovering the vertices that will be received across the graph boundary.
Node 5, discovering the vertices that will be received across the graph boundary.
Node 2, discovering the vertices that will be received across the graph boundary.
Node 6, discovering the vertices that will be received across the graph boundary.
Node 3, discovering the vertices that will be received across the graph boundary.
Node 7, discovering the vertices that will be received across the graph boundary.
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
*** Node 0, starting task scheduling...
*** Node 1, starting task scheduling...
*** Node 2, starting task scheduling...
*** Node 3, starting task scheduling...



*** Node 4, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 5, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 6, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 7, starting task scheduling...
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
	Epoch 1:	Loss 1.7846	TrainAcc 0.2000	ValidAcc 0.0740	TestAcc 0.0750	BestValid 0.0740
	Epoch 10:	Loss 1.5637	TrainAcc 0.2000	ValidAcc 0.0840	TestAcc 0.0920	BestValid 0.0840
	Epoch 20:	Loss 1.4121	TrainAcc 0.2000	ValidAcc 0.0840	TestAcc 0.0920	BestValid 0.0840
	Epoch 30:	Loss 1.3660	TrainAcc 0.2000	ValidAcc 0.0840	TestAcc 0.0920	BestValid 0.0840
	Epoch 40:	Loss 1.3903	TrainAcc 0.2000	ValidAcc 0.0840	TestAcc 0.0920	BestValid 0.0840
	Epoch 50:	Loss 1.3678	TrainAcc 0.2000	ValidAcc 0.0840	TestAcc 0.0920	BestValid 0.0840
	Epoch 60:	Loss 1.3235	TrainAcc 0.2000	ValidAcc 0.0840	TestAcc 0.0920	BestValid 0.0840
	Epoch 70:	Loss 1.3210	TrainAcc 0.2000	ValidAcc 0.0840	TestAcc 0.0920	BestValid 0.0840
	Epoch 80:	Loss 1.3117	TrainAcc 0.2000	ValidAcc 0.0840	TestAcc 0.0920	BestValid 0.0840
	Epoch 90:	Loss 1.2961	TrainAcc 0.2000	ValidAcc 0.0840	TestAcc 0.0920	BestValid 0.0840
	Epoch 100:	Loss 1.2927	TrainAcc 0.2000	ValidAcc 0.0840	TestAcc 0.0920	BestValid 0.0840
	Epoch 110:	Loss 1.3062	TrainAcc 0.2000	ValidAcc 0.0840	TestAcc 0.0920	BestValid 0.0840
	Epoch 120:	Loss 1.2736	TrainAcc 0.2000	ValidAcc 0.0840	TestAcc 0.0920	BestValid 0.0840
	Epoch 130:	Loss 1.2728	TrainAcc 0.2000	ValidAcc 0.0840	TestAcc 0.0920	BestValid 0.0840
	Epoch 140:	Loss 1.2537	TrainAcc 0.2000	ValidAcc 0.0840	TestAcc 0.0920	BestValid 0.0840
	Epoch 150:	Loss 1.2711	TrainAcc 0.2000	ValidAcc 0.0840	TestAcc 0.0920	BestValid 0.0840
	Epoch 160:	Loss 1.2473	TrainAcc 0.2000	ValidAcc 0.0840	TestAcc 0.0920	BestValid 0.0840
	Epoch 170:	Loss 1.2762	TrainAcc 0.2000	ValidAcc 0.0840	TestAcc 0.0920	BestValid 0.0840
	Epoch 180:	Loss 1.2371	TrainAcc 0.2000	ValidAcc 0.0840	TestAcc 0.0920	BestValid 0.0840
	Epoch 190:	Loss 1.2688	TrainAcc 0.2000	ValidAcc 0.0840	TestAcc 0.0920	BestValid 0.0840
	Epoch 200:	Loss 1.2326	TrainAcc 0.2000	ValidAcc 0.0840	TestAcc 0.0920	BestValid 0.0840
	Epoch 210:	Loss 1.2340	TrainAcc 0.2000	ValidAcc 0.0840	TestAcc 0.0920	BestValid 0.0840
	Epoch 220:	Loss 1.2455	TrainAcc 0.2000	ValidAcc 0.0840	TestAcc 0.0920	BestValid 0.0840
	Epoch 230:	Loss 1.2248	TrainAcc 0.2000	ValidAcc 0.0840	TestAcc 0.0920	BestValid 0.0840
	Epoch 240:	Loss 1.2215	TrainAcc 0.2000	ValidAcc 0.0840	TestAcc 0.0920	BestValid 0.0840
	Epoch 250:	Loss 1.2168	TrainAcc 0.2000	ValidAcc 0.0840	TestAcc 0.0920	BestValid 0.0840
	Epoch 260:	Loss 1.2074	TrainAcc 0.2000	ValidAcc 0.0840	TestAcc 0.0920	BestValid 0.0840
	Epoch 270:	Loss 1.2340	TrainAcc 0.2000	ValidAcc 0.0840	TestAcc 0.0920	BestValid 0.0840
	Epoch 280:	Loss 1.2080	TrainAcc 0.2000	ValidAcc 0.0840	TestAcc 0.0920	BestValid 0.0840
	Epoch 290:	Loss 1.2206	TrainAcc 0.2300	ValidAcc 0.0860	TestAcc 0.0950	BestValid 0.0860
	Epoch 300:	Loss 1.1992	TrainAcc 0.2500	ValidAcc 0.0880	TestAcc 0.0970	BestValid 0.0880
****** Epoch Time (Excluding Evaluation Cost): 0.132 s ******
****** Breakdown Analysis ******
Cluster-Wide Average, Bubble-Pipeline: 20.693 ms (Max: 26.258, Min: 13.693, Sum: 165.547)
Cluster-Wide Average, Compute: 61.155 ms (Max: 111.099, Min: 49.976, Sum: 489.238)
Cluster-Wide Average, Communication-Layer: 5.555 ms (Max: 6.182, Min: 4.297, Sum: 44.444)
Cluster-Wide Average, Bubble-Imbalance: 43.087 ms (Max: 55.274, Min: 1.351, Sum: 344.694)
Cluster-Wide Average, Communication-Graph: 0.565 ms (Max: 0.643, Min: 0.507, Sum: 4.517)
Cluster-Wide Average, Optimization: 0.246 ms (Max: 0.646, Min: 0.172, Sum: 1.967)
Cluster-Wide Average, Others: 0.997 ms (Max: 1.886, Min: 0.589, Sum: 7.977)
****** Breakdown Sum: 132.298 ms ******
Cluster-Wide Average, GPU Memory Consumption: 2.463 GB (Max: 4.104, Min: 1.999, Sum: 19.700)
Cluster-Wide Average, Graph-Level Communication Throughput: -nan Gbps (Max: -nan, Min: -nan, Sum: -nan)
Cluster-Wide Average, Layer-Level Communication Throughput: 34.141 Gbps (Max: 37.706, Min: 25.675, Sum: 273.128)
Layer-level communication (cluster-wide, per-epoch): 0.180 GB
Graph-level communication (cluster-wide, per-epoch): 0.000 GB
Weight-sync communication (cluster-wide, per-epoch): 0.000 GB
Total communication (cluster-wide, per-epoch): 0.180 GB
****** Accuracy Results ******
Highest valid_acc: 0.0880
Target test_acc: 0.0970
Epoch to reach the target acc: 299
[MPI Rank 0] Success 
[MPI Rank 1] Success 
[MPI Rank 2] Success 
[MPI Rank 3] Success 
[MPI Rank 4] Success 
[MPI Rank 5] Success 
[MPI Rank 6] Success 
[MPI Rank 7] Success 
