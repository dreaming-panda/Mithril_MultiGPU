Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
DONE MPI INIT
Initialized node 7 on machine gnerv8
DONE MPI INIT
Initialized node 4 on machine gnerv8
DONE MPI INIT
Initialized node 6 on machine gnerv8
DONE MPI INIT
Initialized node 5 on machine gnerv8
DONE MPI INIT
DONE MPI INIT
Initialized node 2 on machine gnerv7
DONE MPI INITInitialized node 1 on machine gnerv7

Initialized node 3 on machine gnerv7
DONE MPI INIT
Initialized node 0 on machine gnerv7
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
        It takes 0.010 seconds.
Building the CSC structure...
        It takes 0.011 seconds.
Building the CSC structure...
        It takes 0.011 seconds.
Building the CSC structure...
        It takes 0.011 seconds.
Building the CSC structure...
        It takes 0.011 seconds.
Building the CSC structure...
        It takes 0.019 seconds.
Building the CSC structure...
        It takes 0.019 seconds.
Building the CSC structure...
        It takes 0.019 seconds.
Building the CSC structure...
        It takes 0.011 seconds.
        It takes 0.012 seconds.
        It takes 0.016 seconds.
Building the Feature Vector...
        It takes 0.019 seconds.
Building the Feature Vector...
        It takes 0.019 seconds.
        It takes 0.010 seconds.
        It takes 0.010 seconds.
Building the Feature Vector...
        It takes 0.011 seconds.
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
        It takes 0.452 seconds.
Building the Label Vector...
        It takes 0.002 seconds.
        It takes 0.451 seconds.
Building the Label Vector...
        It takes 0.003 seconds.
        It takes 0.513 seconds.
Building the Label Vector...
        It takes 0.515 seconds.
Building the Label Vector...
        It takes 0.003 seconds.
        It takes 0.009 seconds.
        It takes 0.611 seconds.
Building the Label Vector...
        It takes 0.004 seconds.
The graph dataset locates at /shared_hdd_storage/jingjichen/gnn_datasets/pipeline_parallel_datasets/physics/32_parts
The number of GCNII layers: 32
The number of hidden units: 100
The number of training epoches: 300
Learning rate: 0.001000
The partition strategy: model
The dropout rate: 0.500
The checkpointed weight file: /tmp/saved_weights
The random seed: 1
Number of classes: 5
Number of feature dimensions: 8415
Number of vertices: 34493
Number of GPUs: 8
        It takes 0.609 seconds.
Building the Label Vector...
        It takes 0.004 seconds.
        It takes 0.617 seconds.
Building the Label Vector...
        It takes 0.620 seconds.
Building the Label Vector...
        It takes 0.003 seconds.
        It takes 0.006 seconds.
GPU 0, layer [0, 4)
GPU 1, layer [4, 8)
GPU 2, layer [8, 12)
GPU 3, layer [12, 16)
GPU 4, layer [16, 20)
GPU 5, layer [20, 24)
GPU 6, layer [24, 28)
GPU 7, layer [28, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
34493, 530417, 530417
Number of vertices per chunk: 1078
csr in-out ready !Start Cost Model Initialization...
GPU 0, layer [0, 4)
GPU 1, layer [4, 8)
GPU 2, layer [8, 12)
GPU 3, layer [12, 16)
GPU 4, layer [16, 20)
GPU 5, layer [20, 24)
GPU 6, layer [24, 28)
GPU 7, layer [28, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
34493, 530417, 530417
Number of vertices per chunk: 1078
csr in-out ready !Start Cost Model Initialization...
GPU 0, layer [0, 4)
GPU 1, layer [4, 8)
GPU 2, layer [8, 12)
GPU 3, layer [12, 16)
GPU 4, layer [16, 20)
GPU 5, layer [20, 24)
GPU 6, layer [24, 28)
GPU 7, layer [28, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
34493, 530417, 530417
Number of vertices per chunk: 1078
csr in-out ready !Start Cost Model Initialization...
GPU 0, layer [0, 4)
GPU 1, layer [4, 8)
GPU 2, layer [8, 12)
GPU 3, layer [12, 16)
GPU 4, layer [16, 20)
GPU 5, layer [20, 24)
GPU 6, layer [24, 28)
GPU 7, layer [28, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
34493, 530417, 530417
Number of vertices per chunk: 1078
csr in-out ready !Start Cost Model Initialization...
GPU 0, layer [0, 4)
GPU 1, layer [4, 8)
GPU 2, layer [8, 12)
GPU 3, layer [12, 16)
GPU 4, layer [16, 20)
GPU 5, layer [20, 24)
GPU 6, layer [24, 28)
GPU 7, layer [28, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
34493, 530417, 530417
Number of vertices per chunk: 1078
GPU 0, layer [0, 4)
GPU 1, layer [4, 8)
GPU 2, layer [8, 12)
GPU 3, layer [12, 16)
GPU 4, layer [16, 20)
GPU 5, layer [20, 24)
GPU 6, layer [24, 28)
GPU 7, layer [28, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
csr in-out ready !Start Cost Model Initialization...
34493, 530417, 530417
Number of vertices per chunk: 1078
csr in-out ready !Start Cost Model Initialization...
train nodes 100, valid nodes 500, test nodes 1000
GPU 0, layer [0, 4)
GPU 1, layer [4, 8)
GPU 2, layer [8, 12)
GPU 3, layer [12, 16)
GPU 4, layer [16, 20)
GPU 5, layer [20, 24)
GPU 6, layer [24, 28)
GPU 7, layer [28, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
Chunks (number of global chunks: 32): 0-[0, 1025) 1-[1025, 2154) 2-[2154, 3262) 3-[3262, 4284) 4-[4284, 5334) 5-[5334, 6511) 6-[6511, 7597) 7-[7597, 8680) 8-[8680, 9764) ... 31-[33337, 34493)
34493, 530417, 530417
Number of vertices per chunk: 1078
GPU 0, layer [0, 4)
GPU 1, layer [4, 8)
GPU 2, layer [8, 12)
GPU 3, layer [12, 16)
GPU 4, layer [16, 20)
GPU 5, layer [20, 24)
GPU 6, layer [24, 28)
GPU 7, layer [28, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
34493, 530417, 530417
csr in-out ready !Start Cost Model Initialization...
***** Start profiling the layer-level communication performance *******
Number of vertices per chunk: 1078
csr in-out ready !Start Cost Model Initialization...
The layer-level communication performance: 60.255 Gbps (per GPU), 482.044 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 59.961 Gbps (per GPU), 479.687 Gbps (aggregated)
The layer-level communication performance: 59.953 Gbps (per GPU), 479.620 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 59.690 Gbps (per GPU), 477.523 Gbps (aggregated)
The layer-level communication performance: 59.667 Gbps (per GPU), 477.335 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 59.452 Gbps (per GPU), 475.620 Gbps (aggregated)
The layer-level communication performance: 59.399 Gbps (per GPU), 475.190 Gbps (aggregated)
The layer-level communication performance: 59.368 Gbps (per GPU), 474.944 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The graph-level communication performance (supernode = 2): 153.038 Gbps (per GPU), 1224.301 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 153.035 Gbps (per GPU), 1224.279 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 152.946 Gbps (per GPU), 1223.566 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 152.951 Gbps (per GPU), 1223.610 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 152.890 Gbps (per GPU), 1223.122 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 152.898 Gbps (per GPU), 1223.186 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 152.898 Gbps (per GPU), 1223.186 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 152.648 Gbps (per GPU), 1221.183 Gbps (aggregated, cluster-wide)
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
The graph-level communication performance (supernode = 4): 104.724 Gbps (per GPU), 837.793 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 104.724 Gbps (per GPU), 837.793 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 104.726 Gbps (per GPU), 837.807 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 104.724 Gbps (per GPU), 837.792 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 104.726 Gbps (per GPU), 837.807 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 104.723 Gbps (per GPU), 837.786 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 104.724 Gbps (per GPU), 837.793 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 104.637 Gbps (per GPU), 837.096 Gbps (aggregated, cluster-wide)
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
The graph-level communication performance (supernode = 8): 36.991 Gbps (per GPU), 295.931 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 36.993 Gbps (per GPU), 295.946 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 36.992 Gbps (per GPU), 295.939 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 36.992 Gbps (per GPU), 295.935 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 36.992 Gbps (per GPU), 295.933 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 36.990 Gbps (per GPU), 295.919 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 36.991 Gbps (per GPU), 295.928 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 36.984 Gbps (per GPU), 295.871 Gbps (aggregated, cluster-wide)
 LType   LT0   LT1   LT2 Ratio  VSum  ESum
 chk_0  1.89ms  0.33ms  0.24ms  7.90  1.02K  0.02M
 chk_1  2.00ms  0.33ms  0.24ms  8.28  1.13K  0.01M
 chk_2  1.99ms  0.33ms  0.24ms  8.31  1.11K  0.01M
 chk_3  1.89ms  0.32ms  0.24ms  7.85  1.02K  0.02M
 chk_4  1.93ms  0.33ms  0.24ms  8.08  1.05K  0.02M
 chk_5  2.05ms  0.33ms  0.24ms  8.52  1.18K  0.01M
 chk_6  1.97ms  0.35ms  0.24ms  8.26  1.09K  0.02M
 chk_7  1.97ms  0.33ms  0.24ms  8.19  1.08K  0.02M
 chk_8  1.99ms  0.32ms  0.24ms  8.30  1.08K  0.01M
 chk_9  1.94ms  0.33ms  0.24ms  8.13  1.06K  0.02M
chk_10  1.93ms  0.32ms  0.24ms  8.07  1.04K  0.02M
chk_11  1.99ms  0.33ms  0.24ms  8.29  1.11K  0.01M
chk_12  2.02ms  0.33ms  0.24ms  8.33  1.11K  0.01M
chk_13  1.86ms  0.31ms  0.24ms  7.73  1.01K  0.02M
chk_14  1.96ms  0.33ms  0.24ms  8.13  1.09K  0.01M
chk_15  1.89ms  0.32ms  0.24ms  7.86  1.03K  0.02M
chk_16  1.82ms  0.32ms  0.24ms  7.59  0.98K  0.02M
chk_17  1.96ms  0.33ms  0.24ms  8.22  1.09K  0.01M
chk_18  1.94ms  0.32ms  0.24ms  7.94  1.04K  0.02M
chk_19  2.01ms  0.33ms  0.24ms  8.38  1.12K  0.01M
chk_20  1.99ms  0.33ms  0.24ms  8.32  1.13K  0.01M
chk_21  1.91ms  0.32ms  0.24ms  7.96  1.05K  0.02M
chk_22  1.98ms  0.33ms  0.24ms  8.36  1.11K  0.01M
chk_23  1.97ms  0.33ms  0.24ms  8.32  1.10K  0.01M
chk_24  1.88ms  0.32ms  0.24ms  7.89  1.02K  0.02M
chk_25  1.86ms  0.32ms  0.24ms  7.74  1.01K  0.02M
chk_26  1.99ms  0.33ms  0.24ms  8.29  1.12K  0.01M
chk_27  1.94ms  0.33ms  0.24ms  8.04  1.08K  0.02M
chk_28  1.94ms  0.33ms  0.24ms  8.01  1.07K  0.02M
chk_29  1.98ms  0.33ms  0.24ms  8.32  1.11K  0.01M
chk_30  1.97ms  0.33ms  0.24ms  8.21  1.10K  0.01M
chk_31  2.04ms  0.32ms  0.24ms  8.55  1.16K  0.01M
   Avg  1.95  0.33  0.24
   Max  2.05  0.35  0.24
   Min  1.82  0.31  0.24
 Ratio  1.13  1.11  1.03
   Var  0.00  0.00  0.00
Profiling takes 1.041 s
*** Node 0, starting model training...
Num Stages: 8 / 8
Node 0, Pipeline Input Tensor: NULL
Node 0, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 0 owns the model-level partition [0, 34)
*** Node 0, constructing the helper classes...
Node 0, Local Vertex Begin: 0, Num Local Vertices: 34493
*** Node 1, starting model training...
Num Stages: 8 / 8
Node 1, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 1, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 1 owns the model-level partition [34, 66)
*** Node 1, constructing the helper classes...
Node 1, Local Vertex Begin: 0, Num Local Vertices: 34493
*** Node 3, starting model training...
Num Stages: 8 / 8
Node 3, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 3, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 3 owns the model-level partition [98, 130)
*** Node 3, constructing the helper classes...
Node 3, Local Vertex Begin: 0, Num Local Vertices: 34493
*** Node 2, starting model training...
Num Stages: 8 / 8
Node 2, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 2, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 2 owns the model-level partition [66, 98)
*** Node 2, constructing the helper classes...
Node 2, Local Vertex Begin: 0, Num Local Vertices: 34493
*** Node 4, starting model training...
Num Stages: 8 / 8
Node 4, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 4, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 4 owns the model-level partition [130, 162)
*** Node 4, constructing the helper classes...
Node 4, Local Vertex Begin: 0, Num Local Vertices: 34493
*** Node 5, starting model training...
Num Stages: 8 / 8
Node 5, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 5, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 5 owns the model-level partition [162, 194)
*** Node 5, constructing the helper classes...
Node 5, Local Vertex Begin: 0, Num Local Vertices: 34493
*** Node 6, starting model training...
Num Stages: 8 / 8
Node 6, Pipeline Input Tensor: OPERATOR_DROPOUT
*** Node 7, starting model training...
Num Stages: 8 / 8
Node 7, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 7, Pipeline Output Tensor: NULL
*** Node 7 owns the model-level partition [226, 257)
*** Node 7, constructing the helper classes...
Node 7, Local Vertex Begin: 0, Num Local Vertices: 34493
Node 6, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 6 owns the model-level partition [194, 226)
*** Node 6, constructing the helper classes...
Node 6, Local Vertex Begin: 0, Num Local Vertices: 34493
*** Node 2, setting up some other necessary information...
*** Node 4, setting up some other necessary information...
*** Node 3, setting up some other necessary information...
*** Node 5, setting up some other necessary information...
*** Node 7, setting up some other necessary information...
*** Node 6, setting up some other necessary information...
*** Node 1, setting up some other necessary information...
*** Node 0, setting up some other necessary information...
+++++++++ Node 2 initializing the weights for op[66, 98)...
+++++++++ Node 7 initializing the weights for op[226, 257)...
+++++++++ Node 0 initializing the weights for op[0, 34)...
+++++++++ Node 1 initializing the weights for op[34, 66)...
+++++++++ Node 3 initializing the weights for op[98, 130)...
+++++++++ Node 4 initializing the weights for op[130, 162)...
+++++++++ Node 6 initializing the weights for op[194, 226)...
+++++++++ Node 5 initializing the weights for op[162, 194)...
Node 1, discovering the vertices that will be sent across graph boundary...
Node 2, discovering the vertices that will be sent across graph boundary...
Node 3, discovering the vertices that will be sent across graph boundary...
Node 0, discovering the vertices that will be sent across graph boundary...
The number of mirror vertices: 0
Node 0, discovering the vertices that will be received across the graph boundary.
Node 1, discovering the vertices that will be received across the graph boundary.
Node 2, discovering the vertices that will be received across the graph boundary.
Node 3, discovering the vertices that will be received across the graph boundary.
****** Start Scheduling the Tasks in a Pipelined Fashion ******
Node 5, discovering the vertices that will be sent across graph boundary...
****** Start Scheduling the Tasks in a Pipelined Fashion ******
Node 6, discovering the vertices that will be sent across graph boundary...
Node 6, discovering the vertices that will be received across the graph boundary.
****** Start Scheduling the Tasks in a Pipelined Fashion ******
Node 7, discovering the vertices that will be sent across graph boundary...
Node 7, discovering the vertices that will be received across the graph boundary.
****** Start Scheduling the Tasks in a Pipelined Fashion ******
Node 4, discovering the vertices that will be sent across graph boundary...
Node 4, discovering the vertices that will be received across the graph boundary.
****** Start Scheduling the Tasks in a Pipelined Fashion ******
Node 5, discovering the vertices that will be received across the graph boundary.
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
*** Node 0, starting task scheduling...
*** Node 1, starting task scheduling...
*** Node 2, starting task scheduling...
*** Node 3, starting task scheduling...



*** Node 4, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 5, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 6, starting task scheduling...
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
*** Node 7, starting task scheduling...
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
	Epoch 1:	Loss 1.7097	TrainAcc 0.2700	ValidAcc 0.1040	TestAcc 0.1210	BestValid 0.1040
	Epoch 10:	Loss 1.5680	TrainAcc 0.2000	ValidAcc 0.0840	TestAcc 0.0920	BestValid 0.1040
	Epoch 20:	Loss 1.4721	TrainAcc 0.2000	ValidAcc 0.0840	TestAcc 0.0920	BestValid 0.1040
	Epoch 30:	Loss 1.4387	TrainAcc 0.2000	ValidAcc 0.0840	TestAcc 0.0920	BestValid 0.1040
	Epoch 40:	Loss 1.3971	TrainAcc 0.2000	ValidAcc 0.0840	TestAcc 0.0920	BestValid 0.1040
	Epoch 50:	Loss 1.3769	TrainAcc 0.2000	ValidAcc 0.0840	TestAcc 0.0920	BestValid 0.1040
	Epoch 60:	Loss 1.3672	TrainAcc 0.2000	ValidAcc 0.0840	TestAcc 0.0920	BestValid 0.1040
	Epoch 70:	Loss 1.3499	TrainAcc 0.2000	ValidAcc 0.0840	TestAcc 0.0920	BestValid 0.1040
	Epoch 80:	Loss 1.3252	TrainAcc 0.2000	ValidAcc 0.0840	TestAcc 0.0920	BestValid 0.1040
	Epoch 90:	Loss 1.3312	TrainAcc 0.2000	ValidAcc 0.0840	TestAcc 0.0920	BestValid 0.1040
	Epoch 100:	Loss 1.3075	TrainAcc 0.2000	ValidAcc 0.0840	TestAcc 0.0920	BestValid 0.1040
	Epoch 110:	Loss 1.2955	TrainAcc 0.2000	ValidAcc 0.0840	TestAcc 0.0920	BestValid 0.1040
	Epoch 120:	Loss 1.2869	TrainAcc 0.2000	ValidAcc 0.0840	TestAcc 0.0920	BestValid 0.1040
	Epoch 130:	Loss 1.2939	TrainAcc 0.2000	ValidAcc 0.0840	TestAcc 0.0920	BestValid 0.1040
	Epoch 140:	Loss 1.2847	TrainAcc 0.2000	ValidAcc 0.0840	TestAcc 0.0920	BestValid 0.1040
	Epoch 150:	Loss 1.2676	TrainAcc 0.2000	ValidAcc 0.0840	TestAcc 0.0920	BestValid 0.1040
	Epoch 160:	Loss 1.2656	TrainAcc 0.2000	ValidAcc 0.0840	TestAcc 0.0920	BestValid 0.1040
	Epoch 170:	Loss 1.2597	TrainAcc 0.2000	ValidAcc 0.0840	TestAcc 0.0920	BestValid 0.1040
	Epoch 180:	Loss 1.2803	TrainAcc 0.2000	ValidAcc 0.0840	TestAcc 0.0920	BestValid 0.1040
	Epoch 190:	Loss 1.2472	TrainAcc 0.2000	ValidAcc 0.0840	TestAcc 0.0920	BestValid 0.1040
	Epoch 200:	Loss 1.2423	TrainAcc 0.2000	ValidAcc 0.0840	TestAcc 0.0920	BestValid 0.1040
	Epoch 210:	Loss 1.2451	TrainAcc 0.2000	ValidAcc 0.0840	TestAcc 0.0920	BestValid 0.1040
	Epoch 220:	Loss 1.2378	TrainAcc 0.2000	ValidAcc 0.0840	TestAcc 0.0920	BestValid 0.1040
	Epoch 230:	Loss 1.2190	TrainAcc 0.2000	ValidAcc 0.0840	TestAcc 0.0920	BestValid 0.1040
	Epoch 240:	Loss 1.2121	TrainAcc 0.2000	ValidAcc 0.0840	TestAcc 0.0920	BestValid 0.1040
	Epoch 250:	Loss 1.2242	TrainAcc 0.2000	ValidAcc 0.0840	TestAcc 0.0920	BestValid 0.1040
	Epoch 260:	Loss 1.2334	TrainAcc 0.2000	ValidAcc 0.0840	TestAcc 0.0920	BestValid 0.1040
	Epoch 270:	Loss 1.2390	TrainAcc 0.2000	ValidAcc 0.0840	TestAcc 0.0920	BestValid 0.1040
	Epoch 280:	Loss 1.2223	TrainAcc 0.2000	ValidAcc 0.0840	TestAcc 0.0920	BestValid 0.1040
	Epoch 290:	Loss 1.2223	TrainAcc 0.2000	ValidAcc 0.0840	TestAcc 0.0920	BestValid 0.1040
	Epoch 300:	Loss 1.2218	TrainAcc 0.2000	ValidAcc 0.0840	TestAcc 0.0920	BestValid 0.1040
****** Epoch Time (Excluding Evaluation Cost): 0.134 s ******
****** Breakdown Analysis ******
Cluster-Wide Average, Bubble-Pipeline: 20.980 ms (Max: 26.347, Min: 13.974, Sum: 167.838)
Cluster-Wide Average, Compute: 61.953 ms (Max: 111.858, Min: 52.276, Sum: 495.627)
Cluster-Wide Average, Communication-Layer: 5.582 ms (Max: 6.099, Min: 4.360, Sum: 44.653)
Cluster-Wide Average, Bubble-Imbalance: 43.272 ms (Max: 54.240, Min: 1.393, Sum: 346.175)
Cluster-Wide Average, Communication-Graph: 0.628 ms (Max: 0.775, Min: 0.480, Sum: 5.021)
Cluster-Wide Average, Optimization: 0.246 ms (Max: 0.635, Min: 0.178, Sum: 1.966)
Cluster-Wide Average, Others: 1.036 ms (Max: 2.049, Min: 0.600, Sum: 8.287)
****** Breakdown Sum: 133.696 ms ******
Cluster-Wide Average, GPU Memory Consumption: 2.463 GB (Max: 4.104, Min: 1.999, Sum: 19.700)
Cluster-Wide Average, Graph-Level Communication Throughput: -nan Gbps (Max: -nan, Min: -nan, Sum: -nan)
Cluster-Wide Average, Layer-Level Communication Throughput: 33.984 Gbps (Max: 37.522, Min: 25.040, Sum: 271.869)
Layer-level communication (cluster-wide, per-epoch): 0.180 GB
Graph-level communication (cluster-wide, per-epoch): 0.000 GB
Weight-sync communication (cluster-wide, per-epoch): 0.000 GB
Total communication (cluster-wide, per-epoch): 0.180 GB
****** Accuracy Results ******
Highest valid_acc: 0.1040
Target test_acc: 0.1210
Epoch to reach the target acc: 0
[MPI Rank 0] Success 
[MPI Rank 4] Success 
[MPI Rank 1] Success 
[MPI Rank 5] Success 
[MPI Rank 2] Success 
[MPI Rank 6] Success 
[MPI Rank 3] Success 
[MPI Rank 7] Success 
