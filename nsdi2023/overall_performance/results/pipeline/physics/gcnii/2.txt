Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
DONE MPI INIT
Initialized node 0 on machine gnerv7
DONE MPI INIT
Initialized node 3 on machine gnerv7
DONE MPI INIT
Initialized node 1 on machine gnerv7
DONE MPI INIT
Initialized node 2 on machine gnerv7
DONE MPI INIT
Initialized node 6 on machine gnerv8
DONE MPI INITDONE MPI INIT
Initialized node 7 on machine gnerv8

Initialized node 5 on machine gnerv8
DONE MPI INIT
Initialized node 4 on machine gnerv8
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
        It takes 0.010 seconds.
Building the CSC structure...
        It takes 0.011 seconds.
Building the CSC structure...
        It takes 0.011 seconds.
Building the CSC structure...
        It takes 0.011 seconds.
Building the CSC structure...
        It takes 0.010 seconds.
Building the CSC structure...
        It takes 0.015 seconds.
Building the CSC structure...
        It takes 0.016 seconds.
Building the CSC structure...
        It takes 0.010 seconds.
        It takes 0.020 seconds.
Building the CSC structure...
Building the Feature Vector...
        It takes 0.015 seconds.
        It takes 0.012 seconds.
        It takes 0.017 seconds.
        It takes 0.019 seconds.
Building the Feature Vector...
        It takes 0.012 seconds.
Building the Feature Vector...
        It takes 0.012 seconds.
Building the Feature Vector...
Building the Feature Vector...
        It takes 0.011 seconds.
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
        It takes 0.455 seconds.
Building the Label Vector...
        It takes 0.002 seconds.
        It takes 0.455 seconds.
Building the Label Vector...
        It takes 0.002 seconds.
        It takes 0.510 seconds.
Building the Label Vector...
        It takes 0.518 seconds.
Building the Label Vector...
        It takes 0.007 seconds.
        It takes 0.003 seconds.
        It takes 0.615 seconds.
Building the Label Vector...
        It takes 0.004 seconds.
        It takes 0.614 seconds.
Building the Label Vector...
The graph dataset locates at /shared_hdd_storage/jingjichen/gnn_datasets/pipeline_parallel_datasets/physics/32_parts
The number of GCNII layers: 32
The number of hidden units: 100
The number of training epoches: 300
Learning rate: 0.001000
The partition strategy: model
The dropout rate: 0.500
The checkpointed weight file: /tmp/saved_weights
The random seed: 2
GCN hyper-parameter alpha: 0.100000
GCN hyper-parameter lambda: 0.500000
Number of classes: 5
Number of feature dimensions: 8415
Number of vertices: 34493
Number of GPUs: 8
        It takes 0.003 seconds.
        It takes 0.624 seconds.
Building the Label Vector...
        It takes 0.623 seconds.
Building the Label Vector...
        It takes 0.008 seconds.
        It takes 0.008 seconds.
GPU 0, layer [0, 5)
GPU 1, layer [5, 9)
GPU 2, layer [9, 13)
GPU 3, layer [13, 17)
GPU 4, layer [17, 21)
GPU 5, layer [21, 25)
GPU 6, layer [25, 29)
GPU 7, layer [29, 33)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
34493, 530417, 530417
Number of vertices per chunk: 1078
csr in-out ready !Start Cost Model Initialization...
GPU 0, layer [0, 5)
GPU 1, layer [5, 9)
GPU 2, layer [9, 13)
GPU 3, layer [13, 17)
GPU 4, layer [17, 21)
GPU 5, layer [21, 25)
GPU 6, layer [25, 29)
GPU 7, layer [29, 33)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
34493, 530417, 530417
Number of vertices per chunk: 1078
GPU 0, layer [0, 5)
GPU 1, layer [5, 9)
GPU 2, layer [9, 13)
GPU 3, layer [13, 17)
GPU 4, layer [17, 21)
GPU 5, layer [21, 25)
GPU 6, layer [25, 29)
GPU 7, layer [29, 33)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
34493, 530417, 530417
Number of vertices per chunk: 1078
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
GPU 0, layer [0, 5)
GPU 1, layer [5, 9)
GPU 2, layer [9, 13)
GPU 3, layer [13, 17)
GPU 4, layer [17, 21)
GPU 5, layer [21, 25)
GPU 6, layer [25, 29)
GPU 7, layer [29, 33)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
34493, 530417, 530417
Number of vertices per chunk: 1078
csr in-out ready !Start Cost Model Initialization...
GPU 0, layer [0, 5)
GPU 1, layer [5, 9)
GPU 2, layer [9, 13)
GPU 3, layer [13, 17)
GPU 4, layer [17, 21)
GPU 5, layer [21, 25)
GPU 6, layer [25, 29)
GPU 7, layer [29, 33)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 5)
GPU 1, layer [5, 9)
GPU 2, layer [9, 13)
GPU 3, layer [13, 17)
GPU 4, layer [17, 21)
GPU 5, layer [21, 25)
GPU 6, layer [25, 29)
GPU 7, layer [29, 33)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
34493, 530417, 530417
Number of vertices per chunk: 1078
34493, 530417, 530417
Number of vertices per chunk: 1078
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
train nodes 100, valid nodes 500, test nodes 1000
GPU 0, layer [0, 5)
GPU 1, layer [5, 9)
GPU 2, layer [9, 13)
GPU 3, layer [13, 17)
GPU 4, layer [17, 21)
GPU 5, layer [21, 25)
GPU 6, layer [25, 29)
GPU 7, layer [29, 33)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
Chunks (number of global chunks: 32): 0-[0, 1025) 1-[1025, 2154) 2-[2154, 3262) 3-[3262, 4284) 4-[4284, 5334) 5-[5334, 6511) 6-[6511, 7597) 7-[7597, 8680) 8-[8680, 9764) ... 31-[33337, 34493)
GPU 0, layer [0, 5)
GPU 1, layer [5, 9)
GPU 2, layer [9, 13)
GPU 3, layer [13, 17)
GPU 4, layer [17, 21)
GPU 5, layer [21, 25)
GPU 6, layer [25, 29)
GPU 7, layer [29, 33)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
34493, 530417, 530417
Number of vertices per chunk: 1078
34493, 530417, 530417
Number of vertices per chunk: 1078
csr in-out ready !Start Cost Model Initialization...
***** Start profiling the layer-level communication performance *******
csr in-out ready !Start Cost Model Initialization...
The layer-level communication performance: 60.259 Gbps (per GPU), 482.073 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 59.951 Gbps (per GPU), 479.607 Gbps (aggregated)
The layer-level communication performance: 59.952 Gbps (per GPU), 479.613 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 59.664 Gbps (per GPU), 477.315 Gbps (aggregated)
The layer-level communication performance: 59.642 Gbps (per GPU), 477.135 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 59.394 Gbps (per GPU), 475.153 Gbps (aggregated)
The layer-level communication performance: 59.346 Gbps (per GPU), 474.768 Gbps (aggregated)
The layer-level communication performance: 59.315 Gbps (per GPU), 474.516 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The graph-level communication performance (supernode = 2): 158.500 Gbps (per GPU), 1267.999 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.458 Gbps (per GPU), 1267.664 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.479 Gbps (per GPU), 1267.832 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.497 Gbps (per GPU), 1267.975 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.476 Gbps (per GPU), 1267.808 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.452 Gbps (per GPU), 1267.618 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.497 Gbps (per GPU), 1267.975 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.476 Gbps (per GPU), 1267.808 Gbps (aggregated, cluster-wide)
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
The graph-level communication performance (supernode = 4): 104.630 Gbps (per GPU), 837.041 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 104.632 Gbps (per GPU), 837.054 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 104.632 Gbps (per GPU), 837.053 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 104.633 Gbps (per GPU), 837.061 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 104.630 Gbps (per GPU), 837.040 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 104.628 Gbps (per GPU), 837.027 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 104.632 Gbps (per GPU), 837.054 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 104.633 Gbps (per GPU), 837.061 Gbps (aggregated, cluster-wide)
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
The graph-level communication performance (supernode = 8): 35.917 Gbps (per GPU), 287.333 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 35.917 Gbps (per GPU), 287.335 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 35.916 Gbps (per GPU), 287.329 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 35.911 Gbps (per GPU), 287.290 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 35.917 Gbps (per GPU), 287.338 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 35.911 Gbps (per GPU), 287.285 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 35.917 Gbps (per GPU), 287.335 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 35.907 Gbps (per GPU), 287.259 Gbps (aggregated, cluster-wide)
 LType   LT0   LT1   LT2 Ratio  VSum  ESum
 chk_0  1.27ms  0.30ms  0.42ms  4.23  1.02K  0.02M
 chk_1  1.35ms  0.30ms  0.42ms  4.49  1.13K  0.01M
 chk_2  1.34ms  0.30ms  0.42ms  4.40  1.11K  0.01M
 chk_3  1.29ms  0.30ms  0.42ms  4.34  1.02K  0.02M
 chk_4  1.30ms  0.30ms  0.42ms  4.30  1.05K  0.02M
 chk_5  1.39ms  0.30ms  0.42ms  4.64  1.18K  0.01M
 chk_6  1.33ms  0.30ms  0.42ms  4.43  1.09K  0.02M
 chk_7  1.33ms  0.30ms  0.42ms  4.43  1.08K  0.02M
 chk_8  1.90ms  0.30ms  0.42ms  6.35  1.08K  0.01M
 chk_9  1.30ms  0.30ms  0.42ms  4.34  1.06K  0.02M
chk_10  1.29ms  0.30ms  0.42ms  4.34  1.04K  0.02M
chk_11  1.37ms  0.30ms  0.42ms  4.57  1.11K  0.01M
chk_12  1.35ms  0.30ms  0.42ms  4.49  1.11K  0.01M
chk_13  1.26ms  0.29ms  0.42ms  4.28  1.01K  0.02M
chk_14  1.33ms  0.30ms  0.42ms  4.45  1.09K  0.01M
chk_15  1.28ms  0.30ms  0.42ms  4.32  1.03K  0.02M
chk_16  1.23ms  0.29ms  0.42ms  4.21  0.98K  0.02M
chk_17  1.33ms  0.30ms  0.42ms  4.45  1.09K  0.01M
chk_18  1.29ms  0.30ms  0.42ms  4.31  1.04K  0.02M
chk_19  1.35ms  0.30ms  0.43ms  4.48  1.12K  0.01M
chk_20  1.35ms  0.30ms  0.42ms  4.49  1.13K  0.01M
chk_21  1.30ms  0.30ms  0.42ms  4.33  1.05K  0.02M
chk_22  1.35ms  0.30ms  0.42ms  4.45  1.11K  0.01M
chk_23  1.34ms  0.30ms  0.43ms  4.45  1.10K  0.01M
chk_24  1.27ms  0.30ms  0.42ms  4.28  1.02K  0.02M
chk_25  1.26ms  0.30ms  0.42ms  4.26  1.01K  0.02M
chk_26  1.35ms  0.30ms  0.42ms  4.47  1.12K  0.01M
chk_27  1.90ms  0.30ms  0.42ms  6.37  1.08K  0.02M
chk_28  1.33ms  0.30ms  0.42ms  4.41  1.07K  0.02M
chk_29  1.34ms  0.30ms  0.42ms  4.48  1.11K  0.01M
chk_30  1.34ms  0.30ms  0.42ms  4.45  1.10K  0.01M
chk_31  1.38ms  0.30ms  0.43ms  4.63  1.16K  0.01M
   Avg  1.36  0.30  0.42
   Max  1.90  0.30  0.43
   Min  1.23  0.29  0.42
 Ratio  1.54  1.04  1.02
   Var  0.02  0.00  0.00
Profiling takes 0.888 s
*** Node 0, starting model training...
Num Stages: 8 / 8
Node 0, Pipeline Input Tensor: NULL
Node 0, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 0 owns the model-level partition [0, 34)
*** Node 0, constructing the helper classes...
Node 0, Local Vertex Begin: 0, Num Local Vertices: 34493
*** Node 2, starting model training...
Num Stages: 8 / 8
Node 2, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 2, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 2 owns the model-level partition [62, 90)
*** Node 2, constructing the helper classes...
Node 2, Local Vertex Begin: 0, Num Local Vertices: 34493
*** Node 3, starting model training...
Num Stages: 8 / 8
Node 3, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 3, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 3 owns the model-level partition [90, 118)
*** Node 3, constructing the helper classes...
Node 3, Local Vertex Begin: 0, Num Local Vertices: 34493
*** Node 1, starting model training...
Num Stages: 8 / 8
Node 1, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 1, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 1 owns the model-level partition [34, 62)
*** Node 1, constructing the helper classes...
Node 1, Local Vertex Begin: 0, Num Local Vertices: 34493
*** Node 4, starting model training...
Num Stages: 8 / 8
*** Node 5, starting model training...
Num Stages: 8 / 8
Node 5, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 5, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 5 owns the model-level partition [146, 174)
*** Node 5, constructing the helper classes...
Node 5, Local Vertex Begin: 0, Num Local Vertices: 34493
*** Node 6, starting model training...
Num Stages: 8 / 8
Node 6, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 6, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 6 owns the model-level partition [174, 202)
*** Node 6, constructing the helper classes...
Node 6, Local Vertex Begin: 0, Num Local Vertices: 34493
*** Node 7, starting model training...
Num Stages: 8 / 8
Node 7, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 7, Pipeline Output Tensor: NULL
*** Node 7 owns the model-level partition [202, 233)
*** Node 7, constructing the helper classes...
Node 7, Local Vertex Begin: 0, Num Local Vertices: 34493
Node 4, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 4, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 4 owns the model-level partition [118, 146)
*** Node 4, constructing the helper classes...
Node 4, Local Vertex Begin: 0, Num Local Vertices: 34493
*** Node 0, setting up some other necessary information...
*** Node 7, setting up some other necessary information...
*** Node 3, setting up some other necessary information...
*** Node 5, setting up some other necessary information...
*** Node 2, setting up some other necessary information...
*** Node 1, setting up some other necessary information...
*** Node 6, setting up some other necessary information...
*** Node 4, setting up some other necessary information...
+++++++++ Node 0 initializing the weights for op[0, 34)...
+++++++++ Node 1 initializing the weights for op[34, 62)...
+++++++++ Node 5 initializing the weights for op[146, 174)...
+++++++++ Node 2 initializing the weights for op[62, 90)...
+++++++++ Node 3 initializing the weights for op[90, 118)...
+++++++++ Node 4 initializing the weights for op[118, 146)...
+++++++++ Node 6 initializing the weights for op[174, 202)...
+++++++++ Node 7 initializing the weights for op[202, 233)...
Node 2, discovering the vertices that will be sent across graph boundary...
Node 7, discovering the vertices that will be sent across graph boundary...
Node 0, discovering the vertices that will be sent across graph boundary...
The number of mirror vertices: 0
Node 0, discovering the vertices that will be received across the graph boundary.
Node 4, discovering the vertices that will be sent across graph boundary...
Node 1, discovering the vertices that will be sent across graph boundary...
Node 1, discovering the vertices that will be received across the graph boundary.
Node 5, discovering the vertices that will be sent across graph boundary...
Node 2, discovering the vertices that will be received across the graph boundary.
Node 6, discovering the vertices that will be sent across graph boundary...
Node 3, discovering the vertices that will be sent across graph boundary...
Node 3, discovering the vertices that will be received across the graph boundary.
Node 4, discovering the vertices that will be received across the graph boundary.
****** Start Scheduling the Tasks in a Pipelined Fashion ******
Node 5, discovering the vertices that will be received across the graph boundary.
Node 6, discovering the vertices that will be received across the graph boundary.
Node 7, discovering the vertices that will be received across the graph boundary.
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
*** Node 0, starting task scheduling...



*** Node 4, starting task scheduling...
*** Node 1, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 5, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 2, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 6, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 3, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 7, starting task scheduling...
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
	Epoch 1:	Loss 1.7855	TrainAcc 0.2000	ValidAcc 0.0800	TestAcc 0.0760	BestValid 0.0800
	Epoch 10:	Loss 1.5637	TrainAcc 0.9400	ValidAcc 0.9100	TestAcc 0.8920	BestValid 0.9100
	Epoch 20:	Loss 0.9638	TrainAcc 0.9300	ValidAcc 0.9280	TestAcc 0.9170	BestValid 0.9280
	Epoch 30:	Loss 0.5102	TrainAcc 0.9400	ValidAcc 0.9360	TestAcc 0.9310	BestValid 0.9360
	Epoch 40:	Loss 0.6449	TrainAcc 0.9600	ValidAcc 0.9380	TestAcc 0.9340	BestValid 0.9380
	Epoch 50:	Loss 0.6094	TrainAcc 0.9700	ValidAcc 0.9420	TestAcc 0.9380	BestValid 0.9420
	Epoch 60:	Loss 0.6828	TrainAcc 0.9700	ValidAcc 0.9480	TestAcc 0.9340	BestValid 0.9480
	Epoch 70:	Loss 0.5737	TrainAcc 0.9800	ValidAcc 0.9500	TestAcc 0.9390	BestValid 0.9500
	Epoch 80:	Loss 0.4223	TrainAcc 0.9800	ValidAcc 0.9440	TestAcc 0.9390	BestValid 0.9500
	Epoch 90:	Loss 0.1496	TrainAcc 0.9800	ValidAcc 0.9500	TestAcc 0.9390	BestValid 0.9500
	Epoch 100:	Loss 0.1936	TrainAcc 0.9900	ValidAcc 0.9480	TestAcc 0.9400	BestValid 0.9500
	Epoch 110:	Loss 0.1409	TrainAcc 0.9900	ValidAcc 0.9460	TestAcc 0.9380	BestValid 0.9500
	Epoch 120:	Loss 0.2502	TrainAcc 0.9900	ValidAcc 0.9420	TestAcc 0.9350	BestValid 0.9500
	Epoch 130:	Loss 0.1236	TrainAcc 0.9900	ValidAcc 0.9380	TestAcc 0.9390	BestValid 0.9500
	Epoch 140:	Loss 0.3308	TrainAcc 0.9900	ValidAcc 0.9440	TestAcc 0.9400	BestValid 0.9500
	Epoch 150:	Loss 0.1633	TrainAcc 0.9900	ValidAcc 0.9460	TestAcc 0.9410	BestValid 0.9500
	Epoch 160:	Loss 0.4291	TrainAcc 0.9900	ValidAcc 0.9400	TestAcc 0.9400	BestValid 0.9500
	Epoch 170:	Loss 0.2071	TrainAcc 0.9900	ValidAcc 0.9420	TestAcc 0.9430	BestValid 0.9500
	Epoch 180:	Loss 0.1043	TrainAcc 0.9900	ValidAcc 0.9420	TestAcc 0.9430	BestValid 0.9500
	Epoch 190:	Loss 0.4302	TrainAcc 0.9900	ValidAcc 0.9420	TestAcc 0.9440	BestValid 0.9500
	Epoch 200:	Loss 0.1728	TrainAcc 1.0000	ValidAcc 0.9460	TestAcc 0.9410	BestValid 0.9500
	Epoch 210:	Loss 0.1927	TrainAcc 1.0000	ValidAcc 0.9500	TestAcc 0.9400	BestValid 0.9500
	Epoch 220:	Loss 0.2027	TrainAcc 1.0000	ValidAcc 0.9520	TestAcc 0.9360	BestValid 0.9520
	Epoch 230:	Loss 0.1972	TrainAcc 1.0000	ValidAcc 0.9500	TestAcc 0.9400	BestValid 0.9520
	Epoch 240:	Loss 0.1099	TrainAcc 1.0000	ValidAcc 0.9480	TestAcc 0.9450	BestValid 0.9520
	Epoch 250:	Loss 0.0764	TrainAcc 1.0000	ValidAcc 0.9420	TestAcc 0.9420	BestValid 0.9520
	Epoch 260:	Loss 0.5578	TrainAcc 1.0000	ValidAcc 0.9440	TestAcc 0.9420	BestValid 0.9520
	Epoch 270:	Loss 0.2962	TrainAcc 1.0000	ValidAcc 0.9460	TestAcc 0.9430	BestValid 0.9520
	Epoch 280:	Loss 0.4138	TrainAcc 1.0000	ValidAcc 0.9440	TestAcc 0.9430	BestValid 0.9520
	Epoch 290:	Loss 0.1014	TrainAcc 1.0000	ValidAcc 0.9440	TestAcc 0.9440	BestValid 0.9520
	Epoch 300:	Loss 0.1613	TrainAcc 1.0000	ValidAcc 0.9440	TestAcc 0.9440	BestValid 0.9520
****** Epoch Time (Excluding Evaluation Cost): 0.109 s ******
****** Breakdown Analysis ******
Cluster-Wide Average, Bubble-Pipeline: 17.366 ms (Max: 21.159, Min: 12.361, Sum: 138.925)
Cluster-Wide Average, Compute: 49.479 ms (Max: 85.652, Min: 42.237, Sum: 395.836)
Cluster-Wide Average, Communication-Layer: 10.442 ms (Max: 11.819, Min: 8.196, Sum: 83.535)
Cluster-Wide Average, Bubble-Imbalance: 30.399 ms (Max: 38.439, Min: 1.268, Sum: 243.196)
Cluster-Wide Average, Communication-Graph: 0.522 ms (Max: 0.574, Min: 0.447, Sum: 4.174)
Cluster-Wide Average, Optimization: 0.126 ms (Max: 0.314, Min: 0.096, Sum: 1.012)
Cluster-Wide Average, Others: 0.737 ms (Max: 1.605, Min: 0.478, Sum: 5.898)
****** Breakdown Sum: 109.072 ms ******
Cluster-Wide Average, GPU Memory Consumption: 2.624 GB (Max: 4.686, Min: 2.315, Sum: 20.989)
Cluster-Wide Average, Graph-Level Communication Throughput: -nan Gbps (Max: -nan, Min: -nan, Sum: -nan)
Cluster-Wide Average, Layer-Level Communication Throughput: 36.376 Gbps (Max: 42.105, Min: 26.029, Sum: 291.011)
Layer-level communication (cluster-wide, per-epoch): 0.360 GB
Graph-level communication (cluster-wide, per-epoch): 0.000 GB
Weight-sync communication (cluster-wide, per-epoch): 0.000 GB
Total communication (cluster-wide, per-epoch): 0.360 GB
****** Accuracy Results ******
Highest valid_acc: 0.9520
Target test_acc: 0.9360
Epoch to reach the target acc: 219
[MPI Rank 0] Success 
[MPI Rank 1] Success 
[MPI Rank 2] Success 
[MPI Rank 3] Success 
[MPI Rank 4] Success 
[MPI Rank 5] Success 
[MPI Rank 6] Success 
[MPI Rank 7] Success 
