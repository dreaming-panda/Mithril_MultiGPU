Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
DONE MPI INIT
Initialized node 5 on machine gnerv3
DONE MPI INITDONE MPI INIT
Initialized node 6 on machine gnerv3
DONE MPI INIT
Initialized node 1 on machine gnerv2
DONE MPI INIT
Initialized node 7 on machine gnerv3
DONE MPI INIT
Initialized node 3 on machine gnerv2
DONE MPI INIT
Initialized node 4 on machine gnerv3
DONE MPI INIT

Initialized node 2 on machine gnerv2
Initialized node 0 on machine gnerv2
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
        It takes 0.228 seconds.
Building the CSC structure...
        It takes 0.270 seconds.
Building the CSC structure...
        It takes 0.281 seconds.
Building the CSC structure...
        It takes 0.291 seconds.
Building the CSC structure...
        It takes 0.297 seconds.
Building the CSC structure...
        It takes 0.311 seconds.
Building the CSC structure...
        It takes 0.319 seconds.
Building the CSC structure...
        It takes 0.320 seconds.
Building the CSC structure...
        It takes 0.222 seconds.
        It takes 0.267 seconds.
        It takes 0.285 seconds.
Building the Feature Vector...
        It takes 0.287 seconds.
        It takes 0.288 seconds.
        It takes 0.299 seconds.
        It takes 0.310 seconds.
        It takes 0.326 seconds.
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
        It takes 0.457 seconds.
Building the Label Vector...
        It takes 0.521 seconds.
Building the Label Vector...
        It takes 0.482 seconds.
Building the Label Vector...
        It takes 0.493 seconds.
Building the Label Vector...
        It takes 0.185 seconds.
        It takes 0.490 seconds.
Building the Label Vector...
        It takes 0.510 seconds.
Building the Label Vector...
        It takes 0.533 seconds.
Building the Label Vector...
        It takes 0.521 seconds.
Building the Label Vector...
        It takes 0.191 seconds.
        It takes 0.191 seconds.
        It takes 0.191 seconds.
        It takes 0.187 seconds.
        It takes 0.189 seconds.
        It takes 0.201 seconds.
        It takes 0.200 seconds.
The graph dataset locates at /shared_hdd_storage/jingjichen/gnn_datasets/pipeline_parallel_datasets/yelp/32_parts
The number of GCNII layers: 32
The number of hidden units: 100
The number of training epoches: 5000
Learning rate: 0.001000
The partition strategy: model
The dropout rate: 0.500
The checkpointed weight file: /tmp/saved_weights
The random seed: 1
Number of classes: 100
Number of feature dimensions: 300
Number of vertices: 716847
Number of GPUs: 8
GPU 0, layer [0, 4)
GPU 1, layer [4, 8)
GPU 2, layer [8, 12)
GPU 3, layer [12, 16)
GPU 4, layer [16, 20)
GPU 5, layer [20, 24)
GPU 6, layer [24, 28)
GPU 7, layer [28, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
716847, 13954819, 13954819
Number of vertices per chunk: 22402
GPU 0, layer [0, 4)
GPU 1, layer [4, 8)
GPU 2, layer [8, 12)
GPU 3, layer [12, 16)
GPU 4, layer [16, 20)
GPU 5, layer [20, 24)
GPU 6, layer [24, 28)
GPU 7, layer [28, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 4)
GPU 1, layer [4, 8)
GPU 2, layer [8, 12)
GPU 3, layer [12, 16)
GPU 4, layer [16, 20)
GPU 5, layer [20, 24)
GPU 6, layer [24, 28)
GPU 7, layer [28, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 4)
GPU 1, layer [4, 8)
GPU 2, layer [8, 12)
GPU 3, layer [12, 16)
GPU 4, layer [16, 20)
GPU 5, layer [20, 24)
GPU 6, layer [24, 28)
GPU 7, layer [28, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 4)
GPU 1, layer [4, 8)
GPU 2, layer [8, 12)
GPU 3, layer [12, 16)
GPU 4, layer [16, 20)
GPU 5, layer [20, 24)
GPU 6, layer [24, 28)
GPU 7, layer [28, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 4)
GPU 1, layer [4, 8)
GPU 2, layer [8, 12)
GPU 3, layer [12, 16)
GPU 4, layer [16, 20)
GPU 5, layer [20, 24)
GPU 6, layer [24, 28)
GPU 7, layer [28, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
716847, 13954819, 13954819
Number of vertices per chunk: 22402
716847, 13954819, 13954819
716847, 13954819, 13954819
Number of vertices per chunk: 22402
Number of vertices per chunk: 22402
716847, 13954819, 13954819
Number of vertices per chunk: 22402
716847, 13954819, 13954819
Number of vertices per chunk: 22402
train nodes 537635, valid nodes 107527, test nodes 71685
GPU 0, layer [0, 4)
GPU 1, layer [4, 8)
GPU 2, layer [8, 12)
GPU 3, layer [12, 16)
GPU 4, layer [16, 20)
GPU 5, layer [20, 24)
GPU 6, layer [24, 28)
GPU 7, layer [28, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
Chunks (number of global chunks: 32): 0-[0, 24122) 1-[24122, 44991) 2-[44991, 66905) 3-[66905, 90565) 4-[90565, 109350) 5-[109350, 132203) 6-[132203, 154486) 7-[154486, 177346) 8-[177346, 198991) ... 31-[695934, 716847)
GPU 0, layer [0, 4)
GPU 1, layer [4, 8)
GPU 2, layer [8, 12)
GPU 3, layer [12, 16)
GPU 4, layer [16, 20)
GPU 5, layer [20, 24)
GPU 6, layer [24, 28)
GPU 7, layer [28, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
716847, 13954819, 13954819
Number of vertices per chunk: 22402
csr in-out ready !Start Cost Model Initialization...
716847, 13954819, 13954819
Number of vertices per chunk: 22402
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
***** Start profiling the layer-level communication performance *******
csr in-out ready !Start Cost Model Initialization...
The layer-level communication performance: 58.621 Gbps (per GPU), 468.966 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 58.340 Gbps (per GPU), 466.721 Gbps (aggregated)
The layer-level communication performance: 58.332 Gbps (per GPU), 466.654 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 58.078 Gbps (per GPU), 464.621 Gbps (aggregated)
The layer-level communication performance: 58.049 Gbps (per GPU), 464.394 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 57.837 Gbps (per GPU), 462.695 Gbps (aggregated)
The layer-level communication performance: 57.791 Gbps (per GPU), 462.325 Gbps (aggregated)
The layer-level communication performance: 57.762 Gbps (per GPU), 462.098 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The graph-level communication performance (supernode = 2): 156.265 Gbps (per GPU), 1250.119 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 156.253 Gbps (per GPU), 1250.025 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 156.236 Gbps (per GPU), 1249.886 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 156.253 Gbps (per GPU), 1250.025 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 156.297 Gbps (per GPU), 1250.375 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 156.256 Gbps (per GPU), 1250.049 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 156.244 Gbps (per GPU), 1249.956 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 156.253 Gbps (per GPU), 1250.025 Gbps (aggregated, cluster-wide)
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
The graph-level communication performance (supernode = 4): 100.470 Gbps (per GPU), 803.757 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 100.470 Gbps (per GPU), 803.757 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 100.470 Gbps (per GPU), 803.763 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 100.469 Gbps (per GPU), 803.750 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 100.470 Gbps (per GPU), 803.757 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 100.470 Gbps (per GPU), 803.762 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 100.470 Gbps (per GPU), 803.757 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 100.455 Gbps (per GPU), 803.642 Gbps (aggregated, cluster-wide)
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
The graph-level communication performance (supernode = 8): 31.424 Gbps (per GPU), 251.394 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 31.424 Gbps (per GPU), 251.392 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 31.424 Gbps (per GPU), 251.389 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 31.424 Gbps (per GPU), 251.392 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 31.424 Gbps (per GPU), 251.393 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 31.423 Gbps (per GPU), 251.384 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 31.423 Gbps (per GPU), 251.385 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 31.424 Gbps (per GPU), 251.390 Gbps (aggregated, cluster-wide)
 LType   LT0   LT1   LT2 Ratio  VSum  ESum
 chk_0  1.49ms  2.62ms  4.35ms  2.91 24.12K  0.35M
 chk_1  1.56ms  2.55ms  4.11ms  2.64 20.87K  0.49M
 chk_2  1.44ms  2.47ms  4.10ms  2.85 21.91K  0.46M
 chk_3  1.50ms  2.62ms  4.33ms  2.89 23.66K  0.35M
 chk_4  1.46ms  2.36ms  3.80ms  2.61 18.79K  0.62M
 chk_5  1.47ms  2.56ms  4.23ms  2.87 22.85K  0.37M
 chk_6  1.51ms  2.56ms  4.20ms  2.78 22.28K  0.40M
 chk_7  1.46ms  2.55ms  4.21ms  2.89 22.86K  0.39M
 chk_8  1.49ms  2.51ms  4.13ms  2.76 21.64K  0.45M
 chk_9  1.44ms  2.53ms  4.20ms  2.93 22.92K  0.37M
chk_10  1.53ms  2.50ms  4.04ms  2.65 20.30K  0.56M
chk_11  1.49ms  2.59ms  4.29ms  2.88 23.32K  0.33M
chk_12  1.53ms  2.52ms  4.10ms  2.69 21.10K  0.49M
chk_13  1.48ms  2.45ms  4.02ms  2.72 20.79K  0.49M
chk_14  1.44ms  2.55ms  4.26ms  2.97 23.53K  0.36M
chk_15  1.39ms  2.49ms  4.20ms  3.01 23.21K  0.39M
chk_16  1.42ms  2.57ms  4.32ms  3.05 24.39K  0.32M
chk_17  1.47ms  2.59ms  4.33ms  2.95 23.94K  0.34M
chk_18  1.49ms  2.50ms  4.12ms  2.77 21.61K  0.45M
chk_19  1.44ms  2.57ms  4.30ms  2.98 23.89K  0.34M
chk_20  1.53ms  2.54ms  4.15ms  2.72 21.64K  0.47M
chk_21  1.47ms  2.58ms  4.28ms  2.91 23.43K  0.34M
chk_22  1.47ms  2.54ms  4.22ms  2.88 22.84K  0.37M
chk_23  1.48ms  2.58ms  4.29ms  2.89 23.35K  0.37M
chk_24  1.49ms  2.57ms  4.23ms  2.84 22.72K  0.40M
chk_25  1.54ms  2.57ms  4.20ms  2.73 21.95K  0.46M
chk_26  1.52ms  2.55ms  4.19ms  2.75 22.06K  0.41M
chk_27  1.46ms  2.55ms  4.24ms  2.90 23.02K  0.35M
chk_28  1.47ms  2.55ms  4.24ms  2.88 22.97K  0.36M
chk_29  1.44ms  2.48ms  4.11ms  2.85 22.14K  0.45M
chk_30  1.51ms  2.54ms  4.16ms  2.75 21.84K  0.44M
chk_31  1.53ms  2.50ms  4.09ms  2.67 20.91K  0.49M
   Avg  1.48  2.54  4.19
   Max  1.56  2.62  4.35
   Min  1.39  2.36  3.80
 Ratio  1.12  1.11  1.14
   Var  0.00  0.00  0.01
Profiling takes 3.105 s
*** Node 0, starting model training...
Num Stages: 8 / 8
Node 0, Pipeline Input Tensor: NULL
Node 0, Pipeline Output Tensor: OPERATOR_ADD
*** Node 0 owns the model-level partition [0, 27)
*** Node 0, constructing the helper classes...
Node 0, Local Vertex Begin: 0, Num Local Vertices: 716847
*** Node 1, starting model training...
Num Stages: 8 / 8
Node 1, Pipeline Input Tensor: OPERATOR_ADD
Node 1, Pipeline Output Tensor: OPERATOR_ADD
*** Node 1 owns the model-level partition [27, 55)
*** Node 1, constructing the helper classes...
Node 1, Local Vertex Begin: 0, Num Local Vertices: 716847
*** Node 2, starting model training...
Num Stages: 8 / 8
Node 2, Pipeline Input Tensor: OPERATOR_ADD
Node 2, Pipeline Output Tensor: OPERATOR_ADD
*** Node 2 owns the model-level partition [55, 83)
*** Node 2, constructing the helper classes...
Node 2, Local Vertex Begin: 0, Num Local Vertices: 716847
*** Node 3, starting model training...
Num Stages: 8 / 8
Node 3, Pipeline Input Tensor: OPERATOR_ADD
Node 3, Pipeline Output Tensor: OPERATOR_ADD
*** Node 3 owns the model-level partition [83, 111)
*** Node 3, constructing the helper classes...
Node 3, Local Vertex Begin: 0, Num Local Vertices: 716847
*** Node 4, starting model training...
Num Stages: 8 / 8
Node 4, Pipeline Input Tensor: OPERATOR_ADD
Node 4, Pipeline Output Tensor: OPERATOR_ADD
*** Node 4 owns the model-level partition [111, 139)
*** Node 4, constructing the helper classes...
Node 4, Local Vertex Begin: 0, Num Local Vertices: 716847
*** Node 5, starting model training...
Num Stages: 8 / 8
Node 5, Pipeline Input Tensor: OPERATOR_ADD
Node 5, Pipeline Output Tensor: OPERATOR_ADD
*** Node 5 owns the model-level partition [139, 167)
*** Node 5, constructing the helper classes...
Node 5, Local Vertex Begin: 0, Num Local Vertices: 716847
*** Node 6, starting model training...
Num Stages: 8 / 8
Node 6, Pipeline Input Tensor: OPERATOR_ADD
Node 6, Pipeline Output Tensor: OPERATOR_ADD
*** Node 6 owns the model-level partition [167, 195)
*** Node 6, constructing the helper classes...
Node 6, Local Vertex Begin: 0, Num Local Vertices: 716847
*** Node 7, starting model training...
Num Stages: 8 / 8
Node 7, Pipeline Input Tensor: OPERATOR_ADD
Node 7, Pipeline Output Tensor: NULL
*** Node 7 owns the model-level partition [195, 228)
*** Node 7, constructing the helper classes...
Node 7, Local Vertex Begin: 0, Num Local Vertices: 716847
*** Node 0, setting up some other necessary information...
*** Node 3, setting up some other necessary information...
*** Node 1, setting up some other necessary information...
*** Node 2, setting up some other necessary information...
*** Node 5, setting up some other necessary information...
*** Node 7, setting up some other necessary information...
*** Node 4, setting up some other necessary information...
*** Node 6, setting up some other necessary information...
+++++++++ Node 1 initializing the weights for op[27, 55)...
+++++++++ Node 5 initializing the weights for op[139, 167)...
+++++++++ Node 2 initializing the weights for op[55, 83)...
+++++++++ Node 4 initializing the weights for op[111, 139)...
+++++++++ Node 3 initializing the weights for op[83, 111)...
+++++++++ Node 7 initializing the weights for op[195, 228)...
+++++++++ Node 0 initializing the weights for op[0, 27)...
+++++++++ Node 6 initializing the weights for op[167, 195)...
Node 0, discovering the vertices that will be sent across graph boundary...
Node 6, discovering the vertices that will be sent across graph boundary...
The number of mirror vertices: 0
Node 0, discovering the vertices that will be received across the graph boundary.
Node 4, discovering the vertices that will be sent across graph boundary...
Node 1, discovering the vertices that will be sent across graph boundary...
Node 1, discovering the vertices that will be received across the graph boundary.
Node 5, discovering the vertices that will be sent across graph boundary...
Node 2, discovering the vertices that will be sent across graph boundary...
Node 2, discovering the vertices that will be received across the graph boundary.
Node 7, discovering the vertices that will be sent across graph boundary...
Node 3, discovering the vertices that will be sent across graph boundary...
Node 3, discovering the vertices that will be received across the graph boundary.
Node 4, discovering the vertices that will be received across the graph boundary.
Node 5, discovering the vertices that will be received across the graph boundary.
Node 6, discovering the vertices that will be received across the graph boundary.
Node 7, discovering the vertices that will be received across the graph boundary.
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
*** Node 3, starting task scheduling...
*** Node 0, starting task scheduling...
*** Node 4, starting task scheduling...
*** Node 2, starting task scheduling...
*** Node 5, starting task scheduling...
*** Node 6, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 7, starting task scheduling...
The learning rate specified by the user: 0.001000000



The learning rate specified by the user: 0.001000000
*** Node 1, starting task scheduling...
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
	Epoch 1:	Loss 0.7477	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 50:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 100:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 150:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 200:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 250:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 300:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 350:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 400:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 450:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 500:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 550:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 600:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 650:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 700:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 750:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 800:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 850:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 900:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 950:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 1000:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 1050:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 1100:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 1150:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 1200:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 1250:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 1300:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 1350:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 1400:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 1450:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 1500:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 1550:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 1600:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 1650:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 1700:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 1750:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 1800:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 1850:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 1900:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 1950:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 2000:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 2050:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 2100:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 2150:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 2200:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 2250:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 2300:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 2350:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 2400:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 2450:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 2500:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 2550:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 2600:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 2650:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 2700:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 2750:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 2800:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 2850:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 2900:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 2950:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 3000:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 3050:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 3100:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 3150:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 3200:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 3250:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 3300:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 3350:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 3400:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 3450:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 3500:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 3550:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 3600:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 3650:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 3700:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 3750:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 3800:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 3850:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 3900:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 3950:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 4000:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 4050:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 4100:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 4150:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 4200:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 4250:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 4300:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 4350:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 4400:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 4450:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 4500:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 4550:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 4600:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 4650:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 4700:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 4750:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 4800:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 4850:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 4900:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 4950:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 5000:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
****** Epoch Time (Excluding Evaluation Cost): 0.482 s ******
****** Breakdown Analysis ******
Cluster-Wide Average, Bubble-Pipeline: 80.506 ms (Max: 86.292, Min: 74.164, Sum: 644.047)
Cluster-Wide Average, Compute: 290.540 ms (Max: 350.584, Min: 260.581, Sum: 2324.321)
Cluster-Wide Average, Communication-Layer: 56.398 ms (Max: 76.458, Min: 37.442, Sum: 451.186)
Cluster-Wide Average, Bubble-Imbalance: 48.188 ms (Max: 87.891, Min: 9.635, Sum: 385.505)
Cluster-Wide Average, Communication-Graph: 0.443 ms (Max: 0.499, Min: 0.386, Sum: 3.541)
Cluster-Wide Average, Optimization: 0.147 ms (Max: 0.175, Min: 0.136, Sum: 1.177)
Cluster-Wide Average, Others: 5.847 ms (Max: 9.581, Min: 5.198, Sum: 46.779)
****** Breakdown Sum: 482.070 ms ******
Cluster-Wide Average, GPU Memory Consumption: 9.974 GB (Max: 11.717, Min: 9.512, Sum: 79.794)
Cluster-Wide Average, Graph-Level Communication Throughput: -nan Gbps (Max: -nan, Min: -nan, Sum: -nan)
Cluster-Wide Average, Layer-Level Communication Throughput: 71.641 Gbps (Max: 92.296, Min: 56.510, Sum: 573.132)
Layer-level communication (cluster-wide, per-epoch): 3.739 GB
Graph-level communication (cluster-wide, per-epoch): 0.000 GB
Weight-sync communication (cluster-wide, per-epoch): 0.000 GB
Total communication (cluster-wide, per-epoch): 3.739 GB
****** Accuracy Results ******
Highest valid_acc: 0.0000
Target test_acc: 0.1718
Epoch to reach the target acc: 0
[MPI Rank 0] Success 
[MPI Rank 1] Success 
[MPI Rank 4] Success 
[MPI Rank 2] Success 
[MPI Rank 5] Success 
[MPI Rank 3] Success 
[MPI Rank 6] Success 
[MPI Rank 7] Success 
