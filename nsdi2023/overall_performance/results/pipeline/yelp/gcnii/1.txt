Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
DONE MPI INIT
Initialized node 0 on machine gnerv2
DONE MPI INIT
Initialized node 1 on machine gnerv2
DONE MPI INIT
Initialized node 2 on machine gnerv2
DONE MPI INIT
Initialized node 3 on machine gnerv2
DONE MPI INITDONE MPI INIT
Initialized node 6 on machine gnerv3
DONE MPI INIT
Initialized node 7 on machine gnerv3
DONE MPI INIT
Initialized node 5 on machine gnerv3

Initialized node 4 on machine gnerv3
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
        It takes 0.291 seconds.
Building the CSC structure...
        It takes 0.300 seconds.
Building the CSC structure...
        It takes 0.301 seconds.
Building the CSC structure...
        It takes 0.307 seconds.
Building the CSC structure...
        It takes 0.313 seconds.
Building the CSC structure...
        It takes 0.314 seconds.
Building the CSC structure...
        It takes 0.321 seconds.
Building the CSC structure...
        It takes 0.327 seconds.
Building the CSC structure...
        It takes 0.284 seconds.
        It takes 0.279 seconds.
        It takes 0.287 seconds.
        It takes 0.288 seconds.
        It takes 0.296 seconds.
        It takes 0.315 seconds.
        It takes 0.310 seconds.
        It takes 0.320 seconds.
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
        It takes 0.488 seconds.
Building the Label Vector...
        It takes 0.480 seconds.
Building the Label Vector...
        It takes 0.501 seconds.
Building the Label Vector...
        It takes 0.536 seconds.
Building the Label Vector...
        It takes 0.492 seconds.
Building the Label Vector...
        It takes 0.495 seconds.
Building the Label Vector...
        It takes 0.531 seconds.
Building the Label Vector...
        It takes 0.502 seconds.
Building the Label Vector...
        It takes 0.191 seconds.
        It takes 0.191 seconds.
        It takes 0.189 seconds.
        It takes 0.201 seconds.
        It takes 0.189 seconds.
        It takes 0.188 seconds.
        It takes 0.196 seconds.
        It takes 0.193 seconds.
The graph dataset locates at /shared_hdd_storage/jingjichen/gnn_datasets/pipeline_parallel_datasets/yelp/32_parts
The number of GCNII layers: 32
The number of hidden units: 100
The number of training epoches: 5000
Learning rate: 0.001000
The partition strategy: model
The dropout rate: 0.500
The checkpointed weight file: /tmp/saved_weights
The random seed: 1
GCN hyper-parameter alpha: 0.100000
GCN hyper-parameter lambda: 0.500000
Number of classes: 100
Number of feature dimensions: 300
Number of vertices: 716847
Number of GPUs: 8
GPU 0, layer [0, 5)
GPU 1, layer [5, 9)
GPU 2, layer [9, 13)
GPU 3, layer [13, 17)
GPU 4, layer [17, 21)
GPU 5, layer [21, 25)
GPU 6, layer [25, 29)
GPU 7, layer [29, 33)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 5)
GPU 1, layer [5, 9)
GPU 2, layer [9, 13)
GPU 3, layer [13, 17)
GPU 4, layer [17, 21)
GPU 5, layer [21, 25)
GPU 6, layer [25, 29)
GPU 7, layer [29, 33)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 5)
GPU 1, layer [5, 9)
GPU 2, layer [9, 13)
GPU 3, layer [13, 17)
GPU 4, layer [17, 21)
GPU 5, layer [21, 25)
GPU 6, layer [25, 29)
GPU 7, layer [29, 33)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
716847, 13954819, 13954819
Number of vertices per chunk: 22402
GPU 0, layer [0, 5)
GPU 1, layer [5, 9)
GPU 2, layer [9, 13)
GPU 3, layer [13, 17)
GPU 4, layer [17, 21)
GPU 5, layer [21, 25)
GPU 6, layer [25, 29)
GPU 7, layer [29, 33)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 5)
GPU 1, layer [5, 9)
GPU 2, layer [9, 13)
GPU 3, layer [13, 17)
GPU 4, layer [17, 21)
GPU 5, layer [21, 25)
GPU 6, layer [25, 29)
GPU 7, layer [29, 33)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
716847, 13954819, 13954819
Number of vertices per chunk: 22402
GPU 0, layer [0, 5)
GPU 1, layer [5, 9)
GPU 2, layer [9, 13)
GPU 3, layer [13, 17)
GPU 4, layer [17, 21)
GPU 5, layer [21, 25)
GPU 6, layer [25, 29)
GPU 7, layer [29, 33)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
716847, 13954819, 13954819
Number of vertices per chunk: 22402
train nodes 537635, valid nodes 107527, test nodes 71685
GPU 0, layer [0, 5)
GPU 1, layer [5, 9)
GPU 2, layer [9, 13)
GPU 3, layer [13, 17)
GPU 4, layer [17, 21)
GPU 5, layer [21, 25)
GPU 6, layer [25, 29)
GPU 7, layer [29, 33)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
Chunks (number of global chunks: 32): 0-[0, 24122) 1-[24122, 44991) 2-[44991, 66905) 3-[66905, 90565) 4-[90565, 109350) 5-[109350, 132203) 6-[132203, 154486) 7-[154486, 177346) 8-[177346, 198991) ... 31-[695934, 716847)
GPU 0, layer [0, 5)
GPU 1, layer [5, 9)
GPU 2, layer [9, 13)
GPU 3, layer [13, 17)
GPU 4, layer [17, 21)
GPU 5, layer [21, 25)
GPU 6, layer [25, 29)
GPU 7, layer [29, 33)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
716847, 13954819, 13954819
Number of vertices per chunk: 22402
716847, 13954819, 13954819
Number of vertices per chunk: 22402
716847, 13954819, 13954819
Number of vertices per chunk: 22402
716847, 13954819, 13954819
Number of vertices per chunk: 22402
716847, 13954819, 13954819
Number of vertices per chunk: 22402
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
***** Start profiling the layer-level communication performance *******
csr in-out ready !Start Cost Model Initialization...
The layer-level communication performance: 59.297 Gbps (per GPU), 474.373 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 59.013 Gbps (per GPU), 472.101 Gbps (aggregated)
The layer-level communication performance: 58.998 Gbps (per GPU), 471.988 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 58.760 Gbps (per GPU), 470.082 Gbps (aggregated)
The layer-level communication performance: 58.731 Gbps (per GPU), 469.848 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 58.529 Gbps (per GPU), 468.231 Gbps (aggregated)
The layer-level communication performance: 58.482 Gbps (per GPU), 467.860 Gbps (aggregated)
The layer-level communication performance: 58.455 Gbps (per GPU), 467.640 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The graph-level communication performance (supernode = 2): 157.134 Gbps (per GPU), 1257.073 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 157.096 Gbps (per GPU), 1256.767 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 157.134 Gbps (per GPU), 1257.073 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 157.096 Gbps (per GPU), 1256.767 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 157.122 Gbps (per GPU), 1256.979 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 157.122 Gbps (per GPU), 1256.979 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 157.122 Gbps (per GPU), 1256.980 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 157.122 Gbps (per GPU), 1256.979 Gbps (aggregated, cluster-wide)
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
The graph-level communication performance (supernode = 4): 101.193 Gbps (per GPU), 809.542 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 101.185 Gbps (per GPU), 809.476 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 101.192 Gbps (per GPU), 809.534 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 101.191 Gbps (per GPU), 809.529 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 101.190 Gbps (per GPU), 809.522 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 101.177 Gbps (per GPU), 809.418 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 101.190 Gbps (per GPU), 809.522 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 101.177 Gbps (per GPU), 809.418 Gbps (aggregated, cluster-wide)
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
The graph-level communication performance (supernode = 8): 33.499 Gbps (per GPU), 267.995 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 33.499 Gbps (per GPU), 267.994 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 33.499 Gbps (per GPU), 267.993 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 33.499 Gbps (per GPU), 267.992 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 33.499 Gbps (per GPU), 267.995 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 33.498 Gbps (per GPU), 267.986 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 33.499 Gbps (per GPU), 267.988 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 33.498 Gbps (per GPU), 267.984 Gbps (aggregated, cluster-wide)
 LType   LT0   LT1   LT2 Ratio  VSum  ESum
 chk_0  1.39ms  1.74ms  2.06ms  1.48 24.12K  0.35M
 chk_1  1.29ms  1.74ms  2.04ms  1.57 20.87K  0.49M
 chk_2  1.33ms  1.64ms  1.95ms  1.46 21.91K  0.46M
 chk_3  1.38ms  1.75ms  2.07ms  1.50 23.66K  0.35M
 chk_4  1.19ms  1.63ms  1.90ms  1.60 18.79K  0.62M
 chk_5  1.35ms  1.70ms  2.00ms  1.48 22.85K  0.37M
 chk_6  1.34ms  1.73ms  2.02ms  1.51 22.28K  0.40M
 chk_7  1.35ms  1.69ms  1.99ms  1.48 22.86K  0.39M
 chk_8  1.32ms  1.70ms  1.99ms  1.51 21.64K  0.45M
 chk_9  1.35ms  1.68ms  1.97ms  1.47 22.92K  0.37M
chk_10  1.23ms  1.72ms  2.01ms  1.63 20.30K  0.56M
chk_11  1.36ms  1.73ms  2.03ms  1.49 23.32K  0.33M
chk_12  1.30ms  1.70ms  1.99ms  1.54 21.10K  0.49M
chk_13  1.29ms  1.65ms  1.94ms  1.51 20.79K  0.49M
chk_14  1.37ms  1.69ms  1.99ms  1.45 23.53K  0.36M
chk_15  1.36ms  1.64ms  1.94ms  1.43 23.21K  0.39M
chk_16  1.40ms  1.68ms  1.99ms  1.43 24.39K  0.32M
chk_17  1.38ms  1.72ms  2.02ms  1.46 23.94K  0.34M
chk_18  1.32ms  1.69ms  1.98ms  1.51 21.61K  0.45M
chk_19  1.38ms  1.69ms  2.00ms  1.45 23.89K  0.34M
chk_20  1.32ms  1.72ms  2.01ms  1.53 21.64K  0.47M
chk_21  1.36ms  1.72ms  2.02ms  1.48 23.43K  0.34M
chk_22  1.35ms  1.70ms  1.99ms  1.48 22.84K  0.37M
chk_23  1.36ms  1.72ms  2.02ms  1.48 23.35K  0.37M
chk_24  1.34ms  1.72ms  2.01ms  1.50 22.72K  0.40M
chk_25  1.33ms  1.75ms  2.04ms  1.54 21.95K  0.46M
chk_26  1.33ms  1.73ms  2.03ms  1.52 22.06K  0.41M
chk_27  1.35ms  1.70ms  2.00ms  1.48 23.02K  0.35M
chk_28  1.35ms  1.71ms  2.02ms  1.50 22.97K  0.36M
chk_29  1.34ms  1.65ms  1.95ms  1.46 22.14K  0.45M
chk_30  1.33ms  1.71ms  2.02ms  1.52 21.84K  0.44M
chk_31  1.29ms  1.71ms  2.00ms  1.55 20.91K  0.49M
   Avg  1.33  1.70  2.00
   Max  1.40  1.75  2.07
   Min  1.19  1.63  1.90
 Ratio  1.18  1.08  1.09
   Var  0.00  0.00  0.00
Profiling takes 1.994 s
*** Node 0, starting model training...
Num Stages: 8 / 8
Node 0, Pipeline Input Tensor: NULL
Node 0, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 0 owns the model-level partition [0, 34)
*** Node 0, constructing the helper classes...
Node 0, Local Vertex Begin: 0, Num Local Vertices: 716847
*** Node 1, starting model training...
Num Stages: 8 / 8
Node 1, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 1, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 1 owns the model-level partition [34, 62)
*** Node 1, constructing the helper classes...
Node 1, Local Vertex Begin: 0, Num Local Vertices: 716847
*** Node 2, starting model training...
Num Stages: 8 / 8
Node 2, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 2, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 2 owns the model-level partition [62, 90)
*** Node 2, constructing the helper classes...
Node 2, Local Vertex Begin: 0, Num Local Vertices: 716847
*** Node 3, starting model training...
Num Stages: 8 / 8
Node 3, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 3, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 3 owns the model-level partition [90, 118)
*** Node 3, constructing the helper classes...
Node 3, Local Vertex Begin: 0, Num Local Vertices: 716847
*** Node 4, starting model training...
Num Stages: 8 / 8
Node 4, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 4, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 4 owns the model-level partition [118, 146)
*** Node 4, constructing the helper classes...
Node 4, Local Vertex Begin: 0, Num Local Vertices: 716847
*** Node 5, starting model training...
Num Stages: 8 / 8
Node 5, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 5, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 5 owns the model-level partition [146, 174)
*** Node 5, constructing the helper classes...
Node 5, Local Vertex Begin: 0, Num Local Vertices: 716847
*** Node 6, starting model training...
Num Stages: 8 / 8
Node 6, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 6, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 6 owns the model-level partition [174, 202)
*** Node 6, constructing the helper classes...
Node 6, Local Vertex Begin: 0, Num Local Vertices: 716847
*** Node 7, starting model training...
Num Stages: 8 / 8
Node 7, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 7, Pipeline Output Tensor: NULL
*** Node 7 owns the model-level partition [202, 232)
*** Node 7, constructing the helper classes...
Node 7, Local Vertex Begin: 0, Num Local Vertices: 716847
*** Node 7, setting up some other necessary information...
*** Node 4, setting up some other necessary information...
*** Node 0, setting up some other necessary information...
*** Node 1, setting up some other necessary information...
*** Node 3, setting up some other necessary information...
*** Node 2, setting up some other necessary information...
*** Node 5, setting up some other necessary information...
*** Node 6, setting up some other necessary information...
+++++++++ Node 0 initializing the weights for op[0, 34)...
+++++++++ Node 4 initializing the weights for op[118, 146)...
+++++++++ Node 2 initializing the weights for op[62, 90)...
+++++++++ Node 5 initializing the weights for op[146, 174)...
+++++++++ Node 3 initializing the weights for op[90, 118)...
+++++++++ Node 6 initializing the weights for op[174, 202)...
+++++++++ Node 1 initializing the weights for op[34, 62)...
+++++++++ Node 7 initializing the weights for op[202, 232)...
Node 0, discovering the vertices that will be sent across graph boundary...
Node 4, discovering the vertices that will be sent across graph boundary...
The number of mirror vertices: 0
Node 0, discovering the vertices that will be received across the graph boundary.
Node 5, discovering the vertices that will be sent across graph boundary...
Node 1, discovering the vertices that will be sent across graph boundary...
Node 1, discovering the vertices that will be received across the graph boundary.
Node 7, discovering the vertices that will be sent across graph boundary...
Node 7, discovering the vertices that will be received across the graph boundary.
Node 2, discovering the vertices that will be sent across graph boundary...
Node 2, discovering the vertices that will be received across the graph boundary.
Node 4, discovering the vertices that will be received across the graph boundary.
Node 3, discovering the vertices that will be sent across graph boundary...
Node 3, discovering the vertices that will be received across the graph boundary.
Node 5, discovering the vertices that will be received across the graph boundary.
Node 6, discovering the vertices that will be sent across graph boundary...
Node 6, discovering the vertices that will be received across the graph boundary.
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
*** Node 2, starting task scheduling...
*** Node 4, starting task scheduling...
*** Node 3, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 6, starting task scheduling...
*** Node 0, starting task scheduling...



The learning rate specified by the user: 0.001000000
*** Node 5, starting task scheduling...
*** Node 1, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 7, starting task scheduling...
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
	Epoch 1:	Loss 827.2993	TrainAcc 0.1720	ValidAcc 0.1710	TestAcc 0.1712	BestValid 0.1710
	Epoch 50:	Loss 0.8440	TrainAcc 0.2028	ValidAcc 0.2018	TestAcc 0.2023	BestValid 0.2018
	Epoch 100:	Loss 1.0307	TrainAcc 0.1977	ValidAcc 0.1968	TestAcc 0.1971	BestValid 0.2018
	Epoch 150:	Loss 1.0841	TrainAcc 0.2016	ValidAcc 0.2008	TestAcc 0.2013	BestValid 0.2018
	Epoch 200:	Loss 0.9482	TrainAcc 0.2032	ValidAcc 0.2024	TestAcc 0.2027	BestValid 0.2024
