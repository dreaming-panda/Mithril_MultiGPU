Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
DONE MPI INITDONE MPI INIT
Initialized node 5 on machine gnerv3

Initialized node 4 on machine gnerv3
DONE MPI INIT
Initialized node 6 on machine gnerv3
DONE MPI INIT
Initialized node 7 on machine gnerv3
DONE MPI INIT
DONE MPI INITDONE MPI INIT
Initialized node 2 on machine gnerv2
DONE MPI INIT
Initialized node 3 on machine gnerv2
Initialized node 0 on machine gnerv2

Initialized node 1 on machine gnerv2
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
        It takes 0.230 seconds.
Building the CSC structure...
        It takes 0.300 seconds.
Building the CSC structure...
        It takes 0.299 seconds.
Building the CSC structure...
        It takes 0.316 seconds.
Building the CSC structure...
        It takes 0.314 seconds.
Building the CSC structure...
        It takes 0.312 seconds.
Building the CSC structure...
        It takes 0.322 seconds.
Building the CSC structure...
        It takes 0.328 seconds.
Building the CSC structure...
        It takes 0.218 seconds.
Building the Feature Vector...
        It takes 0.288 seconds.
        It takes 0.291 seconds.
        It takes 0.291 seconds.
        It takes 0.306 seconds.
        It takes 0.317 seconds.
        It takes 0.321 seconds.
        It takes 0.316 seconds.
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
        It takes 0.456 seconds.
Building the Label Vector...
        It takes 0.481 seconds.
Building the Label Vector...
        It takes 0.176 seconds.
        It takes 0.499 seconds.
Building the Label Vector...
        It takes 0.501 seconds.
Building the Label Vector...
        It takes 0.488 seconds.
Building the Label Vector...
        It takes 0.488 seconds.
Building the Label Vector...
        It takes 0.497 seconds.
Building the Label Vector...
        It takes 0.538 seconds.
Building the Label Vector...
        It takes 0.184 seconds.
        It takes 0.193 seconds.
        It takes 0.195 seconds.
        It takes 0.182 seconds.
        It takes 0.187 seconds.
        It takes 0.187 seconds.
The graph dataset locates at /shared_hdd_storage/jingjichen/gnn_datasets/pipeline_parallel_datasets/yelp/32_parts
The number of GCNII layers: 32
The number of hidden units: 100
The number of training epoches: 5000
Learning rate: 0.001000
The partition strategy: model
The dropout rate: 0.500
The checkpointed weight file: /tmp/saved_weights
The random seed: 1
Number of classes: 100
Number of feature dimensions: 300
Number of vertices: 716847
Number of GPUs: 8
        It takes 0.194 seconds.
GPU 0, layer [0, 8)
GPU 1, layer [8, 16)
GPU 2, layer [16, 24)
GPU 3, layer [24, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
716847, 13954819, 13954819
Number of vertices per chunk: 22402
GPU 0, layer [0, 8)
GPU 1, layer [8, 16)
GPU 2, layer [16, 24)
GPU 3, layer [24, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 8)
GPU 1, layer [8, 16)
GPU 2, layer [16, 24)
GPU 3, layer [24, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 8)
GPU 1, layer [8, 16)
GPU 2, layer [16, 24)
GPU 3, layer [24, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 8)
GPU 1, layer [8, 16)
GPU 2, layer [16, 24)
GPU 3, layer [24, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
716847, 13954819, 13954819
Number of vertices per chunk: 22402
GPU 0, layer [0, 8)
GPU 1, layer [8, 16)
GPU 2, layer [16, 24)
GPU 3, layer [24, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
train nodes 537635, valid nodes 107527, test nodes 71685
GPU 0, layer [0, 8)
GPU 1, layer [8, 16)
GPU 2, layer [16, 24)
GPU 3, layer [24, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
Chunks (number of global chunks: 32): 0-[0, 24122) 1-[24122, 44991) 2-[44991, 66905) 3-[66905, 90565) 4-[90565, 109350) 5-[109350, 132203) 6-[132203, 154486) 7-[154486, 177346) 8-[177346, 198991) ... 31-[695934, 716847)
716847, 13954819, 13954819
Number of vertices per chunk: 22402
716847, 13954819, 13954819
Number of vertices per chunk: 22402
716847, 13954819, 13954819
Number of vertices per chunk: 22402
716847, 13954819, 13954819
Number of vertices per chunk: 22402
GPU 0, layer [0, 8)
GPU 1, layer [8, 16)
GPU 2, layer [16, 24)
GPU 3, layer [24, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
716847, 13954819, 13954819
Number of vertices per chunk: 22402
716847, 13954819, 13954819
Number of vertices per chunk: 22402
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
***** Start profiling the layer-level communication performance *******
csr in-out ready !Start Cost Model Initialization...
The layer-level communication performance: 59.874 Gbps (per GPU), 478.988 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 59.585 Gbps (per GPU), 476.679 Gbps (aggregated)
The layer-level communication performance: 59.571 Gbps (per GPU), 476.565 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 59.340 Gbps (per GPU), 474.716 Gbps (aggregated)
The layer-level communication performance: 59.306 Gbps (per GPU), 474.449 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 59.091 Gbps (per GPU), 472.730 Gbps (aggregated)
The layer-level communication performance: 59.045 Gbps (per GPU), 472.357 Gbps (aggregated)
The layer-level communication performance: 59.011 Gbps (per GPU), 472.087 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The graph-level communication performance (supernode = 2): 114.636 Gbps (per GPU), 917.089 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 114.636 Gbps (per GPU), 917.089 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 114.578 Gbps (per GPU), 916.625 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 114.630 Gbps (per GPU), 917.038 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 114.547 Gbps (per GPU), 916.375 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 114.628 Gbps (per GPU), 917.026 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 114.630 Gbps (per GPU), 917.039 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 114.631 Gbps (per GPU), 917.051 Gbps (aggregated, cluster-wide)
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
The graph-level communication performance (supernode = 4): 101.233 Gbps (per GPU), 809.861 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 101.231 Gbps (per GPU), 809.848 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 101.229 Gbps (per GPU), 809.835 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 101.216 Gbps (per GPU), 809.724 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 101.233 Gbps (per GPU), 809.861 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 101.231 Gbps (per GPU), 809.849 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 101.233 Gbps (per GPU), 809.861 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 101.217 Gbps (per GPU), 809.737 Gbps (aggregated, cluster-wide)
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
The graph-level communication performance (supernode = 8): 32.303 Gbps (per GPU), 258.421 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 32.303 Gbps (per GPU), 258.421 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 32.302 Gbps (per GPU), 258.418 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 32.303 Gbps (per GPU), 258.423 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 32.303 Gbps (per GPU), 258.426 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 32.302 Gbps (per GPU), 258.414 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 32.303 Gbps (per GPU), 258.422 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 32.302 Gbps (per GPU), 258.419 Gbps (aggregated, cluster-wide)
 LType   LT0   LT1   LT2 Ratio  VSum  ESum
 chk_0  1.47ms  2.59ms  4.31ms  2.92 24.12K  0.35M
 chk_1  1.56ms  2.51ms  4.06ms  2.60 20.87K  0.49M
 chk_2  1.43ms  2.44ms  4.05ms  2.83 21.91K  0.46M
 chk_3  1.49ms  2.59ms  4.29ms  2.87 23.66K  0.35M
 chk_4  1.45ms  2.32ms  3.75ms  2.58 18.79K  0.62M
 chk_5  1.47ms  2.53ms  4.19ms  2.85 22.85K  0.37M
 chk_6  1.51ms  2.54ms  4.16ms  2.76 22.28K  0.40M
 chk_7  1.45ms  2.52ms  4.17ms  2.87 22.86K  0.39M
 chk_8  1.49ms  2.48ms  4.07ms  2.73 21.64K  0.45M
 chk_9  1.43ms  2.50ms  4.16ms  2.91 22.92K  0.37M
chk_10  1.52ms  2.47ms  3.99ms  2.62 20.30K  0.56M
chk_11  1.48ms  2.57ms  4.24ms  2.86 23.32K  0.33M
chk_12  1.52ms  2.49ms  4.38ms  2.87 21.10K  0.49M
chk_13  1.47ms  2.43ms  3.96ms  2.69 20.79K  0.49M
chk_14  1.44ms  2.52ms  4.20ms  2.93 23.53K  0.36M
chk_15  1.39ms  2.48ms  4.16ms  2.98 23.21K  0.39M
chk_16  1.42ms  2.55ms  4.28ms  3.02 24.39K  0.32M
chk_17  1.47ms  2.58ms  4.28ms  2.92 23.94K  0.34M
chk_18  1.48ms  2.47ms  4.06ms  2.73 21.61K  0.45M
chk_19  1.44ms  2.55ms  4.26ms  2.95 23.89K  0.34M
chk_20  1.52ms  2.51ms  4.10ms  2.69 21.64K  0.47M
chk_21  1.47ms  2.56ms  4.23ms  2.88 23.43K  0.34M
chk_22  1.47ms  2.52ms  4.18ms  2.85 22.84K  0.37M
chk_23  1.48ms  2.55ms  4.24ms  2.86 23.35K  0.37M
chk_24  1.49ms  2.55ms  4.20ms  2.82 22.72K  0.40M
chk_25  1.54ms  2.55ms  4.15ms  2.70 21.95K  0.46M
chk_26  1.52ms  2.53ms  4.49ms  2.95 22.06K  0.41M
chk_27  1.46ms  2.53ms  4.19ms  2.87 23.02K  0.35M
chk_28  1.47ms  2.53ms  4.21ms  2.87 22.97K  0.36M
chk_29  1.44ms  2.46ms  4.08ms  2.83 22.14K  0.45M
chk_30  1.51ms  2.52ms  4.13ms  2.74 21.84K  0.44M
chk_31  1.53ms  2.48ms  4.03ms  2.64 20.91K  0.49M
   Avg  1.48  2.51  4.16
   Max  1.56  2.59  4.49
   Min  1.39  2.32  3.75
 Ratio  1.12  1.12  1.20
   Var  0.00  0.00  0.02
Profiling takes 3.074 s
*** Node 0, starting model training...
Num Stages: 4 / 4
Node 0, Pipeline Input Tensor: NULL
Node 0, Pipeline Output Tensor: OPERATOR_ADD
*** Node 0 owns the model-level partition [0, 55)
*** Node 0, constructing the helper classes...
Node 0, Local Vertex Begin: 0, Num Local Vertices: 354156
*** Node 1, starting model training...
Num Stages: 4 / 4
Node 1, Pipeline Input Tensor: NULL
Node 1, Pipeline Output Tensor: OPERATOR_ADD
*** Node 1 owns the model-level partition [0, 55)
*** Node 1, constructing the helper classes...
Node 1, Local Vertex Begin: 354156, Num Local Vertices: 362691
*** Node 2, starting model training...
Num Stages: 4 / 4
Node 2, Pipeline Input Tensor: OPERATOR_ADD
Node 2, Pipeline Output Tensor: OPERATOR_ADD
*** Node 2 owns the model-level partition [55, 111)
*** Node 2, constructing the helper classes...
Node 2, Local Vertex Begin: 0, Num Local Vertices: 354156
*** Node 3, starting model training...
Num Stages: 4 / 4
Node 3, Pipeline Input Tensor: OPERATOR_ADD
Node 3, Pipeline Output Tensor: OPERATOR_ADD
*** Node 3 owns the model-level partition [55, 111)
*** Node 3, constructing the helper classes...
Node 3, Local Vertex Begin: 354156, Num Local Vertices: 362691
*** Node 4, starting model training...
Num Stages: 4 / 4
Node 4, Pipeline Input Tensor: OPERATOR_ADD
Node 4, Pipeline Output Tensor: OPERATOR_ADD
*** Node 4 owns the model-level partition [111, 167)
*** Node 4, constructing the helper classes...
Node 4, Local Vertex Begin: 0, Num Local Vertices: 354156
*** Node 5, starting model training...
Num Stages: 4 / 4
Node 5, Pipeline Input Tensor: OPERATOR_ADD
Node 5, Pipeline Output Tensor: OPERATOR_ADD
*** Node 5 owns the model-level partition [111, 167)
*** Node 5, constructing the helper classes...
Node 5, Local Vertex Begin: 354156, Num Local Vertices: 362691
*** Node 6, starting model training...
Num Stages: 4 / 4
Node 6, Pipeline Input Tensor: OPERATOR_ADD
Node 6, Pipeline Output Tensor: NULL
*** Node 6 owns the model-level partition [167, 228)
*** Node 6, constructing the helper classes...
Node 6, Local Vertex Begin: 0, Num Local Vertices: 354156
*** Node 7, starting model training...
Num Stages: 4 / 4
Node 7, Pipeline Input Tensor: OPERATOR_ADD
Node 7, Pipeline Output Tensor: NULL
*** Node 7 owns the model-level partition [167, 228)
*** Node 7, constructing the helper classes...
Node 7, Local Vertex Begin: 354156, Num Local Vertices: 362691
*** Node 0, setting up some other necessary information...
*** Node 1, setting up some other necessary information...
*** Node 3, setting up some other necessary information...
*** Node 2, setting up some other necessary information...
*** Node 7, setting up some other necessary information...
*** Node 5, setting up some other necessary information...
*** Node 6, setting up some other necessary information...
*** Node 4, setting up some other necessary information...
+++++++++ Node 0 initializing the weights for op[0, 55)...
+++++++++ Node 1 initializing the weights for op[0, 55)...
+++++++++ Node 3 initializing the weights for op[55, 111)...
+++++++++ Node 4 initializing the weights for op[111, 167)...
+++++++++ Node 5 initializing the weights for op[111, 167)...
+++++++++ Node 2 initializing the weights for op[55, 111)...
+++++++++ Node 6 initializing the weights for op[167, 228)...
+++++++++ Node 7 initializing the weights for op[167, 228)...
Node 0, discovering the vertices that will be sent across graph boundary...
Node 5, discovering the vertices that will be sent across graph boundary...
Node 1, discovering the vertices that will be sent across graph boundary...
Node 6, discovering the vertices that will be sent across graph boundary...
Node 2, discovering the vertices that will be sent across graph boundary...
Node 4, discovering the vertices that will be sent across graph boundary...
Node 3, discovering the vertices that will be sent across graph boundary...
Node 7, discovering the vertices that will be sent across graph boundary...
The number of mirror vertices: 1731824
Node 0, discovering the vertices that will be received across the graph boundary.
Node 4, discovering the vertices that will be received across the graph boundary.
Node 1, discovering the vertices that will be received across the graph boundary.
Node 5, discovering the vertices that will be received across the graph boundary.
Node 2, discovering the vertices that will be received across the graph boundary.
Node 6, discovering the vertices that will be received across the graph boundary.
Node 3, discovering the vertices that will be received across the graph boundary.
Node 7, discovering the vertices that will be received across the graph boundary.
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
*** Node 0, starting task scheduling...



*** Node 4, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 1, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 5, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 2, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 6, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 3, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 7, starting task scheduling...
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
	Epoch 1:	Loss 0.7482	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 50:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 100:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 150:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 200:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 250:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 300:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 350:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 400:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 450:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 500:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 550:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 600:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 650:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 700:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 750:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 800:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 850:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 900:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 950:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 1000:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 1050:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 1100:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 1150:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 1200:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 1250:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 1300:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 1350:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 1400:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 1450:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 1500:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 1550:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 1600:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 1650:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 1700:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 1750:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 1800:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 1850:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 1900:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 1950:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 2000:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 2050:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 2100:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 2150:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 2200:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 2250:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 2300:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 2350:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 2400:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 2450:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 2500:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 2550:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 2600:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 2650:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 2700:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 2750:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 2800:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 2850:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 2900:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 2950:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 3000:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 3050:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 3100:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 3150:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 3200:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 3250:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 3300:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 3350:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 3400:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 3450:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 3500:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 3550:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 3600:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 3650:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 3700:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 3750:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 3800:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 3850:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 3900:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 3950:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 4000:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 4050:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 4100:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 4150:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 4200:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 4250:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 4300:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 4350:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 4400:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 4450:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 4500:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 4550:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 4600:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 4650:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 4700:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 4750:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 4800:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 4850:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 4900:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 4950:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
	Epoch 5000:	Loss nan	TrainAcc -nan	ValidAcc -nan	TestAcc -nan	BestValid 0.0000
****** Epoch Time (Excluding Evaluation Cost): 0.552 s ******
****** Breakdown Analysis ******
Cluster-Wide Average, Bubble-Pipeline: 83.927 ms (Max: 84.493, Min: 82.743, Sum: 671.416)
Cluster-Wide Average, Compute: 296.130 ms (Max: 324.710, Min: 277.421, Sum: 2369.042)
Cluster-Wide Average, Communication-Layer: 45.708 ms (Max: 55.979, Min: 31.458, Sum: 365.664)
Cluster-Wide Average, Bubble-Imbalance: 16.331 ms (Max: 36.961, Min: 2.813, Sum: 130.649)
Cluster-Wide Average, Communication-Graph: 95.960 ms (Max: 98.498, Min: 93.657, Sum: 767.676)
Cluster-Wide Average, Optimization: 3.281 ms (Max: 6.777, Min: 1.720, Sum: 26.251)
Cluster-Wide Average, Others: 11.581 ms (Max: 13.814, Min: 10.353, Sum: 92.652)
****** Breakdown Sum: 552.919 ms ******
Cluster-Wide Average, GPU Memory Consumption: 13.517 GB (Max: 15.596, Min: 12.735, Sum: 108.134)
Cluster-Wide Average, Graph-Level Communication Throughput: 141.387 Gbps (Max: 149.056, Min: 133.592, Sum: 1131.097)
Cluster-Wide Average, Layer-Level Communication Throughput: 36.827 Gbps (Max: 42.284, Min: 28.013, Sum: 294.620)
Layer-level communication (cluster-wide, per-epoch): 1.602 GB
Graph-level communication (cluster-wide, per-epoch): 10.322 GB
Weight-sync communication (cluster-wide, per-epoch): 0.003 GB
Total communication (cluster-wide, per-epoch): 11.927 GB
****** Accuracy Results ******
Highest valid_acc: 0.0000
Target test_acc: 0.1718
Epoch to reach the target acc: 0
[MPI Rank 0] Success 
[MPI Rank 4] Success 
[MPI Rank 1] Success 
[MPI Rank 5] Success 
[MPI Rank 2] Success 
[MPI Rank 6] Success 
[MPI Rank 3] Success 
[MPI Rank 7] Success 
