Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
DONE MPI INITDONE MPI INIT
Initialized node 1 on machine gnerv7
DONE MPI INIT
Initialized node 3 on machine gnerv7

Initialized node 0 on machine gnerv7
DONE MPI INIT
Initialized node 2 on machine gnerv7
DONE MPI INIT
Initialized node 5 on machine gnerv8
DONE MPI INIT
DONE MPI INIT
Initialized node 4 on machine gnerv8
Initialized node 6 on machine gnerv8
DONE MPI INIT
Initialized node 7 on machine gnerv8
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
        It takes 0.010 seconds.
Building the CSC structure...
        It takes 0.010 seconds.
Building the CSC structure...
        It takes 0.011 seconds.
Building the CSC structure...
        It takes 0.011 seconds.
Building the CSC structure...
        It takes 0.011 seconds.
Building the CSC structure...
        It takes 0.011 seconds.
Building the CSC structure...
        It takes 0.014 seconds.
Building the CSC structure...
        It takes 0.010 seconds.
        It takes 0.011 seconds.
        It takes 0.011 seconds.
        It takes 0.012 seconds.
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
        It takes 0.011 seconds.
        It takes 0.012 seconds.
        It takes 0.022 seconds.
Building the CSC structure...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
        It takes 0.014 seconds.
Building the Feature Vector...
        It takes 0.011 seconds.
Building the Feature Vector...
        It takes 0.451 seconds.
Building the Label Vector...
        It takes 0.002 seconds.
        It takes 0.458 seconds.
Building the Label Vector...
        It takes 0.002 seconds.
        It takes 0.518 seconds.
Building the Label Vector...
        It takes 0.522 seconds.
Building the Label Vector...
        It takes 0.007 seconds.
        It takes 0.002 seconds.
        It takes 0.613 seconds.
Building the Label Vector...
        It takes 0.003 seconds.
The graph dataset locates at /shared_hdd_storage/jingjichen/gnn_datasets/pipeline_parallel_datasets/physics/32_parts
The number of GCNII layers: 32
The number of hidden units: 100
The number of training epoches: 300
Learning rate: 0.001000
The partition strategy: model
The dropout rate: 0.500
The checkpointed weight file: /tmp/saved_weights
The random seed: 2
GCN hyper-parameter alpha: 0.100000
GCN hyper-parameter lambda: 0.500000
Number of classes: 5
Number of feature dimensions: 8415
Number of vertices: 34493
Number of GPUs: 8
        It takes 0.617 seconds.
Building the Label Vector...
        It takes 0.003 seconds.
        It takes 0.623 seconds.
Building the Label Vector...
        It takes 0.620 seconds.
Building the Label Vector...
        It takes 0.008 seconds.
        It takes 0.008 seconds.
GPU 0, layer [0, 9)
GPU 1, layer [9, 17)
GPU 2, layer [17, 25)
GPU 3, layer [25, 33)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
34493, 530417, 530417
Number of vertices per chunk: 1078
csr in-out ready !Start Cost Model Initialization...
GPU 0, layer [0, 9)
GPU 1, layer [9, 17)
GPU 2, layer [17, 25)
GPU 3, layer [25, 33)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
34493, 530417, 530417
Number of vertices per chunk: 1078
csr in-out ready !Start Cost Model Initialization...
GPU 0, layer [0, 9)
GPU 1, layer [9, 17)
GPU 2, layer [17, 25)
GPU 3, layer [25, 33)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
34493, 530417, 530417
Number of vertices per chunk: 1078
csr in-out ready !Start Cost Model Initialization...
GPU 0, layer [0, 9)
GPU 1, layer [9, 17)
GPU 2, layer [17, 25)
GPU 3, layer [25, 33)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
34493, 530417, 530417
Number of vertices per chunk: 1078
csr in-out ready !Start Cost Model Initialization...
GPU 0, layer [0, 9)
GPU 1, layer [9, 17)
GPU 2, layer [17, 25)
GPU 3, layer [25, 33)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 9)
GPU 1, layer [9, 17)
GPU 2, layer [17, 25)
GPU 3, layer [25, 33)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
34493, 530417, 530417
Number of vertices per chunk: 1078
34493, 530417, 530417
Number of vertices per chunk: 1078
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
train nodes 100, valid nodes 500, test nodes 1000
GPU 0, layer [0, 9)
GPU 1, layer [9, 17)
GPU 2, layer [17, 25)
GPU 3, layer [25, 33)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
Chunks (number of global chunks: 32): 0-[0, 1025) 1-[1025, 2154) 2-[2154, 3262) 3-[3262, 4284) 4-[4284, 5334) 5-[5334, 6511) 6-[6511, 7597) 7-[7597, 8680) 8-[8680, 9764) ... 31-[33337, 34493)
34493, 530417, 530417
Number of vertices per chunk: 1078
GPU 0, layer [0, 9)
GPU 1, layer [9, 17)
GPU 2, layer [17, 25)
GPU 3, layer [25, 33)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
34493, 530417, 530417
Number of vertices per chunk: 1078
csr in-out ready !Start Cost Model Initialization...
***** Start profiling the layer-level communication performance *******
csr in-out ready !Start Cost Model Initialization...
The layer-level communication performance: 59.944 Gbps (per GPU), 479.556 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 59.628 Gbps (per GPU), 477.025 Gbps (aggregated)
The layer-level communication performance: 59.622 Gbps (per GPU), 476.977 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 59.362 Gbps (per GPU), 474.894 Gbps (aggregated)
The layer-level communication performance: 59.337 Gbps (per GPU), 474.697 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 59.125 Gbps (per GPU), 473.000 Gbps (aggregated)
The layer-level communication performance: 59.063 Gbps (per GPU), 472.503 Gbps (aggregated)
The layer-level communication performance: 59.034 Gbps (per GPU), 472.273 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The graph-level communication performance (supernode = 2): 158.551 Gbps (per GPU), 1268.407 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.515 Gbps (per GPU), 1268.119 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.539 Gbps (per GPU), 1268.311 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.554 Gbps (per GPU), 1268.431 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.530 Gbps (per GPU), 1268.239 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.509 Gbps (per GPU), 1268.075 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.539 Gbps (per GPU), 1268.311 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.536 Gbps (per GPU), 1268.287 Gbps (aggregated, cluster-wide)
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
The graph-level communication performance (supernode = 4): 104.444 Gbps (per GPU), 835.553 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 104.444 Gbps (per GPU), 835.553 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 104.446 Gbps (per GPU), 835.567 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 104.445 Gbps (per GPU), 835.560 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 104.445 Gbps (per GPU), 835.560 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 104.444 Gbps (per GPU), 835.553 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 104.445 Gbps (per GPU), 835.559 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 104.418 Gbps (per GPU), 835.345 Gbps (aggregated, cluster-wide)
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
The graph-level communication performance (supernode = 8): 35.366 Gbps (per GPU), 282.931 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 35.367 Gbps (per GPU), 282.937 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 35.367 Gbps (per GPU), 282.938 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 35.368 Gbps (per GPU), 282.941 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 35.367 Gbps (per GPU), 282.938 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 35.367 Gbps (per GPU), 282.939 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 35.368 Gbps (per GPU), 282.944 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 35.364 Gbps (per GPU), 282.916 Gbps (aggregated, cluster-wide)
 LType   LT0   LT1   LT2 Ratio  VSum  ESum
 chk_0  1.27ms  0.29ms  0.41ms  4.32  1.02K  0.02M
 chk_1  1.35ms  0.29ms  0.41ms  4.62  1.13K  0.01M
 chk_2  1.34ms  0.29ms  0.41ms  4.55  1.11K  0.01M
 chk_3  1.26ms  0.29ms  0.41ms  4.39  1.02K  0.02M
 chk_4  1.29ms  0.29ms  0.41ms  4.41  1.05K  0.02M
 chk_5  1.39ms  0.29ms  0.41ms  4.73  1.18K  0.01M
 chk_6  1.33ms  0.29ms  0.41ms  4.53  1.09K  0.02M
 chk_7  1.33ms  0.29ms  0.41ms  4.54  1.08K  0.02M
 chk_8  1.33ms  0.29ms  0.41ms  4.54  1.08K  0.01M
 chk_9  1.30ms  0.29ms  0.41ms  4.49  1.06K  0.02M
chk_10  1.30ms  0.29ms  0.59ms  4.46  1.04K  0.02M
chk_11  1.35ms  0.29ms  0.41ms  4.58  1.11K  0.01M
chk_12  1.36ms  0.29ms  0.41ms  4.65  1.11K  0.01M
chk_13  1.26ms  0.29ms  0.40ms  4.40  1.01K  0.02M
chk_14  1.83ms  0.29ms  0.41ms  6.27  1.09K  0.01M
chk_15  1.28ms  0.29ms  0.41ms  4.40  1.03K  0.02M
chk_16  1.23ms  0.29ms  0.40ms  4.29  0.98K  0.02M
chk_17  1.33ms  0.29ms  0.41ms  4.54  1.09K  0.01M
chk_18  1.31ms  0.29ms  0.41ms  4.48  1.04K  0.02M
chk_19  1.35ms  0.29ms  0.41ms  4.60  1.12K  0.01M
chk_20  1.35ms  0.29ms  0.41ms  4.61  1.13K  0.01M
chk_21  1.29ms  0.29ms  0.41ms  4.46  1.05K  0.02M
chk_22  1.35ms  0.30ms  0.41ms  4.56  1.11K  0.01M
chk_23  1.34ms  0.29ms  0.41ms  4.56  1.10K  0.01M
chk_24  1.27ms  0.29ms  0.41ms  4.38  1.02K  0.02M
chk_25  1.26ms  0.29ms  0.40ms  4.41  1.01K  0.02M
chk_26  1.35ms  0.29ms  0.41ms  4.62  1.12K  0.01M
chk_27  1.32ms  0.29ms  0.41ms  4.53  1.08K  0.02M
chk_28  1.31ms  0.29ms  0.41ms  4.48  1.07K  0.02M
chk_29  1.88ms  0.29ms  0.41ms  6.50  1.11K  0.01M
chk_30  1.33ms  0.29ms  0.41ms  4.53  1.10K  0.01M
chk_31  1.38ms  0.29ms  0.41ms  4.72  1.16K  0.01M
   Avg  1.35  0.29  0.42
   Max  1.88  0.30  0.59
   Min  1.23  0.29  0.40
 Ratio  1.53  1.03  1.47
   Var  0.02  0.00  0.00
Profiling takes 0.887 s
*** Node 0, starting model training...
Num Stages: 4 / 4
Node 0, Pipeline Input Tensor: NULL
Node 0, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 0 owns the model-level partition [0, 62)
*** Node 0, constructing the helper classes...
Node 0, Local Vertex Begin: 0, Num Local Vertices: 17213
*** Node 2, starting model training...
Num Stages: 4 / 4
Node 2, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 2, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 2 owns the model-level partition [62, 118)
*** Node 2, constructing the helper classes...
Node 2, Local Vertex Begin: 0, Num Local Vertices: 17213
*** Node 4, starting model training...
Num Stages: 4 / 4
*** Node 3, starting model training...
Num Stages: 4 / 4
Node 3, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 3, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 3 owns the model-level partition [62, 118)
*** Node 3, constructing the helper classes...
Node 3, Local Vertex Begin: 17213, Num Local Vertices: 17280
*** Node 5, starting model training...
Num Stages: 4 / 4
Node 5, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 5, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 5 owns the model-level partition [118, 174)
*** Node 5, constructing the helper classes...
Node 5, Local Vertex Begin: 17213, Num Local Vertices: 17280
*** Node 1, starting model training...
Num Stages: 4 / 4
Node 1, Pipeline Input Tensor: NULL
Node 1, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 1 owns the model-level partition [0, 62)
*** Node 1, constructing the helper classes...
Node 1, Local Vertex Begin: 17213, Num Local Vertices: 17280
*** Node 6, starting model training...
Num Stages: 4 / 4
Node 6, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 6, Pipeline Output Tensor: NULL
*** Node 6 owns the model-level partition [174, 233)
*** Node 6, constructing the helper classes...
Node 6, Local Vertex Begin: 0, Num Local Vertices: 17213
*** Node 7, starting model training...
Num Stages: 4 / 4
Node 7, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 7, Pipeline Output Tensor: NULL
*** Node 7 owns the model-level partition [174, 233)
*** Node 7, constructing the helper classes...
Node 7, Local Vertex Begin: 17213, Num Local Vertices: 17280
Node 4, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 4, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 4 owns the model-level partition [118, 174)
*** Node 4, constructing the helper classes...
Node 4, Local Vertex Begin: 0, Num Local Vertices: 17213
*** Node 5, setting up some other necessary information...
*** Node 6, setting up some other necessary information...
*** Node 4, setting up some other necessary information...
*** Node 7, setting up some other necessary information...
*** Node 2, setting up some other necessary information...
*** Node 3, setting up some other necessary information...
*** Node 0, setting up some other necessary information...
*** Node 1, setting up some other necessary information...
+++++++++ Node 6 initializing the weights for op[174, 233)...
+++++++++ Node 1 initializing the weights for op[0, 62)...
+++++++++ Node 2 initializing the weights for op[62, 118)...
+++++++++ Node 5 initializing the weights for op[118, 174)...
+++++++++ Node 0 initializing the weights for op[0, 62)...
+++++++++ Node 7 initializing the weights for op[174, 233)...
+++++++++ Node 3 initializing the weights for op[62, 118)...
+++++++++ Node 4 initializing the weights for op[118, 174)...
Node 0, discovering the vertices that will be sent across graph boundary...
Node 1, discovering the vertices that will be sent across graph boundary...
Node 2, discovering the vertices that will be sent across graph boundary...
Node 6, discovering the vertices that will be sent across graph boundary...
Node 3, discovering the vertices that will be sent across graph boundary...
Node 7, discovering the vertices that will be sent across graph boundary...
Node 5, discovering the vertices that will be sent across graph boundary...
Node 4, discovering the vertices that will be sent across graph boundary...
The number of mirror vertices: 89728
Node 0, discovering the vertices that will be received across the graph boundary.
Node 1, discovering the vertices that will be received across the graph boundary.
Node 2, discovering the vertices that will be received across the graph boundary.
Node 3, discovering the vertices that will be received across the graph boundary.
Node 4, discovering the vertices that will be received across the graph boundary.
Node 5, discovering the vertices that will be received across the graph boundary.
Node 6, discovering the vertices that will be received across the graph boundary.
Node 7, discovering the vertices that will be received across the graph boundary.
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
*** Node 0, starting task scheduling...
*** Node 1, starting task scheduling...
*** Node 2, starting task scheduling...
*** Node 3, starting task scheduling...



The learning rate specified by the user: 0.001000000
*** Node 4, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 5, starting task scheduling...
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
*** Node 6, starting task scheduling...
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
*** Node 7, starting task scheduling...
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
	Epoch 1:	Loss 1.6033	TrainAcc 0.4000	ValidAcc 0.4980	TestAcc 0.5130	BestValid 0.4980
	Epoch 10:	Loss 1.1796	TrainAcc 0.8800	ValidAcc 0.8980	TestAcc 0.9000	BestValid 0.8980
	Epoch 20:	Loss 0.6976	TrainAcc 0.9200	ValidAcc 0.9220	TestAcc 0.9260	BestValid 0.9220
	Epoch 30:	Loss 0.3256	TrainAcc 0.9800	ValidAcc 0.9460	TestAcc 0.9380	BestValid 0.9460
	Epoch 40:	Loss 0.2369	TrainAcc 0.9800	ValidAcc 0.9520	TestAcc 0.9450	BestValid 0.9520
	Epoch 50:	Loss 0.1293	TrainAcc 0.9900	ValidAcc 0.9440	TestAcc 0.9440	BestValid 0.9520
	Epoch 60:	Loss 0.1255	TrainAcc 0.9900	ValidAcc 0.9460	TestAcc 0.9470	BestValid 0.9520
	Epoch 70:	Loss 0.0973	TrainAcc 0.9900	ValidAcc 0.9460	TestAcc 0.9490	BestValid 0.9520
	Epoch 80:	Loss 0.1029	TrainAcc 1.0000	ValidAcc 0.9460	TestAcc 0.9430	BestValid 0.9520
	Epoch 90:	Loss 0.0705	TrainAcc 1.0000	ValidAcc 0.9440	TestAcc 0.9420	BestValid 0.9520
	Epoch 100:	Loss 0.0453	TrainAcc 1.0000	ValidAcc 0.9420	TestAcc 0.9420	BestValid 0.9520
	Epoch 110:	Loss 0.0880	TrainAcc 1.0000	ValidAcc 0.9380	TestAcc 0.9380	BestValid 0.9520
	Epoch 120:	Loss 0.0373	TrainAcc 1.0000	ValidAcc 0.9420	TestAcc 0.9380	BestValid 0.9520
	Epoch 130:	Loss 0.0510	TrainAcc 1.0000	ValidAcc 0.9440	TestAcc 0.9390	BestValid 0.9520
	Epoch 140:	Loss 0.0465	TrainAcc 1.0000	ValidAcc 0.9420	TestAcc 0.9370	BestValid 0.9520
	Epoch 150:	Loss 0.0372	TrainAcc 1.0000	ValidAcc 0.9420	TestAcc 0.9360	BestValid 0.9520
	Epoch 160:	Loss 0.1356	TrainAcc 1.0000	ValidAcc 0.9400	TestAcc 0.9390	BestValid 0.9520
	Epoch 170:	Loss 0.0234	TrainAcc 1.0000	ValidAcc 0.9480	TestAcc 0.9410	BestValid 0.9520
	Epoch 180:	Loss 0.0223	TrainAcc 1.0000	ValidAcc 0.9480	TestAcc 0.9390	BestValid 0.9520
	Epoch 190:	Loss 0.0339	TrainAcc 1.0000	ValidAcc 0.9460	TestAcc 0.9360	BestValid 0.9520
	Epoch 200:	Loss 0.0328	TrainAcc 1.0000	ValidAcc 0.9440	TestAcc 0.9370	BestValid 0.9520
	Epoch 210:	Loss 0.0208	TrainAcc 1.0000	ValidAcc 0.9440	TestAcc 0.9390	BestValid 0.9520
	Epoch 220:	Loss 0.0234	TrainAcc 1.0000	ValidAcc 0.9400	TestAcc 0.9400	BestValid 0.9520
	Epoch 230:	Loss 0.0149	TrainAcc 1.0000	ValidAcc 0.9420	TestAcc 0.9380	BestValid 0.9520
	Epoch 240:	Loss 0.0204	TrainAcc 1.0000	ValidAcc 0.9440	TestAcc 0.9370	BestValid 0.9520
	Epoch 250:	Loss 0.0321	TrainAcc 1.0000	ValidAcc 0.9440	TestAcc 0.9390	BestValid 0.9520
	Epoch 260:	Loss 0.0455	TrainAcc 1.0000	ValidAcc 0.9460	TestAcc 0.9400	BestValid 0.9520
	Epoch 270:	Loss 0.0163	TrainAcc 1.0000	ValidAcc 0.9480	TestAcc 0.9400	BestValid 0.9520
	Epoch 280:	Loss 0.0193	TrainAcc 1.0000	ValidAcc 0.9500	TestAcc 0.9390	BestValid 0.9520
	Epoch 290:	Loss 0.0163	TrainAcc 1.0000	ValidAcc 0.9480	TestAcc 0.9380	BestValid 0.9520
	Epoch 300:	Loss 0.0197	TrainAcc 1.0000	ValidAcc 0.9460	TestAcc 0.9370	BestValid 0.9520
****** Epoch Time (Excluding Evaluation Cost): 0.104 s ******
****** Breakdown Analysis ******
Cluster-Wide Average, Bubble-Pipeline: 15.403 ms (Max: 16.950, Min: 13.162, Sum: 123.225)
Cluster-Wide Average, Compute: 48.201 ms (Max: 62.477, Min: 41.581, Sum: 385.610)
Cluster-Wide Average, Communication-Layer: 6.512 ms (Max: 7.799, Min: 5.711, Sum: 52.095)
Cluster-Wide Average, Bubble-Imbalance: 11.382 ms (Max: 16.581, Min: 0.388, Sum: 91.052)
Cluster-Wide Average, Communication-Graph: 19.636 ms (Max: 21.126, Min: 18.721, Sum: 157.087)
Cluster-Wide Average, Optimization: 1.777 ms (Max: 2.321, Min: 1.381, Sum: 14.213)
Cluster-Wide Average, Others: 1.189 ms (Max: 1.585, Min: 0.698, Sum: 9.513)
****** Breakdown Sum: 104.100 ms ******
Cluster-Wide Average, GPU Memory Consumption: 3.018 GB (Max: 4.997, Min: 2.503, Sum: 24.142)
Cluster-Wide Average, Graph-Level Communication Throughput: 43.961 Gbps (Max: 49.342, Min: 39.845, Sum: 351.688)
Cluster-Wide Average, Layer-Level Communication Throughput: 24.883 Gbps (Max: 32.978, Min: 18.256, Sum: 199.062)
Layer-level communication (cluster-wide, per-epoch): 0.154 GB
Graph-level communication (cluster-wide, per-epoch): 0.535 GB
Weight-sync communication (cluster-wide, per-epoch): 0.009 GB
Total communication (cluster-wide, per-epoch): 0.698 GB
****** Accuracy Results ******
Highest valid_acc: 0.9520
Target test_acc: 0.9450
Epoch to reach the target acc: 39
[MPI Rank 0] Success 
[MPI Rank 1] Success 
[MPI Rank 2] Success 
[MPI Rank 3] Success 
[MPI Rank 4] Success 
[MPI Rank 5] Success 
[MPI Rank 6] Success 
[MPI Rank 7] Success 
