Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
DONE MPI INIT
DONE MPI INIT
Initialized node 2 on machine gnerv7
DONE MPI INITInitialized node 0 on machine gnerv7
DONE MPI INIT
Initialized node 1 on machine gnerv7

Initialized node 3 on machine gnerv7
DONE MPI INITDONE MPI INIT
Initialized node 5 on machine gnerv8
DONE MPI INIT
DONE MPI INIT
Initialized node 4 on machine gnerv8

Initialized node 6 on machine gnerv8
Initialized node 7 on machine gnerv8
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
        It takes 0.010 seconds.
Building the CSC structure...
        It takes 0.011 seconds.
Building the CSC structure...
        It takes 0.011 seconds.
Building the CSC structure...
        It takes 0.011 seconds.
Building the CSC structure...
        It takes 0.011 seconds.
Building the CSC structure...
        It takes 0.010 seconds.
        It takes 0.012 seconds.
        It takes 0.012 seconds.
        It takes 0.019 seconds.
Building the CSC structure...
        It takes 0.019 seconds.
Building the CSC structure...
        It takes 0.019 seconds.
Building the CSC structure...
        It takes 0.016 seconds.
Building the Feature Vector...
        It takes 0.012 seconds.
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
        It takes 0.011 seconds.
        It takes 0.012 seconds.
        It takes 0.012 seconds.
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
        It takes 0.456 seconds.
Building the Label Vector...
        It takes 0.002 seconds.
        It takes 0.461 seconds.
Building the Label Vector...
        It takes 0.003 seconds.
        It takes 0.507 seconds.
Building the Label Vector...
        It takes 0.003 seconds.
        It takes 0.522 seconds.
Building the Label Vector...
        It takes 0.003 seconds.
        It takes 0.606 seconds.
Building the Label Vector...
        It takes 0.003 seconds.
        It takes 0.622 seconds.
Building the Label Vector...
        It takes 0.003 seconds.
The graph dataset locates at /shared_hdd_storage/jingjichen/gnn_datasets/pipeline_parallel_datasets/physics/32_parts
The number of GCNII layers: 32
The number of hidden units: 100
The number of training epoches: 300
Learning rate: 0.001000
The partition strategy: model
The dropout rate: 0.500
The checkpointed weight file: /tmp/saved_weights
The random seed: 1
GCN hyper-parameter alpha: 0.100000
GCN hyper-parameter lambda: 0.500000
Number of classes: 5
Number of feature dimensions: 8415
Number of vertices: 34493
Number of GPUs: 8
        It takes 0.624 seconds.
Building the Label Vector...
        It takes 0.626 seconds.
Building the Label Vector...
        It takes 0.004 seconds.
        It takes 0.007 seconds.
GPU 0, layer [0, 9)
GPU 1, layer [9, 17)
GPU 2, layer [17, 25)
GPU 3, layer [25, 33)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
34493, 530417, 530417
Number of vertices per chunk: 1078
csr in-out ready !Start Cost Model Initialization...
GPU 0, layer [0, 9)
GPU 1, layer [9, 17)
GPU 2, layer [17, 25)
GPU 3, layer [25, 33)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
34493, 530417, 530417
Number of vertices per chunk: 1078
csr in-out ready !Start Cost Model Initialization...
GPU 0, layer [0, 9)
GPU 1, layer [9, 17)
GPU 2, layer [17, 25)
GPU 3, layer [25, 33)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
34493, 530417, 530417
Number of vertices per chunk: 1078
csr in-out ready !Start Cost Model Initialization...
GPU 0, layer [0, 9)
GPU 1, layer [9, 17)
GPU 2, layer [17, 25)
GPU 3, layer [25, 33)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
34493, 530417, 530417
Number of vertices per chunk: 1078
csr in-out ready !Start Cost Model Initialization...
GPU 0, layer [0, 9)
GPU 1, layer [9, 17)
GPU 2, layer [17, 25)
GPU 3, layer [25, 33)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
34493, 530417, 530417
Number of vertices per chunk: 1078
GPU 0, layer [0, 9)
GPU 1, layer [9, 17)
GPU 2, layer [17, 25)
GPU 3, layer [25, 33)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
csr in-out ready !Start Cost Model Initialization...
34493, 530417, 530417
Number of vertices per chunk: 1078
csr in-out ready !Start Cost Model Initialization...
train nodes 100, valid nodes 500, test nodes 1000
GPU 0, layer [0, 9)
GPU 1, layer [9, 17)
GPU 2, layer [17, 25)
GPU 3, layer [25, 33)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
Chunks (number of global chunks: 32): 0-[0, 1025) 1-[1025, 2154) 2-[2154, 3262) 3-[3262, 4284) 4-[4284, 5334) 5-[5334, 6511) 6-[6511, 7597) 7-[7597, 8680) 8-[8680, 9764) ... 31-[33337, 34493)
GPU 0, layer [0, 9)
GPU 1, layer [9, 17)
GPU 2, layer [17, 25)
GPU 3, layer [25, 33)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
34493, 530417, 530417
Number of vertices per chunk: 1078
34493, 530417, 530417
Number of vertices per chunk: 1078
csr in-out ready !Start Cost Model Initialization...
***** Start profiling the layer-level communication performance *******
csr in-out ready !Start Cost Model Initialization...
The layer-level communication performance: 60.782 Gbps (per GPU), 486.253 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 60.486 Gbps (per GPU), 483.892 Gbps (aggregated)
The layer-level communication performance: 60.481 Gbps (per GPU), 483.849 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 60.212 Gbps (per GPU), 481.693 Gbps (aggregated)
The layer-level communication performance: 60.187 Gbps (per GPU), 481.494 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 59.956 Gbps (per GPU), 479.651 Gbps (aggregated)
The layer-level communication performance: 59.902 Gbps (per GPU), 479.217 Gbps (aggregated)
The layer-level communication performance: 59.869 Gbps (per GPU), 478.954 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The graph-level communication performance (supernode = 2): 158.416 Gbps (per GPU), 1267.329 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.419 Gbps (per GPU), 1267.353 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.386 Gbps (per GPU), 1267.090 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.410 Gbps (per GPU), 1267.281 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.422 Gbps (per GPU), 1267.377 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.417 Gbps (per GPU), 1267.333 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.383 Gbps (per GPU), 1267.066 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.404 Gbps (per GPU), 1267.235 Gbps (aggregated, cluster-wide)
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
The graph-level communication performance (supernode = 4): 105.044 Gbps (per GPU), 840.352 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 105.042 Gbps (per GPU), 840.338 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 105.009 Gbps (per GPU), 840.072 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 105.043 Gbps (per GPU), 840.345 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 105.042 Gbps (per GPU), 840.338 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 104.978 Gbps (per GPU), 839.827 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 104.970 Gbps (per GPU), 839.764 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 104.934 Gbps (per GPU), 839.469 Gbps (aggregated, cluster-wide)
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
The graph-level communication performance (supernode = 8): 38.784 Gbps (per GPU), 310.275 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 38.784 Gbps (per GPU), 310.273 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 38.784 Gbps (per GPU), 310.269 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 38.782 Gbps (per GPU), 310.258 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 38.780 Gbps (per GPU), 310.243 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 38.783 Gbps (per GPU), 310.262 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 38.783 Gbps (per GPU), 310.262 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 38.782 Gbps (per GPU), 310.260 Gbps (aggregated, cluster-wide)
 LType   LT0   LT1   LT2 Ratio  VSum  ESum
 chk_0  1.28ms  0.30ms  0.42ms  4.20  1.02K  0.02M
 chk_1  1.36ms  0.30ms  0.42ms  4.45  1.13K  0.01M
 chk_2  1.34ms  0.30ms  0.42ms  4.41  1.11K  0.01M
 chk_3  1.27ms  0.30ms  0.41ms  4.24  1.02K  0.02M
 chk_4  1.30ms  0.30ms  0.42ms  4.30  1.05K  0.02M
 chk_5  1.40ms  0.30ms  0.42ms  4.63  1.18K  0.01M
 chk_6  1.34ms  0.30ms  0.42ms  4.42  1.09K  0.02M
 chk_7  1.33ms  0.46ms  0.42ms  3.19  1.08K  0.02M
 chk_8  1.33ms  0.30ms  0.42ms  4.44  1.08K  0.01M
 chk_9  1.31ms  0.30ms  0.42ms  4.40  1.06K  0.02M
chk_10  1.30ms  0.30ms  0.42ms  4.37  1.04K  0.02M
chk_11  1.35ms  0.30ms  0.42ms  4.53  1.11K  0.01M
chk_12  1.35ms  0.30ms  0.42ms  4.51  1.11K  0.01M
chk_13  1.26ms  0.29ms  0.41ms  4.32  1.01K  0.02M
chk_14  1.33ms  0.30ms  0.42ms  4.50  1.09K  0.01M
chk_15  1.29ms  0.29ms  0.42ms  4.37  1.03K  0.02M
chk_16  1.24ms  0.29ms  0.41ms  4.23  0.98K  0.02M
chk_17  1.34ms  0.30ms  0.42ms  4.48  1.09K  0.01M
chk_18  1.30ms  0.30ms  0.42ms  4.37  1.04K  0.02M
chk_19  1.35ms  0.30ms  0.42ms  4.56  1.12K  0.01M
chk_20  1.36ms  0.30ms  0.42ms  4.56  1.13K  0.01M
chk_21  1.30ms  0.30ms  0.42ms  4.38  1.05K  0.02M
chk_22  1.35ms  0.30ms  0.42ms  4.51  1.11K  0.01M
chk_23  1.34ms  0.30ms  0.42ms  4.48  1.10K  0.01M
chk_24  1.28ms  0.30ms  0.42ms  4.31  1.02K  0.02M
chk_25  1.26ms  0.29ms  0.41ms  4.32  1.01K  0.02M
chk_26  1.36ms  0.30ms  0.42ms  4.57  1.12K  0.01M
chk_27  1.66ms  0.30ms  0.42ms  5.61  1.08K  0.02M
chk_28  1.31ms  0.30ms  0.42ms  4.39  1.07K  0.02M
chk_29  1.35ms  0.30ms  0.42ms  4.54  1.11K  0.01M
chk_30  1.34ms  0.30ms  0.42ms  4.51  1.10K  0.01M
chk_31  1.38ms  0.29ms  0.42ms  4.69  1.16K  0.01M
   Avg  1.33  0.30  0.42
   Max  1.66  0.46  0.42
   Min  1.24  0.29  0.41
 Ratio  1.34  1.56  1.03
   Var  0.00  0.00  0.00
Profiling takes 0.885 s
*** Node 0, starting model training...
Num Stages: 4 / 4
Node 0, Pipeline Input Tensor: NULL
Node 0, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 0 owns the model-level partition [0, 62)
*** Node 0, constructing the helper classes...
Node 0, Local Vertex Begin: 0, Num Local Vertices: 17213
*** Node 2, starting model training...
Num Stages: 4 / 4
Node 2, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 2, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 2 owns the model-level partition [62, 118)
*** Node 2, constructing the helper classes...
Node 2, Local Vertex Begin: 0, Num Local Vertices: 17213
*** Node 3, starting model training...
Num Stages: 4 / 4
Node 3, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 3, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 3 owns the model-level partition [62, 118)
*** Node 3, constructing the helper classes...
Node 3, Local Vertex Begin: 17213, Num Local Vertices: 17280
*** Node 1, starting model training...
Num Stages: 4 / 4
Node 1, Pipeline Input Tensor: NULL
*** Node 4, starting model training...
Num Stages: 4 / 4
Node 4, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 4, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 4 owns the model-level partition [118, 174)
*** Node 4, constructing the helper classes...
Node 4, Local Vertex Begin: 0, Num Local Vertices: 17213
*** Node 5, starting model training...
Num Stages: 4 / 4
Node 5, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 5, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 5 owns the model-level partition [118, 174)
*** Node 5, constructing the helper classes...
Node 5, Local Vertex Begin: 17213, Num Local Vertices: 17280
*** Node 6, starting model training...
Num Stages: 4 / 4
Node 6, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 6, Pipeline Output Tensor: NULL
*** Node 6 owns the model-level partition [174, 233)
*** Node 6, constructing the helper classes...
Node 6, Local Vertex Begin: 0, Num Local Vertices: 17213
*** Node 7, starting model training...
Num Stages: 4 / 4
Node 7, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 7, Pipeline Output Tensor: NULL
*** Node 7 owns the model-level partition [174, 233)
*** Node 7, constructing the helper classes...
Node 7, Local Vertex Begin: 17213, Num Local Vertices: 17280
Node 1, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 1 owns the model-level partition [0, 62)
*** Node 1, constructing the helper classes...
Node 1, Local Vertex Begin: 17213, Num Local Vertices: 17280
*** Node 4, setting up some other necessary information...
*** Node 5, setting up some other necessary information...
*** Node 6, setting up some other necessary information...
*** Node 2, setting up some other necessary information...
*** Node 7, setting up some other necessary information...
*** Node 3, setting up some other necessary information...
*** Node 1, setting up some other necessary information...
*** Node 0, setting up some other necessary information...
+++++++++ Node 2 initializing the weights for op[62, 118)...
+++++++++ Node 5 initializing the weights for op[118, 174)...
+++++++++ Node 3 initializing the weights for op[62, 118)...
+++++++++ Node 0 initializing the weights for op[0, 62)...
+++++++++ Node 4 initializing the weights for op[118, 174)...
+++++++++ Node 6 initializing the weights for op[174, 233)...
+++++++++ Node 1 initializing the weights for op[0, 62)...
+++++++++ Node 7 initializing the weights for op[174, 233)...
Node 2, discovering the vertices that will be sent across graph boundary...
Node 3, discovering the vertices that will be sent across graph boundary...
Node 6, discovering the vertices that will be sent across graph boundary...
Node 1, discovering the vertices that will be sent across graph boundary...
Node 7, discovering the vertices that will be sent across graph boundary...
Node 4, discovering the vertices that will be sent across graph boundary...
Node 5, discovering the vertices that will be sent across graph boundary...
Node 0, discovering the vertices that will be sent across graph boundary...
The number of mirror vertices: 89728
Node 0, discovering the vertices that will be received across the graph boundary.
Node 1, discovering the vertices that will be received across the graph boundary.
Node 4, discovering the vertices that will be received across the graph boundary.
Node 2, discovering the vertices that will be received across the graph boundary.
Node 3, discovering the vertices that will be received across the graph boundary.
Node 5, discovering the vertices that will be received across the graph boundary.
Node 6, discovering the vertices that will be received across the graph boundary.
Node 7, discovering the vertices that will be received across the graph boundary.
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
*** Node 0, starting task scheduling...
*** Node 1, starting task scheduling...
*** Node 2, starting task scheduling...
*** Node 4, starting task scheduling...
*** Node 5, starting task scheduling...
*** Node 3, starting task scheduling...
*** Node 6, starting task scheduling...
*** Node 7, starting task scheduling...



The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
	Epoch 1:	Loss 1.6003	TrainAcc 0.6900	ValidAcc 0.3880	TestAcc 0.3880	BestValid 0.3880
	Epoch 10:	Loss 1.1396	TrainAcc 0.9500	ValidAcc 0.9140	TestAcc 0.9100	BestValid 0.9140
	Epoch 20:	Loss 0.6350	TrainAcc 0.9500	ValidAcc 0.9280	TestAcc 0.9360	BestValid 0.9280
	Epoch 30:	Loss 0.2822	TrainAcc 0.9700	ValidAcc 0.9400	TestAcc 0.9410	BestValid 0.9400
	Epoch 40:	Loss 0.1905	TrainAcc 0.9900	ValidAcc 0.9440	TestAcc 0.9480	BestValid 0.9440
	Epoch 50:	Loss 0.1438	TrainAcc 0.9900	ValidAcc 0.9480	TestAcc 0.9490	BestValid 0.9480
	Epoch 60:	Loss 0.0818	TrainAcc 0.9900	ValidAcc 0.9440	TestAcc 0.9410	BestValid 0.9480
	Epoch 70:	Loss 0.1163	TrainAcc 0.9900	ValidAcc 0.9420	TestAcc 0.9400	BestValid 0.9480
	Epoch 80:	Loss 0.3571	TrainAcc 1.0000	ValidAcc 0.9420	TestAcc 0.9430	BestValid 0.9480
	Epoch 90:	Loss 0.0636	TrainAcc 1.0000	ValidAcc 0.9420	TestAcc 0.9450	BestValid 0.9480
	Epoch 100:	Loss 0.0334	TrainAcc 1.0000	ValidAcc 0.9460	TestAcc 0.9420	BestValid 0.9480
	Epoch 110:	Loss 0.0961	TrainAcc 1.0000	ValidAcc 0.9420	TestAcc 0.9370	BestValid 0.9480
	Epoch 120:	Loss 0.0334	TrainAcc 1.0000	ValidAcc 0.9420	TestAcc 0.9360	BestValid 0.9480
	Epoch 130:	Loss 0.0382	TrainAcc 1.0000	ValidAcc 0.9360	TestAcc 0.9390	BestValid 0.9480
	Epoch 140:	Loss 0.0658	TrainAcc 1.0000	ValidAcc 0.9400	TestAcc 0.9370	BestValid 0.9480
	Epoch 150:	Loss 0.0325	TrainAcc 1.0000	ValidAcc 0.9400	TestAcc 0.9390	BestValid 0.9480
	Epoch 160:	Loss 0.0197	TrainAcc 1.0000	ValidAcc 0.9420	TestAcc 0.9400	BestValid 0.9480
	Epoch 170:	Loss 0.0277	TrainAcc 1.0000	ValidAcc 0.9440	TestAcc 0.9410	BestValid 0.9480
	Epoch 180:	Loss 0.0278	TrainAcc 1.0000	ValidAcc 0.9440	TestAcc 0.9410	BestValid 0.9480
	Epoch 190:	Loss 0.0350	TrainAcc 1.0000	ValidAcc 0.9440	TestAcc 0.9400	BestValid 0.9480
	Epoch 200:	Loss 0.0250	TrainAcc 1.0000	ValidAcc 0.9460	TestAcc 0.9380	BestValid 0.9480
	Epoch 210:	Loss 0.0159	TrainAcc 1.0000	ValidAcc 0.9460	TestAcc 0.9400	BestValid 0.9480
	Epoch 220:	Loss 0.0408	TrainAcc 1.0000	ValidAcc 0.9460	TestAcc 0.9390	BestValid 0.9480
	Epoch 230:	Loss 0.0181	TrainAcc 1.0000	ValidAcc 0.9460	TestAcc 0.9400	BestValid 0.9480
	Epoch 240:	Loss 0.0270	TrainAcc 1.0000	ValidAcc 0.9400	TestAcc 0.9380	BestValid 0.9480
	Epoch 250:	Loss 0.0196	TrainAcc 1.0000	ValidAcc 0.9400	TestAcc 0.9380	BestValid 0.9480
	Epoch 260:	Loss 0.3046	TrainAcc 1.0000	ValidAcc 0.9380	TestAcc 0.9380	BestValid 0.9480
	Epoch 270:	Loss 0.0122	TrainAcc 1.0000	ValidAcc 0.9420	TestAcc 0.9370	BestValid 0.9480
	Epoch 280:	Loss 0.0238	TrainAcc 1.0000	ValidAcc 0.9400	TestAcc 0.9380	BestValid 0.9480
	Epoch 290:	Loss 0.2971	TrainAcc 1.0000	ValidAcc 0.9420	TestAcc 0.9410	BestValid 0.9480
	Epoch 300:	Loss 0.0157	TrainAcc 1.0000	ValidAcc 0.9400	TestAcc 0.9400	BestValid 0.9480
****** Epoch Time (Excluding Evaluation Cost): 0.106 s ******
****** Breakdown Analysis ******
Cluster-Wide Average, Bubble-Pipeline: 15.564 ms (Max: 17.659, Min: 12.871, Sum: 124.515)
Cluster-Wide Average, Compute: 47.959 ms (Max: 63.700, Min: 41.669, Sum: 383.671)
Cluster-Wide Average, Communication-Layer: 6.571 ms (Max: 7.801, Min: 5.762, Sum: 52.565)
Cluster-Wide Average, Bubble-Imbalance: 13.330 ms (Max: 19.923, Min: 0.367, Sum: 106.642)
Cluster-Wide Average, Communication-Graph: 19.396 ms (Max: 21.001, Min: 18.659, Sum: 155.168)
Cluster-Wide Average, Optimization: 1.833 ms (Max: 2.625, Min: 1.401, Sum: 14.667)
Cluster-Wide Average, Others: 1.351 ms (Max: 1.898, Min: 0.703, Sum: 10.806)
****** Breakdown Sum: 106.004 ms ******
Cluster-Wide Average, GPU Memory Consumption: 3.017 GB (Max: 4.997, Min: 2.503, Sum: 24.140)
Cluster-Wide Average, Graph-Level Communication Throughput: 44.500 Gbps (Max: 48.362, Min: 40.597, Sum: 356.000)
Cluster-Wide Average, Layer-Level Communication Throughput: 24.651 Gbps (Max: 32.620, Min: 18.225, Sum: 197.207)
Layer-level communication (cluster-wide, per-epoch): 0.154 GB
Graph-level communication (cluster-wide, per-epoch): 0.535 GB
Weight-sync communication (cluster-wide, per-epoch): 0.009 GB
Total communication (cluster-wide, per-epoch): 0.698 GB
****** Accuracy Results ******
Highest valid_acc: 0.9480
Target test_acc: 0.9490
Epoch to reach the target acc: 49
[MPI Rank 0] Success 
[MPI Rank 1] Success 
[MPI Rank 2] Success 
[MPI Rank 3] Success 
[MPI Rank 4] Success 
[MPI Rank 5] Success 
[MPI Rank 6] Success 
[MPI Rank 7] Success 
