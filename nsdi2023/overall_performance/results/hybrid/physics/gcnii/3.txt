Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
Starting GNN Training...
Initializing the runtime environment
DONE MPI INITDONE MPI INIT
DONE MPI INIT
Initialized node 2 on machine gnerv7
Initialized node 1 on machine gnerv7

Initialized node 0 on machine gnerv7
DONE MPI INIT
Initialized node 3 on machine gnerv7
DONE MPI INITDONE MPI INIT

Initialized node 4 on machine gnerv8
DONE MPI INIT
Initialized node 5 on machine gnerv8
DONE MPI INIT
Initialized node 6 on machine gnerv8
Initialized node 7 on machine gnerv8
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
        It takes 0.010 seconds.
Building the CSC structure...
        It takes 0.011 seconds.
Building the CSC structure...
        It takes 0.010 seconds.
Building the CSC structure...
        It takes 0.011 seconds.
Building the CSC structure...
        It takes 0.012 seconds.
Building the CSC structure...
        It takes 0.016 seconds.
Building the CSC structure...
        It takes 0.012 seconds.
        It takes 0.019 seconds.
Building the CSC structure...
        It takes 0.012 seconds.
        It takes 0.022 seconds.
Building the CSC structure...
        It takes 0.013 seconds.
Building the Feature Vector...
        It takes 0.014 seconds.
Building the Feature Vector...
Building the Feature Vector...
        It takes 0.013 seconds.
        It takes 0.018 seconds.
        It takes 0.010 seconds.
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
        It takes 0.011 seconds.
Building the Feature Vector...
Building the Feature Vector...
        It takes 0.459 seconds.
Building the Label Vector...
        It takes 0.002 seconds.
        It takes 0.457 seconds.
Building the Label Vector...
        It takes 0.003 seconds.
        It takes 0.511 seconds.
Building the Label Vector...
        It takes 0.509 seconds.
Building the Label Vector...
        It takes 0.002 seconds.
        It takes 0.007 seconds.
        It takes 0.580 seconds.
Building the Label Vector...
        It takes 0.003 seconds.
        It takes 0.618 seconds.
Building the Label Vector...
        It takes 0.628 seconds.
Building the Label Vector...
        It takes 0.004 seconds.
The graph dataset locates at /shared_hdd_storage/jingjichen/gnn_datasets/pipeline_parallel_datasets/physics/32_parts
The number of GCNII layers: 32
The number of hidden units: 100
The number of training epoches: 300
Learning rate: 0.001000
The partition strategy: model
The dropout rate: 0.500
The checkpointed weight file: /tmp/saved_weights
The random seed: 3
GCN hyper-parameter alpha: 0.100000
GCN hyper-parameter lambda: 0.500000
Number of classes: 5
Number of feature dimensions: 8415
Number of vertices: 34493
Number of GPUs: 8
        It takes 0.008 seconds.
        It takes 0.629 seconds.
Building the Label Vector...
        It takes 0.003 seconds.
GPU 0, layer [0, 9)
GPU 1, layer [9, 17)
GPU 2, layer [17, 25)
GPU 3, layer [25, 33)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
34493, 530417, 530417
Number of vertices per chunk: 1078
csr in-out ready !Start Cost Model Initialization...
GPU 0, layer [0, 9)
GPU 1, layer [9, 17)
GPU 2, layer [17, 25)
GPU 3, layer [25, 33)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
34493, 530417, 530417
Number of vertices per chunk: 1078
GPU 0, layer [0, 9)
GPU 1, layer [9, 17)
GPU 2, layer [17, 25)
GPU 3, layer [25, 33)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
34493, 530417, 530417
Number of vertices per chunk: 1078
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
GPU 0, layer [0, 9)
GPU 1, layer [9, 17)
GPU 2, layer [17, 25)
GPU 3, layer [25, 33)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
34493, 530417, 530417
Number of vertices per chunk: 1078
csr in-out ready !Start Cost Model Initialization...
GPU 0, layer [0, 9)
GPU 1, layer [9, 17)
GPU 2, layer [17, 25)
GPU 3, layer [25, 33)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
34493, 530417, 530417
Number of vertices per chunk: 1078
GPU 0, layer [0, 9)
GPU 1, layer [9, 17)
GPU 2, layer [17, 25)
GPU 3, layer [25, 33)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
csr in-out ready !Start Cost Model Initialization...
34493, 530417, 530417
Number of vertices per chunk: 1078
GPU 0, layer [0, 9)
GPU 1, layer [9, 17)
GPU 2, layer [17, 25)
GPU 3, layer [25, 33)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
34493, 530417, 530417
Number of vertices per chunk: 1078
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
train nodes 100, valid nodes 500, test nodes 1000
GPU 0, layer [0, 9)
GPU 1, layer [9, 17)
GPU 2, layer [17, 25)
GPU 3, layer [25, 33)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
Chunks (number of global chunks: 32): 0-[0, 1025) 1-[1025, 2154) 2-[2154, 3262) 3-[3262, 4284) 4-[4284, 5334) 5-[5334, 6511) 6-[6511, 7597) 7-[7597, 8680) 8-[8680, 9764) ... 31-[33337, 34493)
34493, 530417, 530417
Number of vertices per chunk: 1078
csr in-out ready !Start Cost Model Initialization...
***** Start profiling the layer-level communication performance *******
The layer-level communication performance: 59.926 Gbps (per GPU), 479.405 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 59.634 Gbps (per GPU), 477.070 Gbps (aggregated)
The layer-level communication performance: 59.635 Gbps (per GPU), 477.077 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 59.380 Gbps (per GPU), 475.039 Gbps (aggregated)
The layer-level communication performance: 59.342 Gbps (per GPU), 474.733 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 59.137 Gbps (per GPU), 473.095 Gbps (aggregated)
The layer-level communication performance: 59.083 Gbps (per GPU), 472.663 Gbps (aggregated)
The layer-level communication performance: 59.051 Gbps (per GPU), 472.407 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The graph-level communication performance (supernode = 2): 154.814 Gbps (per GPU), 1238.514 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 154.820 Gbps (per GPU), 1238.562 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 154.837 Gbps (per GPU), 1238.697 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 154.808 Gbps (per GPU), 1238.468 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 154.814 Gbps (per GPU), 1238.514 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 154.806 Gbps (per GPU), 1238.444 Gbps (aggregated, cluster-wide)
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
The graph-level communication performance (supernode = 2): 148.248 Gbps (per GPU), 1185.983 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 148.256 Gbps (per GPU), 1186.048 Gbps (aggregated, cluster-wide)
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
The graph-level communication performance (supernode = 4): 104.720 Gbps (per GPU), 837.758 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 104.720 Gbps (per GPU), 837.758 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 104.719 Gbps (per GPU), 837.750 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 104.718 Gbps (per GPU), 837.744 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 104.679 Gbps (per GPU), 837.430 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 104.647 Gbps (per GPU), 837.172 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 104.565 Gbps (per GPU), 836.519 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 104.552 Gbps (per GPU), 836.414 Gbps (aggregated, cluster-wide)
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
The graph-level communication performance (supernode = 8): 34.498 Gbps (per GPU), 275.987 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 34.500 Gbps (per GPU), 276.001 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 34.499 Gbps (per GPU), 275.989 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 34.498 Gbps (per GPU), 275.986 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 34.500 Gbps (per GPU), 275.996 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 34.498 Gbps (per GPU), 275.988 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 34.498 Gbps (per GPU), 275.982 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 34.496 Gbps (per GPU), 275.971 Gbps (aggregated, cluster-wide)
 LType   LT0   LT1   LT2 Ratio  VSum  ESum
 chk_0  1.28ms  0.30ms  0.42ms  4.25  1.02K  0.02M
 chk_1  1.35ms  0.30ms  0.42ms  4.51  1.13K  0.01M
 chk_2  1.34ms  0.30ms  0.47ms  4.43  1.11K  0.01M
 chk_3  1.27ms  0.30ms  0.42ms  4.26  1.02K  0.02M
 chk_4  1.30ms  0.30ms  0.42ms  4.35  1.05K  0.02M
 chk_5  1.40ms  0.30ms  0.42ms  4.69  1.18K  0.01M
 chk_6  1.34ms  0.44ms  0.42ms  3.20  1.09K  0.02M
 chk_7  1.33ms  0.30ms  0.42ms  4.43  1.08K  0.02M
 chk_8  1.33ms  0.30ms  0.41ms  4.50  1.08K  0.01M
 chk_9  1.31ms  0.29ms  0.42ms  4.46  1.06K  0.02M
chk_10  1.30ms  0.29ms  0.41ms  4.44  1.04K  0.02M
chk_11  1.35ms  0.30ms  0.42ms  4.53  1.11K  0.01M
chk_12  1.93ms  0.30ms  0.42ms  6.50  1.11K  0.01M
chk_13  1.26ms  0.29ms  0.41ms  4.28  1.01K  0.02M
chk_14  1.33ms  0.30ms  0.42ms  4.51  1.09K  0.01M
chk_15  1.29ms  0.29ms  0.42ms  4.36  1.03K  0.02M
chk_16  1.24ms  0.29ms  0.41ms  4.26  0.98K  0.02M
chk_17  1.34ms  0.30ms  0.42ms  4.50  1.09K  0.01M
chk_18  1.30ms  0.30ms  0.42ms  4.39  1.04K  0.02M
chk_19  1.36ms  0.30ms  0.42ms  4.56  1.12K  0.01M
chk_20  1.36ms  0.30ms  0.42ms  4.60  1.13K  0.01M
chk_21  1.30ms  0.29ms  0.42ms  4.40  1.05K  0.02M
chk_22  1.34ms  0.30ms  0.42ms  4.51  1.11K  0.01M
chk_23  1.34ms  0.30ms  0.42ms  4.48  1.10K  0.01M
chk_24  1.27ms  0.29ms  0.41ms  4.33  1.02K  0.02M
chk_25  1.27ms  0.29ms  0.41ms  4.30  1.01K  0.02M
chk_26  1.36ms  0.30ms  0.42ms  4.58  1.12K  0.01M
chk_27  1.33ms  0.30ms  0.42ms  4.49  1.08K  0.02M
chk_28  1.32ms  0.30ms  0.42ms  4.40  1.07K  0.02M
chk_29  1.35ms  0.29ms  0.42ms  4.59  1.11K  0.01M
chk_30  1.34ms  0.30ms  0.42ms  4.51  1.10K  0.01M
chk_31  1.38ms  0.30ms  0.42ms  4.67  1.16K  0.01M
   Avg  1.34  0.30  0.42
   Max  1.93  0.44  0.47
   Min  1.24  0.29  0.41
 Ratio  1.56  1.52  1.14
   Var  0.01  0.00  0.00
Profiling takes 0.906 s
*** Node 0, starting model training...
Num Stages: 4 / 4
Node 0, Pipeline Input Tensor: NULL
Node 0, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 0 owns the model-level partition [0, 62)
*** Node 0, constructing the helper classes...
Node 0, Local Vertex Begin: 0, Num Local Vertices: 17213
*** Node 1, starting model training...
Num Stages: 4 / 4
Node 1, Pipeline Input Tensor: NULL
Node 1, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 1 owns the model-level partition [0, 62)
*** Node 1, constructing the helper classes...
Node 1, Local Vertex Begin: 17213, Num Local Vertices: 17280
*** Node 2, starting model training...
Num Stages: 4 / 4
Node 2, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 2, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 2 owns the model-level partition [62, 118)
*** Node 2, constructing the helper classes...
*** Node 3, starting model training...
Num Stages: 4 / 4
Node 3, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 3, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 3 owns the model-level partition [62, 118)
*** Node 3, constructing the helper classes...
Node 2, Local Vertex Begin: 0, Num Local Vertices: 17213
Node 3, Local Vertex Begin: 17213, Num Local Vertices: 17280
*** Node 4, starting model training...
Num Stages: 4 / 4
*** Node 5, starting model training...
Num Stages: 4 / 4
*** Node 6, starting model training...
Num Stages: 4 / 4
Node 6, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 6, Pipeline Output Tensor: NULL
*** Node 6 owns the model-level partition [174, 233)
*** Node 6, constructing the helper classes...
*** Node 7, starting model training...
Num Stages: 4 / 4
Node 7, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 7, Pipeline Output Tensor: NULL
*** Node 7 owns the model-level partition [174, 233)
*** Node 7, constructing the helper classes...
Node 7, Local Vertex Begin: 17213, Num Local Vertices: 17280
Node 4, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 4, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 4 owns the model-level partition [118, 174)
*** Node 4, constructing the helper classes...
Node 4, Local Vertex Begin: 0, Num Local Vertices: 17213
Node 5, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 5, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 5 owns the model-level partition [118, 174)
*** Node 5, constructing the helper classes...
Node 5, Local Vertex Begin: 17213, Num Local Vertices: 17280
Node 6, Local Vertex Begin: 0, Num Local Vertices: 17213
*** Node 1, setting up some other necessary information...
*** Node 2, setting up some other necessary information...
*** Node 3, setting up some other necessary information...
*** Node 0, setting up some other necessary information...
*** Node 5, setting up some other necessary information...
*** Node 7, setting up some other necessary information...
*** Node 6, setting up some other necessary information...
*** Node 4, setting up some other necessary information...
+++++++++ Node 3 initializing the weights for op[62, 118)...
+++++++++ Node 5 initializing the weights for op[118, 174)...
+++++++++ Node 7 initializing the weights for op[174, 233)...
+++++++++ Node 1 initializing the weights for op[0, 62)...
+++++++++ Node 2 initializing the weights for op[62, 118)...
+++++++++ Node 4 initializing the weights for op[118, 174)...
+++++++++ Node 6 initializing the weights for op[174, 233)...
+++++++++ Node 0 initializing the weights for op[0, 62)...
Node 3, discovering the vertices that will be sent across graph boundary...
Node 2, discovering the vertices that will be sent across graph boundary...
Node 1, discovering the vertices that will be sent across graph boundary...
Node 6, discovering the vertices that will be sent across graph boundary...
Node 7, discovering the vertices that will be sent across graph boundary...
Node 4, discovering the vertices that will be sent across graph boundary...
Node 5, discovering the vertices that will be sent across graph boundary...
Node 0, discovering the vertices that will be sent across graph boundary...
The number of mirror vertices: 89728
Node 0, discovering the vertices that will be received across the graph boundary.
Node 1, discovering the vertices that will be received across the graph boundary.
Node 2, discovering the vertices that will be received across the graph boundary.
Node 3, discovering the vertices that will be received across the graph boundary.
Node 4, discovering the vertices that will be received across the graph boundary.
Node 5, discovering the vertices that will be received across the graph boundary.
Node 6, discovering the vertices that will be received across the graph boundary.
Node 7, discovering the vertices that will be received across the graph boundary.
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
*** Node 0, starting task scheduling...
*** Node 1, starting task scheduling...
*** Node 2, starting task scheduling...
*** Node 3, starting task scheduling...



The learning rate specified by the user: 0.001000000
*** Node 4, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 5, starting task scheduling...
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
*** Node 6, starting task scheduling...
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
*** Node 7, starting task scheduling...
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
	Epoch 1:	Loss 1.6143	TrainAcc 0.6400	ValidAcc 0.4160	TestAcc 0.4140	BestValid 0.4160
	Epoch 10:	Loss 1.1803	TrainAcc 0.9500	ValidAcc 0.9240	TestAcc 0.9220	BestValid 0.9240
	Epoch 20:	Loss 0.6798	TrainAcc 0.9500	ValidAcc 0.9240	TestAcc 0.9290	BestValid 0.9240
	Epoch 30:	Loss 0.2929	TrainAcc 0.9700	ValidAcc 0.9380	TestAcc 0.9430	BestValid 0.9380
	Epoch 40:	Loss 0.2164	TrainAcc 0.9700	ValidAcc 0.9340	TestAcc 0.9440	BestValid 0.9380
	Epoch 50:	Loss 0.1661	TrainAcc 0.9900	ValidAcc 0.9440	TestAcc 0.9420	BestValid 0.9440
	Epoch 60:	Loss 0.0941	TrainAcc 0.9900	ValidAcc 0.9400	TestAcc 0.9390	BestValid 0.9440
	Epoch 70:	Loss 0.2517	TrainAcc 0.9900	ValidAcc 0.9440	TestAcc 0.9380	BestValid 0.9440
	Epoch 80:	Loss 0.0664	TrainAcc 0.9900	ValidAcc 0.9480	TestAcc 0.9470	BestValid 0.9480
	Epoch 90:	Loss 0.0720	TrainAcc 1.0000	ValidAcc 0.9440	TestAcc 0.9440	BestValid 0.9480
	Epoch 100:	Loss 0.0753	TrainAcc 1.0000	ValidAcc 0.9440	TestAcc 0.9430	BestValid 0.9480
	Epoch 110:	Loss 0.0686	TrainAcc 1.0000	ValidAcc 0.9420	TestAcc 0.9400	BestValid 0.9480
	Epoch 120:	Loss 0.0403	TrainAcc 1.0000	ValidAcc 0.9420	TestAcc 0.9440	BestValid 0.9480
	Epoch 130:	Loss 0.0362	TrainAcc 1.0000	ValidAcc 0.9400	TestAcc 0.9400	BestValid 0.9480
	Epoch 140:	Loss 0.0420	TrainAcc 1.0000	ValidAcc 0.9440	TestAcc 0.9400	BestValid 0.9480
	Epoch 150:	Loss 0.0334	TrainAcc 1.0000	ValidAcc 0.9440	TestAcc 0.9400	BestValid 0.9480
	Epoch 160:	Loss 0.0366	TrainAcc 1.0000	ValidAcc 0.9420	TestAcc 0.9410	BestValid 0.9480
	Epoch 170:	Loss 0.0440	TrainAcc 1.0000	ValidAcc 0.9420	TestAcc 0.9440	BestValid 0.9480
	Epoch 180:	Loss 0.0379	TrainAcc 1.0000	ValidAcc 0.9420	TestAcc 0.9400	BestValid 0.9480
	Epoch 190:	Loss 0.0243	TrainAcc 1.0000	ValidAcc 0.9400	TestAcc 0.9410	BestValid 0.9480
	Epoch 200:	Loss 0.0475	TrainAcc 1.0000	ValidAcc 0.9400	TestAcc 0.9400	BestValid 0.9480
	Epoch 210:	Loss 0.0229	TrainAcc 1.0000	ValidAcc 0.9420	TestAcc 0.9410	BestValid 0.9480
	Epoch 220:	Loss 0.0180	TrainAcc 1.0000	ValidAcc 0.9400	TestAcc 0.9420	BestValid 0.9480
	Epoch 230:	Loss 0.0347	TrainAcc 1.0000	ValidAcc 0.9420	TestAcc 0.9390	BestValid 0.9480
	Epoch 240:	Loss 0.0295	TrainAcc 1.0000	ValidAcc 0.9400	TestAcc 0.9400	BestValid 0.9480
	Epoch 250:	Loss 0.0174	TrainAcc 1.0000	ValidAcc 0.9400	TestAcc 0.9420	BestValid 0.9480
	Epoch 260:	Loss 0.2892	TrainAcc 1.0000	ValidAcc 0.9420	TestAcc 0.9410	BestValid 0.9480
	Epoch 270:	Loss 0.0215	TrainAcc 1.0000	ValidAcc 0.9460	TestAcc 0.9430	BestValid 0.9480
	Epoch 280:	Loss 0.0162	TrainAcc 1.0000	ValidAcc 0.9420	TestAcc 0.9430	BestValid 0.9480
	Epoch 290:	Loss 0.0219	TrainAcc 1.0000	ValidAcc 0.9420	TestAcc 0.9440	BestValid 0.9480
	Epoch 300:	Loss 0.0223	TrainAcc 1.0000	ValidAcc 0.9420	TestAcc 0.9430	BestValid 0.9480
****** Epoch Time (Excluding Evaluation Cost): 0.105 s ******
****** Breakdown Analysis ******
Cluster-Wide Average, Bubble-Pipeline: 15.546 ms (Max: 17.494, Min: 12.948, Sum: 124.369)
Cluster-Wide Average, Compute: 48.161 ms (Max: 63.391, Min: 41.701, Sum: 385.287)
Cluster-Wide Average, Communication-Layer: 6.566 ms (Max: 7.799, Min: 5.744, Sum: 52.524)
Cluster-Wide Average, Bubble-Imbalance: 12.934 ms (Max: 19.613, Min: 0.342, Sum: 103.474)
Cluster-Wide Average, Communication-Graph: 19.250 ms (Max: 19.687, Min: 18.487, Sum: 154.003)
Cluster-Wide Average, Optimization: 1.812 ms (Max: 2.510, Min: 1.420, Sum: 14.493)
Cluster-Wide Average, Others: 1.269 ms (Max: 1.796, Min: 0.701, Sum: 10.154)
****** Breakdown Sum: 105.538 ms ******
Cluster-Wide Average, GPU Memory Consumption: 3.017 GB (Max: 4.997, Min: 2.503, Sum: 24.140)
Cluster-Wide Average, Graph-Level Communication Throughput: 45.018 Gbps (Max: 46.529, Min: 42.882, Sum: 360.145)
Cluster-Wide Average, Layer-Level Communication Throughput: 24.666 Gbps (Max: 32.636, Min: 18.180, Sum: 197.328)
Layer-level communication (cluster-wide, per-epoch): 0.154 GB
Graph-level communication (cluster-wide, per-epoch): 0.535 GB
Weight-sync communication (cluster-wide, per-epoch): 0.009 GB
Total communication (cluster-wide, per-epoch): 0.698 GB
****** Accuracy Results ******
Highest valid_acc: 0.9480
Target test_acc: 0.9470
Epoch to reach the target acc: 79
[MPI Rank 0] Success 
[MPI Rank 4] Success 
[MPI Rank 1] Success 
[MPI Rank 5] Success 
[MPI Rank 2] Success 
[MPI Rank 6] Success 
[MPI Rank 3] Success 
[MPI Rank 7] Success 
