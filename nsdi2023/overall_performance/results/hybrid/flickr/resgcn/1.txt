Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
Initializing the runtime environment
DONE MPI INIT
DONE MPI INIT
Initialized node 6 on machine gnerv8
DONE MPI INIT
Initialized node 7 on machine gnerv8
DONE MPI INIT
Initialized node 4 on machine gnerv8
Initialized node 5 on machine gnerv8
DONE MPI INIT
DONE MPI INITDONE MPI INIT
Initialized node 3 on machine gnerv4
Initialized node 0 on machine gnerv4

Initialized node 1 on machine gnerv4
DONE MPI INIT
Initialized node 2 on machine gnerv4
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
        It takes 0.018 seconds.
Building the CSC structure...
        It takes 0.016 seconds.
Building the CSC structure...
        It takes 0.020 seconds.
Building the CSC structure...
        It takes 0.025 seconds.
Building the CSC structure...
        It takes 0.019 seconds.
Building the CSC structure...
        It takes 0.019 seconds.
Building the CSC structure...
        It takes 0.020 seconds.
Building the CSC structure...
        It takes 0.026 seconds.
Building the CSC structure...
        It takes 0.017 seconds.
        It takes 0.017 seconds.
        It takes 0.019 seconds.
Building the Feature Vector...
        It takes 0.020 seconds.
Building the Feature Vector...
        It takes 0.021 seconds.
        It takes 0.021 seconds.
Building the Feature Vector...
        It takes 0.020 seconds.
        It takes 0.028 seconds.
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
        It takes 0.102 seconds.
Building the Label Vector...
        It takes 0.104 seconds.
Building the Label Vector...
        It takes 0.102 seconds.
Building the Label Vector...
        It takes 0.007 seconds.
The graph dataset locates at /shared_hdd_storage/jingjichen/gnn_datasets/pipeline_parallel_datasets/flickr/32_parts
The number of GCNII layers: 32
The number of hidden units: 100
The number of training epoches: 5000
Learning rate: 0.001000
The partition strategy: model
The dropout rate: 0.500
The checkpointed weight file: /tmp/saved_weights
The random seed: 1
Number of classes: 7
Number of feature dimensions: 500
Number of vertices: 89250
Number of GPUs: 8
        It takes 0.099 seconds.
Building the Label Vector...
        It takes 0.007 seconds.
        It takes 0.103 seconds.
Building the Label Vector...
        It takes 0.007 seconds.
        It takes 0.104 seconds.
Building the Label Vector...
        It takes 0.007 seconds.
        It takes 0.007 seconds.
        It takes 0.008 seconds.
        It takes 0.108 seconds.
Building the Label Vector...
        It takes 0.109 seconds.
Building the Label Vector...
        It takes 0.007 seconds.
        It takes 0.007 seconds.
GPU 0, layer [0, 8)
GPU 1, layer [8, 16)
GPU 2, layer [16, 24)
GPU 3, layer [24, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
89250, 989006, 989006
Number of vertices per chunk: 2790
GPU 0, layer [0, 8)
GPU 1, layer [8, 16)
GPU 2, layer [16, 24)
GPU 3, layer [24, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
89250, 989006, 989006
Number of vertices per chunk: 2790
csr in-out ready !Start Cost Model Initialization...
GPU 0, layer [0, 8)
GPU 1, layer [8, 16)
GPU 2, layer [16, 24)
GPU 3, layer [24, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
89250, 989006, 989006
Number of vertices per chunk: 2790
csr in-out ready !Start Cost Model Initialization...
GPU 0, layer [0, 8)
GPU 1, layer [8, 16)
GPU 2, layer [16, 24)
GPU 3, layer [24, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
train nodes 44625, valid nodes 22312, test nodes 22313
GPU 0, layer [0, 8)
GPU 1, layer [8, 16)
GPU 2, layer [16, 24)
GPU 3, layer [24, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
Chunks (number of global chunks: 32): 0-[0, 2809) 1-[2809, 5626) 2-[5626, 8426) 3-[8426, 11230) 4-[11230, 14047) 5-[14047, 16800) 6-[16800, 19507) 7-[19507, 22266) 8-[22266, 25059) ... 31-[86469, 89250)
89250, 989006, 989006
Number of vertices per chunk: 2790
89250, 989006, 989006
csr in-out ready !Start Cost Model Initialization...
Number of vertices per chunk: 2790
GPU 0, layer [0, 8)
GPU 1, layer [8, 16)
GPU 2, layer [16, 24)
GPU 3, layer [24, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 8)
GPU 1, layer [8, 16)
GPU 2, layer [16, 24)
GPU 3, layer [24, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
89250, 989006, 989006
csr in-out ready !Start Cost Model Initialization...
Number of vertices per chunk: 2790
89250, 989006, 989006
Number of vertices per chunk: 2790
csr in-out ready !Start Cost Model Initialization...
***** Start profiling the layer-level communication performance *******
csr in-out ready !Start Cost Model Initialization...
GPU 0, layer [0, 8)
GPU 1, layer [8, 16)
GPU 2, layer [16, 24)
GPU 3, layer [24, 32)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
csr in-out ready !Start Cost Model Initialization...
89250, 989006, 989006
Number of vertices per chunk: 2790
csr in-out ready !Start Cost Model Initialization...
The layer-level communication performance: 60.766 Gbps (per GPU), 486.131 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 60.474 Gbps (per GPU), 483.791 Gbps (aggregated)
The layer-level communication performance: 60.468 Gbps (per GPU), 483.741 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 60.235 Gbps (per GPU), 481.876 Gbps (aggregated)
The layer-level communication performance: 60.207 Gbps (per GPU), 481.656 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 60.007 Gbps (per GPU), 480.058 Gbps (aggregated)
The layer-level communication performance: 59.958 Gbps (per GPU), 479.662 Gbps (aggregated)
The layer-level communication performance: 59.923 Gbps (per GPU), 479.386 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The graph-level communication performance (supernode = 2): 157.527 Gbps (per GPU), 1260.213 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 157.527 Gbps (per GPU), 1260.213 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 157.485 Gbps (per GPU), 1259.883 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 157.518 Gbps (per GPU), 1260.142 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 157.518 Gbps (per GPU), 1260.143 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 157.533 Gbps (per GPU), 1260.266 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 157.485 Gbps (per GPU), 1259.882 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 157.509 Gbps (per GPU), 1260.075 Gbps (aggregated, cluster-wide)
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
The graph-level communication performance (supernode = 4): 104.016 Gbps (per GPU), 832.127 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 104.019 Gbps (per GPU), 832.148 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 104.009 Gbps (per GPU), 832.072 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 103.991 Gbps (per GPU), 831.928 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 104.012 Gbps (per GPU), 832.093 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 103.962 Gbps (per GPU), 831.694 Gbps (aggregated, cluster-wide)
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
The graph-level communication performance (supernode = 4): 102.298 Gbps (per GPU), 818.381 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 102.278 Gbps (per GPU), 818.221 Gbps (aggregated, cluster-wide)
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
The graph-level communication performance (supernode = 8): 38.669 Gbps (per GPU), 309.350 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 38.667 Gbps (per GPU), 309.340 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 38.658 Gbps (per GPU), 309.266 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 38.661 Gbps (per GPU), 309.288 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 38.657 Gbps (per GPU), 309.256 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 38.662 Gbps (per GPU), 309.299 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 38.658 Gbps (per GPU), 309.262 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 38.658 Gbps (per GPU), 309.265 Gbps (aggregated, cluster-wide)
 LType   LT0   LT1   LT2 Ratio  VSum  ESum
 chk_0  0.91ms  0.68ms  0.84ms  1.34  2.81K  0.03M
 chk_1  0.93ms  0.68ms  0.84ms  1.37  2.82K  0.03M
 chk_2  0.91ms  0.68ms  0.84ms  1.34  2.80K  0.03M
 chk_3  0.92ms  0.68ms  0.84ms  1.35  2.80K  0.03M
 chk_4  0.91ms  0.68ms  0.84ms  1.33  2.82K  0.03M
 chk_5  0.91ms  0.69ms  0.84ms  1.33  2.75K  0.03M
 chk_6  0.90ms  0.68ms  0.83ms  1.33  2.71K  0.03M
 chk_7  0.91ms  0.68ms  0.84ms  1.34  2.76K  0.03M
 chk_8  0.91ms  0.68ms  0.84ms  1.33  2.79K  0.03M
 chk_9  0.91ms  0.68ms  0.84ms  1.34  2.81K  0.03M
chk_10  0.90ms  0.68ms  0.84ms  1.33  2.81K  0.03M
chk_11  0.91ms  0.68ms  0.84ms  1.33  2.74K  0.03M
chk_12  0.91ms  0.68ms  0.84ms  1.33  2.76K  0.03M
chk_13  0.91ms  0.68ms  0.84ms  1.33  2.75K  0.03M
chk_14  0.91ms  0.68ms  0.84ms  1.33  2.81K  0.03M
chk_15  0.91ms  0.68ms  0.84ms  1.33  2.77K  0.03M
chk_16  0.90ms  0.68ms  0.84ms  1.32  2.78K  0.03M
chk_17  0.91ms  0.68ms  0.84ms  1.32  2.79K  0.03M
chk_18  0.90ms  0.68ms  0.84ms  1.32  2.82K  0.03M
chk_19  0.90ms  0.68ms  0.83ms  1.33  2.81K  0.03M
chk_20  0.90ms  0.68ms  0.84ms  1.32  2.77K  0.03M
chk_21  0.91ms  0.68ms  0.84ms  1.33  2.84K  0.02M
chk_22  0.90ms  0.68ms  0.84ms  1.33  2.78K  0.03M
chk_23  0.91ms  0.68ms  0.84ms  1.33  2.80K  0.03M
chk_24  0.90ms  0.68ms  0.84ms  1.32  2.80K  0.03M
chk_25  0.91ms  0.68ms  0.84ms  1.33  2.81K  0.03M
chk_26  0.91ms  0.68ms  0.84ms  1.34  2.81K  0.03M
chk_27  0.91ms  0.68ms  0.84ms  1.34  2.79K  0.03M
chk_28  0.91ms  0.68ms  0.84ms  1.34  2.77K  0.03M
chk_29  0.91ms  0.68ms  0.84ms  1.34  2.77K  0.03M
chk_30  0.91ms  0.68ms  0.84ms  1.34  2.80K  0.03M
chk_31  0.91ms  0.68ms  0.84ms  1.34  2.78K  0.03M
   Avg  0.91  0.68  0.84
   Max  0.93  0.69  0.84
   Min  0.90  0.68  0.83
 Ratio  1.04  1.02  1.02
   Var  0.00  0.00  0.00
Profiling takes 0.988 s
*** Node 0, starting model training...
Num Stages: 4 / 4
Node 0, Pipeline Input Tensor: NULL
Node 0, Pipeline Output Tensor: OPERATOR_ADD
*** Node 0 owns the model-level partition [0, 59)
*** Node 0, constructing the helper classes...
Node 0, Local Vertex Begin: 0, Num Local Vertices: 44517
*** Node 1, starting model training...
Num Stages: 4 / 4
Node 1, Pipeline Input Tensor: NULL
Node 1, Pipeline Output Tensor: OPERATOR_ADD
*** Node 1 owns the model-level partition [0, 59)
*** Node 1, constructing the helper classes...
Node 1, Local Vertex Begin: 44517, Num Local Vertices: 44733
*** Node 4, starting model training...
Num Stages: 4 / 4
*** Node 2, starting model training...
Num Stages: 4 / 4
Node 2, Pipeline Input Tensor: OPERATOR_ADD
Node 2, Pipeline Output Tensor: OPERATOR_ADD
*** Node 2 owns the model-level partition [59, 115)
*** Node 2, constructing the helper classes...
Node 2, Local Vertex Begin: 0, Num Local Vertices: 44517
*** Node 5, starting model training...
Num Stages: 4 / 4
Node 5, Pipeline Input Tensor: OPERATOR_ADD
Node 5, Pipeline Output Tensor: OPERATOR_ADD
*** Node 5 owns the model-level partition [115, 171)
*** Node 5, constructing the helper classes...
Node 5, Local Vertex Begin: 44517, Num Local Vertices: 44733
*** Node 3, starting model training...
Num Stages: 4 / 4
Node 3, Pipeline Input Tensor: OPERATOR_ADD
Node 3, Pipeline Output Tensor: OPERATOR_ADD
*** Node 3 owns the model-level partition [59, 115)
*** Node 3, constructing the helper classes...
Node 3, Local Vertex Begin: 44517, Num Local Vertices: 44733
Node 4, Pipeline Input Tensor: OPERATOR_ADD
Node 4, Pipeline Output Tensor: OPERATOR_ADD
*** Node 4 owns the model-level partition [115, 171)
*** Node 4, constructing the helper classes...
Node 4, Local Vertex Begin: 0, Num Local Vertices: 44517
*** Node 6, starting model training...
Num Stages: 4 / 4
Node 6, Pipeline Input Tensor: OPERATOR_ADD
Node 6, Pipeline Output Tensor: NULL
*** Node 6 owns the model-level partition [171, 230)
*** Node 6, constructing the helper classes...
Node 6, Local Vertex Begin: 0, Num Local Vertices: 44517
*** Node 7, starting model training...
Num Stages: 4 / 4
Node 7, Pipeline Input Tensor: OPERATOR_ADD
Node 7, Pipeline Output Tensor: NULL
*** Node 7 owns the model-level partition [171, 230)
*** Node 7, constructing the helper classes...
Node 7, Local Vertex Begin: 44517, Num Local Vertices: 44733
*** Node 0, setting up some other necessary information...
*** Node 1, setting up some other necessary information...
*** Node 4, setting up some other necessary information...
*** Node 2, setting up some other necessary information...
*** Node 5, setting up some other necessary information...
*** Node 3, setting up some other necessary information...
*** Node 6, setting up some other necessary information...
*** Node 7, setting up some other necessary information...
+++++++++ Node 0 initializing the weights for op[0, 59)...
+++++++++ Node 1 initializing the weights for op[0, 59)...
+++++++++ Node 4 initializing the weights for op[115, 171)...
+++++++++ Node 3 initializing the weights for op[59, 115)...
+++++++++ Node 5 initializing the weights for op[115, 171)...
+++++++++ Node 2 initializing the weights for op[59, 115)...
+++++++++ Node 6 initializing the weights for op[171, 230)...
+++++++++ Node 7 initializing the weights for op[171, 230)...
Node 0, discovering the vertices that will be sent across graph boundary...
Node 1, discovering the vertices that will be sent across graph boundary...
Node 2, discovering the vertices that will be sent across graph boundary...
Node 3, discovering the vertices that will be sent across graph boundary...
Node 4, discovering the vertices that will be sent across graph boundary...
Node 5, discovering the vertices that will be sent across graph boundary...
Node 6, discovering the vertices that will be sent across graph boundary...
Node 7, discovering the vertices that will be sent across graph boundary...
The number of mirror vertices: 300780
Node 0, discovering the vertices that will be received across the graph boundary.
Node 4, discovering the vertices that will be received across the graph boundary.
Node 1, discovering the vertices that will be received across the graph boundary.
Node 5, discovering the vertices that will be received across the graph boundary.
Node 2, discovering the vertices that will be received across the graph boundary.
Node 6, discovering the vertices that will be received across the graph boundary.
Node 3, discovering the vertices that will be received across the graph boundary.
Node 7, discovering the vertices that will be received across the graph boundary.
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
*** Node 0, starting task scheduling...



*** Node 4, starting task scheduling...
*** Node 1, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 5, starting task scheduling...
*** Node 2, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 6, starting task scheduling...
*** Node 3, starting task scheduling...
The learning rate specified by the user: 0.001000000
*** Node 7, starting task scheduling...
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
	Epoch 1:	Loss 5.5214	TrainAcc 0.0589	ValidAcc 0.0575	TestAcc 0.0607	BestValid 0.0575
	Epoch 50:	Loss nan	TrainAcc 0.0589	ValidAcc 0.0575	TestAcc 0.0607	BestValid 0.0575
	Epoch 100:	Loss nan	TrainAcc 0.0589	ValidAcc 0.0575	TestAcc 0.0607	BestValid 0.0575
	Epoch 150:	Loss nan	TrainAcc 0.0589	ValidAcc 0.0575	TestAcc 0.0607	BestValid 0.0575
	Epoch 200:	Loss nan	TrainAcc 0.0589	ValidAcc 0.0575	TestAcc 0.0607	BestValid 0.0575
	Epoch 250:	Loss nan	TrainAcc 0.0589	ValidAcc 0.0575	TestAcc 0.0607	BestValid 0.0575
	Epoch 300:	Loss nan	TrainAcc 0.0589	ValidAcc 0.0575	TestAcc 0.0607	BestValid 0.0575
	Epoch 350:	Loss nan	TrainAcc 0.0589	ValidAcc 0.0575	TestAcc 0.0607	BestValid 0.0575
	Epoch 400:	Loss nan	TrainAcc 0.0589	ValidAcc 0.0575	TestAcc 0.0607	BestValid 0.0575
	Epoch 450:	Loss nan	TrainAcc 0.0589	ValidAcc 0.0575	TestAcc 0.0607	BestValid 0.0575
	Epoch 500:	Loss nan	TrainAcc 0.0589	ValidAcc 0.0575	TestAcc 0.0607	BestValid 0.0575
	Epoch 550:	Loss nan	TrainAcc 0.0589	ValidAcc 0.0575	TestAcc 0.0607	BestValid 0.0575
	Epoch 600:	Loss nan	TrainAcc 0.0589	ValidAcc 0.0575	TestAcc 0.0607	BestValid 0.0575
	Epoch 650:	Loss nan	TrainAcc 0.0589	ValidAcc 0.0575	TestAcc 0.0607	BestValid 0.0575
	Epoch 700:	Loss nan	TrainAcc 0.0589	ValidAcc 0.0575	TestAcc 0.0607	BestValid 0.0575
	Epoch 750:	Loss nan	TrainAcc 0.0589	ValidAcc 0.0575	TestAcc 0.0607	BestValid 0.0575
	Epoch 800:	Loss nan	TrainAcc 0.0589	ValidAcc 0.0575	TestAcc 0.0607	BestValid 0.0575
	Epoch 850:	Loss nan	TrainAcc 0.0589	ValidAcc 0.0575	TestAcc 0.0607	BestValid 0.0575
	Epoch 900:	Loss nan	TrainAcc 0.0589	ValidAcc 0.0575	TestAcc 0.0607	BestValid 0.0575
	Epoch 950:	Loss nan	TrainAcc 0.0589	ValidAcc 0.0575	TestAcc 0.0607	BestValid 0.0575
	Epoch 1000:	Loss nan	TrainAcc 0.0589	ValidAcc 0.0575	TestAcc 0.0607	BestValid 0.0575
	Epoch 1050:	Loss nan	TrainAcc 0.0589	ValidAcc 0.0575	TestAcc 0.0607	BestValid 0.0575
	Epoch 1100:	Loss nan	TrainAcc 0.0589	ValidAcc 0.0575	TestAcc 0.0607	BestValid 0.0575
	Epoch 1150:	Loss nan	TrainAcc 0.0589	ValidAcc 0.0575	TestAcc 0.0607	BestValid 0.0575
	Epoch 1200:	Loss nan	TrainAcc 0.0589	ValidAcc 0.0575	TestAcc 0.0607	BestValid 0.0575
	Epoch 1250:	Loss nan	TrainAcc 0.0589	ValidAcc 0.0575	TestAcc 0.0607	BestValid 0.0575
	Epoch 1300:	Loss nan	TrainAcc 0.0589	ValidAcc 0.0575	TestAcc 0.0607	BestValid 0.0575
	Epoch 1350:	Loss nan	TrainAcc 0.0589	ValidAcc 0.0575	TestAcc 0.0607	BestValid 0.0575
	Epoch 1400:	Loss nan	TrainAcc 0.0589	ValidAcc 0.0575	TestAcc 0.0607	BestValid 0.0575
	Epoch 1450:	Loss nan	TrainAcc 0.0589	ValidAcc 0.0575	TestAcc 0.0607	BestValid 0.0575
	Epoch 1500:	Loss nan	TrainAcc 0.0589	ValidAcc 0.0575	TestAcc 0.0607	BestValid 0.0575
	Epoch 1550:	Loss nan	TrainAcc 0.0589	ValidAcc 0.0575	TestAcc 0.0607	BestValid 0.0575
	Epoch 1600:	Loss nan	TrainAcc 0.0589	ValidAcc 0.0575	TestAcc 0.0607	BestValid 0.0575
	Epoch 1650:	Loss nan	TrainAcc 0.0589	ValidAcc 0.0575	TestAcc 0.0607	BestValid 0.0575
	Epoch 1700:	Loss nan	TrainAcc 0.0589	ValidAcc 0.0575	TestAcc 0.0607	BestValid 0.0575
	Epoch 1750:	Loss nan	TrainAcc 0.0589	ValidAcc 0.0575	TestAcc 0.0607	BestValid 0.0575
	Epoch 1800:	Loss nan	TrainAcc 0.0589	ValidAcc 0.0575	TestAcc 0.0607	BestValid 0.0575
	Epoch 1850:	Loss nan	TrainAcc 0.0589	ValidAcc 0.0575	TestAcc 0.0607	BestValid 0.0575
	Epoch 1900:	Loss nan	TrainAcc 0.0589	ValidAcc 0.0575	TestAcc 0.0607	BestValid 0.0575
	Epoch 1950:	Loss nan	TrainAcc 0.0589	ValidAcc 0.0575	TestAcc 0.0607	BestValid 0.0575
	Epoch 2000:	Loss nan	TrainAcc 0.0589	ValidAcc 0.0575	TestAcc 0.0607	BestValid 0.0575
	Epoch 2050:	Loss nan	TrainAcc 0.0589	ValidAcc 0.0575	TestAcc 0.0607	BestValid 0.0575
	Epoch 2100:	Loss nan	TrainAcc 0.0589	ValidAcc 0.0575	TestAcc 0.0607	BestValid 0.0575
	Epoch 2150:	Loss nan	TrainAcc 0.0589	ValidAcc 0.0575	TestAcc 0.0607	BestValid 0.0575
	Epoch 2200:	Loss nan	TrainAcc 0.0589	ValidAcc 0.0575	TestAcc 0.0607	BestValid 0.0575
	Epoch 2250:	Loss nan	TrainAcc 0.0589	ValidAcc 0.0575	TestAcc 0.0607	BestValid 0.0575
	Epoch 2300:	Loss nan	TrainAcc 0.0589	ValidAcc 0.0575	TestAcc 0.0607	BestValid 0.0575
	Epoch 2350:	Loss nan	TrainAcc 0.0589	ValidAcc 0.0575	TestAcc 0.0607	BestValid 0.0575
	Epoch 2400:	Loss nan	TrainAcc 0.0589	ValidAcc 0.0575	TestAcc 0.0607	BestValid 0.0575
	Epoch 2450:	Loss nan	TrainAcc 0.0589	ValidAcc 0.0575	TestAcc 0.0607	BestValid 0.0575
	Epoch 2500:	Loss nan	TrainAcc 0.0589	ValidAcc 0.0575	TestAcc 0.0607	BestValid 0.0575
	Epoch 2550:	Loss nan	TrainAcc 0.0589	ValidAcc 0.0575	TestAcc 0.0607	BestValid 0.0575
	Epoch 2600:	Loss nan	TrainAcc 0.0589	ValidAcc 0.0575	TestAcc 0.0607	BestValid 0.0575
	Epoch 2650:	Loss nan	TrainAcc 0.0589	ValidAcc 0.0575	TestAcc 0.0607	BestValid 0.0575
	Epoch 2700:	Loss nan	TrainAcc 0.0589	ValidAcc 0.0575	TestAcc 0.0607	BestValid 0.0575
	Epoch 2750:	Loss nan	TrainAcc 0.0589	ValidAcc 0.0575	TestAcc 0.0607	BestValid 0.0575
	Epoch 2800:	Loss nan	TrainAcc 0.0589	ValidAcc 0.0575	TestAcc 0.0607	BestValid 0.0575
	Epoch 2850:	Loss nan	TrainAcc 0.0589	ValidAcc 0.0575	TestAcc 0.0607	BestValid 0.0575
	Epoch 2900:	Loss nan	TrainAcc 0.0589	ValidAcc 0.0575	TestAcc 0.0607	BestValid 0.0575
	Epoch 2950:	Loss nan	TrainAcc 0.0589	ValidAcc 0.0575	TestAcc 0.0607	BestValid 0.0575
	Epoch 3000:	Loss nan	TrainAcc 0.0589	ValidAcc 0.0575	TestAcc 0.0607	BestValid 0.0575
	Epoch 3050:	Loss nan	TrainAcc 0.0589	ValidAcc 0.0575	TestAcc 0.0607	BestValid 0.0575
	Epoch 3100:	Loss nan	TrainAcc 0.0589	ValidAcc 0.0575	TestAcc 0.0607	BestValid 0.0575
	Epoch 3150:	Loss nan	TrainAcc 0.0589	ValidAcc 0.0575	TestAcc 0.0607	BestValid 0.0575
	Epoch 3200:	Loss nan	TrainAcc 0.0589	ValidAcc 0.0575	TestAcc 0.0607	BestValid 0.0575
	Epoch 3250:	Loss nan	TrainAcc 0.0589	ValidAcc 0.0575	TestAcc 0.0607	BestValid 0.0575
	Epoch 3300:	Loss nan	TrainAcc 0.0589	ValidAcc 0.0575	TestAcc 0.0607	BestValid 0.0575
	Epoch 3350:	Loss nan	TrainAcc 0.0589	ValidAcc 0.0575	TestAcc 0.0607	BestValid 0.0575
	Epoch 3400:	Loss nan	TrainAcc 0.0589	ValidAcc 0.0575	TestAcc 0.0607	BestValid 0.0575
	Epoch 3450:	Loss nan	TrainAcc 0.0589	ValidAcc 0.0575	TestAcc 0.0607	BestValid 0.0575
	Epoch 3500:	Loss nan	TrainAcc 0.0589	ValidAcc 0.0575	TestAcc 0.0607	BestValid 0.0575
	Epoch 3550:	Loss nan	TrainAcc 0.0589	ValidAcc 0.0575	TestAcc 0.0607	BestValid 0.0575
	Epoch 3600:	Loss nan	TrainAcc 0.0589	ValidAcc 0.0575	TestAcc 0.0607	BestValid 0.0575
	Epoch 3650:	Loss nan	TrainAcc 0.0589	ValidAcc 0.0575	TestAcc 0.0607	BestValid 0.0575
	Epoch 3700:	Loss nan	TrainAcc 0.0589	ValidAcc 0.0575	TestAcc 0.0607	BestValid 0.0575
	Epoch 3750:	Loss nan	TrainAcc 0.0589	ValidAcc 0.0575	TestAcc 0.0607	BestValid 0.0575
	Epoch 3800:	Loss nan	TrainAcc 0.0589	ValidAcc 0.0575	TestAcc 0.0607	BestValid 0.0575
	Epoch 3850:	Loss nan	TrainAcc 0.0589	ValidAcc 0.0575	TestAcc 0.0607	BestValid 0.0575
	Epoch 3900:	Loss nan	TrainAcc 0.0589	ValidAcc 0.0575	TestAcc 0.0607	BestValid 0.0575
	Epoch 3950:	Loss nan	TrainAcc 0.0589	ValidAcc 0.0575	TestAcc 0.0607	BestValid 0.0575
	Epoch 4000:	Loss nan	TrainAcc 0.0589	ValidAcc 0.0575	TestAcc 0.0607	BestValid 0.0575
	Epoch 4050:	Loss nan	TrainAcc 0.0589	ValidAcc 0.0575	TestAcc 0.0607	BestValid 0.0575
	Epoch 4100:	Loss nan	TrainAcc 0.0589	ValidAcc 0.0575	TestAcc 0.0607	BestValid 0.0575
	Epoch 4150:	Loss nan	TrainAcc 0.0589	ValidAcc 0.0575	TestAcc 0.0607	BestValid 0.0575
	Epoch 4200:	Loss nan	TrainAcc 0.0589	ValidAcc 0.0575	TestAcc 0.0607	BestValid 0.0575
	Epoch 4250:	Loss nan	TrainAcc 0.0589	ValidAcc 0.0575	TestAcc 0.0607	BestValid 0.0575
	Epoch 4300:	Loss nan	TrainAcc 0.0589	ValidAcc 0.0575	TestAcc 0.0607	BestValid 0.0575
	Epoch 4350:	Loss nan	TrainAcc 0.0589	ValidAcc 0.0575	TestAcc 0.0607	BestValid 0.0575
	Epoch 4400:	Loss nan	TrainAcc 0.0589	ValidAcc 0.0575	TestAcc 0.0607	BestValid 0.0575
	Epoch 4450:	Loss nan	TrainAcc 0.0589	ValidAcc 0.0575	TestAcc 0.0607	BestValid 0.0575
	Epoch 4500:	Loss nan	TrainAcc 0.0589	ValidAcc 0.0575	TestAcc 0.0607	BestValid 0.0575
	Epoch 4550:	Loss nan	TrainAcc 0.0589	ValidAcc 0.0575	TestAcc 0.0607	BestValid 0.0575
	Epoch 4600:	Loss nan	TrainAcc 0.0589	ValidAcc 0.0575	TestAcc 0.0607	BestValid 0.0575
	Epoch 4650:	Loss nan	TrainAcc 0.0589	ValidAcc 0.0575	TestAcc 0.0607	BestValid 0.0575
	Epoch 4700:	Loss nan	TrainAcc 0.0589	ValidAcc 0.0575	TestAcc 0.0607	BestValid 0.0575
	Epoch 4750:	Loss nan	TrainAcc 0.0589	ValidAcc 0.0575	TestAcc 0.0607	BestValid 0.0575
	Epoch 4800:	Loss nan	TrainAcc 0.0589	ValidAcc 0.0575	TestAcc 0.0607	BestValid 0.0575
	Epoch 4850:	Loss nan	TrainAcc 0.0589	ValidAcc 0.0575	TestAcc 0.0607	BestValid 0.0575
	Epoch 4900:	Loss nan	TrainAcc 0.0589	ValidAcc 0.0575	TestAcc 0.0607	BestValid 0.0575
	Epoch 4950:	Loss nan	TrainAcc 0.0589	ValidAcc 0.0575	TestAcc 0.0607	BestValid 0.0575
	Epoch 5000:	Loss nan	TrainAcc 0.0589	ValidAcc 0.0575	TestAcc 0.0607	BestValid 0.0575
****** Epoch Time (Excluding Evaluation Cost): 0.154 s ******
****** Breakdown Analysis ******
Cluster-Wide Average, Bubble-Pipeline: 23.692 ms (Max: 24.067, Min: 23.029, Sum: 189.537)
Cluster-Wide Average, Compute: 85.107 ms (Max: 89.535, Min: 81.382, Sum: 680.853)
Cluster-Wide Average, Communication-Layer: 6.576 ms (Max: 7.793, Min: 5.621, Sum: 52.612)
Cluster-Wide Average, Bubble-Imbalance: 4.369 ms (Max: 8.829, Min: 1.276, Sum: 34.954)
Cluster-Wide Average, Communication-Graph: 28.347 ms (Max: 32.818, Min: 27.045, Sum: 226.774)
Cluster-Wide Average, Optimization: 2.532 ms (Max: 5.179, Min: 1.411, Sum: 20.256)
Cluster-Wide Average, Others: 3.704 ms (Max: 4.926, Min: 1.443, Sum: 29.631)
****** Breakdown Sum: 154.327 ms ******
Cluster-Wide Average, GPU Memory Consumption: 3.432 GB (Max: 4.346, Min: 3.258, Sum: 27.454)
Cluster-Wide Average, Graph-Level Communication Throughput: 93.549 Gbps (Max: 98.815, Min: 76.286, Sum: 748.391)
Cluster-Wide Average, Layer-Level Communication Throughput: 31.756 Gbps (Max: 40.192, Min: 23.488, Sum: 254.051)
Layer-level communication (cluster-wide, per-epoch): 0.199 GB
Graph-level communication (cluster-wide, per-epoch): 1.793 GB
Weight-sync communication (cluster-wide, per-epoch): 0.003 GB
Total communication (cluster-wide, per-epoch): 1.995 GB
****** Accuracy Results ******
Highest valid_acc: 0.0575
Target test_acc: 0.0607
Epoch to reach the target acc: 0
[MPI Rank 0] Success 
[MPI Rank 4] Success 
[MPI Rank 1] Success 
[MPI Rank 5] Success 
[MPI Rank 2] Success 
[MPI Rank 6] Success 
[MPI Rank 3] Success 
[MPI Rank 7] Success 
