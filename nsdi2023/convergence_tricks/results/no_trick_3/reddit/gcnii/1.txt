Initialized node 4 on machine gnerv3
Initialized node 6 on machine gnerv3
Initialized node 5 on machine gnerv3
Initialized node 7 on machine gnerv3
Initialized node 1 on machine gnerv2
Initialized node 3 on machine gnerv2
Initialized node 2 on machine gnerv2
Initialized node 0 on machine gnerv2
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
Building the CSR structure...
        It takes 1.868 seconds.
Building the CSC structure...
        It takes 2.278 seconds.
Building the CSC structure...
        It takes 2.355 seconds.
Building the CSC structure...
        It takes 2.394 seconds.
Building the CSC structure...
        It takes 2.401 seconds.
Building the CSC structure...
        It takes 2.407 seconds.
Building the CSC structure...
        It takes 2.477 seconds.
Building the CSC structure...
        It takes 2.634 seconds.
Building the CSC structure...
        It takes 1.805 seconds.
        It takes 2.169 seconds.
Building the Feature Vector...
        It takes 2.302 seconds.
        It takes 2.320 seconds.
        It takes 2.383 seconds.
        It takes 2.448 seconds.
        It takes 2.350 seconds.
        It takes 0.244 seconds.
Building the Label Vector...
        It takes 0.039 seconds.
        It takes 2.367 seconds.
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
Building the Feature Vector...
GPU 0, layer [0, 5)
GPU 1, layer [5, 9)
GPU 2, layer [9, 13)
GPU 3, layer [13, 17)
GPU 4, layer [17, 21)
GPU 5, layer [21, 25)
GPU 6, layer [25, 29)
GPU 7, layer [29, 33)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
        It takes 0.266 seconds.
Building the Label Vector...
        It takes 0.293 seconds.
Building the Label Vector...
        It takes 0.031 seconds.
Building the Feature Vector...
        It takes 0.040 seconds.
Building the Feature Vector...
        It takes 0.298 seconds.
Building the Label Vector...
        It takes 0.038 seconds.
        It takes 0.301 seconds.
Building the Label Vector...
        It takes 0.032 seconds.
        It takes 0.263 seconds.
Building the Label Vector...
        It takes 0.042 seconds.
232965, 114848857, 114848857
Number of vertices per chunk: 7281
        It takes 0.282 seconds.
Building the Label Vector...
        It takes 0.031 seconds.
The graph dataset locates at /shared_hdd_storage/jingjichen/gnn_datasets/pipeline_parallel_datasets/reddit/32_parts
The number of GCNII layers: 32
The number of hidden units: 100
The number of training epoches: 5000
Learning rate: 0.001000
The partition strategy: model
The dropout rate: 0.500
The checkpointed weight file: /tmp/saved_weights
The random seed: 1
GCN hyper-parameter alpha: 0.100000
GCN hyper-parameter lambda: 0.500000
Number of classes: 41
Number of feature dimensions: 602
Number of vertices: 232965
Number of GPUs: 8
Building the Feature Vector...
        It takes 0.242 seconds.
Building the Label Vector...
        It takes 0.028 seconds.
GPU 0, layer [0, 5)
GPU 1, layer [5, 9)
GPU 2, layer [9, 13)
GPU 3, layer [13, 17)
GPU 4, layer [17, 21)
GPU 5, layer [21, 25)
GPU 6, layer [25, 29)
GPU 7, layer [29, 33)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 5)
GPU 1, layer [5, 9)
GPU 2, layer [9, 13)
GPU 3, layer [13, 17)
GPU 4, layer [17, 21)
GPU 5, layer [21, 25)
GPU 6, layer [25, 29)
GPU 7, layer [29, 33)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 5)
GPU 1, layer [5, 9)
GPU 2, layer [9, 13)
GPU 3, layer [13, 17)
GPU 4, layer [17, 21)
GPU 5, layer [21, 25)
GPU 6, layer [25, 29)
GPU 7, layer [29, 33)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
GPU 0, layer [0, 5)
GPU 1, layer [5, 9)
GPU 2, layer [9, 13)
GPU 3, layer [13, 17)
GPU 4, layer [17, 21)
GPU 5, layer [21, 25)
GPU 6, layer [25, 29)
GPU 7, layer [29, 33)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
train nodes 153431, valid nodes 23831, test nodes 55703
GPU 0, layer [0, 5)
GPU 1, layer [5, 9)
GPU 2, layer [9, 13)
GPU 3, layer [13, 17)
GPU 4, layer [17, 21)
GPU 5, layer [21, 25)
GPU 6, layer [25, 29)
GPU 7, layer [29, 33)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
Chunks (number of global chunks: 32): 0-[0, 8381) 1-[8381, 15124) 2-[15124, 22398) 3-[22398, 30320) 4-[30320, 35655) 5-[35655, 45721) 6-[45721, 55131) 7-[55131, 63248) 8-[63248, 69343) ... 31-[226638, 232965)
GPU 0, layer [0, 5)
GPU 1, layer [5, 9)
GPU 2, layer [9, 13)
GPU 3, layer [13, 17)
GPU 4, layer [17, 21)
GPU 5, layer [21, 25)
GPU 6, layer [25, 29)
GPU 7, layer [29, 33)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
232965, 114848857, 114848857
Number of vertices per chunk: 7281
232965, 114848857, 114848857
Number of vertices per chunk: 7281
GPU 0, layer [0, 5)
GPU 1, layer [5, 9)
GPU 2, layer [9, 13)
GPU 3, layer [13, 17)
GPU 4, layer [17, 21)
GPU 5, layer [21, 25)
GPU 6, layer [25, 29)
GPU 7, layer [29, 33)
WARNING: the current version only applies to linear GNN models!
WARNING: currently, exact inference during the whole training process will enforce the evaluation frequency to every 25 epoches.
232965, 114848857, 114848857
Number of vertices per chunk: 7281
232965, 114848857, 114848857
Number of vertices per chunk: 7281
232965, 114848857, 114848857
Number of vertices per chunk: 7281
232965, 114848857, 114848857
Number of vertices per chunk: 7281
232965, 114848857, 114848857
Number of vertices per chunk: 7281
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
***** Start profiling the layer-level communication performance *******
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
csr in-out ready !Start Cost Model Initialization...
The layer-level communication performance: 55.985 Gbps (per GPU), 447.883 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 55.720 Gbps (per GPU), 445.762 Gbps (aggregated)
The layer-level communication performance: 55.710 Gbps (per GPU), 445.680 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 55.520 Gbps (per GPU), 444.162 Gbps (aggregated)
The layer-level communication performance: 55.497 Gbps (per GPU), 443.975 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The layer-level communication performance: 55.307 Gbps (per GPU), 442.455 Gbps (aggregated)
The layer-level communication performance: 55.267 Gbps (per GPU), 442.133 Gbps (aggregated)
The layer-level communication performance: 55.235 Gbps (per GPU), 441.882 Gbps (aggregated)
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
****** Start profiling the graph-level communication performance with supernodesize = 2 ******
The graph-level communication performance (supernode = 2): 158.761 Gbps (per GPU), 1270.087 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.752 Gbps (per GPU), 1270.015 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.761 Gbps (per GPU), 1270.087 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.749 Gbps (per GPU), 1269.995 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.764 Gbps (per GPU), 1270.111 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.755 Gbps (per GPU), 1270.039 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.770 Gbps (per GPU), 1270.159 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 2): 158.677 Gbps (per GPU), 1269.414 Gbps (aggregated, cluster-wide)
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
****** Start profiling the graph-level communication performance with supernodesize = 4 ******
The graph-level communication performance (supernode = 4): 100.232 Gbps (per GPU), 801.855 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 100.234 Gbps (per GPU), 801.874 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 100.222 Gbps (per GPU), 801.772 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 100.233 Gbps (per GPU), 801.862 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 100.233 Gbps (per GPU), 801.867 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 100.233 Gbps (per GPU), 801.862 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 100.230 Gbps (per GPU), 801.842 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 4): 100.233 Gbps (per GPU), 801.868 Gbps (aggregated, cluster-wide)
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
****** Start profiling the graph-level communication performance with supernodesize = 8 ******
The graph-level communication performance (supernode = 8): 31.998 Gbps (per GPU), 255.984 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 31.998 Gbps (per GPU), 255.980 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 31.998 Gbps (per GPU), 255.983 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 31.997 Gbps (per GPU), 255.977 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 31.998 Gbps (per GPU), 255.980 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 31.997 Gbps (per GPU), 255.975 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 31.997 Gbps (per GPU), 255.975 Gbps (aggregated, cluster-wide)
The graph-level communication performance (supernode = 8): 31.998 Gbps (per GPU), 255.984 Gbps (aggregated, cluster-wide)
 LType   LT0   LT1   LT2 Ratio  VSum  ESum
 chk_0  0.89ms  2.45ms  2.71ms  3.04  8.38K  3.53M
 chk_1  0.76ms  2.74ms  2.90ms  3.83  6.74K  3.60M
 chk_2  0.80ms  2.64ms  2.78ms  3.48  7.27K  3.53M
 chk_3  0.81ms  2.67ms  2.82ms  3.50  7.92K  3.61M
 chk_4  0.63ms  2.60ms  2.72ms  4.30  5.33K  3.68M
 chk_5  1.01ms  2.58ms  2.92ms  2.91 10.07K  3.45M
 chk_6  0.96ms  2.76ms  2.91ms  3.02  9.41K  3.48M
 chk_7  0.82ms  2.59ms  2.73ms  3.33  8.12K  3.60M
 chk_8  0.68ms  2.71ms  2.83ms  4.17  6.09K  3.64M
 chk_9  1.10ms  2.51ms  2.68ms  2.45 11.10K  3.38M
chk_10  0.65ms  2.74ms  2.88ms  4.43  5.67K  3.63M
chk_11  0.82ms  2.58ms  2.75ms  3.34  8.16K  3.54M
chk_12  0.80ms  2.79ms  2.95ms  3.71  7.24K  3.55M
chk_13  0.64ms  2.61ms  2.77ms  4.35  5.41K  3.68M
chk_14  0.78ms  2.85ms  3.03ms  3.87  7.14K  3.53M
chk_15  0.95ms  2.70ms  2.89ms  3.03  9.25K  3.49M
chk_16  0.60ms  2.51ms  2.68ms  4.48  4.78K  3.77M
chk_17  0.76ms  2.68ms  2.83ms  3.71  6.85K  3.60M
chk_18  0.81ms  2.47ms  2.64ms  3.26  7.47K  3.57M
chk_19  0.60ms  2.54ms  2.69ms  4.44  4.88K  3.75M
chk_20  0.77ms  2.53ms  2.70ms  3.50  7.00K  3.63M
chk_21  0.64ms  2.53ms  2.69ms  4.23  5.41K  3.68M
chk_22  1.10ms  2.75ms  2.95ms  2.69 11.07K  3.39M
chk_23  0.80ms  2.62ms  2.80ms  3.52  7.23K  3.64M
chk_24  1.01ms  2.68ms  2.89ms  2.85 10.13K  3.43M
chk_25  0.73ms  2.50ms  2.66ms  3.65  6.40K  3.57M
chk_26  0.66ms  2.71ms  2.86ms  4.31  5.78K  3.55M
chk_27  0.96ms  2.58ms  2.78ms  2.90  9.34K  3.48M
chk_28  0.73ms  2.88ms  3.07ms  4.22  6.37K  3.57M
chk_29  0.63ms  2.69ms  2.84ms  4.50  5.16K  3.78M
chk_30  0.64ms  2.57ms  2.73ms  4.29  5.44K  3.67M
chk_31  0.73ms  2.73ms  2.89ms  3.98  6.33K  3.63M
   Avg  0.79  2.64  2.81
   Max  1.10  2.88  3.07
   Min  0.60  2.45  2.64
 Ratio  1.84  1.18  1.16
   Var  0.02  0.01  0.01
Profiling takes 2.389 s
*** Node 0, starting model training...
Num Stages: 8 / 8
Node 0, Pipeline Input Tensor: NULL
Node 0, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 0 owns the model-level partition [0, 34)
*** Node 0, constructing the helper classes...
Node 0, Local Vertex Begin: 0, Num Local Vertices: 232965
*** Node 4, starting model training...
Num Stages: 8 / 8
Node 4, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 4, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 4 owns the model-level partition [118, 146)
*** Node 4, constructing the helper classes...
Node 4, Local Vertex Begin: 0, Num Local Vertices: 232965
*** Node 1, starting model training...
Num Stages: 8 / 8
Node 1, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 1, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 1 owns the model-level partition [34, 62)
*** Node 1, constructing the helper classes...
Node 1, Local Vertex Begin: 0, Num Local Vertices: 232965
*** Node 5, starting model training...
Num Stages: 8 / 8
Node 5, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 5, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 5 owns the model-level partition [146, 174)
*** Node 5, constructing the helper classes...
Node 5, Local Vertex Begin: 0, Num Local Vertices: 232965
*** Node 2, starting model training...
Num Stages: 8 / 8
Node 2, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 2, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 2 owns the model-level partition [62, 90)
*** Node 2, constructing the helper classes...
Node 2, Local Vertex Begin: 0, Num Local Vertices: 232965
*** Node 6, starting model training...
Num Stages: 8 / 8
Node 6, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 6, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 6 owns the model-level partition [174, 202)
*** Node 6, constructing the helper classes...
Node 6, Local Vertex Begin: 0, Num Local Vertices: 232965
*** Node 3, starting model training...
Num Stages: 8 / 8
Node 3, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 3, Pipeline Output Tensor: OPERATOR_DROPOUT
*** Node 3 owns the model-level partition [90, 118)
*** Node 3, constructing the helper classes...
Node 3, Local Vertex Begin: 0, Num Local Vertices: 232965
*** Node 7, starting model training...
Num Stages: 8 / 8
Node 7, Pipeline Input Tensor: OPERATOR_DROPOUT
Node 7, Pipeline Output Tensor: NULL
*** Node 7 owns the model-level partition [202, 233)
*** Node 7, constructing the helper classes...
Node 7, Local Vertex Begin: 0, Num Local Vertices: 232965
*** Node 7, setting up some other necessary information...
*** Node 3, setting up some other necessary information...
*** Node 5, setting up some other necessary information...
*** Node 2, setting up some other necessary information...
*** Node 4, setting up some other necessary information...
*** Node 0, setting up some other necessary information...
*** Node 6, setting up some other necessary information...
*** Node 1, setting up some other necessary information...
+++++++++ Node 0 initializing the weights for op[0, 34)...
+++++++++ Node 4 initializing the weights for op[118, 146)...
+++++++++ Node 3 initializing the weights for op[90, 118)...
+++++++++ Node 5 initializing the weights for op[146, 174)...
+++++++++ Node 1 initializing the weights for op[34, 62)...
+++++++++ Node 6 initializing the weights for op[174, 202)...
+++++++++ Node 2 initializing the weights for op[62, 90)...
+++++++++ Node 7 initializing the weights for op[202, 233)...
Node 0, discovering the vertices that will be sent across graph boundary...
Node 5, discovering the vertices that will be sent across graph boundary...
Node 1, discovering the vertices that will be sent across graph boundary...
Node 1, discovering the vertices that will be received across the graph boundary.
Node 6, discovering the vertices that will be sent across graph boundary...
Node 6, discovering the vertices that will be received across the graph boundary.
Node 2, discovering the vertices that will be sent across graph boundary...
Node 2, discovering the vertices that will be received across the graph boundary.
Node 7, discovering the vertices that will be sent across graph boundary...
Node 7, discovering the vertices that will be received across the graph boundary.
Node 3, discovering the vertices that will be sent across graph boundary...
Node 3, discovering the vertices that will be received across the graph boundary.
Node 4, discovering the vertices that will be sent across graph boundary...
Node 4, discovering the vertices that will be received across the graph boundary.
The number of mirror vertices: 0
Node 0, discovering the vertices that will be received across the graph boundary.
Node 5, discovering the vertices that will be received across the graph boundary.
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
****** Start Scheduling the Tasks in a Pipelined Fashion ******
*** Node 5, starting task scheduling...
*** Node 6, starting task scheduling...
*** Node 7, starting task scheduling...
*** Node 4, starting task scheduling...
*** Node 0, starting task scheduling...



The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
*** Node 1, starting task scheduling...
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
*** Node 2, starting task scheduling...
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
*** Node 3, starting task scheduling...
The learning rate specified by the user: 0.001000000
The learning rate specified by the user: 0.001000000
	Epoch 1:	Loss 3.7714	TrainAcc 0.0846	ValidAcc 0.0762	TestAcc 0.0769	BestValid 0.0762
	Epoch 50:	Loss 1.7892	TrainAcc 0.6894	ValidAcc 0.7108	TestAcc 0.7050	BestValid 0.7108
	Epoch 100:	Loss 1.2431	TrainAcc 0.7898	ValidAcc 0.8034	TestAcc 0.7973	BestValid 0.8034
	Epoch 150:	Loss 1.0191	TrainAcc 0.8341	ValidAcc 0.8444	TestAcc 0.8384	BestValid 0.8444
	Epoch 200:	Loss 0.8994	TrainAcc 0.8579	ValidAcc 0.8658	TestAcc 0.8600	BestValid 0.8658
	Epoch 250:	Loss 0.8267	TrainAcc 0.8730	ValidAcc 0.8799	TestAcc 0.8752	BestValid 0.8799
	Epoch 300:	Loss 0.7749	TrainAcc 0.8842	ValidAcc 0.8890	TestAcc 0.8850	BestValid 0.8890
	Epoch 350:	Loss 0.7349	TrainAcc 0.8911	ValidAcc 0.8950	TestAcc 0.8917	BestValid 0.8950
	Epoch 400:	Loss 0.7002	TrainAcc 0.8970	ValidAcc 0.9000	TestAcc 0.8971	BestValid 0.9000
	Epoch 450:	Loss 0.6777	TrainAcc 0.9015	ValidAcc 0.9037	TestAcc 0.9012	BestValid 0.9037
	Epoch 500:	Loss 0.6564	TrainAcc 0.9062	ValidAcc 0.9079	TestAcc 0.9051	BestValid 0.9079
	Epoch 550:	Loss 0.6388	TrainAcc 0.9093	ValidAcc 0.9110	TestAcc 0.9076	BestValid 0.9110
	Epoch 600:	Loss 0.6176	TrainAcc 0.9122	ValidAcc 0.9139	TestAcc 0.9102	BestValid 0.9139
	Epoch 650:	Loss 0.6029	TrainAcc 0.9142	ValidAcc 0.9157	TestAcc 0.9119	BestValid 0.9157
	Epoch 700:	Loss 0.5927	TrainAcc 0.9170	ValidAcc 0.9178	TestAcc 0.9142	BestValid 0.9178
	Epoch 750:	Loss 0.5813	TrainAcc 0.9193	ValidAcc 0.9204	TestAcc 0.9166	BestValid 0.9204
	Epoch 800:	Loss 0.5763	TrainAcc 0.9209	ValidAcc 0.9215	TestAcc 0.9181	BestValid 0.9215
	Epoch 850:	Loss 0.5604	TrainAcc 0.9219	ValidAcc 0.9220	TestAcc 0.9190	BestValid 0.9220
	Epoch 900:	Loss 0.5527	TrainAcc 0.9227	ValidAcc 0.9229	TestAcc 0.9195	BestValid 0.9229
	Epoch 950:	Loss 0.5426	TrainAcc 0.9244	ValidAcc 0.9241	TestAcc 0.9208	BestValid 0.9241
	Epoch 1000:	Loss 0.5398	TrainAcc 0.9256	ValidAcc 0.9255	TestAcc 0.9221	BestValid 0.9255
	Epoch 1050:	Loss 0.5324	TrainAcc 0.9272	ValidAcc 0.9275	TestAcc 0.9239	BestValid 0.9275
	Epoch 1100:	Loss 0.5248	TrainAcc 0.9284	ValidAcc 0.9283	TestAcc 0.9246	BestValid 0.9283
	Epoch 1150:	Loss 0.5201	TrainAcc 0.9293	ValidAcc 0.9292	TestAcc 0.9256	BestValid 0.9292
	Epoch 1200:	Loss 0.5152	TrainAcc 0.9306	ValidAcc 0.9302	TestAcc 0.9264	BestValid 0.9302
	Epoch 1250:	Loss 0.5103	TrainAcc 0.9315	ValidAcc 0.9315	TestAcc 0.9273	BestValid 0.9315
	Epoch 1300:	Loss 0.5041	TrainAcc 0.9321	ValidAcc 0.9316	TestAcc 0.9279	BestValid 0.9316
	Epoch 1350:	Loss 0.4930	TrainAcc 0.9318	ValidAcc 0.9306	TestAcc 0.9277	BestValid 0.9316
	Epoch 1400:	Loss 0.4894	TrainAcc 0.9301	ValidAcc 0.9288	TestAcc 0.9259	BestValid 0.9316
	Epoch 1450:	Loss 0.4913	TrainAcc 0.9273	ValidAcc 0.9262	TestAcc 0.9230	BestValid 0.9316
	Epoch 1500:	Loss 0.4918	TrainAcc 0.9338	ValidAcc 0.9327	TestAcc 0.9293	BestValid 0.9327
	Epoch 1550:	Loss 0.4891	TrainAcc 0.9328	ValidAcc 0.9324	TestAcc 0.9278	BestValid 0.9327
	Epoch 1600:	Loss 0.4892	TrainAcc 0.9305	ValidAcc 0.9291	TestAcc 0.9257	BestValid 0.9327
	Epoch 1650:	Loss 0.4791	TrainAcc 0.9354	ValidAcc 0.9341	TestAcc 0.9310	BestValid 0.9341
	Epoch 1700:	Loss 0.4718	TrainAcc 0.9373	ValidAcc 0.9355	TestAcc 0.9331	BestValid 0.9355
	Epoch 1750:	Loss 0.4689	TrainAcc 0.9334	ValidAcc 0.9319	TestAcc 0.9287	BestValid 0.9355
	Epoch 1800:	Loss 0.4672	TrainAcc 0.9380	ValidAcc 0.9360	TestAcc 0.9333	BestValid 0.9360
	Epoch 1850:	Loss 0.4605	TrainAcc 0.9376	ValidAcc 0.9357	TestAcc 0.9326	BestValid 0.9360
	Epoch 1900:	Loss 0.4589	TrainAcc 0.9359	ValidAcc 0.9334	TestAcc 0.9310	BestValid 0.9360
	Epoch 1950:	Loss 0.4610	TrainAcc 0.9394	ValidAcc 0.9373	TestAcc 0.9347	BestValid 0.9373
	Epoch 2000:	Loss 0.4562	TrainAcc 0.9396	ValidAcc 0.9375	TestAcc 0.9344	BestValid 0.9375
	Epoch 2050:	Loss 0.4570	TrainAcc 0.9366	ValidAcc 0.9344	TestAcc 0.9317	BestValid 0.9375
	Epoch 2100:	Loss 0.4525	TrainAcc 0.9386	ValidAcc 0.9365	TestAcc 0.9337	BestValid 0.9375
	Epoch 2150:	Loss 0.4571	TrainAcc 0.9408	ValidAcc 0.9391	TestAcc 0.9358	BestValid 0.9391
	Epoch 2200:	Loss 0.4534	TrainAcc 0.9407	ValidAcc 0.9381	TestAcc 0.9358	BestValid 0.9391
	Epoch 2250:	Loss 0.4505	TrainAcc 0.9348	ValidAcc 0.9329	TestAcc 0.9297	BestValid 0.9391
	Epoch 2300:	Loss 0.4547	TrainAcc 0.9410	ValidAcc 0.9388	TestAcc 0.9357	BestValid 0.9391
	Epoch 2350:	Loss 0.4414	TrainAcc 0.9416	ValidAcc 0.9399	TestAcc 0.9360	BestValid 0.9399
	Epoch 2400:	Loss 0.4547	TrainAcc 0.9346	ValidAcc 0.9318	TestAcc 0.9290	BestValid 0.9399
	Epoch 2450:	Loss 0.4456	TrainAcc 0.9423	ValidAcc 0.9398	TestAcc 0.9371	BestValid 0.9399
	Epoch 2500:	Loss 0.4352	TrainAcc 0.9423	ValidAcc 0.9392	TestAcc 0.9368	BestValid 0.9399
	Epoch 2550:	Loss 0.4344	TrainAcc 0.9392	ValidAcc 0.9366	TestAcc 0.9340	BestValid 0.9399
	Epoch 2600:	Loss 0.4356	TrainAcc 0.9435	ValidAcc 0.9412	TestAcc 0.9378	BestValid 0.9412
	Epoch 2650:	Loss 0.4357	TrainAcc 0.9416	ValidAcc 0.9384	TestAcc 0.9356	BestValid 0.9412
	Epoch 2700:	Loss 0.4298	TrainAcc 0.9426	ValidAcc 0.9395	TestAcc 0.9362	BestValid 0.9412
	Epoch 2750:	Loss 0.4296	TrainAcc 0.9445	ValidAcc 0.9418	TestAcc 0.9387	BestValid 0.9418
	Epoch 2800:	Loss 0.4311	TrainAcc 0.9423	ValidAcc 0.9390	TestAcc 0.9365	BestValid 0.9418
	Epoch 2850:	Loss 0.4242	TrainAcc 0.9429	ValidAcc 0.9397	TestAcc 0.9369	BestValid 0.9418
	Epoch 2900:	Loss 0.4317	TrainAcc 0.9450	ValidAcc 0.9419	TestAcc 0.9391	BestValid 0.9419
	Epoch 2950:	Loss 0.4265	TrainAcc 0.9449	ValidAcc 0.9414	TestAcc 0.9388	BestValid 0.9419
	Epoch 3000:	Loss 0.4276	TrainAcc 0.9393	ValidAcc 0.9368	TestAcc 0.9339	BestValid 0.9419
	Epoch 3050:	Loss 0.4239	TrainAcc 0.9438	ValidAcc 0.9401	TestAcc 0.9380	BestValid 0.9419
	Epoch 3100:	Loss 0.4283	TrainAcc 0.9443	ValidAcc 0.9418	TestAcc 0.9379	BestValid 0.9419
	Epoch 3150:	Loss 0.4350	TrainAcc 0.9416	ValidAcc 0.9382	TestAcc 0.9356	BestValid 0.9419
	Epoch 3200:	Loss 0.4231	TrainAcc 0.9437	ValidAcc 0.9394	TestAcc 0.9373	BestValid 0.9419
	Epoch 3250:	Loss 0.4132	TrainAcc 0.9458	ValidAcc 0.9428	TestAcc 0.9396	BestValid 0.9428
	Epoch 3300:	Loss 0.4128	TrainAcc 0.9421	ValidAcc 0.9381	TestAcc 0.9357	BestValid 0.9428
	Epoch 3350:	Loss 0.4164	TrainAcc 0.9466	ValidAcc 0.9432	TestAcc 0.9404	BestValid 0.9432
	Epoch 3400:	Loss 0.4166	TrainAcc 0.9456	ValidAcc 0.9417	TestAcc 0.9388	BestValid 0.9432
	Epoch 3450:	Loss 0.4089	TrainAcc 0.9457	ValidAcc 0.9418	TestAcc 0.9395	BestValid 0.9432
	Epoch 3500:	Loss 0.4097	TrainAcc 0.9474	ValidAcc 0.9439	TestAcc 0.9406	BestValid 0.9439
	Epoch 3550:	Loss 0.4109	TrainAcc 0.9454	ValidAcc 0.9410	TestAcc 0.9382	BestValid 0.9439
	Epoch 3600:	Loss 0.4057	TrainAcc 0.9467	ValidAcc 0.9424	TestAcc 0.9396	BestValid 0.9439
	Epoch 3650:	Loss 0.4096	TrainAcc 0.9478	ValidAcc 0.9443	TestAcc 0.9410	BestValid 0.9443
	Epoch 3700:	Loss 0.4124	TrainAcc 0.9465	ValidAcc 0.9423	TestAcc 0.9394	BestValid 0.9443
	Epoch 3750:	Loss 0.4031	TrainAcc 0.9462	ValidAcc 0.9420	TestAcc 0.9390	BestValid 0.9443
	Epoch 3800:	Loss 0.4084	TrainAcc 0.9481	ValidAcc 0.9447	TestAcc 0.9413	BestValid 0.9447
	Epoch 3850:	Loss 0.4021	TrainAcc 0.9482	ValidAcc 0.9441	TestAcc 0.9411	BestValid 0.9447
	Epoch 3900:	Loss 0.4191	TrainAcc 0.9430	ValidAcc 0.9388	TestAcc 0.9362	BestValid 0.9447
	Epoch 3950:	Loss 0.3990	TrainAcc 0.9410	ValidAcc 0.9362	TestAcc 0.9349	BestValid 0.9447
	Epoch 4000:	Loss 0.4208	TrainAcc 0.9426	ValidAcc 0.9392	TestAcc 0.9353	BestValid 0.9447
	Epoch 4050:	Loss 0.4112	TrainAcc 0.9429	ValidAcc 0.9385	TestAcc 0.9360	BestValid 0.9447
	Epoch 4100:	Loss 0.4045	TrainAcc 0.9479	ValidAcc 0.9442	TestAcc 0.9409	BestValid 0.9447
	Epoch 4150:	Loss 0.3983	TrainAcc 0.9471	ValidAcc 0.9428	TestAcc 0.9398	BestValid 0.9447
	Epoch 4200:	Loss 0.3943	TrainAcc 0.9479	ValidAcc 0.9436	TestAcc 0.9415	BestValid 0.9447
	Epoch 4250:	Loss 0.3928	TrainAcc 0.9494	ValidAcc 0.9449	TestAcc 0.9421	BestValid 0.9449
	Epoch 4300:	Loss 0.3920	TrainAcc 0.9479	ValidAcc 0.9438	TestAcc 0.9405	BestValid 0.9449
	Epoch 4350:	Loss 0.3885	TrainAcc 0.9490	ValidAcc 0.9445	TestAcc 0.9420	BestValid 0.9449
	Epoch 4400:	Loss 0.3891	TrainAcc 0.9492	ValidAcc 0.9445	TestAcc 0.9424	BestValid 0.9449
	Epoch 4450:	Loss 0.3878	TrainAcc 0.9488	ValidAcc 0.9441	TestAcc 0.9423	BestValid 0.9449
	Epoch 4500:	Loss 0.3913	TrainAcc 0.9489	ValidAcc 0.9445	TestAcc 0.9420	BestValid 0.9449
	Epoch 4550:	Loss 0.3985	TrainAcc 0.9499	ValidAcc 0.9455	TestAcc 0.9426	BestValid 0.9455
	Epoch 4600:	Loss 0.3940	TrainAcc 0.9480	ValidAcc 0.9433	TestAcc 0.9403	BestValid 0.9455
	Epoch 4650:	Loss 0.3883	TrainAcc 0.9488	ValidAcc 0.9435	TestAcc 0.9413	BestValid 0.9455
	Epoch 4700:	Loss 0.4070	TrainAcc 0.9450	ValidAcc 0.9394	TestAcc 0.9382	BestValid 0.9455
	Epoch 4750:	Loss 0.3902	TrainAcc 0.9383	ValidAcc 0.9334	TestAcc 0.9320	BestValid 0.9455
	Epoch 4800:	Loss 0.4388	TrainAcc 0.9429	ValidAcc 0.9389	TestAcc 0.9350	BestValid 0.9455
	Epoch 4850:	Loss 0.4131	TrainAcc 0.9428	ValidAcc 0.9366	TestAcc 0.9360	BestValid 0.9455
	Epoch 4900:	Loss 0.3957	TrainAcc 0.9486	ValidAcc 0.9449	TestAcc 0.9409	BestValid 0.9455
	Epoch 4950:	Loss 0.3882	TrainAcc 0.9474	ValidAcc 0.9415	TestAcc 0.9402	BestValid 0.9455
	Epoch 5000:	Loss 0.3894	TrainAcc 0.9500	ValidAcc 0.9464	TestAcc 0.9430	BestValid 0.9464
****** Epoch Time (Excluding Evaluation Cost): 0.415 s ******
****** Breakdown Analysis ******
Cluster-Wide Average, Bubble-Pipeline: 80.238 ms (Max: 82.681, Min: 66.624, Sum: 641.903)
Cluster-Wide Average, Compute: 262.761 ms (Max: 286.254, Min: 253.595, Sum: 2102.089)
Cluster-Wide Average, Communication-Layer: 41.616 ms (Max: 47.160, Min: 32.015, Sum: 332.930)
Cluster-Wide Average, Bubble-Imbalance: 27.189 ms (Max: 34.530, Min: 13.068, Sum: 217.514)
Cluster-Wide Average, Communication-Graph: 0.467 ms (Max: 0.521, Min: 0.406, Sum: 3.737)
Cluster-Wide Average, Optimization: 0.100 ms (Max: 0.123, Min: 0.092, Sum: 0.802)
Cluster-Wide Average, Others: 3.879 ms (Max: 17.546, Min: 1.884, Sum: 31.035)
****** Breakdown Sum: 416.251 ms ******
Cluster-Wide Average, GPU Memory Consumption: 6.304 GB (Max: 8.059, Min: 6.018, Sum: 50.433)
Cluster-Wide Average, Graph-Level Communication Throughput: -nan Gbps (Max: -nan, Min: -nan, Sum: -nan)
Cluster-Wide Average, Layer-Level Communication Throughput: 61.710 Gbps (Max: 73.731, Min: 45.751, Sum: 493.683)
Layer-level communication (cluster-wide, per-epoch): 2.430 GB
Graph-level communication (cluster-wide, per-epoch): 0.000 GB
Weight-sync communication (cluster-wide, per-epoch): 0.000 GB
Total communication (cluster-wide, per-epoch): 2.430 GB
****** Accuracy Results ******
Highest valid_acc: 0.9464
Target test_acc: 0.9430
Epoch to reach the target acc: 4999
[MPI Rank 0] Success 
[MPI Rank 4] Success 
[MPI Rank 1] Success 
[MPI Rank 5] Success 
[MPI Rank 2] Success 
[MPI Rank 6] Success 
[MPI Rank 3] Success 
[MPI Rank 7] Success 
